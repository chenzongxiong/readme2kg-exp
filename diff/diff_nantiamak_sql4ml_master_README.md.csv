sentence_idx,original_sentence,original_annotated,generated_annotated,source_file,similarity_score
1,"# sql4ml  Sql4ml is a Haskell project that takes as input SQL code which defines the objective/cost/loss function of a supervised machine learning model (ML), as well as a set of parameters, and generates TensorFlow (Python API) code that trains this model.","# <PROJECT>sql4ml</PROJECT>  <PROJECT>Sql4ml</PROJECT> is a <PROGLANG>Haskell</PROGLANG> project that takes as input <PROGLANG>SQL</PROGLANG> code which defines the objective/cost/loss function of a supervised machine learning model (ML), as well as a set of parameters, and generates <SOFTWARE>TensorFlow</SOFTWARE> (<PROGLANG>Python</PROGLANG> API) code that trains this model.","# sql4ml  <PROJECT>Sql4ml</PROJECT> is a <PROGLANG>Haskell</PROGLANG> project that takes as input <PROGLANG>SQL</PROGLANG> code which defines the objective/cost/loss function of a supervised machine learning model (ML), as well as a set of parameters, and generates <SOFTWARE>TensorFlow</SOFTWARE> (<PROGLANG>Python</PROGLANG> API) code that trains this model.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\b89c45f5.txt,0.9980582524271845
2,"It is the prototype that is used in the paper ""Nantia Makrynioti, Ruy Ley-Wild and Vasilis Vassalos. sql4ml: a declarative end-to-end workflow for machine learning.""","It is the prototype that is used in the paper ""Nantia Makrynioti, Ruy Ley-Wild and Vasilis Vassalos. <PUBLICATION>sql4ml: a declarative end-to-end workflow for machine learning</PUBLICATION><PROJECT>sql4ml</PROJECT>: a declarative end-to-end workflow for machine learning.""","It is the prototype that is used in the paper <PUBLICATION>Nantia Makrynioti, Ruy Ley-Wild and Vasilis Vassalos. sql4ml: a declarative end-to-end workflow for machine learning.</PUBLICATION>",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\ed8de166.txt,0.9939024390243902
3,(https://arxiv.org/abs/1907.12415).  ## Requirements  The software has been tested on macOS High Sierra and Ubuntu 16.04.,(https://arxiv.org/abs/1907.12415).  ## Requirements  The software has been tested on <SOFTWARE>macOS High Sierra</SOFTWARE> and <SOFTWARE>Ubuntu 16.04</SOFTWARE>.,"(https://arxiv.org/abs/1907.12415).  ## Requirements  The <SOFTWARE>software</SOFTWARE> has been tested on <PROGLANG>macOS High Sierra</PROGLANG> and <PROGLANG>Ubuntu 16.04</PROGLANG>.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\58b33bba.txt,0.9958847736625515
4,To compile it you need to install the Haskell Platform (https://www.haskell.org/platform/).,To compile it you need to install the <SOFTWARE>Haskell Platform</SOFTWARE><PROGLANG>Haskell</PROGLANG> Platform (https://www.<SOFTWARE>haskell</SOFTWARE>.org/platform/).,To compile it you need to install the <SOFTWARE>Haskell Platform</SOFTWARE> (https://www.haskell.org/platform/).,../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\b5dec6cd.txt,1.0
5,"See also the section on installation on how to build dependent projects.  ## Installation  Sql4ml uses the open source project queryparser (https://github.com/uber/queryparser), also in Haskell.","See also the section on installation on how to build dependent projects.  ## Installation  <PROJECT>Sql4ml</PROJECT> uses the open source project <PROJECT>queryparser</PROJECT> (https://github.com/uber/<PROJECT>queryparser</PROJECT>), also in <PROGLANG>Haskell</PROGLANG>.","See also the section on installation on how to build dependent projects.  ## Installation  <SOFTWARE>Sql4ml</SOFTWARE> uses the open source <PROJECT>queryparser</PROJECT> (https://github.com/uber/<PROJECT>queryparser</PROJECT>), also in <PROGLANG>Haskell</PROGLANG>.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\9b53e310.txt,0.9763779527559056
6,"To build queryparser, follow the instructions on the Github page of the project.","To build queryparser, follow the instructions on the Github page of the project.","To build <SOFTWARE>queryparser</SOFTWARE>, follow the instructions on the Github page of the <PROJECT>project</PROJECT>.",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\681349a3.txt,1.0
7,The sql4ml module is in file sql4ml_translator.hs.,The <PROJECT>sql4ml</PROJECT> module is in file <PROJECT>sql4ml</PROJECT>_translator.hs.,The <SOFTWARE>sql4ml</SOFTWARE> module is in file <SOFTWARE>sql4ml_translator.hs</SOFTWARE>.,../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\e6315874.txt,1.0
8,You can load the module via ghci.,You can load the module via <SOFTWARE>ghci</SOFTWARE>.,"You can load the module via <SOFTWARE>ghci</SOFTWARE>.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\59ffa781.txt,0.9850746268656716
9,File main.hs containts two examples on how to translate SQL to TensorFlow code end-to-end.,File main.hs containts two examples on how to translate <PROGLANG>SQL</PROGLANG> to <SOFTWARE>TensorFlow</SOFTWARE> code end-to-end.,"File main.<PROGLANG>hs</PROGLANG> containts two examples on how to translate <PROGLANG>SQL</PROGLANG> to <PROGLANG>TensorFlow</PROGLANG> code end-to-end.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\33a836f8.txt,0.994475138121547
10,"To compile main.hs, run in a terminal:      ghc -o main main.hs  Sql4ml uses the MySQL database (https://www.mysql.com/) for storing data.","To compile main.hs, run in a terminal:      ghc -o main main.hs  <PROJECT>Sql4ml</PROJECT> uses the <SOFTWARE>MySQL</SOFTWARE> database (https://www.<SOFTWARE>mysql</SOFTWARE>.com/) for storing data.","To compile main.hs, run in a terminal:      <PROGLANG>ghc</PROGLANG> -o main main.hs  <SOFTWARE>Sql4ml</SOFTWARE> uses the <SOFTWARE>MySQL</SOFTWARE> database (https://www.<SOFTWARE>mysql</SOFTWARE>.com/) for storing data.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\3cd68f80.txt,0.9963898916967509
11,"To run the generated TensorFlow code, you need to install MySQL.","To run the generated <SOFTWARE>TensorFlow</SOFTWARE> code, you need to install <SOFTWARE>MySQL</SOFTWARE>.","To run the generated <PROGLANG>TensorFlow</PROGLANG> code, you need to install <PROGLANG>MySQL</PROGLANG>.",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\efd647c6.txt,1.0
13,"After installing MySQL, you can run the SQL scripts in the directory /db_setups to create two toy databases, one based on the Boston Housing dataset (https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html) and the other based on the Iris dataset (https://archive.ics.uci.edu/ml/datasets/iris), which you can find in the directory /data.  ## Use  In file main.hs you can find two examples on how to call function endToEndTranslate, which takes the following input parameters:  * A list of SQL queries defining the objective function of a supervised ML model.","After installing <SOFTWARE>MySQL</SOFTWARE>, you can run the <PROGLANG>SQL</PROGLANG> scripts in the directory /db_setups to create two toy databases, one based on the <DATASET>Boston Housing</DATASET> dataset (https://www.cs.toronto.edu/~delve/data/<DATASET>boston</DATASET>/bostonDetail.html) and the other based on the <DATASET>Iris</DATASET> dataset (https://archive.ics.uci.edu/ml/datasets/<DATASET>iris</DATASET>), which you can find in the directory /data.  ## Use  In file main.hs you can find two examples on how to call function endToEndTranslate, which takes the following input parameters:  * A list of <PROGLANG>SQL</PROGLANG> queries defining the objective function of a supervised ML model.","After installing <SOFTWARE>MySQL</SOFTWARE>, you can run the <PROGLANG>SQL</PROGLANG> scripts in the directory /db_setups to create two toy databases, one based on the <DATASET>Boston Housing</DATASET> dataset (https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html) and the other based on the <DATASET>Iris</DATASET> dataset (https://archive.ics.uci.edu/ml/datasets/iris), which you can find in the directory /data.  ## Use  In file main.hs you can find two examples on how to call function endToEndTranslate, which takes the following input parameters:  * A list of <PROGLANG>SQL</PROGLANG> queries defining the objective function of a supervised ML model.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\e00adfd0.txt,0.999117387466902
14,"You can find two examples of SQL code defining Linear and Logistic Regression in directory working_examples. * A list of names of the tables storing the features of the model. * A list of columns in the aforementioned tables that store names of features. * A list of lists, each of which has the actual names of features stored in each table. * The name of the table storing the training observations. * The name of the table storing the labels/targets of training observations. * The name of the view computing the objective function of the ML model. * The username of a user to connect to the database where training data are stored. * The password of the same user. * The name of the database storing training data. * A list of names of the tables storing the weights of the model. * A map whose elements consist of the name of a weight table and its dimenions as a list. * The number of gradient descent iterations. * The learning rate used in gradient descent.","You can find two examples of <PROGLANG>SQL</PROGLANG> code defining Linear and Logistic Regression in directory working_examples. * A list of names of the tables storing the features of the model. * A list of columns in the aforementioned tables that store names of features. * A list of lists, each of which has the actual names of features stored in each table. * The name of the table storing the training observations. * The name of the table storing the labels/targets of training observations. * The name of the view computing the objective function of the ML model. * The username of a user to connect to the database where training data are stored. * The password of the same user. * The name of the database storing training data. * A list of names of the tables storing the weights of the model. * A map whose elements consist of the name of a weight table and its dimenions as a list. * The number of gradient descent iterations. * The learning rate used in gradient descent.","You can find two examples of <PROGLANG>SQL</PROGLANG> code defining Linear and Logistic Regression in directory working_examples. * A list of names of the tables storing the features of the model. * A list of columns in the aforementioned tables that store names of features. * A list of lists, each of which has the actual names of features stored in each table. * The name of the table storing the training observations. * The name of the table storing the labels/targets of training observations. * The name of the view computing the objective function of the ML model. * The username of a user to connect to the database where training data are stored. * The password of the same user. * The name of the database storing training data. * A list of names of the tables storing the weights of the model. * A map whose elements consist of the name of a weight table and its dimenions as a list. * The number of gradient descent iterations. * The learning rate used in gradient descent.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\ffed6f71.txt,0.9994821336095288
15,"Currently sql4ml supports the translation of SQL create view queries of the following form,      CREATE VIEW $(name) AS     SELECT $(columns), $(numericExpr)     FROM $(tables)     WHERE $(joinElement)     GROUP BY $(groupingElement)  and generate an equivalent TensorFlow expression as below:      $(name) = $(translateNumericExpr(numericExpr))  For examples, check SQL files in the directory /working_examples.","Currently <SOFTWARE>sql4ml</SOFTWARE> supports the translation of <PROGLANG>SQL</PROGLANG> create view queries of the following form,      CREATE VIEW $(name) AS     SELECT $(columns), $(numericExpr)     FROM $(tables)     WHERE $(joinElement)     GROUP BY $(groupingElement)  and generate an equivalent <SOFTWARE>TensorFlow</SOFTWARE> expression as below:      $(name) = $(translateNumericExpr(numericExpr))  For examples, check <PROGLANG>SQL</PROGLANG> files in the directory /working_examples.","Currently <SOFTWARE>sql4ml</SOFTWARE> supports the translation of SQL create view queries of the following form,      CREATE VIEW $(name) AS     SELECT $(columns), $(numericExpr)     FROM $(tables)     WHERE $(joinElement)     GROUP BY $(groupingElement)  and generate an equivalent <PROGLANG>TensorFlow</PROGLANG> expression as below:      $(name) = $(translateNumericExpr(numericExpr))  For examples, check SQL files in the directory /working_examples.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\9b391113.txt,0.9987878787878788
16,"To run main, type in a terminal:      .","To run main, type in a terminal:      .","To run main, type in a terminal:      .
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\a693d85f.txt,0.9873417721518988
17,/main linear //To generate TensorFlow code for the Linear Regression model in working_examples/linear_regression.sql     .,/main linear //To generate <SOFTWARE>TensorFlow</SOFTWARE> code for the Linear Regression model in working_examples/linear_regression.sql     .,"/main <PROGLANG>linear</PROGLANG> //To generate <PROGLANG>TensorFlow</PROGLANG> code for the Linear Regression model in working_examples/linear_regression.sql     .
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\5d330f9c.txt,0.9959183673469387
18,/main logistic //To generate TensorFlow code for the Logistic Regression model in working_examples/logistic_regression.sql  The files with the generated TensorFlow/Python code can be executed like any other TensorFlow program.,/main logistic //To generate <SOFTWARE>TensorFlow</SOFTWARE> code for the Logistic Regression model in working_examples/logistic_regression.sql  The files with the generated <SOFTWARE>TensorFlow</SOFTWARE>/<PROGLANG>Python</PROGLANG> code can be executed like any other <SOFTWARE>TensorFlow</SOFTWARE> program.,"/main logistic //To generate <PROGLANG>TensorFlow</PROGLANG> code for the Logistic Regression model in working_examples/logistic_regression.sql  The files with the generated <PROGLANG>TensorFlow</PROGLANG>/<PROGLANG>Python</PROGLANG> code can be executed like any other <PROGLANG>TensorFlow</PROGLANG> program.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\b08d74f7.txt,0.9977924944812362
19,"You can also try to translate individual SQL queries by loading the sql4ml_translator module in ghci and type:      translateToTensorFlowCommand (L.pack ""CREATE VIEW squaredErrors AS SELECT POW(errors.errorValue, 2) AS squaredErrorValue, errors.observationID AS observationID FROM errors;"") [""features""] [""weights""] [[""f1"", ""f2""]]  where      translateToTensorFlowCommand :: L.Text -> [String] -> [String] -> [[String]] -> String     translateToTensorFlowCommand sql_statement feature_tables variable_tables feature_names  and * sql_statement: a SQL create view query in type Text * feature_tables: a list of names of the tables storing the features of the model. * variable_tables: a list of names of the tables storing the weights of the model. * feature_names: a list of lists, each of which has the actual names of features stored in each table.","You can also try to translate individual <PROGLANG>SQL</PROGLANG> queries by loading the <PROJECT>sql4ml</PROJECT>_translator module in ghci and type:      translateTo<SOFTWARE>TensorFlow</SOFTWARE>Command (L.pack ""CREATE VIEW squaredErrors AS SELECT POW(errors.errorValue, 2) AS squaredErrorValue, errors.observationID AS observationID FROM errors;"") [""features""] [""weights""] [[""f1"", ""f2""]]  where      translateTo<SOFTWARE>TensorFlow</SOFTWARE>Command :: L.Text -> [String] -> [String] -> [[String]] -> String     translateTo<SOFTWARE>TensorFlow</SOFTWARE>Command sql_statement feature_tables variable_tables feature_names  and * sql_statement: a <PROGLANG>SQL</PROGLANG> create view query in type Text * feature_tables: a list of names of the tables storing the features of the model. * variable_tables: a list of names of the tables storing the weights of the model. * feature_names: a list of lists, each of which has the actual names of features stored in each table.","You can also try to translate individual SQL queries by loading the <SOFTWARE>sql4ml_translator</SOFTWARE> module in ghci and type:      translateToTensorFlowCommand (L.pack ""CREATE VIEW squaredErrors AS SELECT POW(errors.errorValue, 2) AS squaredErrorValue, errors.observationID AS observationID FROM errors;"") [""features""] [""weights""] [[""f1"", ""f2""]]  where      translateToTensorFlowCommand :: L.Text -> [String] -> [String] -> [[String]] -> String     translateToTensorFlowCommand sql_statement feature_tables variable_tables feature_names  and * sql_statement: a SQL create view query in type Text * feature_tables: a list of names of the tables storing the features of the model. * variable_tables: a list of names of the tables storing the weights of the model. * feature_names: a list of lists, each of which has the actual names of features stored in each table.
",../results/deepseek-chat/prompt-0/zzz_nantiamak_sql4ml_master_README.md.tsv\c01f755d.txt,0.9994114184814596
