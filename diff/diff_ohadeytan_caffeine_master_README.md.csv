sentence_idx,original_sentence,original_annotated,de_annotated_content,generated_annotated,source_file,similarity_score
1,[!,[!,branch=master) [!,branch=master) [!,../results/deepseek-chat/prompt-0/zzz_ohadeytan_caffeine_master_README.md.tsv\f6e50282.txt,0.21052631578947367
11,The improvements draw on our experience designing [Guava's cache][guava-cache] and [ConcurrentLinkedHashMap][clhm].,The improvements draw on our experience designing [Guava's cache][guava-cache] and [ConcurrentLinkedHashMap][clhm].,The improvements draw on our experience designing `Guava's cache`[guava-cache] and `ConcurrentLinkedHashMap`[clhm].,The improvements draw on our experience designing `<SOFTWARE>Guava's cache</SOFTWARE>`[guava-cache] and `<SOFTWARE>ConcurrentLinkedHashMap</SOFTWARE>`[clhm].,../results/deepseek-chat/prompt-0/zzz_ohadeytan_caffeine_master_README.md.tsv\3833ddee.txt,0.9652173913043478
12,"```java LoadingCache<Key, Graph> graphs = Caffeine.newBuilder()     .maximumSize(10_000)     .expireAfterWrite(Duration.ofMinutes(5))     .refreshAfterWrite(Duration.ofMinutes(1))     .build(key -> createExpensiveGraph(key)); ```  #### Features at a Glance  Caffeine provides flexible construction to create a cache with a combination of the following features:  * [automatic loading of entries][population] into the cache, optionally asynchronously  * [size-based eviction][size] when a maximum is exceeded based on [frequency and recency][efficiency]  * [time-based expiration][time] of entries, measured since last access or last write  * [asynchronously refresh][refresh] when the first stale request for an entry occurs  * keys automatically wrapped in [weak references][reference]  * values automatically wrapped in [weak or soft references][reference]  * [notification][listener] of evicted (or otherwise removed) entries  * [writes propagated][compute] to an external resource  * accumulation of cache access [statistics][statistics]  In addition, Caffeine offers the following extensions:  * [JSR-107 JCache][jsr107]  * [Guava adapters][guava-adapter]  * [Simulation][simulator]  Use Caffeine in a community provided integration:  * [Play Framework][play]: High velocity web framework  * [Micronaut][micronaut]: A modern, full-stack framework  * [Spring Cache][spring]: As of Spring 4.3 & Boot 1.4  * [Akka][akka-http]: Build reactive applications easily  * [Quarkus][quarkus]: Supersonic Subatomic Java  * [Scaffeine][scaffeine]: Scala wrapper for Caffeine  * [ScalaCache][scala-cache]: Simple caching in Scala  * [Camel][camel]: Routing and mediation engine  * [JHipster][jhipster]: Generate, develop, deploy  Powering infrastructure near you:  * [Dropwizard][dropwizard]: Ops-friendly, high-performance, RESTful APIs  * [Cassandra][cassandra]: Manage massive amounts of data, fast  * [Accumulo][accumulo]: A sorted, distributed key/value store  * [HBase][hbase]: A distributed, scalable, big data store  * [Apache Solr][solr]: Blazingly fast enterprise search  * [Infinispan][infinispan]: Distributed in-memory data grid  * [Redisson][redisson]: Ultra-fast in-memory data grid  * [OpenWhisk][open-whisk]: Serverless cloud platform  * [Corfu][corfu]: A cluster consistency platform  * [Grails][grails]: Groovy-based web framework  * [Finagle][finagle]: Extensible RPC system  * [Neo4j][neo4j]: Graphs for Everyone  * [Druid][druid]: Real-time analytics  ### In the News   * An in-depth description of Caffeine's architecture","```java LoadingCache<Key, Graph> graphs = Caffeine.newBuilder()     .maximumSize(10_000)     .expireAfterWrite(Duration.ofMinutes(5))     .refreshAfterWrite(Duration.ofMinutes(1))     .build(key -> createExpensiveGraph(key)); ```  #### Features at a Glance  Caffeine provides flexible construction to create a cache with a combination of the following features:  * [automatic loading of entries][population] into the cache, optionally asynchronously  * [size-based eviction][size] when a maximum is exceeded based on [frequency and recency][efficiency]  * [time-based expiration][time] of entries, measured since last access or last write  * [asynchronously refresh][refresh] when the first stale request for an entry occurs  * keys automatically wrapped in [weak references][reference]  * values automatically wrapped in [weak or soft references][reference]  * [notification][listener] of evicted (or otherwise removed) entries  * [writes propagated][compute] to an external resource  * accumulation of cache access [statistics][statistics]  In addition, Caffeine offers the following extensions:  * [JSR-107 JCache][jsr107]  * [Guava adapters][guava-adapter]  * [Simulation][simulator]  Use Caffeine in a community provided integration:  * [Play Framework][play]: High velocity web framework  * [Micronaut][micronaut]: A modern, full-stack framework  * [Spring Cache][spring]: As of Spring 4.3 & Boot 1.4  * [Akka][akka-http]: Build reactive applications easily  * [Quarkus][quarkus]: Supersonic Subatomic Java  * [Scaffeine][scaffeine]: Scala wrapper for Caffeine  * [ScalaCache][scala-cache]: Simple caching in Scala  * [Camel][camel]: Routing and mediation engine  * [JHipster][jhipster]: Generate, develop, deploy  Powering infrastructure near you:  * [Dropwizard][dropwizard]: Ops-friendly, high-performance, RESTful APIs  * [Cassandra][cassandra]: Manage massive amounts of data, fast  * [Accumulo][accumulo]: A sorted, distributed key/value store  * [HBase][hbase]: A distributed, scalable, big data store  * [Apache Solr][solr]: Blazingly fast enterprise search  * [Infinispan][infinispan]: Distributed in-memory data grid  * [Redisson][redisson]: Ultra-fast in-memory data grid  * [OpenWhisk][open-whisk]: Serverless cloud platform  * [Corfu][corfu]: A cluster consistency platform  * [Grails][grails]: Groovy-based web framework  * [Finagle][finagle]: Extensible RPC system  * [Neo4j][neo4j]: Graphs for Everyone  * [Druid][druid]: Real-time analytics  ### In the News   * An in-depth description of Caffeine's architecture","```java LoadingCache<Key, Graph> graphs = Caffeine.newBuilder()     .maximumSize(10_000)     .expireAfterWrite(Duration.ofMinutes(5))     .refreshAfterWrite(Duration.ofMinutes(1))     .build(key -> createExpensiveGraph(key)); ```  #### Features at a Glance  Caffeine provides flexible construction to create a cache with a combination of the following features:  * [automatic loading of entries][population] into the cache, optionally asynchronously  * [size-based eviction][size] when a maximum is exceeded based on [frequency and recency][efficiency]  * [time-based expiration][time] of entries, measured since last access or last write  * [asynchronously refresh][refresh] when the first stale request for an entry occurs  * keys automatically wrapped in [weak references][reference]  * values automatically wrapped in [weak or soft references][reference]  * [notification][listener] of evicted (or otherwise removed) entries  * [writes propagated][compute] to an external resource  * accumulation of cache access [statistics][statistics]  In addition, Caffeine offers the following extensions:  * [JSR-107 JCache][jsr107]  * [Guava adapters][guava-adapter]  * [Simulation][simulator]  Use Caffeine in a community provided integration:  * [Play Framework][play]: High velocity web framework  * [Micronaut][micronaut]: A modern, full-stack framework  * [Spring Cache][spring]: As of Spring 4.3 & Boot 1.4  * [Akka][akka-http]: Build reactive applications easily  * [Quarkus][quarkus]: Supersonic Subatomic Java  * [Scaffeine][scaffeine]: Scala wrapper for Caffeine  * [ScalaCache][scala-cache]: Simple caching in Scala  * [Camel][camel]: Routing and mediation engine  * [JHipster][jhipster]: Generate, develop, deploy  Powering infrastructure near you:  * [Dropwizard][dropwizard]: Ops-friendly, high-performance, RESTful APIs  * [Cassandra][cassandra]: Manage massive amounts of data, fast  * [Accumulo][accumulo]: A sorted, distributed key/value store  * [HBase][hbase]: A distributed, scalable, big data store  * [Apache Solr][solr]: Blazingly fast enterprise search  * [Infinispan][infinispan]: Distributed in-memory data grid  * [Redisson][redisson]: Ultra-fast in-memory data grid  * [OpenWhisk][open-whisk]: Serverless cloud platform  * [Corfu][corfu]: A cluster consistency platform  * [Grails][grails]: Groovy-based web framework  * [Finagle][finagle]: Extensible RPC system  * [Neo4j][neo4j]: Graphs for Everyone  * [Druid][druid]: Real-time analytics  ### In the News   * An in-depth description of Caffeine's architecture
```","```java LoadingCache<Key, Graph> graphs = <PROGLANG>Caffeine</PROGLANG>.newBuilder()     .maximumSize(10_000)     .expireAfterWrite(Duration.ofMinutes(5))     .refreshAfterWrite(Duration.ofMinutes(1))     .build(key -> createExpensiveGraph(key)); ```  #### Features at a Glance  <PROGLANG>Caffeine</PROGLANG> provides flexible construction to create a cache with a combination of the following features:  * [automatic loading of entries][population] into the cache, optionally asynchronously  * [size-based eviction][size] when a maximum is exceeded based on [frequency and recency][efficiency]  * [time-based expiration][time] of entries, measured since last access or last write  * [asynchronously refresh][refresh] when the first stale request for an entry occurs  * keys automatically wrapped in [weak references][reference]  * values automatically wrapped in [weak or soft references][reference]  * [notification][listener] of evicted (or otherwise removed) entries  * [writes propagated][compute] to an external resource  * accumulation of cache access [statistics][statistics]  In addition, <PROGLANG>Caffeine</PROGLANG> offers the following extensions:  * [<SOFTWARE>JSR-107 JCache</SOFTWARE>][jsr107]  * [<SOFTWARE>Guava adapters</SOFTWARE>][guava-adapter]  * [<SOFTWARE>Simulation</SOFTWARE>][simulator]  Use <PROGLANG>Caffeine</PROGLANG> in a community provided integration:  * [<SOFTWARE>Play Framework</SOFTWARE>][play]: High velocity web framework  * [<SOFTWARE>Micronaut</SOFTWARE>][micronaut]: A modern, full-stack framework  * [<SOFTWARE>Spring Cache</SOFTWARE>][spring]: As of Spring 4.3 & Boot 1.4  * [<SOFTWARE>Akka</SOFTWARE>][akka-http]: Build reactive applications easily  * [<SOFTWARE>Quarkus</SOFTWARE>][quarkus]: Supersonic Subatomic Java  * [<SOFTWARE>Scaffeine</SOFTWARE>][scaffeine]: Scala wrapper for <PROGLANG>Caffeine</PROGLANG>  * [<SOFTWARE>ScalaCache</SOFTWARE>][scala-cache]: Simple caching in <PROGLANG>Scala</PROGLANG>  * [<SOFTWARE>Camel</SOFTWARE>][camel]: Routing and mediation engine  * [<SOFTWARE>JHipster</SOFTWARE>][jhipster]: Generate, develop, deploy  Powering infrastructure near you:  * [<SOFTWARE>Dropwizard</SOFTWARE>][dropwizard]: Ops-friendly, high-performance, RESTful APIs  * [<SOFTWARE>Cassandra</SOFTWARE>][cassandra]: Manage massive amounts of data, fast  * [<SOFTWARE>Accumulo</SOFTWARE>][accumulo]: A sorted, distributed key/value store  * [<SOFTWARE>HBase</SOFTWARE>][hbase]: A distributed, scalable, big data store  * [<SOFTWARE>Apache Solr</SOFTWARE>][solr]: Blazingly fast enterprise search  * [<SOFTWARE>Infinispan</SOFTWARE>][infinispan]: Distributed in-memory data grid  * [<SOFTWARE>Redisson</SOFTWARE>][redisson]: Ultra-fast in-memory data grid  * [<SOFTWARE>OpenWhisk</SOFTWARE>][open-whisk]: Serverless cloud platform  * [<SOFTWARE>Corfu</SOFTWARE>][corfu]: A cluster consistency platform  * [<SOFTWARE>Grails</SOFTWARE>][grails]: Groovy-based web framework  * [<SOFTWARE>Finagle</SOFTWARE>][finagle]: Extensible RPC system  * [<SOFTWARE>Neo4j</SOFTWARE>][neo4j]: Graphs for Everyone  * [<SOFTWARE>Druid</SOFTWARE>][druid]: Real-time analytics  ### In the News   * An in-depth description of <PROGLANG>Caffeine</PROGLANG>'s architecture
```",../results/deepseek-chat/prompt-0/zzz_ohadeytan_caffeine_master_README.md.tsv\cfde34e4.txt,0.9992116673236106
14,"* [Design of a Modern Cache: part #1][modern-cache-1], [part #2][modern-cache-2] ([slides][modern-cache-slides]) at [HighScalability][HighScalability]  * Caffeine is presented as part of research papers evaluating its novel eviction policy","* [Design of a Modern Cache: part #1][modern-cache-1], [part #2][modern-cache-2] ([slides][modern-cache-slides]) at [HighScalability][HighScalability]  * Caffeine is presented as part of research papers evaluating its novel eviction policy","* [Design of a Modern Cache: part #1][modern-cache-1], [part #2][modern-cache-2] ([slides][modern-cache-slides]) at HighScalability  * Caffeine is presented as part of research papers evaluating its novel eviction policy","* [Design of a Modern Cache: part #1][modern-cache-1], [part #2][modern-cache-2] ([slides][modern-cache-slides]) at <PUBLICATION>HighScalability</PUBLICATION>  * <SOFTWARE>Caffeine</SOFTWARE> is presented as part of research papers evaluating its novel eviction policy",../results/deepseek-chat/prompt-0/zzz_ohadeytan_caffeine_master_README.md.tsv\63487dda.txt,0.579520697167756
19,N41277 [adaptive-tinylfu]: https://dl.acm.org/authorize?,N41277 [adaptive-tinylfu]: https://dl.acm.org/authorize?,`N41277 [adaptive-tinylfu]: https://dl.acm.org/authorize?`,`N41277 [<SOFTWARE>adaptive-tinylfu</SOFTWARE>]: https://dl.acm.org/authorize?`,../results/deepseek-chat/prompt-0/zzz_ohadeytan_caffeine_master_README.md.tsv\9739a789.txt,0.9824561403508771
