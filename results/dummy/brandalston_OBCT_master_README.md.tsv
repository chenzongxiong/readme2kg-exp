#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=Copyright 2023 Brandon C.
1-1	0-9	Copyright	_	_
1-2	10-14	2023	_	_
1-3	15-22	Brandon	_	_
1-4	23-24	C	_	_
1-5	24-25	.	_	_

#Text=Alston, Hamidreza Validi  # Optimal Binary Classification Trees  Code for the paper \["Mixed Integer Linear Optimization Formulations for Learning Optimal Binary Classification Trees"\](http://arxiv.org/abs/2206.04857) by Brandon Alston, Hamidreza Validi, and Illya V.
2-1	26-32	Alston	_	_
2-2	32-33	,	_	_
2-3	34-43	Hamidreza	_	_
2-4	44-50	Validi	_	_
2-5	52-53	#	_	_
2-6	54-61	Optimal	_	_
2-7	62-68	Binary	_	_
2-8	69-83	Classification	_	_
2-9	84-89	Trees	_	_
2-10	91-95	Code	_	_
2-11	96-99	for	_	_
2-12	100-103	the	_	_
2-13	104-109	paper	_	_
2-14	110-111	\[	_	_
2-15	111-112	"	_	_
2-16	112-117	Mixed	_	_
2-17	118-125	Integer	_	_
2-18	126-132	Linear	_	_
2-19	133-145	Optimization	_	_
2-20	146-158	Formulations	_	_
2-21	159-162	for	_	_
2-22	163-171	Learning	_	_
2-23	172-179	Optimal	_	_
2-24	180-186	Binary	_	_
2-25	187-201	Classification	_	_
2-26	202-207	Trees	_	_
2-27	207-208	"	_	_
2-28	208-209	\]	_	_
2-29	209-210	(	_	_
2-30	210-214	http	_	_
2-31	214-215	:	_	_
2-32	215-216	/	_	_
2-33	216-217	/	_	_
2-34	217-226	arxiv.org	_	_
2-35	226-227	/	_	_
2-36	227-230	abs	_	_
2-37	230-231	/	_	_
2-38	231-241	2206.04857	_	_
2-39	241-242	)	*[59]	LICENSE[59]
2-40	243-245	by	*[59]	LICENSE[59]
2-41	246-253	Brandon	*[59]	LICENSE[59]
2-42	254-260	Alston	*[59]	LICENSE[59]
2-43	260-261	,	*[59]	LICENSE[59]
2-44	262-271	Hamidreza	*[59]	LICENSE[59]
2-45	272-278	Validi	*[59]	LICENSE[59]
2-46	278-279	,	*[59]	LICENSE[59]
2-47	280-283	and	_	_
2-48	284-289	Illya	_	_
2-49	290-291	V	_	_
2-50	291-292	.	_	_

#Text=Hicks.
3-1	293-298	Hicks	_	_
3-2	298-299	.	_	_

#Text=This code uses \[python3.x\](https://www.python.org/downloads/) (version 3.6 and higher) and requires the \[Gurobi\](https://www.gurobi.com/) solver.
4-1	301-305	This	_	_
4-2	306-310	code	_	_
4-3	311-315	uses	_	_
4-4	316-317	\[	_	_
4-5	317-324	python3	_	_
4-6	324-325	.	_	_
4-7	325-326	x	_	_
4-8	326-327	\]	_	_
4-9	327-328	(	_	_
4-10	328-333	https	_	_
4-11	333-334	:	_	_
4-12	334-335	/	_	_
4-13	335-336	/	_	_
4-14	336-350	www.python.org	_	_
4-15	350-351	/	_	_
4-16	351-360	downloads	_	_
4-17	360-361	/	_	_
4-18	361-362	)	_	_
4-19	363-364	(	_	_
4-20	364-371	version	_	_
4-21	372-375	3.6	_	_
4-22	376-379	and	*[60]	PROGLANG[60]
4-23	380-386	higher	*[60]	PROGLANG[60]
4-24	386-387	)	*[60]	PROGLANG[60]
4-25	388-391	and	*[60]	PROGLANG[60]
4-26	392-400	requires	*[60]	PROGLANG[60]
4-27	401-404	the	*[60]	PROGLANG[60]
4-28	405-406	\[	*[60]	PROGLANG[60]
4-29	406-412	Gurobi	*[60]	PROGLANG[60]
4-30	412-413	\]	*[60]	PROGLANG[60]
4-31	413-414	(	*[60]	PROGLANG[60]
4-32	414-419	https	*[60]	PROGLANG[60]
4-33	419-420	:	*[60]	PROGLANG[60]
4-34	420-421	/	*[60]	PROGLANG[60]
4-35	421-422	/	*[60]	PROGLANG[60]
4-36	422-436	www.gurobi.com	*[60]	PROGLANG[60]
4-36	426-432	gurobi	*[60]	PROGLANG[60]
4-37	436-437	/	*[60]	PROGLANG[60]
4-38	437-438	)	*[60]	PROGLANG[60]
4-39	439-445	solver	_	_
4-40	445-446	.	_	_

#Text=Required python3.x packages are outlined in `requirements.txt`.  \*\*\*  \*\*\*  ## Summary of Repository - `OBCT.py` contains the formulations of each model for solving using Gurobi9.x - `TREE.py` creates the necessary tree information including path, child, and other information - `SPEED\_UP.py` contains the code for the callbacks used in user fractional separation procedures - `UTILS.py` contains the code for viewing model decision variable results and generating the .csv results files among other utility functions - `model\_runs.py` contains the code necessary to create, solve, and report results in a `.csv` file of each instance called by the user - `results\_files/` folder stores the generated `.csv` files with model metrics - `figures/` folder stores the generated `.png` files for experimental results - `log\_files/` folder stores model `.lp` files and Gurobi `.txt` log files - `Datasets/` folder contains the datasets used for generating experimental results   - Note: `Datasets/` should also be used as the folder where user dataset files are stored  \*\*\* \*\*\*  ## Running Code  - Ensure the latest versions of the packages in `requirements.txt` are installed - For an instance of `OBCT` run with one of the functions in `model\_runs.py` we use following arguments (not all functional call parameters apply to all functions)     - d : `str list`, name(s) of dataset file(s)     - h : `int list`, maximum depth(s) of trained tree(s)     - t : `float`, gurobi model time limit in s     - m : `str list`, list of model(s) to use     - r : `int list`, list of random seed(s) to use       - `rand\_seed = \[k,...,k\]`  for repeat use of randome state `k`     - p : `str`, objective priority parameter used in bi-objective modeling     - e : `str list`, model extra(s), if applicable     - f : `str`, results output file `.csv`     - l : `boolean`, log console to `.txt` file and write model to `.lp` file, both saved to the `\\log\_files` folder for each model called by user Note: - We assume the target column is labeled `'target'`.
5-1	447-455	Required	_	_
5-2	456-463	python3	_	_
5-3	463-464	.	_	_
5-4	464-465	x	_	_
5-5	466-474	packages	_	_
5-6	475-478	are	_	_
5-7	479-487	outlined	_	_
5-8	488-490	in	_	_
5-9	491-492	`	_	_
5-10	492-508	requirements.txt	_	_
5-11	508-509	`	_	_
5-12	509-510	.	_	_
5-13	512-513	\*	_	_
5-14	513-514	\*	_	_
5-15	514-515	\*	_	_
5-16	517-518	\*	_	_
5-17	518-519	\*	_	_
5-18	519-520	\*	_	_
5-19	522-523	#	_	_
5-20	523-524	#	_	_
5-21	525-532	Summary	_	_
5-22	533-535	of	_	_
5-23	536-546	Repository	_	_
5-24	547-548	-	_	_
5-25	549-550	`	_	_
5-26	550-557	OBCT.py	_	_
5-27	557-558	`	_	_
5-28	559-567	contains	_	_
5-29	568-571	the	_	_
5-30	572-584	formulations	_	_
5-31	585-587	of	_	_
5-32	588-592	each	_	_
5-33	593-598	model	_	_
5-34	599-602	for	_	_
5-35	603-610	solving	_	_
5-36	611-616	using	_	_
5-37	617-624	Gurobi9	_	_
5-38	624-625	.	_	_
5-39	625-626	x	_	_
5-40	627-628	-	_	_
5-41	629-630	`	_	_
5-42	630-637	TREE.py	_	_
5-43	637-638	`	_	_
5-44	639-646	creates	_	_
5-45	647-650	the	_	_
5-46	651-660	necessary	_	_
5-47	661-665	tree	*[61]	PROGLANG[61]
5-48	666-677	information	*[61]	PROGLANG[61]
5-49	678-687	including	*[61]	PROGLANG[61]
5-50	688-692	path	*[61]	PROGLANG[61]
5-51	692-693	,	*[61]	PROGLANG[61]
5-52	694-699	child	*[61]	PROGLANG[61]
5-53	699-700	,	*[61]	PROGLANG[61]
5-54	701-704	and	*[61]	PROGLANG[61]
5-55	705-710	other	*[61]	PROGLANG[61]
5-56	711-722	information	*[61]	PROGLANG[61]
5-57	723-724	-	*[61]	PROGLANG[61]
5-58	725-726	`	*[61]	PROGLANG[61]
5-59	726-737	SPEED\_UP.py	*[61]	PROGLANG[61]
5-60	737-738	`	*[61]	PROGLANG[61]
5-61	739-747	contains	*[61]	PROGLANG[61]
5-62	748-751	the	*[61]	PROGLANG[61]
5-63	752-756	code	*[61]	PROGLANG[61]
5-64	757-760	for	*[61]	PROGLANG[61]
5-65	761-764	the	*[61]	PROGLANG[61]
5-66	765-774	callbacks	*[61]	PROGLANG[61]
5-67	775-779	used	*[61]	PROGLANG[61]
5-68	780-782	in	*[61]	PROGLANG[61]
5-69	783-787	user	*[61]	PROGLANG[61]
5-70	788-798	fractional	*[61]	PROGLANG[61]
5-71	799-809	separation	*[61]	PROGLANG[61]
5-72	810-820	procedures	*[61]	PROGLANG[61]
5-73	821-822	-	*[61]	PROGLANG[61]
5-74	823-824	`	*[61]	PROGLANG[61]
5-75	824-832	UTILS.py	*[61]	PROGLANG[61]
5-76	832-833	`	*[61]	PROGLANG[61]
5-77	834-842	contains	*[61]	PROGLANG[61]
5-78	843-846	the	*[61]	PROGLANG[61]
5-79	847-851	code	*[61]	PROGLANG[61]
5-80	852-855	for	*[61]	PROGLANG[61]
5-81	856-863	viewing	*[61]	PROGLANG[61]
5-82	864-869	model	*[61]	PROGLANG[61]
5-83	870-878	decision	*[61]	PROGLANG[61]
5-84	879-887	variable	*[61]	PROGLANG[61]
5-85	888-895	results	*[61]	PROGLANG[61]
5-86	896-899	and	*[61]	PROGLANG[61]
5-87	900-910	generating	*[61]	PROGLANG[61]
5-88	911-914	the	*[61]	PROGLANG[61]
5-89	915-916	.	*[61]	PROGLANG[61]
5-90	916-919	csv	*[61]	PROGLANG[61]
5-91	920-927	results	*[61]	PROGLANG[61]
5-92	928-933	files	*[61]	PROGLANG[61]
5-93	934-939	among	*[61]	PROGLANG[61]
5-94	940-945	other	*[61]	PROGLANG[61]
5-95	946-953	utility	*[61]	PROGLANG[61]
5-96	954-963	functions	*[61]	PROGLANG[61]
5-97	964-965	-	*[61]	PROGLANG[61]
5-98	966-967	`	*[61]	PROGLANG[61]
5-99	967-980	model\_runs.py	*[61]	PROGLANG[61]
5-100	980-981	`	*[61]	PROGLANG[61]
5-101	982-990	contains	*[61]	PROGLANG[61]
5-102	991-994	the	*[61]	PROGLANG[61]
5-103	995-999	code	*[61]	PROGLANG[61]
5-104	1000-1009	necessary	*[61]	PROGLANG[61]
5-105	1010-1012	to	*[61]	PROGLANG[61]
5-106	1013-1019	create	*[61]	PROGLANG[61]
5-107	1019-1020	,	*[61]	PROGLANG[61]
5-108	1021-1026	solve	*[61]	PROGLANG[61]
5-109	1026-1027	,	*[61]	PROGLANG[61]
5-110	1028-1031	and	*[61]	PROGLANG[61]
5-111	1032-1038	report	*[61]	PROGLANG[61]
5-112	1039-1046	results	*[61]	PROGLANG[61]
5-113	1047-1049	in	*[61]	PROGLANG[61]
5-114	1050-1051	a	*[61]	PROGLANG[61]
5-115	1052-1053	`	*[61]	PROGLANG[61]
5-116	1053-1054	.	*[61]	PROGLANG[61]
5-117	1054-1057	csv	*[61]	PROGLANG[61]
5-118	1057-1058	`	*[61]	PROGLANG[61]
5-119	1059-1063	file	_	_
5-120	1064-1066	of	_	_
5-121	1067-1071	each	_	_
5-122	1072-1080	instance	_	_
5-123	1081-1087	called	_	_
5-124	1088-1090	by	_	_
5-125	1091-1094	the	_	_
5-126	1095-1099	user	_	_
5-127	1100-1101	-	_	_
5-128	1102-1103	`	_	_
5-129	1103-1116	results\_files	_	_
5-130	1116-1117	/	_	_
5-131	1117-1118	`	_	_
5-132	1119-1125	folder	_	_
5-133	1126-1132	stores	_	_
5-134	1133-1136	the	_	_
5-135	1137-1146	generated	_	_
5-136	1147-1148	`	_	_
5-137	1148-1149	.	_	_
5-138	1149-1152	csv	_	_
5-139	1152-1153	`	_	_
5-140	1154-1159	files	_	_
5-141	1160-1164	with	_	_
5-142	1165-1170	model	_	_
5-143	1171-1178	metrics	_	_
5-144	1179-1180	-	_	_
5-145	1181-1182	`	_	_
5-146	1182-1189	figures	_	_
5-147	1189-1190	/	_	_
5-148	1190-1191	`	_	_
5-149	1192-1198	folder	_	_
5-150	1199-1205	stores	_	_
5-151	1206-1209	the	_	_
5-152	1210-1219	generated	_	_
5-153	1220-1221	`	_	_
5-154	1221-1222	.	_	_
5-155	1222-1225	png	_	_
5-156	1225-1226	`	_	_
5-157	1227-1232	files	_	_
5-158	1233-1236	for	_	_
5-159	1237-1249	experimental	_	_
5-160	1250-1257	results	_	_
5-161	1258-1259	-	_	_
5-162	1260-1261	`	_	_
5-163	1261-1270	log\_files	_	_
5-164	1270-1271	/	_	_
5-165	1271-1272	`	_	_
5-166	1273-1279	folder	_	_
5-167	1280-1286	stores	_	_
5-168	1287-1292	model	_	_
5-169	1293-1294	`	_	_
5-170	1294-1295	.	_	_
5-171	1295-1297	lp	_	_
5-172	1297-1298	`	_	_
5-173	1299-1304	files	_	_
5-174	1305-1308	and	_	_
5-175	1309-1315	Gurobi	_	_
5-176	1316-1317	`	_	_
5-177	1317-1318	.	_	_
5-178	1318-1321	txt	_	_
5-179	1321-1322	`	_	_
5-180	1323-1326	log	_	_
5-181	1327-1332	files	_	_
5-182	1333-1334	-	_	_
5-183	1335-1336	`	_	_
5-184	1336-1344	Datasets	_	_
5-185	1344-1345	/	_	_
5-186	1345-1346	`	_	_
5-187	1347-1353	folder	_	_
5-188	1354-1362	contains	_	_
5-189	1363-1366	the	_	_
5-190	1367-1375	datasets	_	_
5-191	1376-1380	used	_	_
5-192	1381-1384	for	_	_
5-193	1385-1395	generating	_	_
5-194	1396-1408	experimental	_	_
5-195	1409-1416	results	_	_
5-196	1419-1420	-	_	_
5-197	1421-1425	Note	_	_
5-198	1425-1426	:	_	_
5-199	1427-1428	`	_	_
5-200	1428-1436	Datasets	_	_
5-201	1436-1437	/	_	_
5-202	1437-1438	`	_	_
5-203	1439-1445	should	_	_
5-204	1446-1450	also	_	_
5-205	1451-1453	be	_	_
5-206	1454-1458	used	_	_
5-207	1459-1461	as	_	_
5-208	1462-1465	the	_	_
5-209	1466-1472	folder	_	_
5-210	1473-1478	where	_	_
5-211	1479-1483	user	_	_
5-212	1484-1491	dataset	_	_
5-213	1492-1497	files	_	_
5-214	1498-1501	are	_	_
5-215	1502-1508	stored	_	_
5-216	1510-1511	\*	_	_
5-217	1511-1512	\*	_	_
5-218	1512-1513	\*	_	_
5-219	1514-1515	\*	_	_
5-220	1515-1516	\*	_	_
5-221	1516-1517	\*	_	_
5-222	1519-1520	#	_	_
5-223	1520-1521	#	_	_
5-224	1522-1529	Running	_	_
5-225	1530-1534	Code	_	_
5-226	1536-1537	-	_	_
5-227	1538-1544	Ensure	_	_
5-228	1545-1548	the	_	_
5-229	1549-1555	latest	_	_
5-230	1556-1564	versions	_	_
5-231	1565-1567	of	_	_
5-232	1568-1571	the	_	_
5-233	1572-1580	packages	_	_
5-234	1581-1583	in	_	_
5-235	1584-1585	`	_	_
5-236	1585-1601	requirements.txt	_	_
5-237	1601-1602	`	_	_
5-238	1603-1606	are	_	_
5-239	1607-1616	installed	_	_
5-240	1617-1618	-	_	_
5-241	1619-1622	For	_	_
5-242	1623-1625	an	_	_
5-243	1626-1634	instance	_	_
5-244	1635-1637	of	_	_
5-245	1638-1639	`	_	_
5-246	1639-1643	OBCT	_	_
5-247	1643-1644	`	_	_
5-248	1645-1648	run	_	_
5-249	1649-1653	with	_	_
5-250	1654-1657	one	_	_
5-251	1658-1660	of	_	_
5-252	1661-1664	the	_	_
5-253	1665-1674	functions	_	_
5-254	1675-1677	in	_	_
5-255	1678-1679	`	_	_
5-256	1679-1692	model\_runs.py	_	_
5-257	1692-1693	`	_	_
5-258	1694-1696	we	_	_
5-259	1697-1700	use	_	_
5-260	1701-1710	following	_	_
5-261	1711-1720	arguments	_	_
5-262	1721-1722	(	_	_
5-263	1722-1725	not	_	_
5-264	1726-1729	all	_	_
5-265	1730-1740	functional	_	_
5-266	1741-1745	call	_	_
5-267	1746-1756	parameters	_	_
5-268	1757-1762	apply	_	_
5-269	1763-1765	to	_	_
5-270	1766-1769	all	_	_
5-271	1770-1779	functions	_	_
5-272	1779-1780	)	_	_
5-273	1785-1786	-	_	_
5-274	1787-1788	d	_	_
5-275	1789-1790	:	_	_
5-276	1791-1792	`	_	_
5-277	1792-1795	str	_	_
5-278	1796-1800	list	_	_
5-279	1800-1801	`	_	_
5-280	1801-1802	,	_	_
5-281	1803-1807	name	_	_
5-282	1807-1808	(	_	_
5-283	1808-1809	s	_	_
5-284	1809-1810	)	_	_
5-285	1811-1813	of	_	_
5-286	1814-1821	dataset	_	_
5-287	1822-1826	file	_	_
5-288	1826-1827	(	_	_
5-289	1827-1828	s	_	_
5-290	1828-1829	)	_	_
5-291	1834-1835	-	_	_
5-292	1836-1837	h	_	_
5-293	1838-1839	:	_	_
5-294	1840-1841	`	_	_
5-295	1841-1844	int	_	_
5-296	1845-1849	list	_	_
5-297	1849-1850	`	_	_
5-298	1850-1851	,	_	_
5-299	1852-1859	maximum	_	_
5-300	1860-1865	depth	_	_
5-301	1865-1866	(	_	_
5-302	1866-1867	s	_	_
5-303	1867-1868	)	_	_
5-304	1869-1871	of	_	_
5-305	1872-1879	trained	_	_
5-306	1880-1884	tree	_	_
5-307	1884-1885	(	_	_
5-308	1885-1886	s	_	_
5-309	1886-1887	)	_	_
5-310	1892-1893	-	_	_
5-311	1894-1895	t	_	_
5-312	1896-1897	:	_	_
5-313	1898-1899	`	_	_
5-314	1899-1904	float	_	_
5-315	1904-1905	`	_	_
5-316	1905-1906	,	_	_
5-317	1907-1913	gurobi	_	_
5-318	1914-1919	model	_	_
5-319	1920-1924	time	_	_
5-320	1925-1930	limit	_	_
5-321	1931-1933	in	_	_
5-322	1934-1935	s	_	_
5-323	1940-1941	-	_	_
5-324	1942-1943	m	_	_
5-325	1944-1945	:	_	_
5-326	1946-1947	`	_	_
5-327	1947-1950	str	_	_
5-328	1951-1955	list	_	_
5-329	1955-1956	`	_	_
5-330	1956-1957	,	_	_
5-331	1958-1962	list	_	_
5-332	1963-1965	of	_	_
5-333	1966-1971	model	_	_
5-334	1971-1972	(	_	_
5-335	1972-1973	s	_	_
5-336	1973-1974	)	_	_
5-337	1975-1977	to	_	_
5-338	1978-1981	use	_	_
5-339	1986-1987	-	_	_
5-340	1988-1989	r	_	_
5-341	1990-1991	:	_	_
5-342	1992-1993	`	_	_
5-343	1993-1996	int	_	_
5-344	1997-2001	list	_	_
5-345	2001-2002	`	_	_
5-346	2002-2003	,	_	_
5-347	2004-2008	list	_	_
5-348	2009-2011	of	_	_
5-349	2012-2018	random	_	_
5-350	2019-2023	seed	_	_
5-351	2023-2024	(	_	_
5-352	2024-2025	s	_	_
5-353	2025-2026	)	_	_
5-354	2027-2029	to	_	_
5-355	2030-2033	use	_	_
5-356	2040-2041	-	_	_
5-357	2042-2043	`	_	_
5-358	2043-2052	rand\_seed	_	_
5-359	2053-2054	=	_	_
5-360	2055-2056	\[	_	_
5-361	2056-2057	k	_	_
5-362	2057-2058	,	_	_
5-363	2058-2059	.	_	_
5-364	2059-2060	.	_	_
5-365	2060-2061	.	_	_
5-366	2061-2062	,	_	_
5-367	2062-2063	k	_	_
5-368	2063-2064	\]	_	_
5-369	2064-2065	`	_	_
5-370	2067-2070	for	_	_
5-371	2071-2077	repeat	_	_
5-372	2078-2081	use	_	_
5-373	2082-2084	of	_	_
5-374	2085-2092	randome	_	_
5-375	2093-2098	state	_	_
5-376	2099-2100	`	_	_
5-377	2100-2101	k	_	_
5-378	2101-2102	`	_	_
5-379	2107-2108	-	_	_
5-380	2109-2110	p	_	_
5-381	2111-2112	:	_	_
5-382	2113-2114	`	_	_
5-383	2114-2117	str	_	_
5-384	2117-2118	`	_	_
5-385	2118-2119	,	_	_
5-386	2120-2129	objective	_	_
5-387	2130-2138	priority	_	_
5-388	2139-2148	parameter	_	_
5-389	2149-2153	used	_	_
5-390	2154-2156	in	_	_
5-391	2157-2169	bi-objective	_	_
5-392	2170-2178	modeling	_	_
5-393	2183-2184	-	_	_
5-394	2185-2186	e	_	_
5-395	2187-2188	:	_	_
5-396	2189-2190	`	_	_
5-397	2190-2193	str	_	_
5-398	2194-2198	list	_	_
5-399	2198-2199	`	_	_
5-400	2199-2200	,	_	_
5-401	2201-2206	model	_	_
5-402	2207-2212	extra	_	_
5-403	2212-2213	(	_	_
5-404	2213-2214	s	_	_
5-405	2214-2215	)	_	_
5-406	2215-2216	,	_	_
5-407	2217-2219	if	_	_
5-408	2220-2230	applicable	_	_
5-409	2235-2236	-	_	_
5-410	2237-2238	f	_	_
5-411	2239-2240	:	_	_
5-412	2241-2242	`	_	_
5-413	2242-2245	str	_	_
5-414	2245-2246	`	_	_
5-415	2246-2247	,	_	_
5-416	2248-2255	results	_	_
5-417	2256-2262	output	_	_
5-418	2263-2267	file	_	_
5-419	2268-2269	`	_	_
5-420	2269-2270	.	_	_
5-421	2270-2273	csv	_	_
5-422	2273-2274	`	_	_
5-423	2279-2280	-	_	_
5-424	2281-2282	l	_	_
5-425	2283-2284	:	_	_
5-426	2285-2286	`	_	_
5-427	2286-2293	boolean	_	_
5-428	2293-2294	`	_	_
5-429	2294-2295	,	_	_
5-430	2296-2299	log	_	_
5-431	2300-2307	console	_	_
5-432	2308-2310	to	_	_
5-433	2311-2312	`	_	_
5-434	2312-2313	.	_	_
5-435	2313-2316	txt	_	_
5-436	2316-2317	`	_	_
5-437	2318-2322	file	_	_
5-438	2323-2326	and	_	_
5-439	2327-2332	write	_	_
5-440	2333-2338	model	_	_
5-441	2339-2341	to	_	_
5-442	2342-2343	`	_	_
5-443	2343-2344	.	_	_
5-444	2344-2346	lp	_	_
5-445	2346-2347	`	_	_
5-446	2348-2352	file	_	_
5-447	2352-2353	,	_	_
5-448	2354-2358	both	_	_
5-449	2359-2364	saved	_	_
5-450	2365-2367	to	_	_
5-451	2368-2371	the	_	_
5-452	2372-2373	`	_	_
5-453	2373-2374	\\	_	_
5-454	2374-2383	log\_files	_	_
5-455	2383-2384	`	_	_
5-456	2385-2391	folder	_	_
5-457	2392-2395	for	_	_
5-458	2396-2400	each	_	_
5-459	2401-2406	model	_	_
5-460	2407-2413	called	_	_
5-461	2414-2416	by	_	_
5-462	2417-2421	user	_	_
5-463	2422-2426	Note	_	_
5-464	2426-2427	:	_	_
5-465	2428-2429	-	_	_
5-466	2430-2432	We	_	_
5-467	2433-2439	assume	_	_
5-468	2440-2443	the	_	_
5-469	2444-2450	target	_	_
5-470	2451-2457	column	_	_
5-471	2458-2460	is	_	_
5-472	2461-2468	labeled	_	_
5-473	2469-2470	`	_	_
5-474	2470-2471	'	_	_
5-475	2471-2477	target	_	_
5-476	2477-2478	'	_	_
5-477	2478-2479	`	_	_
5-478	2479-2480	.	_	_

#Text=Change the hard code in `model\_runs.py` to change the according target column - If results output file `-f file` is `None` the `models\_run.py` calls automatically generates a `.csv` results file with the parameters of the function call as the file name saved to the `\\results\_files` folder - `-e model\_extras`, `-p priorities`, and `-f file` may be `None` input arguments, all others must hold a valid value  \*\*\* Call the `model\_runs.py` `main` function within a python file as follows to generate a model ignorning our second objective,  ```python import model\_runs  data\_names = \['soybean\_small', 'monk3', 'car', 'iris', 'climate'\] heights = \[3, 4, 5\] models = \['MCF1', 'MCF2', 'CUT1-ALL', 'CUT2-FRAC-3'\] time\_limit = 3600 extras = \['max\_features-25'\] rand\_seed = \[13, 58, 94, None\] tuning = None file = 'example\_code\_output.csv' consol\_log = False model\_runs.main(   \["-d", data\_names, "-h", heights, "-m", models, "-t", time\_limit,    "-e", extras, "-r", rand\_seed, "-f", file, "-l", consol\_log\]) ``` To run from terminal do the following, ```bash python3 import model\_runs\; model\_runs.main -d \['soybean-small','monk3','car','iris','climate'\] -h \[3,4,5\] -m \['MCF1','MCF2','CUT1-ALL','CUT2-FRAC-3'\] -t 3600 -e \['max\_features-25'\] -r \[13, 58, 94, None\] -c None -f 'test\_results.csv' -l False ```  \*\*\* ## Bi-objective Modeling Call the `biobjective` function within a python file as follows to generate a model using the heirarchical modeling capabilities of Gurobi  ```python import model\_runs  data\_names = \['ionosphere', 'monk2', 'breat\_cancer', 'climate'\] height = 5 models = \['MCF1', 'MCF2', 'CUT1-ALL', 'CUT2-FRAC-3'\] time\_limit = 3600 rand\_seed = \[13, 58, 94, None\] priorities = \['data','equal'\] file = 'biobj\_example.csv' consol\_log = False model\_runs.biobjective(   \["-d", data\_names, "-h", height, "-m", models, "-t", time\_limit,    "-p", priorities, "-r", rand\_seed, "-f", file, "-l", consol\_log\]) ``` To run from terminal do the following, ```bash python3 import model\_runs\; model\_runs.biobjective -d \['ionosphere', 'monk2', 'breat\_cancer', 'climate'\] -h 5 -m \['MCF1','MCF2','CUT1-ALL','CUT2-FRAC-3'\] -t 3600 -p \['data','equal'\] -r \[13, 58, 94, None\] -f 'biobj\_example.csv' -l False ```  \*\*\* ## Pareto Frontier To generate the Pareto frontier call the `main` function in `pareto\_runs.py` with the below parameters:   - d : str list, names of dataset files   - h : int, maximum depth of trained trees   - t : float, gurobi model time limit in s   - m : str list, models to use   - r : str list, random state(s) to use   - f : str, results output file .csv  A `.png` file for each dataset called by the user is generated and stored in `\\results\_figures\\` folder  We assume `-f file` is located in the `\\results\_files` folder - If results output file `-f file` is `None` the `pareto` function automatically generates a `.csv` results file with the parameters of the function call as the file name saved to the `\\results\_files` folder  You can generate pareto frontiers from within a python file as follows,  ```python import model\_runs  height = 4 models = \['FlowOCT', 'MCF1', 'MCF2', 'CUT1', 'CUT2'\] rand\_states = \[15, 78, 0\] data\_names = \['hayes\_roth', 'house\_votes\_84'\] file = 'pareto\_example.csv' model\_runs.pareto(\["-d", data\_names, "-h", height, "-m", models, "-t", 3600, "-r", rand\_states, "-f", file\]) ```  To run from terminal do the following  ```bash python3 import model\_runs\; model\_runs.pareto -d \['hayes\_roth', 'house\_votes\_84'\] -h 4 -m \['FOCT', 'MCF1', 'MCF2', 'CUT1', 'CUT2'\] -t 3600 -r \[15, 78, 0\] -f 'pareto\_example.csv' ``` - Note: `FlowOCT` must be the model name to generate the pareto frontier of FlowOCT \*\*\*  ## Models Functionality For understanding model functionality associated with integer and fractional separation procedures in \*\*CUT1\*\* and \*\*CUT2\*\* models, `-e model\_extras` and `-c tuning` functionality please refer to the `USAGE.md` file.
6-1	2481-2487	Change	_	_
6-2	2488-2491	the	_	_
6-3	2492-2496	hard	_	_
6-4	2497-2501	code	_	_
6-5	2502-2504	in	_	_
6-6	2505-2506	`	_	_
6-7	2506-2519	model\_runs.py	_	_
6-8	2519-2520	`	_	_
6-9	2521-2523	to	_	_
6-10	2524-2530	change	_	_
6-11	2531-2534	the	_	_
6-12	2535-2544	according	_	_
6-13	2545-2551	target	_	_
6-14	2552-2558	column	_	_
6-15	2559-2560	-	_	_
6-16	2561-2563	If	_	_
6-17	2564-2571	results	_	_
6-18	2572-2578	output	_	_
6-19	2579-2583	file	_	_
6-20	2584-2585	`	_	_
6-21	2585-2586	-	_	_
6-22	2586-2587	f	_	_
6-23	2588-2592	file	_	_
6-24	2592-2593	`	_	_
6-25	2594-2596	is	_	_
6-26	2597-2598	`	_	_
6-27	2598-2602	None	_	_
6-28	2602-2603	`	_	_
6-29	2604-2607	the	_	_
6-30	2608-2609	`	_	_
6-31	2609-2622	models\_run.py	_	_
6-32	2622-2623	`	_	_
6-33	2624-2629	calls	_	_
6-34	2630-2643	automatically	_	_
6-35	2644-2653	generates	_	_
6-36	2654-2655	a	_	_
6-37	2656-2657	`	_	_
6-38	2657-2658	.	_	_
6-39	2658-2661	csv	_	_
6-40	2661-2662	`	_	_
6-41	2663-2670	results	_	_
6-42	2671-2675	file	_	_
6-43	2676-2680	with	_	_
6-44	2681-2684	the	_	_
6-45	2685-2695	parameters	_	_
6-46	2696-2698	of	_	_
6-47	2699-2702	the	_	_
6-48	2703-2711	function	_	_
6-49	2712-2716	call	_	_
6-50	2717-2719	as	_	_
6-51	2720-2723	the	_	_
6-52	2724-2728	file	_	_
6-53	2729-2733	name	_	_
6-54	2734-2739	saved	_	_
6-55	2740-2742	to	_	_
6-56	2743-2746	the	_	_
6-57	2747-2748	`	_	_
6-58	2748-2749	\\	_	_
6-59	2749-2762	results\_files	_	_
6-60	2762-2763	`	_	_
6-61	2764-2770	folder	_	_
6-62	2771-2772	-	_	_
6-63	2773-2774	`	_	_
6-64	2774-2775	-	_	_
6-65	2775-2776	e	_	_
6-66	2777-2789	model\_extras	_	_
6-67	2789-2790	`	_	_
6-68	2790-2791	,	_	_
6-69	2792-2793	`	_	_
6-70	2793-2794	-	_	_
6-71	2794-2795	p	_	_
6-72	2796-2806	priorities	_	_
6-73	2806-2807	`	_	_
6-74	2807-2808	,	_	_
6-75	2809-2812	and	_	_
6-76	2813-2814	`	_	_
6-77	2814-2815	-	_	_
6-78	2815-2816	f	_	_
6-79	2817-2821	file	_	_
6-80	2821-2822	`	_	_
6-81	2823-2826	may	_	_
6-82	2827-2829	be	_	_
6-83	2830-2831	`	_	_
6-84	2831-2835	None	_	_
6-85	2835-2836	`	_	_
6-86	2837-2842	input	_	_
6-87	2843-2852	arguments	_	_
6-88	2852-2853	,	_	_
6-89	2854-2857	all	_	_
6-90	2858-2864	others	_	_
6-91	2865-2869	must	_	_
6-92	2870-2874	hold	_	_
6-93	2875-2876	a	_	_
6-94	2877-2882	valid	_	_
6-95	2883-2888	value	_	_
6-96	2890-2891	\*	_	_
6-97	2891-2892	\*	_	_
6-98	2892-2893	\*	_	_
6-99	2894-2898	Call	_	_
6-100	2899-2902	the	_	_
6-101	2903-2904	`	_	_
6-102	2904-2917	model\_runs.py	_	_
6-103	2917-2918	`	_	_
6-104	2919-2920	`	_	_
6-105	2920-2924	main	_	_
6-106	2924-2925	`	_	_
6-107	2926-2934	function	_	_
6-108	2935-2941	within	_	_
6-109	2942-2943	a	_	_
6-110	2944-2950	python	_	_
6-111	2951-2955	file	_	_
6-112	2956-2958	as	_	_
6-113	2959-2966	follows	_	_
6-114	2967-2969	to	_	_
6-115	2970-2978	generate	_	_
6-116	2979-2980	a	_	_
6-117	2981-2986	model	_	_
6-118	2987-2996	ignorning	_	_
6-119	2997-3000	our	_	_
6-120	3001-3007	second	_	_
6-121	3008-3017	objective	_	_
6-122	3017-3018	,	_	_
6-123	3020-3021	`	_	_
6-124	3021-3022	`	_	_
6-125	3022-3023	`	_	_
6-126	3023-3029	python	_	_
6-127	3030-3036	import	_	_
6-128	3037-3047	model\_runs	_	_
6-129	3049-3059	data\_names	_	_
6-130	3060-3061	=	_	_
6-131	3062-3063	\[	_	_
6-132	3063-3064	'	_	_
6-133	3064-3077	soybean\_small	_	_
6-134	3077-3078	'	_	_
6-135	3078-3079	,	_	_
6-136	3080-3081	'	_	_
6-137	3081-3086	monk3	_	_
6-138	3086-3087	'	_	_
6-139	3087-3088	,	_	_
6-140	3089-3090	'	_	_
6-141	3090-3093	car	_	_
6-142	3093-3094	'	_	_
6-143	3094-3095	,	_	_
6-144	3096-3097	'	_	_
6-145	3097-3101	iris	_	_
6-146	3101-3102	'	_	_
6-147	3102-3103	,	_	_
6-148	3104-3105	'	_	_
6-149	3105-3112	climate	_	_
6-150	3112-3113	'	_	_
6-151	3113-3114	\]	_	_
6-152	3115-3122	heights	_	_
6-153	3123-3124	=	_	_
6-154	3125-3126	\[	_	_
6-155	3126-3127	3	_	_
6-156	3127-3128	,	_	_
6-157	3129-3130	4	_	_
6-158	3130-3131	,	_	_
6-159	3132-3133	5	_	_
6-160	3133-3134	\]	_	_
6-161	3135-3141	models	_	_
6-162	3142-3143	=	_	_
6-163	3144-3145	\[	_	_
6-164	3145-3146	'	_	_
6-165	3146-3150	MCF1	_	_
6-166	3150-3151	'	_	_
6-167	3151-3152	,	_	_
6-168	3153-3154	'	_	_
6-169	3154-3158	MCF2	_	_
6-170	3158-3159	'	_	_
6-171	3159-3160	,	_	_
6-172	3161-3162	'	_	_
6-173	3162-3166	CUT1	_	_
6-174	3166-3167	-	_	_
6-175	3167-3170	ALL	_	_
6-176	3170-3171	'	_	_
6-177	3171-3172	,	_	_
6-178	3173-3174	'	_	_
6-179	3174-3178	CUT2	_	_
6-180	3178-3179	-	_	_
6-181	3179-3183	FRAC	_	_
6-182	3183-3184	-	_	_
6-183	3184-3185	3	_	_
6-184	3185-3186	'	_	_
6-185	3186-3187	\]	_	_
6-186	3188-3198	time\_limit	_	_
6-187	3199-3200	=	_	_
6-188	3201-3205	3600	_	_
6-189	3206-3212	extras	_	_
6-190	3213-3214	=	_	_
6-191	3215-3216	\[	_	_
6-192	3216-3217	'	_	_
6-193	3217-3229	max\_features	_	_
6-194	3229-3230	-	_	_
6-195	3230-3232	25	_	_
6-196	3232-3233	'	_	_
6-197	3233-3234	\]	_	_
6-198	3235-3244	rand\_seed	_	_
6-199	3245-3246	=	_	_
6-200	3247-3248	\[	_	_
6-201	3248-3250	13	_	_
6-202	3250-3251	,	_	_
6-203	3252-3254	58	_	_
6-204	3254-3255	,	_	_
6-205	3256-3258	94	_	_
6-206	3258-3259	,	_	_
6-207	3260-3264	None	_	_
6-208	3264-3265	\]	_	_
6-209	3266-3272	tuning	_	_
6-210	3273-3274	=	_	_
6-211	3275-3279	None	_	_
6-212	3280-3284	file	_	_
6-213	3285-3286	=	_	_
6-214	3287-3288	'	_	_
6-215	3288-3311	example\_code\_output.csv	_	_
6-216	3311-3312	'	*[51]	ONTOLOGY[51]
6-217	3313-3323	consol\_log	*[51]	ONTOLOGY[51]
6-218	3324-3325	=	*[51]	ONTOLOGY[51]
6-219	3326-3331	False	*[51]	ONTOLOGY[51]
6-220	3332-3347	model\_runs.main	*[51]	ONTOLOGY[51]
6-221	3347-3348	(	*[51]	ONTOLOGY[51]
6-222	3351-3352	\[	*[51]	ONTOLOGY[51]
6-223	3352-3353	"	*[51]	ONTOLOGY[51]
6-224	3353-3354	-	*[51]	ONTOLOGY[51]
6-225	3354-3355	d	*[51]	ONTOLOGY[51]
6-226	3355-3356	"	*[51]	ONTOLOGY[51]
6-227	3356-3357	,	*[51]	ONTOLOGY[51]
6-228	3358-3368	data\_names	*[51]	ONTOLOGY[51]
6-229	3368-3369	,	*[51]	ONTOLOGY[51]
6-230	3370-3371	"	*[51]	ONTOLOGY[51]
6-231	3371-3372	-	*[51]	ONTOLOGY[51]
6-232	3372-3373	h	*[51]	ONTOLOGY[51]
6-233	3373-3374	"	*[51]	ONTOLOGY[51]
6-234	3374-3375	,	*[51]	ONTOLOGY[51]
6-235	3376-3383	heights	*[51]	ONTOLOGY[51]
6-236	3383-3384	,	*[51]	ONTOLOGY[51]
6-237	3385-3386	"	*[51]	ONTOLOGY[51]
6-238	3386-3387	-	*[51]	ONTOLOGY[51]
6-239	3387-3388	m	*[51]	ONTOLOGY[51]
6-240	3388-3389	"	*[51]	ONTOLOGY[51]
6-241	3389-3390	,	*[51]	ONTOLOGY[51]
6-242	3391-3397	models	*[51]	ONTOLOGY[51]
6-243	3397-3398	,	*[51]	ONTOLOGY[51]
6-244	3399-3400	"	*[51]	ONTOLOGY[51]
6-245	3400-3401	-	*[51]	ONTOLOGY[51]
6-246	3401-3402	t	*[51]	ONTOLOGY[51]
6-247	3402-3403	"	*[51]	ONTOLOGY[51]
6-248	3403-3404	,	*[51]	ONTOLOGY[51]
6-249	3405-3415	time\_limit	*[51]	ONTOLOGY[51]
6-250	3415-3416	,	*[51]	ONTOLOGY[51]
6-251	3420-3421	"	*[51]	ONTOLOGY[51]
6-252	3421-3422	-	*[51]	ONTOLOGY[51]
6-253	3422-3423	e	*[51]	ONTOLOGY[51]
6-254	3423-3424	"	*[51]	ONTOLOGY[51]
6-255	3424-3425	,	*[51]	ONTOLOGY[51]
6-256	3426-3432	extras	*[51]	ONTOLOGY[51]
6-257	3432-3433	,	*[51]	ONTOLOGY[51]
6-258	3434-3435	"	*[51]	ONTOLOGY[51]
6-259	3435-3436	-	*[51]	ONTOLOGY[51]
6-260	3436-3437	r	*[51]	ONTOLOGY[51]
6-261	3437-3438	"	*[51]	ONTOLOGY[51]
6-262	3438-3439	,	*[51]	ONTOLOGY[51]
6-263	3440-3449	rand\_seed	*[51]	ONTOLOGY[51]
6-264	3449-3450	,	*[51]	ONTOLOGY[51]
6-265	3451-3452	"	*[51]	ONTOLOGY[51]
6-266	3452-3453	-	*[51]	ONTOLOGY[51]
6-267	3453-3454	f	*[51]	ONTOLOGY[51]
6-268	3454-3455	"	*[51]	ONTOLOGY[51]
6-269	3455-3456	,	*[51]	ONTOLOGY[51]
6-270	3457-3461	file	*[51]	ONTOLOGY[51]
6-271	3461-3462	,	*[51]	ONTOLOGY[51]
6-272	3463-3464	"	*[51]	ONTOLOGY[51]
6-273	3464-3465	-	*[51]	ONTOLOGY[51]
6-274	3465-3466	l	*[51]	ONTOLOGY[51]
6-275	3466-3467	"	*[51]	ONTOLOGY[51]
6-276	3467-3468	,	*[51]	ONTOLOGY[51]
6-277	3469-3479	consol\_log	*[51]	ONTOLOGY[51]
6-278	3479-3480	\]	*[51]	ONTOLOGY[51]
6-279	3480-3481	)	*[51]	ONTOLOGY[51]
6-280	3482-3483	`	*[51]	ONTOLOGY[51]
6-281	3483-3484	`	*[51]	ONTOLOGY[51]
6-282	3484-3485	`	*[51]	ONTOLOGY[51]
6-283	3486-3488	To	*[51]	ONTOLOGY[51]
6-284	3489-3492	run	*[51]	ONTOLOGY[51]
6-285	3493-3497	from	*[51]	ONTOLOGY[51]
6-286	3498-3506	terminal	*[51]	ONTOLOGY[51]
6-287	3507-3509	do	*[51]	ONTOLOGY[51]
6-288	3510-3513	the	*[51]	ONTOLOGY[51]
6-289	3514-3523	following	*[51]	ONTOLOGY[51]
6-290	3523-3524	,	*[51]	ONTOLOGY[51]
6-291	3525-3526	`	*[51]	ONTOLOGY[51]
6-292	3526-3527	`	*[51]	ONTOLOGY[51]
6-293	3527-3528	`	*[51]	ONTOLOGY[51]
6-294	3528-3532	bash	*[51]	ONTOLOGY[51]
6-295	3533-3540	python3	*[51]	ONTOLOGY[51]
6-296	3541-3547	import	*[51]	ONTOLOGY[51]
6-297	3548-3558	model\_runs	*[51]	ONTOLOGY[51]
6-298	3558-3559	\;	*[51]	ONTOLOGY[51]
6-299	3560-3575	model\_runs.main	*[51]	ONTOLOGY[51]
6-300	3576-3577	-	*[51]	ONTOLOGY[51]
6-301	3577-3578	d	*[51]	ONTOLOGY[51]
6-302	3579-3580	\[	*[51]	ONTOLOGY[51]
6-303	3580-3581	'	*[51]	ONTOLOGY[51]
6-304	3581-3594	soybean-small	*[51]	ONTOLOGY[51]
6-305	3594-3595	'	*[51]	ONTOLOGY[51]
6-306	3595-3596	,	*[51]	ONTOLOGY[51]
6-307	3596-3597	'	*[51]	ONTOLOGY[51]
6-308	3597-3602	monk3	*[51]	ONTOLOGY[51]
6-309	3602-3603	'	*[51]	ONTOLOGY[51]
6-310	3603-3604	,	*[51]	ONTOLOGY[51]
6-311	3604-3605	'	*[51]	ONTOLOGY[51]
6-312	3605-3608	car	*[51]	ONTOLOGY[51]
6-313	3608-3609	'	*[51]	ONTOLOGY[51]
6-314	3609-3610	,	*[51]	ONTOLOGY[51]
6-315	3610-3611	'	*[51]	ONTOLOGY[51]
6-316	3611-3615	iris	*[51]	ONTOLOGY[51]
6-317	3615-3616	'	*[51]	ONTOLOGY[51]
6-318	3616-3617	,	*[51]	ONTOLOGY[51]
6-319	3617-3618	'	*[51]	ONTOLOGY[51]
6-320	3618-3625	climate	*[51]	ONTOLOGY[51]
6-321	3625-3626	'	*[51]	ONTOLOGY[51]
6-322	3626-3627	\]	*[51]	ONTOLOGY[51]
6-323	3628-3629	-	*[51]	ONTOLOGY[51]
6-324	3629-3630	h	*[51]	ONTOLOGY[51]
6-325	3631-3632	\[	*[51]	ONTOLOGY[51]
6-326	3632-3637	3,4,5	*[51]	ONTOLOGY[51]
6-327	3637-3638	\]	*[51]	ONTOLOGY[51]
6-328	3639-3640	-	*[51]	ONTOLOGY[51]
6-329	3640-3641	m	*[51]	ONTOLOGY[51]
6-330	3642-3643	\[	*[51]	ONTOLOGY[51]
6-331	3643-3644	'	*[51]	ONTOLOGY[51]
6-332	3644-3648	MCF1	*[51]	ONTOLOGY[51]
6-333	3648-3649	'	*[51]	ONTOLOGY[51]
6-334	3649-3650	,	*[51]	ONTOLOGY[51]
6-335	3650-3651	'	*[51]	ONTOLOGY[51]
6-336	3651-3655	MCF2	*[51]	ONTOLOGY[51]
6-337	3655-3656	'	*[51]	ONTOLOGY[51]
6-338	3656-3657	,	*[51]	ONTOLOGY[51]
6-339	3657-3658	'	*[51]	ONTOLOGY[51]
6-340	3658-3662	CUT1	*[51]	ONTOLOGY[51]
6-341	3662-3663	-	*[51]	ONTOLOGY[51]
6-342	3663-3666	ALL	*[51]	ONTOLOGY[51]
6-343	3666-3667	'	*[51]	ONTOLOGY[51]
6-344	3667-3668	,	*[51]	ONTOLOGY[51]
6-345	3668-3669	'	*[51]	ONTOLOGY[51]
6-346	3669-3673	CUT2	*[51]	ONTOLOGY[51]
6-347	3673-3674	-	*[51]	ONTOLOGY[51]
6-348	3674-3678	FRAC	*[51]	ONTOLOGY[51]
6-349	3678-3679	-	*[51]	ONTOLOGY[51]
6-350	3679-3680	3	*[51]	ONTOLOGY[51]
6-351	3680-3681	'	*[51]	ONTOLOGY[51]
6-352	3681-3682	\]	*[51]	ONTOLOGY[51]
6-353	3683-3684	-	*[51]	ONTOLOGY[51]
6-354	3684-3685	t	*[51]	ONTOLOGY[51]
6-355	3686-3690	3600	*[51]	ONTOLOGY[51]
6-356	3691-3692	-	*[51]	ONTOLOGY[51]
6-357	3692-3693	e	*[51]	ONTOLOGY[51]
6-358	3694-3695	\[	*[51]	ONTOLOGY[51]
6-359	3695-3696	'	*[51]	ONTOLOGY[51]
6-360	3696-3708	max\_features	*[51]	ONTOLOGY[51]
6-361	3708-3709	-	*[51]	ONTOLOGY[51]
6-362	3709-3711	25	*[51]	ONTOLOGY[51]
6-363	3711-3712	'	*[51]	ONTOLOGY[51]
6-364	3712-3713	\]	*[51]	ONTOLOGY[51]
6-365	3714-3715	-	*[51]	ONTOLOGY[51]
6-366	3715-3716	r	*[51]	ONTOLOGY[51]
6-367	3717-3718	\[	*[51]	ONTOLOGY[51]
6-368	3718-3720	13	*[51]	ONTOLOGY[51]
6-369	3720-3721	,	*[51]	ONTOLOGY[51]
6-370	3722-3724	58	*[51]	ONTOLOGY[51]
6-371	3724-3725	,	*[51]	ONTOLOGY[51]
6-372	3726-3728	94	*[51]	ONTOLOGY[51]
6-373	3728-3729	,	*[51]	ONTOLOGY[51]
6-374	3730-3734	None	*[51]	ONTOLOGY[51]
6-375	3734-3735	\]	*[51]	ONTOLOGY[51]
6-376	3736-3737	-	*[51]	ONTOLOGY[51]
6-377	3737-3738	c	*[51]	ONTOLOGY[51]
6-378	3739-3743	None	*[51]	ONTOLOGY[51]
6-379	3744-3745	-	*[51]	ONTOLOGY[51]
6-380	3745-3746	f	*[51]	ONTOLOGY[51]
6-381	3747-3748	'	*[51]	ONTOLOGY[51]
6-382	3748-3764	test\_results.csv	*[51]	ONTOLOGY[51]
6-383	3764-3765	'	*[51]	ONTOLOGY[51]
6-384	3766-3767	-	*[51]	ONTOLOGY[51]
6-385	3767-3768	l	*[51]	ONTOLOGY[51]
6-386	3769-3774	False	*[51]	ONTOLOGY[51]
6-387	3775-3776	`	*[51]	ONTOLOGY[51]
6-388	3776-3777	`	*[51]	ONTOLOGY[51]
6-389	3777-3778	`	*[51]	ONTOLOGY[51]
6-390	3780-3781	\*	*[51]	ONTOLOGY[51]
6-391	3781-3782	\*	*[51]	ONTOLOGY[51]
6-392	3782-3783	\*	*[51]	ONTOLOGY[51]
6-393	3784-3785	#	*[51]	ONTOLOGY[51]
6-394	3785-3786	#	*[51]	ONTOLOGY[51]
6-395	3787-3799	Bi-objective	*[51]	ONTOLOGY[51]
6-396	3800-3808	Modeling	*[51]	ONTOLOGY[51]
6-397	3809-3813	Call	*[51]	ONTOLOGY[51]
6-398	3814-3817	the	*[51]	ONTOLOGY[51]
6-399	3818-3819	`	*[51]	ONTOLOGY[51]
6-400	3819-3830	biobjective	*[51]	ONTOLOGY[51]
6-401	3830-3831	`	*[51]	ONTOLOGY[51]
6-402	3832-3840	function	*[51]	ONTOLOGY[51]
6-403	3841-3847	within	*[51]	ONTOLOGY[51]
6-404	3848-3849	a	*[51]	ONTOLOGY[51]
6-405	3850-3856	python	*[51]	ONTOLOGY[51]
6-406	3857-3861	file	*[51]	ONTOLOGY[51]
6-407	3862-3864	as	*[51]	ONTOLOGY[51]
6-408	3865-3872	follows	*[51]	ONTOLOGY[51]
6-409	3873-3875	to	*[51]	ONTOLOGY[51]
6-410	3876-3884	generate	*[51]	ONTOLOGY[51]
6-411	3885-3886	a	*[51]	ONTOLOGY[51]
6-412	3887-3892	model	*[51]	ONTOLOGY[51]
6-413	3893-3898	using	*[51]	ONTOLOGY[51]
6-414	3899-3902	the	*[51]	ONTOLOGY[51]
6-415	3903-3915	heirarchical	*[51]	ONTOLOGY[51]
6-416	3916-3924	modeling	*[51]	ONTOLOGY[51]
6-417	3925-3937	capabilities	*[51]	ONTOLOGY[51]
6-418	3938-3940	of	*[51]	ONTOLOGY[51]
6-419	3941-3947	Gurobi	*[51]	ONTOLOGY[51]
6-420	3949-3950	`	*[51]	ONTOLOGY[51]
6-421	3950-3951	`	*[51]	ONTOLOGY[51]
6-422	3951-3952	`	*[51]	ONTOLOGY[51]
6-423	3952-3958	python	*[51]	ONTOLOGY[51]
6-424	3959-3965	import	*[51]	ONTOLOGY[51]
6-425	3966-3976	model\_runs	*[51]	ONTOLOGY[51]
6-426	3978-3988	data\_names	*[51]	ONTOLOGY[51]
6-427	3989-3990	=	*[51]	ONTOLOGY[51]
6-428	3991-3992	\[	*[51]	ONTOLOGY[51]
6-429	3992-3993	'	*[51]	ONTOLOGY[51]
6-430	3993-4003	ionosphere	*[51]	ONTOLOGY[51]
6-431	4003-4004	'	*[51]	ONTOLOGY[51]
6-432	4004-4005	,	*[51]	ONTOLOGY[51]
6-433	4006-4007	'	*[51]	ONTOLOGY[51]
6-434	4007-4012	monk2	*[51]	ONTOLOGY[51]
6-435	4012-4013	'	*[51]	ONTOLOGY[51]
6-436	4013-4014	,	*[51]	ONTOLOGY[51]
6-437	4015-4016	'	*[51]	ONTOLOGY[51]
6-438	4016-4028	breat\_cancer	*[51]	ONTOLOGY[51]
6-439	4028-4029	'	*[51]	ONTOLOGY[51]
6-440	4029-4030	,	*[51]	ONTOLOGY[51]
6-441	4031-4032	'	*[51]	ONTOLOGY[51]
6-442	4032-4039	climate	*[51]	ONTOLOGY[51]
6-443	4039-4040	'	*[51]	ONTOLOGY[51]
6-444	4040-4041	\]	*[51]	ONTOLOGY[51]
6-445	4042-4048	height	*[51]	ONTOLOGY[51]
6-446	4049-4050	=	*[51]	ONTOLOGY[51]
6-447	4051-4052	5	*[51]	ONTOLOGY[51]
6-448	4053-4059	models	*[51]	ONTOLOGY[51]
6-449	4060-4061	=	*[51]	ONTOLOGY[51]
6-450	4062-4063	\[	*[51]	ONTOLOGY[51]
6-451	4063-4064	'	*[51]	ONTOLOGY[51]
6-452	4064-4068	MCF1	*[51]	ONTOLOGY[51]
6-453	4068-4069	'	*[51]	ONTOLOGY[51]
6-454	4069-4070	,	*[51]	ONTOLOGY[51]
6-455	4071-4072	'	*[51]	ONTOLOGY[51]
6-456	4072-4076	MCF2	*[51]	ONTOLOGY[51]
6-457	4076-4077	'	*[51]	ONTOLOGY[51]
6-458	4077-4078	,	*[51]	ONTOLOGY[51]
6-459	4079-4080	'	*[51]	ONTOLOGY[51]
6-460	4080-4084	CUT1	*[51]	ONTOLOGY[51]
6-461	4084-4085	-	*[51]	ONTOLOGY[51]
6-462	4085-4088	ALL	*[51]	ONTOLOGY[51]
6-463	4088-4089	'	*[51]	ONTOLOGY[51]
6-464	4089-4090	,	*[51]	ONTOLOGY[51]
6-465	4091-4092	'	*[51]	ONTOLOGY[51]
6-466	4092-4096	CUT2	*[51]	ONTOLOGY[51]
6-467	4096-4097	-	*[51]	ONTOLOGY[51]
6-468	4097-4101	FRAC	*[51]	ONTOLOGY[51]
6-469	4101-4102	-	*[51]	ONTOLOGY[51]
6-470	4102-4103	3	*[51]	ONTOLOGY[51]
6-471	4103-4104	'	*[51]	ONTOLOGY[51]
6-472	4104-4105	\]	*[51]	ONTOLOGY[51]
6-473	4106-4116	time\_limit	*[51]	ONTOLOGY[51]
6-474	4117-4118	=	*[51]	ONTOLOGY[51]
6-475	4119-4123	3600	*[51]	ONTOLOGY[51]
6-476	4124-4133	rand\_seed	*[51]	ONTOLOGY[51]
6-477	4134-4135	=	*[51]	ONTOLOGY[51]
6-478	4136-4137	\[	*[51]	ONTOLOGY[51]
6-479	4137-4139	13	*[51]	ONTOLOGY[51]
6-480	4139-4140	,	*[51]	ONTOLOGY[51]
6-481	4141-4143	58	*[51]	ONTOLOGY[51]
6-482	4143-4144	,	*[51]	ONTOLOGY[51]
6-483	4145-4147	94	*[51]	ONTOLOGY[51]
6-484	4147-4148	,	*[51]	ONTOLOGY[51]
6-485	4149-4153	None	*[51]	ONTOLOGY[51]
6-486	4153-4154	\]	*[51]	ONTOLOGY[51]
6-487	4155-4165	priorities	*[51]	ONTOLOGY[51]
6-488	4166-4167	=	*[51]	ONTOLOGY[51]
6-489	4168-4169	\[	*[51]	ONTOLOGY[51]
6-490	4169-4170	'	*[51]	ONTOLOGY[51]
6-491	4170-4174	data	*[51]	ONTOLOGY[51]
6-492	4174-4175	'	*[51]	ONTOLOGY[51]
6-493	4175-4176	,	*[51]	ONTOLOGY[51]
6-494	4176-4177	'	*[51]	ONTOLOGY[51]
6-495	4177-4182	equal	*[51]	ONTOLOGY[51]
6-496	4182-4183	'	*[51]	ONTOLOGY[51]
6-497	4183-4184	\]	*[51]	ONTOLOGY[51]
6-498	4185-4189	file	*[51]	ONTOLOGY[51]
6-499	4190-4191	=	*[51]	ONTOLOGY[51]
6-500	4192-4193	'	*[51]	ONTOLOGY[51]
6-501	4193-4210	biobj\_example.csv	*[51]	ONTOLOGY[51]
6-502	4210-4211	'	*[51]	ONTOLOGY[51]
6-503	4212-4222	consol\_log	*[51]	ONTOLOGY[51]
6-504	4223-4224	=	*[51]	ONTOLOGY[51]
6-505	4225-4230	False	*[51]	ONTOLOGY[51]
6-506	4231-4253	model\_runs.biobjective	*[51]	ONTOLOGY[51]
6-507	4253-4254	(	*[51]	ONTOLOGY[51]
6-508	4257-4258	\[	*[51]	ONTOLOGY[51]
6-509	4258-4259	"	*[51]	ONTOLOGY[51]
6-510	4259-4260	-	*[51]	ONTOLOGY[51]
6-511	4260-4261	d	*[51]	ONTOLOGY[51]
6-512	4261-4262	"	*[51]	ONTOLOGY[51]
6-513	4262-4263	,	*[51]	ONTOLOGY[51]
6-514	4264-4274	data\_names	*[51]	ONTOLOGY[51]
6-515	4274-4275	,	*[51]	ONTOLOGY[51]
6-516	4276-4277	"	*[51]	ONTOLOGY[51]
6-517	4277-4278	-	*[51]	ONTOLOGY[51]
6-518	4278-4279	h	*[51]	ONTOLOGY[51]
6-519	4279-4280	"	*[51]	ONTOLOGY[51]
6-520	4280-4281	,	*[51]	ONTOLOGY[51]
6-521	4282-4288	height	*[51]	ONTOLOGY[51]
6-522	4288-4289	,	*[51]	ONTOLOGY[51]
6-523	4290-4291	"	*[51]	ONTOLOGY[51]
6-524	4291-4292	-	*[51]	ONTOLOGY[51]
6-525	4292-4293	m	*[51]	ONTOLOGY[51]
6-526	4293-4294	"	*[51]	ONTOLOGY[51]
6-527	4294-4295	,	*[51]	ONTOLOGY[51]
6-528	4296-4302	models	*[51]	ONTOLOGY[51]
6-529	4302-4303	,	*[51]	ONTOLOGY[51]
6-530	4304-4305	"	*[51]	ONTOLOGY[51]
6-531	4305-4306	-	*[51]	ONTOLOGY[51]
6-532	4306-4307	t	*[51]	ONTOLOGY[51]
6-533	4307-4308	"	*[51]	ONTOLOGY[51]
6-534	4308-4309	,	*[51]	ONTOLOGY[51]
6-535	4310-4320	time\_limit	_	_
6-536	4320-4321	,	_	_
6-537	4325-4326	"	_	_
6-538	4326-4327	-	_	_
6-539	4327-4328	p	_	_
6-540	4328-4329	"	_	_
6-541	4329-4330	,	_	_
6-542	4331-4341	priorities	_	_
6-543	4341-4342	,	_	_
6-544	4343-4344	"	_	_
6-545	4344-4345	-	_	_
6-546	4345-4346	r	_	_
6-547	4346-4347	"	_	_
6-548	4347-4348	,	_	_
6-549	4349-4358	rand\_seed	_	_
6-550	4358-4359	,	_	_
6-551	4360-4361	"	_	_
6-552	4361-4362	-	_	_
6-553	4362-4363	f	_	_
6-554	4363-4364	"	_	_
6-555	4364-4365	,	_	_
6-556	4366-4370	file	_	_
6-557	4370-4371	,	_	_
6-558	4372-4373	"	_	_
6-559	4373-4374	-	_	_
6-560	4374-4375	l	_	_
6-561	4375-4376	"	_	_
6-562	4376-4377	,	_	_
6-563	4378-4388	consol\_log	_	_
6-564	4388-4389	\]	_	_
6-565	4389-4390	)	_	_
6-566	4391-4392	`	_	_
6-567	4392-4393	`	_	_
6-568	4393-4394	`	_	_
6-569	4395-4397	To	_	_
6-570	4398-4401	run	_	_
6-571	4402-4406	from	_	_
6-572	4407-4415	terminal	_	_
6-573	4416-4418	do	_	_
6-574	4419-4422	the	_	_
6-575	4423-4432	following	_	_
6-576	4432-4433	,	_	_
6-577	4434-4435	`	_	_
6-578	4435-4436	`	_	_
6-579	4436-4437	`	_	_
6-580	4437-4441	bash	_	_
6-581	4442-4449	python3	_	_
6-581	4442-4448	python	_	_
6-582	4450-4456	import	_	_
6-583	4457-4467	model\_runs	_	_
6-584	4467-4468	\;	_	_
6-585	4469-4491	model\_runs.biobjective	_	_
6-586	4492-4493	-	_	_
6-587	4493-4494	d	_	_
6-588	4495-4496	\[	_	_
6-589	4496-4497	'	_	_
6-590	4497-4507	ionosphere	_	_
6-591	4507-4508	'	_	_
6-592	4508-4509	,	_	_
6-593	4510-4511	'	_	_
6-594	4511-4516	monk2	_	_
6-595	4516-4517	'	_	_
6-596	4517-4518	,	_	_
6-597	4519-4520	'	_	_
6-598	4520-4532	breat\_cancer	_	_
6-599	4532-4533	'	_	_
6-600	4533-4534	,	_	_
6-601	4535-4536	'	_	_
6-602	4536-4543	climate	_	_
6-603	4543-4544	'	_	_
6-604	4544-4545	\]	_	_
6-605	4546-4547	-	_	_
6-606	4547-4548	h	_	_
6-607	4549-4550	5	_	_
6-608	4551-4552	-	_	_
6-609	4552-4553	m	_	_
6-610	4554-4555	\[	_	_
6-611	4555-4556	'	_	_
6-612	4556-4560	MCF1	_	_
6-613	4560-4561	'	_	_
6-614	4561-4562	,	_	_
6-615	4562-4563	'	_	_
6-616	4563-4567	MCF2	_	_
6-617	4567-4568	'	_	_
6-618	4568-4569	,	_	_
6-619	4569-4570	'	_	_
6-620	4570-4574	CUT1	_	_
6-621	4574-4575	-	_	_
6-622	4575-4578	ALL	_	_
6-623	4578-4579	'	_	_
6-624	4579-4580	,	_	_
6-625	4580-4581	'	_	_
6-626	4581-4585	CUT2	_	_
6-627	4585-4586	-	_	_
6-628	4586-4590	FRAC	_	_
6-629	4590-4591	-	_	_
6-630	4591-4592	3	_	_
6-631	4592-4593	'	_	_
6-632	4593-4594	\]	_	_
6-633	4595-4596	-	_	_
6-634	4596-4597	t	_	_
6-635	4598-4602	3600	_	_
6-636	4603-4604	-	_	_
6-637	4604-4605	p	_	_
6-638	4606-4607	\[	_	_
6-639	4607-4608	'	_	_
6-640	4608-4612	data	_	_
6-641	4612-4613	'	_	_
6-642	4613-4614	,	_	_
6-643	4614-4615	'	_	_
6-644	4615-4620	equal	_	_
6-645	4620-4621	'	_	_
6-646	4621-4622	\]	_	_
6-647	4623-4624	-	_	_
6-648	4624-4625	r	_	_
6-649	4626-4627	\[	_	_
6-650	4627-4629	13	_	_
6-651	4629-4630	,	_	_
6-652	4631-4633	58	_	_
6-653	4633-4634	,	_	_
6-654	4635-4637	94	_	_
6-655	4637-4638	,	_	_
6-656	4639-4643	None	_	_
6-657	4643-4644	\]	_	_
6-658	4645-4646	-	_	_
6-659	4646-4647	f	_	_
6-660	4648-4649	'	_	_
6-661	4649-4666	biobj\_example.csv	_	_
6-662	4666-4667	'	_	_
6-663	4668-4669	-	_	_
6-664	4669-4670	l	_	_
6-665	4671-4676	False	_	_
6-666	4677-4678	`	_	_
6-667	4678-4679	`	_	_
6-668	4679-4680	`	_	_
6-669	4682-4683	\*	_	_
6-670	4683-4684	\*	_	_
6-671	4684-4685	\*	_	_
6-672	4686-4687	#	_	_
6-673	4687-4688	#	_	_
6-674	4689-4695	Pareto	_	_
6-675	4696-4704	Frontier	_	_
6-676	4705-4707	To	_	_
6-677	4708-4716	generate	_	_
6-678	4717-4720	the	_	_
6-679	4721-4727	Pareto	_	_
6-680	4728-4736	frontier	_	_
6-681	4737-4741	call	_	_
6-682	4742-4745	the	_	_
6-683	4746-4747	`	_	_
6-684	4747-4751	main	_	_
6-685	4751-4752	`	_	_
6-686	4753-4761	function	_	_
6-687	4762-4764	in	_	_
6-688	4765-4766	`	_	_
6-689	4766-4780	pareto\_runs.py	_	_
6-690	4780-4781	`	_	_
6-691	4782-4786	with	_	_
6-692	4787-4790	the	_	_
6-693	4791-4796	below	_	_
6-694	4797-4807	parameters	_	_
6-695	4807-4808	:	_	_
6-696	4811-4812	-	_	_
6-697	4813-4814	d	_	_
6-698	4815-4816	:	_	_
6-699	4817-4820	str	_	_
6-700	4821-4825	list	_	_
6-701	4825-4826	,	_	_
6-702	4827-4832	names	_	_
6-703	4833-4835	of	_	_
6-704	4836-4843	dataset	_	_
6-705	4844-4849	files	_	_
6-706	4852-4853	-	_	_
6-707	4854-4855	h	_	_
6-708	4856-4857	:	_	_
6-709	4858-4861	int	_	_
6-710	4861-4862	,	_	_
6-711	4863-4870	maximum	_	_
6-712	4871-4876	depth	_	_
6-713	4877-4879	of	_	_
6-714	4880-4887	trained	_	_
6-715	4888-4893	trees	_	_
6-716	4896-4897	-	_	_
6-717	4898-4899	t	_	_
6-718	4900-4901	:	_	_
6-719	4902-4907	float	_	_
6-720	4907-4908	,	_	_
6-721	4909-4915	gurobi	_	_
6-722	4916-4921	model	_	_
6-723	4922-4926	time	_	_
6-724	4927-4932	limit	_	_
6-725	4933-4935	in	_	_
6-726	4936-4937	s	_	_
6-727	4940-4941	-	_	_
6-728	4942-4943	m	_	_
6-729	4944-4945	:	_	_
6-730	4946-4949	str	_	_
6-731	4950-4954	list	_	_
6-732	4954-4955	,	_	_
6-733	4956-4962	models	_	_
6-734	4963-4965	to	_	_
6-735	4966-4969	use	_	_
6-736	4972-4973	-	_	_
6-737	4974-4975	r	_	_
6-738	4976-4977	:	_	_
6-739	4978-4981	str	_	_
6-740	4982-4986	list	_	_
6-741	4986-4987	,	_	_
6-742	4988-4994	random	_	_
6-743	4995-5000	state	_	_
6-744	5000-5001	(	_	_
6-745	5001-5002	s	_	_
6-746	5002-5003	)	_	_
6-747	5004-5006	to	_	_
6-748	5007-5010	use	_	_
6-749	5013-5014	-	_	_
6-750	5015-5016	f	_	_
6-751	5017-5018	:	_	_
6-752	5019-5022	str	_	_
6-753	5022-5023	,	_	_
6-754	5024-5031	results	_	_
6-755	5032-5038	output	_	_
6-756	5039-5043	file	_	_
6-757	5044-5045	.	_	_
6-758	5045-5048	csv	_	_
6-759	5050-5051	A	_	_
6-760	5052-5053	`	_	_
6-761	5053-5054	.	_	_
6-762	5054-5057	png	_	_
6-763	5057-5058	`	_	_
6-764	5059-5063	file	_	_
6-765	5064-5067	for	_	_
6-766	5068-5072	each	_	_
6-767	5073-5080	dataset	_	_
6-768	5081-5087	called	_	_
6-769	5088-5090	by	_	_
6-770	5091-5094	the	_	_
6-771	5095-5099	user	_	_
6-772	5100-5102	is	_	_
6-773	5103-5112	generated	_	_
6-774	5113-5116	and	_	_
6-775	5117-5123	stored	_	_
6-776	5124-5126	in	_	_
6-777	5127-5128	`	_	_
6-778	5128-5129	\\	_	_
6-779	5129-5144	results\_figures	_	_
6-780	5144-5145	\\	_	_
6-781	5145-5146	`	_	_
6-782	5147-5153	folder	_	_
6-783	5155-5157	We	_	_
6-784	5158-5164	assume	_	_
6-785	5165-5166	`	_	_
6-786	5166-5167	-	_	_
6-787	5167-5168	f	_	_
6-788	5169-5173	file	_	_
6-789	5173-5174	`	_	_
6-790	5175-5177	is	_	_
6-791	5178-5185	located	_	_
6-792	5186-5188	in	_	_
6-793	5189-5192	the	_	_
6-794	5193-5194	`	_	_
6-795	5194-5195	\\	_	_
6-796	5195-5208	results\_files	_	_
6-797	5208-5209	`	_	_
6-798	5210-5216	folder	_	_
6-799	5217-5218	-	_	_
6-800	5219-5221	If	_	_
6-801	5222-5229	results	_	_
6-802	5230-5236	output	_	_
6-803	5237-5241	file	_	_
6-804	5242-5243	`	_	_
6-805	5243-5244	-	_	_
6-806	5244-5245	f	_	_
6-807	5246-5250	file	_	_
6-808	5250-5251	`	_	_
6-809	5252-5254	is	_	_
6-810	5255-5256	`	_	_
6-811	5256-5260	None	_	_
6-812	5260-5261	`	_	_
6-813	5262-5265	the	_	_
6-814	5266-5267	`	_	_
6-815	5267-5273	pareto	_	_
6-816	5273-5274	`	_	_
6-817	5275-5283	function	_	_
6-818	5284-5297	automatically	_	_
6-819	5298-5307	generates	_	_
6-820	5308-5309	a	_	_
6-821	5310-5311	`	_	_
6-822	5311-5312	.	_	_
6-823	5312-5315	csv	_	_
6-824	5315-5316	`	_	_
6-825	5317-5324	results	_	_
6-826	5325-5329	file	_	_
6-827	5330-5334	with	_	_
6-828	5335-5338	the	_	_
6-829	5339-5349	parameters	_	_
6-830	5350-5352	of	_	_
6-831	5353-5356	the	_	_
6-832	5357-5365	function	_	_
6-833	5366-5370	call	_	_
6-834	5371-5373	as	_	_
6-835	5374-5377	the	_	_
6-836	5378-5382	file	_	_
6-837	5383-5387	name	_	_
6-838	5388-5393	saved	_	_
6-839	5394-5396	to	_	_
6-840	5397-5400	the	_	_
6-841	5401-5402	`	_	_
6-842	5402-5403	\\	_	_
6-843	5403-5416	results\_files	_	_
6-844	5416-5417	`	_	_
6-845	5418-5424	folder	_	_
6-846	5426-5429	You	_	_
6-847	5430-5433	can	_	_
6-848	5434-5442	generate	_	_
6-849	5443-5449	pareto	_	_
6-850	5450-5459	frontiers	_	_
6-851	5460-5464	from	_	_
6-852	5465-5471	within	_	_
6-853	5472-5473	a	_	_
6-854	5474-5480	python	_	_
6-855	5481-5485	file	_	_
6-856	5486-5488	as	_	_
6-857	5489-5496	follows	_	_
6-858	5496-5497	,	_	_
6-859	5499-5500	`	_	_
6-860	5500-5501	`	_	_
6-861	5501-5502	`	_	_
6-862	5502-5508	python	_	_
6-863	5509-5515	import	_	_
6-864	5516-5526	model\_runs	_	_
6-865	5528-5534	height	_	_
6-866	5535-5536	=	_	_
6-867	5537-5538	4	_	_
6-868	5539-5545	models	_	_
6-869	5546-5547	=	_	_
6-870	5548-5549	\[	_	_
6-871	5549-5550	'	_	_
6-872	5550-5557	FlowOCT	_	_
6-873	5557-5558	'	_	_
6-874	5558-5559	,	_	_
6-875	5560-5561	'	_	_
6-876	5561-5565	MCF1	_	_
6-877	5565-5566	'	_	_
6-878	5566-5567	,	_	_
6-879	5568-5569	'	_	_
6-880	5569-5573	MCF2	_	_
6-881	5573-5574	'	_	_
6-882	5574-5575	,	_	_
6-883	5576-5577	'	_	_
6-884	5577-5581	CUT1	_	_
6-885	5581-5582	'	_	_
6-886	5582-5583	,	_	_
6-887	5584-5585	'	_	_
6-888	5585-5589	CUT2	_	_
6-889	5589-5590	'	_	_
6-890	5590-5591	\]	_	_
6-891	5592-5603	rand\_states	_	_
6-892	5604-5605	=	_	_
6-893	5606-5607	\[	_	_
6-894	5607-5609	15	_	_
6-895	5609-5610	,	_	_
6-896	5611-5613	78	_	_
6-897	5613-5614	,	_	_
6-898	5615-5616	0	_	_
6-899	5616-5617	\]	_	_
6-900	5618-5628	data\_names	_	_
6-901	5629-5630	=	_	_
6-902	5631-5632	\[	_	_
6-903	5632-5633	'	_	_
6-904	5633-5643	hayes\_roth	_	_
6-905	5643-5644	'	_	_
6-906	5644-5645	,	_	_
6-907	5646-5647	'	_	_
6-908	5647-5658	house\_votes	_	_
6-909	5658-5659	\_	_	_
6-910	5659-5661	84	_	_
6-911	5661-5662	'	_	_
6-912	5662-5663	\]	_	_
6-913	5664-5668	file	_	_
6-914	5669-5670	=	_	_
6-915	5671-5672	'	_	_
6-916	5672-5690	pareto\_example.csv	_	_
6-917	5690-5691	'	_	_
6-918	5692-5709	model\_runs.pareto	_	_
6-919	5709-5710	(	_	_
6-920	5710-5711	\[	_	_
6-921	5711-5712	"	_	_
6-922	5712-5713	-	_	_
6-923	5713-5714	d	_	_
6-924	5714-5715	"	_	_
6-925	5715-5716	,	_	_
6-926	5717-5727	data\_names	_	_
6-927	5727-5728	,	_	_
6-928	5729-5730	"	_	_
6-929	5730-5731	-	_	_
6-930	5731-5732	h	_	_
6-931	5732-5733	"	_	_
6-932	5733-5734	,	_	_
6-933	5735-5741	height	_	_
6-934	5741-5742	,	_	_
6-935	5743-5744	"	_	_
6-936	5744-5745	-	_	_
6-937	5745-5746	m	_	_
6-938	5746-5747	"	_	_
6-939	5747-5748	,	_	_
6-940	5749-5755	models	_	_
6-941	5755-5756	,	_	_
6-942	5757-5758	"	_	_
6-943	5758-5759	-	_	_
6-944	5759-5760	t	_	_
6-945	5760-5761	"	_	_
6-946	5761-5762	,	_	_
6-947	5763-5767	3600	_	_
6-948	5767-5768	,	_	_
6-949	5769-5770	"	_	_
6-950	5770-5771	-	_	_
6-951	5771-5772	r	_	_
6-952	5772-5773	"	_	_
6-953	5773-5774	,	_	_
6-954	5775-5786	rand\_states	_	_
6-955	5786-5787	,	_	_
6-956	5788-5789	"	_	_
6-957	5789-5790	-	_	_
6-958	5790-5791	f	_	_
6-959	5791-5792	"	_	_
6-960	5792-5793	,	_	_
6-961	5794-5798	file	_	_
6-962	5798-5799	\]	_	_
6-963	5799-5800	)	_	_
6-964	5801-5802	`	_	_
6-965	5802-5803	`	_	_
6-966	5803-5804	`	_	_
6-967	5806-5808	To	_	_
6-968	5809-5812	run	_	_
6-969	5813-5817	from	_	_
6-970	5818-5826	terminal	_	_
6-971	5827-5829	do	_	_
6-972	5830-5833	the	_	_
6-973	5834-5843	following	_	_
6-974	5845-5846	`	_	_
6-975	5846-5847	`	_	_
6-976	5847-5848	`	_	_
6-977	5848-5852	bash	_	_
6-978	5853-5860	python3	_	_
6-979	5861-5867	import	_	_
6-980	5868-5878	model\_runs	_	_
6-981	5878-5879	\;	_	_
6-982	5880-5897	model\_runs.pareto	_	_
6-983	5898-5899	-	_	_
6-984	5899-5900	d	_	_
6-985	5901-5902	\[	_	_
6-986	5902-5903	'	_	_
6-987	5903-5913	hayes\_roth	_	_
6-988	5913-5914	'	_	_
6-989	5914-5915	,	_	_
6-990	5916-5917	'	_	_
6-991	5917-5928	house\_votes	_	_
6-992	5928-5929	\_	_	_
6-993	5929-5931	84	_	_
6-994	5931-5932	'	_	_
6-995	5932-5933	\]	_	_
6-996	5934-5935	-	_	_
6-997	5935-5936	h	_	_
6-998	5937-5938	4	_	_
6-999	5939-5940	-	_	_
6-1000	5940-5941	m	_	_
6-1001	5942-5943	\[	_	_
6-1002	5943-5944	'	_	_
6-1003	5944-5948	FOCT	_	_
6-1004	5948-5949	'	_	_
6-1005	5949-5950	,	_	_
6-1006	5951-5952	'	_	_
6-1007	5952-5956	MCF1	_	_
6-1008	5956-5957	'	_	_
6-1009	5957-5958	,	_	_
6-1010	5959-5960	'	_	_
6-1011	5960-5964	MCF2	_	_
6-1012	5964-5965	'	_	_
6-1013	5965-5966	,	_	_
6-1014	5967-5968	'	_	_
6-1015	5968-5972	CUT1	_	_
6-1016	5972-5973	'	_	_
6-1017	5973-5974	,	_	_
6-1018	5975-5976	'	_	_
6-1019	5976-5980	CUT2	_	_
6-1020	5980-5981	'	_	_
6-1021	5981-5982	\]	_	_
6-1022	5983-5984	-	_	_
6-1023	5984-5985	t	_	_
6-1024	5986-5990	3600	_	_
6-1025	5991-5992	-	_	_
6-1026	5992-5993	r	_	_
6-1027	5994-5995	\[	_	_
6-1028	5995-5997	15	_	_
6-1029	5997-5998	,	_	_
6-1030	5999-6001	78	_	_
6-1031	6001-6002	,	_	_
6-1032	6003-6004	0	_	_
6-1033	6004-6005	\]	_	_
6-1034	6006-6007	-	_	_
6-1035	6007-6008	f	_	_
6-1036	6009-6010	'	_	_
6-1037	6010-6028	pareto\_example.csv	_	_
6-1038	6028-6029	'	_	_
6-1039	6030-6031	`	_	_
6-1040	6031-6032	`	_	_
6-1041	6032-6033	`	_	_
6-1042	6034-6035	-	_	_
6-1043	6036-6040	Note	_	_
6-1044	6040-6041	:	_	_
6-1045	6042-6043	`	_	_
6-1046	6043-6050	FlowOCT	_	_
6-1047	6050-6051	`	_	_
6-1048	6052-6056	must	_	_
6-1049	6057-6059	be	_	_
6-1050	6060-6063	the	_	_
6-1051	6064-6069	model	_	_
6-1052	6070-6074	name	_	_
6-1053	6075-6077	to	_	_
6-1054	6078-6086	generate	_	_
6-1055	6087-6090	the	_	_
6-1056	6091-6097	pareto	_	_
6-1057	6098-6106	frontier	_	_
6-1058	6107-6109	of	_	_
6-1059	6110-6117	FlowOCT	_	_
6-1060	6118-6119	\*	_	_
6-1061	6119-6120	\*	_	_
6-1062	6120-6121	\*	_	_
6-1063	6123-6124	#	_	_
6-1064	6124-6125	#	_	_
6-1065	6126-6132	Models	_	_
6-1066	6133-6146	Functionality	_	_
6-1067	6147-6150	For	_	_
6-1068	6151-6164	understanding	_	_
6-1069	6165-6170	model	_	_
6-1070	6171-6184	functionality	_	_
6-1071	6185-6195	associated	_	_
6-1072	6196-6200	with	_	_
6-1073	6201-6208	integer	_	_
6-1074	6209-6212	and	_	_
6-1075	6213-6223	fractional	_	_
6-1076	6224-6234	separation	_	_
6-1077	6235-6245	procedures	_	_
6-1078	6246-6248	in	_	_
6-1079	6249-6250	\*	_	_
6-1080	6250-6251	\*	_	_
6-1081	6251-6255	CUT1	_	_
6-1082	6255-6256	\*	_	_
6-1083	6256-6257	\*	_	_
6-1084	6258-6261	and	_	_
6-1085	6262-6263	\*	_	_
6-1086	6263-6264	\*	_	_
6-1087	6264-6268	CUT2	_	_
6-1088	6268-6269	\*	_	_
6-1089	6269-6270	\*	_	_
6-1090	6271-6277	models	_	_
6-1091	6277-6278	,	_	_
6-1092	6279-6280	`	_	_
6-1093	6280-6281	-	_	_
6-1094	6281-6282	e	_	_
6-1095	6283-6295	model\_extras	_	_
6-1096	6295-6296	`	_	_
6-1097	6297-6300	and	_	_
6-1098	6301-6302	`	_	_
6-1099	6302-6303	-	_	_
6-1100	6303-6304	c	_	_
6-1101	6305-6311	tuning	_	_
6-1102	6311-6312	`	_	_
6-1103	6313-6326	functionality	_	_
6-1104	6327-6333	please	_	_
6-1105	6334-6339	refer	_	_
6-1106	6340-6342	to	_	_
6-1107	6343-6346	the	_	_
6-1108	6347-6348	`	_	_
6-1109	6348-6356	USAGE.md	_	_
6-1110	6356-6357	`	_	_
6-1111	6358-6362	file	_	_
6-1112	6362-6363	.	_	_

#Text=`example\_code.py` contains additional instances of the above and how to call `OBCT` directly without using `model\_runs.py` \*\*\*  ## Acknowledgments The code found in `BendersOCT.py`, `FlowOCT.py`, `FlowOCTTree.py,` and `FlowOCTutils.py` are taken directly from the \[Strong Tree\](https://github.com/pashew94/StrongTree/) GitHub public repository.
7-1	6367-6368	`	_	_
7-2	6368-6383	example\_code.py	_	_
7-3	6383-6384	`	_	_
7-4	6385-6393	contains	_	_
7-5	6394-6404	additional	_	_
7-6	6405-6414	instances	_	_
7-7	6415-6417	of	_	_
7-8	6418-6421	the	_	_
7-9	6422-6427	above	_	_
7-10	6428-6431	and	_	_
7-11	6432-6435	how	_	_
7-12	6436-6438	to	_	_
7-13	6439-6443	call	_	_
7-14	6444-6445	`	_	_
7-15	6445-6449	OBCT	_	_
7-16	6449-6450	`	_	_
7-17	6451-6459	directly	_	_
7-18	6460-6467	without	_	_
7-19	6468-6473	using	_	_
7-20	6474-6475	`	_	_
7-21	6475-6488	model\_runs.py	_	_
7-22	6488-6489	`	_	_
7-23	6490-6491	\*	_	_
7-24	6491-6492	\*	_	_
7-25	6492-6493	\*	_	_
7-26	6495-6496	#	_	_
7-27	6496-6497	#	_	_
7-28	6498-6513	Acknowledgments	_	_
7-29	6514-6517	The	_	_
7-30	6518-6522	code	_	_
7-31	6523-6528	found	_	_
7-32	6529-6531	in	_	_
7-33	6532-6533	`	_	_
7-34	6533-6546	BendersOCT.py	_	_
7-35	6546-6547	`	_	_
7-36	6547-6548	,	_	_
7-37	6549-6550	`	_	_
7-38	6550-6560	FlowOCT.py	_	_
7-39	6560-6561	`	_	_
7-40	6561-6562	,	_	_
7-41	6563-6564	`	_	_
7-42	6564-6578	FlowOCTTree.py	_	_
7-43	6578-6579	,	*[60]	LICENSE[60]
7-44	6579-6580	`	*[60]	LICENSE[60]
7-45	6581-6584	and	*[60]	LICENSE[60]
7-46	6585-6586	`	*[60]	LICENSE[60]
7-47	6586-6601	FlowOCTutils.py	*[60]	LICENSE[60]
7-48	6601-6602	`	*[60]	LICENSE[60]
7-49	6603-6606	are	*[60]	LICENSE[60]
7-50	6607-6612	taken	*[60]	LICENSE[60]
7-51	6613-6621	directly	*[60]	LICENSE[60]
7-52	6622-6626	from	*[60]	LICENSE[60]
7-53	6627-6630	the	*[60]	LICENSE[60]
7-54	6631-6632	\[	*[60]	LICENSE[60]
7-55	6632-6638	Strong	*[60]	LICENSE[60]
7-56	6639-6643	Tree	*[60]	LICENSE[60]
7-57	6643-6644	\]	*[60]	LICENSE[60]
7-58	6644-6645	(	*[60]	LICENSE[60]
7-59	6645-6650	https	*[60]	LICENSE[60]
7-60	6650-6651	:	*[60]	LICENSE[60]
7-61	6651-6652	/	*[60]	LICENSE[60]
7-62	6652-6653	/	*[60]	LICENSE[60]
7-63	6653-6663	github.com	*[60]	LICENSE[60]
7-64	6663-6664	/	*[60]	LICENSE[60]
7-65	6664-6672	pashew94	*[60]	LICENSE[60]
7-66	6672-6673	/	*[60]	LICENSE[60]
7-67	6673-6683	StrongTree	*[60]	LICENSE[60]
7-68	6683-6684	/	*[60]	LICENSE[60]
7-69	6684-6685	)	*[60]	LICENSE[60]
7-70	6686-6692	GitHub	*[60]	LICENSE[60]
7-71	6693-6699	public	*[60]	LICENSE[60]
7-72	6700-6710	repository	*[60]	LICENSE[60]
7-73	6710-6711	.	_	_

#Text=The code found in `Quant-BnB-2D.jl`, `Quant-BnB-3D.jl`, `Algorithms.jl`, `lowerbound\_middle.jl` are taken directly from the \[Quant-BnB\](https://github.com/mengxianglgal/Quant-BnB) GitHub public repository.
8-1	6712-6715	The	_	_
8-2	6716-6720	code	_	_
8-3	6721-6726	found	_	_
8-4	6727-6729	in	*[60]	DATASET[60]
8-5	6730-6731	`	*[60]	DATASET[60]
8-6	6731-6740	Quant-BnB	*[60]	DATASET[60]
8-7	6740-6741	-	*[60]	DATASET[60]
8-8	6741-6746	2D.jl	*[60]	DATASET[60]
8-9	6746-6747	`	*[60]	DATASET[60]
8-10	6747-6748	,	*[60]	DATASET[60]
8-11	6749-6750	`	*[60]	DATASET[60]
8-12	6750-6759	Quant-BnB	*[60]	DATASET[60]
8-13	6759-6760	-	*[60]	DATASET[60]
8-14	6760-6765	3D.jl	*[60]	DATASET[60]
8-15	6765-6766	`	*[60]	DATASET[60]
8-16	6766-6767	,	*[60]	DATASET[60]
8-17	6768-6769	`	*[60]	DATASET[60]
8-18	6769-6782	Algorithms.jl	*[60]	DATASET[60]
8-19	6782-6783	`	*[60]	DATASET[60]
8-20	6783-6784	,	*[60]	DATASET[60]
8-21	6785-6786	`	*[60]	DATASET[60]
8-22	6786-6806	lowerbound\_middle.jl	*[60]	DATASET[60]
8-23	6806-6807	`	*[60]	DATASET[60]
8-24	6808-6811	are	*[60]	DATASET[60]
8-25	6812-6817	taken	*[60]	DATASET[60]
8-26	6818-6826	directly	*[60]	DATASET[60]
8-27	6827-6831	from	*[60]	DATASET[60]
8-28	6832-6835	the	*[60]	DATASET[60]
8-29	6836-6837	\[	*[60]	DATASET[60]
8-30	6837-6846	Quant-BnB	*[60]	DATASET[60]
8-31	6846-6847	\]	*[60]	DATASET[60]
8-32	6847-6848	(	*[60]	DATASET[60]
8-33	6848-6853	https	*[60]	DATASET[60]
8-34	6853-6854	:	*[60]	DATASET[60]
8-35	6854-6855	/	*[60]	DATASET[60]
8-36	6855-6856	/	*[60]	DATASET[60]
8-37	6856-6866	github.com	*[60]	DATASET[60]
8-38	6866-6867	/	*[60]	DATASET[60]
8-39	6867-6880	mengxianglgal	*[60]	DATASET[60]
8-40	6880-6881	/	*[60]	DATASET[60]
8-41	6881-6890	Quant-BnB	_	_
8-42	6890-6891	)	_	_
8-43	6892-6898	GitHub	_	_
8-44	6899-6905	public	_	_
8-45	6906-6916	repository	_	_
8-46	6916-6917	.	_	_

#Text=All rights and ownership are to the original owners.   \*\*\* \*\*\*  !
9-1	6919-6922	All	_	_
9-2	6923-6929	rights	_	_
9-3	6930-6933	and	_	_
9-4	6934-6943	ownership	_	_
9-5	6944-6947	are	_	_
9-6	6948-6950	to	_	_
9-7	6951-6954	the	_	_
9-8	6955-6963	original	_	_
9-9	6964-6970	owners	_	_
9-10	6970-6971	.	_	_
9-11	6974-6975	\*	_	_
9-12	6975-6976	\*	_	_
9-13	6976-6977	\*	_	_
9-14	6978-6979	\*	_	_
9-15	6979-6980	\*	_	_
9-16	6980-6981	\*	_	_
9-17	6983-6984	!	_	_

#Text=\[Screenshot\](cmor\_logo.png)
10-1	6984-6985	\[	_	_
10-2	6985-6995	Screenshot	_	_
10-3	6995-6996	\]	_	_
10-4	6996-6997	(	_	_
10-5	6997-7010	cmor\_logo.png	_	_
10-6	7010-7011	)	_	_