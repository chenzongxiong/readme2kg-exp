#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=!
1-1	0-1	!	_	_

#Text=\[Tulip Software\](http://tulip.labri.fr/TulipDrupal/sites/default/files/logo\_web.png)  # Graph Algorithms for \[Tulip Software\](https://github.com/Tulip-Dev/tulip)  > Tulip is an information visualization framework dedicated to the analysis and visualization of relational data.
2-1	1-2	\[	_	_
2-2	2-7	Tulip	_	_
2-3	8-16	Software	_	_
2-4	16-17	\]	_	_
2-5	17-18	(	_	_
2-6	18-22	http	_	_
2-7	22-23	:	_	_
2-8	23-24	/	_	_
2-9	24-25	/	_	_
2-10	25-39	tulip.labri.fr	_	_
2-10	25-30	tulip	_	_
2-11	39-40	/	_	_
2-12	40-51	TulipDrupal	_	_
2-12	40-45	Tulip	_	_
2-13	51-52	/	_	_
2-14	52-57	sites	_	_
2-15	57-58	/	_	_
2-16	58-65	default	_	_
2-17	65-66	/	_	_
2-18	66-71	files	_	_
2-19	71-72	/	_	_
2-20	72-84	logo\_web.png	_	_
2-21	84-85	)	_	_
2-22	87-88	#	_	_
2-23	89-94	Graph	_	_
2-24	95-105	Algorithms	_	_
2-25	106-109	for	_	_
2-26	110-111	\[	_	_
2-27	111-116	Tulip	_	_
2-28	117-125	Software	_	_
2-29	125-126	\]	_	_
2-30	126-127	(	_	_
2-31	127-132	https	_	_
2-32	132-133	:	_	_
2-33	133-134	/	_	_
2-34	134-135	/	_	_
2-35	135-145	github.com	_	_
2-36	145-146	/	_	_
2-37	146-155	Tulip-Dev	_	_
2-37	146-151	Tulip	_	_
2-38	155-156	/	_	_
2-39	156-161	tulip	_	_
2-40	161-162	)	_	_
2-41	164-165	>	_	_
2-42	166-171	Tulip	_	_
2-43	172-174	is	_	_
2-44	175-177	an	_	_
2-45	178-189	information	_	_
2-46	190-203	visualization	_	_
2-47	204-213	framework	_	_
2-48	214-223	dedicated	_	_
2-49	224-226	to	_	_
2-50	227-230	the	_	_
2-51	231-239	analysis	*[178]	EVALMETRIC[178]
2-52	240-243	and	*[178]	EVALMETRIC[178]
2-53	244-257	visualization	_	_
2-54	258-260	of	_	_
2-55	261-271	relational	_	_
2-56	272-276	data	_	_
2-57	276-277	.	_	_

#Text=Tulip aims to provide the developer with a complete library, supporting the design of interactive information visualization applications for relational data that can be tailored to the problems he or she is addressing.
3-1	278-283	Tulip	_	_
3-2	284-288	aims	_	_
3-3	289-291	to	_	_
3-4	292-299	provide	_	_
3-5	300-303	the	_	_
3-6	304-313	developer	_	_
3-7	314-318	with	_	_
3-8	319-320	a	_	_
3-9	321-329	complete	_	_
3-10	330-337	library	_	_
3-11	337-338	,	_	_
3-12	339-349	supporting	_	_
3-13	350-353	the	_	_
3-14	354-360	design	_	_
3-15	361-363	of	_	_
3-16	364-375	interactive	_	_
3-17	376-387	information	_	_
3-18	388-401	visualization	_	_
3-19	402-414	applications	_	_
3-20	415-418	for	_	_
3-21	419-429	relational	_	_
3-22	430-434	data	_	_
3-23	435-439	that	*[157]	ONTOLOGY[157]
3-24	440-443	can	*[157]	ONTOLOGY[157]
3-25	444-446	be	*[157]	ONTOLOGY[157]
3-26	447-455	tailored	*[157]	ONTOLOGY[157]
3-27	456-458	to	*[157]	ONTOLOGY[157]
3-28	459-462	the	*[157]	ONTOLOGY[157]
3-29	463-471	problems	*[157]	ONTOLOGY[157]
3-30	472-474	he	*[157]	ONTOLOGY[157]
3-31	475-477	or	*[157]	ONTOLOGY[157]
3-32	478-481	she	*[157]	ONTOLOGY[157]
3-33	482-484	is	*[157]	ONTOLOGY[157]
3-34	485-495	addressing	_	_
3-35	495-496	.	_	_

#Text=Find more info \[here\](https://github.com/Tulip-Dev/tulip).
4-1	498-502	Find	_	_
4-2	503-507	more	_	_
4-3	508-512	info	_	_
4-4	513-514	\[	_	_
4-5	514-518	here	_	_
4-6	518-519	\]	_	_
4-7	519-520	(	_	_
4-8	520-525	https	_	_
4-9	525-526	:	_	_
4-10	526-527	/	_	_
4-11	527-528	/	_	_
4-12	528-538	github.com	_	_
4-13	538-539	/	*[146]	DATASET[146]
4-14	539-548	Tulip-Dev	*[146]	DATASET[146]
4-14	539-544	Tulip	_	_
4-15	548-549	/	_	_
4-16	549-554	tulip	_	_
4-17	554-555	)	_	_
4-18	555-556	.	_	_

#Text=This page contains Tulip plugins using \[Tulip API\](http://tulip.labri.fr/Documentation/current/doxygen/html/index.html) or \[Tulip Python API\](http://tulip.labri.fr/Documentation/current/tulip-python/html).
5-1	558-562	This	_	_
5-2	563-567	page	_	_
5-3	568-576	contains	*[147]	DATASET[147]
5-4	577-582	Tulip	*[147]	DATASET[147]
5-5	583-590	plugins	*[147]	DATASET[147]
5-6	591-596	using	*[147]	DATASET[147]
5-7	597-598	\[	*[147]	DATASET[147]
5-8	598-603	Tulip	*[147]	DATASET[147]
5-9	604-607	API	*[147]	DATASET[147]
5-10	607-608	\]	*[147]	DATASET[147]
5-11	608-609	(	*[147]	DATASET[147]
5-12	609-613	http	*[147]	DATASET[147]
5-13	613-614	:	*[147]	DATASET[147]
5-14	614-615	/	*[147]	DATASET[147]
5-15	615-616	/	*[147]	DATASET[147]
5-16	616-630	tulip.labri.fr	*[147]	DATASET[147]
5-16	616-621	tulip	*[147]	DATASET[147]
5-17	630-631	/	*[147]	DATASET[147]
5-18	631-644	Documentation	*[147]	DATASET[147]
5-19	644-645	/	*[147]	DATASET[147]
5-20	645-652	current	*[147]	DATASET[147]
5-21	652-653	/	*[147]	DATASET[147]
5-22	653-660	doxygen	*[147]	DATASET[147]
5-23	660-661	/	*[147]	DATASET[147]
5-24	661-665	html	*[147]	DATASET[147]
5-25	665-666	/	*[147]	DATASET[147]
5-26	666-676	index.html	*[147]	DATASET[147]
5-27	676-677	)	*[147]	DATASET[147]
5-28	678-680	or	*[147]	DATASET[147]
5-29	681-682	\[	*[147]	DATASET[147]
5-30	682-687	Tulip	*[147]	DATASET[147]
5-31	688-694	Python	*[147]	DATASET[147]
5-32	695-698	API	*[147]	DATASET[147]
5-33	698-699	\]	*[147]	DATASET[147]
5-34	699-700	(	*[147]	DATASET[147]
5-35	700-704	http	*[147]	DATASET[147]
5-36	704-705	:	*[147]	DATASET[147]
5-37	705-706	/	*[147]	DATASET[147]
5-38	706-707	/	*[147]	DATASET[147]
5-39	707-721	tulip.labri.fr	*[147]	DATASET[147]
5-39	707-712	tulip	_	_
5-40	721-722	/	_	_
5-41	722-735	Documentation	_	_
5-42	735-736	/	_	_
5-43	736-743	current	_	_
5-44	743-744	/	_	_
5-45	744-756	tulip-python	_	_
5-45	744-749	tulip	_	_
5-45	750-756	python	_	_
5-46	756-757	/	_	_
5-47	757-761	html	_	_
5-48	761-762	)	_	_
5-49	762-763	.	_	_

#Text=They are implementation of well-known (or less-known) graph algorithms and network analysis methods.  ## \[Transportation Networks Design\](https://github.com/fqueyroi/tulip\_plugins/tree/master/TransportationNetworks)  Directory "TransportationNetworks" contains two transportation network construction algorithms
6-1	764-768	They	_	_
6-2	769-772	are	_	_
6-3	773-787	implementation	_	_
6-4	788-790	of	_	_
6-5	791-801	well-known	_	_
6-6	802-803	(	_	_
6-7	803-805	or	_	_
6-8	806-816	less-known	_	_
6-9	816-817	)	_	_
6-10	818-823	graph	_	_
6-11	824-834	algorithms	_	_
6-12	835-838	and	_	_
6-13	839-846	network	_	_
6-14	847-855	analysis	_	_
6-15	856-863	methods	_	_
6-16	863-864	.	_	_
6-17	866-867	#	*[162]	EVALMETRIC[162]
6-18	867-868	#	*[162]	EVALMETRIC[162]
6-19	869-870	\[	*[162]	EVALMETRIC[162]
6-20	870-884	Transportation	*[162]	EVALMETRIC[162]
6-21	885-893	Networks	*[162]	EVALMETRIC[162]
6-22	894-900	Design	*[162]	EVALMETRIC[162]
6-23	900-901	\]	*[162]	EVALMETRIC[162]
6-24	901-902	(	*[162]	EVALMETRIC[162]
6-25	902-907	https	*[162]	EVALMETRIC[162]
6-26	907-908	:	*[162]	EVALMETRIC[162]
6-27	908-909	/	*[162]	EVALMETRIC[162]
6-28	909-910	/	*[162]	EVALMETRIC[162]
6-29	910-920	github.com	_	_
6-30	920-921	/	_	_
6-31	921-929	fqueyroi	_	_
6-32	929-930	/	_	_
6-33	930-943	tulip\_plugins	_	_
6-33	930-935	tulip	_	_
6-34	943-944	/	_	_
6-35	944-948	tree	_	_
6-36	948-949	/	_	_
6-37	949-955	master	_	_
6-38	955-956	/	_	_
6-39	956-978	TransportationNetworks	_	_
6-40	978-979	)	_	_
6-41	981-990	Directory	_	_
6-42	991-992	"	_	_
6-43	992-1014	TransportationNetworks	_	_
6-44	1014-1015	"	_	_
6-45	1016-1024	contains	_	_
6-46	1025-1028	two	_	_
6-47	1029-1043	transportation	_	_
6-48	1044-1051	network	_	_
6-49	1052-1064	construction	_	_
6-50	1065-1075	algorithms	_	_

#Text=.
7-1	1075-1076	.	_	_

#Text=- SPRouting: use iterative shortest-path routing of flow - PhysariumSolver: use biologically inspired routing and edge length update.
8-1	1078-1079	-	_	_
8-2	1080-1089	SPRouting	_	_
8-3	1089-1090	:	_	_
8-4	1091-1094	use	_	_
8-5	1095-1104	iterative	_	_
8-6	1105-1118	shortest-path	_	_
8-7	1119-1126	routing	_	_
8-8	1127-1129	of	_	_
8-9	1130-1134	flow	_	_
8-10	1135-1136	-	_	_
8-11	1137-1152	PhysariumSolver	_	_
8-12	1152-1153	:	_	_
8-13	1154-1157	use	_	_
8-14	1158-1170	biologically	_	_
8-15	1171-1179	inspired	_	_
8-16	1180-1187	routing	_	_
8-17	1188-1191	and	_	_
8-18	1192-1196	edge	_	_
8-19	1197-1203	length	_	_
8-20	1204-1210	update	_	_
8-21	1210-1211	.	_	_

#Text=The two algorithm only differ in the way flows are routed along the networks.
9-1	1213-1216	The	_	_
9-2	1217-1220	two	_	_
9-3	1221-1230	algorithm	_	_
9-4	1231-1235	only	_	_
9-5	1236-1242	differ	_	_
9-6	1243-1245	in	_	_
9-7	1246-1249	the	_	_
9-8	1250-1253	way	_	_
9-9	1254-1259	flows	_	_
9-10	1260-1263	are	_	_
9-11	1264-1270	routed	_	_
9-12	1271-1276	along	_	_
9-13	1277-1280	the	_	_
9-14	1281-1289	networks	_	_
9-15	1289-1290	.	_	_

#Text=For more details, check   > Queyroi, F. (2018).
10-1	1291-1294	For	_	_
10-2	1295-1299	more	_	_
10-3	1300-1307	details	_	_
10-4	1307-1308	,	*[148]	DATASET[148]
10-5	1309-1314	check	*[148]	DATASET[148]
10-6	1317-1318	>	*[148]	DATASET[148]
10-7	1319-1326	Queyroi	_	_
10-8	1326-1327	,	_	_
10-9	1328-1329	F	_	_
10-10	1329-1330	.	_	_
10-11	1331-1332	(	_	_
10-12	1332-1336	2018	_	_
10-13	1336-1337	)	_	_
10-14	1337-1338	.	_	_

#Text=Biological and Shortest-Path Routing Procedures for Transportation Network Design. arXiv preprint \[arXiv:1803.03528\](https://arxiv.org/abs/1803.03528).  ## Clustering  ### \[Cliques\](https://github.com/fqueyroi/tulip\_plugins/tree/master/Cliques)  A plugin to enumerate all \[maximal cliques\](https://en.wikipedia.org/wiki/Clique\_(graph\_theory)) in the graph.
11-1	1339-1349	Biological	_	_
11-2	1350-1353	and	_	_
11-3	1354-1367	Shortest-Path	_	_
11-4	1368-1375	Routing	_	_
11-5	1376-1386	Procedures	_	_
11-6	1387-1390	for	_	_
11-7	1391-1405	Transportation	_	_
11-8	1406-1413	Network	_	_
11-9	1414-1420	Design	_	_
11-10	1420-1421	.	_	_
11-11	1422-1427	arXiv	_	_
11-12	1428-1436	preprint	_	_
11-13	1437-1438	\[	_	_
11-14	1438-1443	arXiv	_	_
11-15	1443-1444	:	_	_
11-16	1444-1454	1803.03528	_	_
11-17	1454-1455	\]	_	_
11-18	1455-1456	(	_	_
11-19	1456-1461	https	_	_
11-20	1461-1462	:	_	_
11-21	1462-1463	/	_	_
11-22	1463-1464	/	_	_
11-23	1464-1473	arxiv.org	_	_
11-24	1473-1474	/	_	_
11-25	1474-1477	abs	_	_
11-26	1477-1478	/	_	_
11-27	1478-1488	1803.03528	_	_
11-28	1488-1489	)	*[151]	CONFERENCE[151]
11-29	1489-1490	.	*[151]	CONFERENCE[151]
11-30	1492-1493	#	*[151]	CONFERENCE[151]
11-31	1493-1494	#	*[151]	CONFERENCE[151]
11-32	1495-1505	Clustering	*[151]	CONFERENCE[151]
11-33	1507-1508	#	*[151]	CONFERENCE[151]
11-34	1508-1509	#	*[151]	CONFERENCE[151]
11-35	1509-1510	#	*[151]	CONFERENCE[151]
11-36	1511-1512	\[	*[151]	CONFERENCE[151]
11-37	1512-1519	Cliques	*[151]	CONFERENCE[151]
11-38	1519-1520	\]	*[151]	CONFERENCE[151]
11-39	1520-1521	(	*[151]	CONFERENCE[151]
11-40	1521-1526	https	*[151]	CONFERENCE[151]
11-41	1526-1527	:	*[151]	CONFERENCE[151]
11-42	1527-1528	/	*[151]	CONFERENCE[151]
11-43	1528-1529	/	*[151]	CONFERENCE[151]
11-44	1529-1539	github.com	*[151]	CONFERENCE[151]
11-45	1539-1540	/	*[151]	CONFERENCE[151]
11-46	1540-1548	fqueyroi	*[151]	CONFERENCE[151]
11-47	1548-1549	/	*[151]	CONFERENCE[151]
11-48	1549-1562	tulip\_plugins	*[151]	CONFERENCE[151]
11-48	1549-1554	tulip	*[151]	CONFERENCE[151]
11-49	1562-1563	/	*[151]	CONFERENCE[151]
11-50	1563-1567	tree	*[151]	CONFERENCE[151]
11-51	1567-1568	/	*[151]	CONFERENCE[151]
11-52	1568-1574	master	*[151]	CONFERENCE[151]
11-53	1574-1575	/	*[151]	CONFERENCE[151]
11-54	1575-1582	Cliques	*[151]	CONFERENCE[151]
11-55	1582-1583	)	*[151]	CONFERENCE[151]
11-56	1585-1586	A	*[151]	CONFERENCE[151]
11-57	1587-1593	plugin	*[151]	CONFERENCE[151]
11-58	1594-1596	to	*[151]	CONFERENCE[151]
11-59	1597-1606	enumerate	*[151]	CONFERENCE[151]
11-60	1607-1610	all	*[151]	CONFERENCE[151]
11-61	1611-1612	\[	*[151]	CONFERENCE[151]
11-62	1612-1619	maximal	*[151]	CONFERENCE[151]
11-63	1620-1627	cliques	*[151]	CONFERENCE[151]
11-64	1627-1628	\]	*[151]	CONFERENCE[151]
11-65	1628-1629	(	*[151]	CONFERENCE[151]
11-66	1629-1634	https	*[151]	CONFERENCE[151]
11-67	1634-1635	:	*[151]	CONFERENCE[151]
11-68	1635-1636	/	*[151]	CONFERENCE[151]
11-69	1636-1637	/	*[151]	CONFERENCE[151]
11-70	1637-1653	en.wikipedia.org	*[151]	CONFERENCE[151]
11-71	1653-1654	/	*[151]	CONFERENCE[151]
11-72	1654-1658	wiki	*[151]	CONFERENCE[151]
11-73	1658-1659	/	*[151]	CONFERENCE[151]
11-74	1659-1665	Clique	*[151]	CONFERENCE[151]
11-75	1665-1666	\_	*[151]	CONFERENCE[151]
11-76	1666-1667	(	*[151]	CONFERENCE[151]
11-77	1667-1679	graph\_theory	*[151]	CONFERENCE[151]
11-78	1679-1680	)	*[151]	CONFERENCE[151]
11-79	1680-1681	)	*[151]	CONFERENCE[151]
11-80	1682-1684	in	*[151]	CONFERENCE[151]
11-81	1685-1688	the	*[151]	CONFERENCE[151]
11-82	1689-1694	graph	*[151]	CONFERENCE[151]
11-83	1694-1695	.	_	_

#Text=It uses \[the algorithm of Eppstein \*et al.\*\](https://arxiv.org/abs/1006.5440) : vertices are ordered using their degeneracy value (the \[K-Cores plugin\](https://github.com/Tulip-Dev/tulip/blob/master/plugins/metric/KCores.cpp) in Tulip) in order to speed up the enumeration.
12-1	1696-1698	It	_	_
12-2	1699-1703	uses	_	_
12-3	1704-1705	\[	_	_
12-4	1705-1708	the	_	_
12-5	1709-1718	algorithm	_	_
12-6	1719-1721	of	_	_
12-7	1722-1730	Eppstein	_	_
12-8	1731-1732	\*	_	_
12-9	1732-1734	et	_	_
12-10	1735-1737	al	_	_
12-11	1737-1738	.	_	_
12-12	1738-1739	\*	_	_
12-13	1739-1740	\]	_	_
12-14	1740-1741	(	_	_
12-15	1741-1746	https	_	_
12-16	1746-1747	:	_	_
12-17	1747-1748	/	_	_
12-18	1748-1749	/	_	_
12-19	1749-1758	arxiv.org	_	_
12-20	1758-1759	/	_	_
12-21	1759-1762	abs	_	_
12-22	1762-1763	/	_	_
12-23	1763-1772	1006.5440	_	_
12-24	1772-1773	)	_	_
12-25	1774-1775	:	*[161]	LICENSE[161]
12-26	1776-1784	vertices	*[161]	LICENSE[161]
12-27	1785-1788	are	*[161]	LICENSE[161]
12-28	1789-1796	ordered	*[161]	LICENSE[161]
12-29	1797-1802	using	*[161]	LICENSE[161]
12-30	1803-1808	their	*[161]	LICENSE[161]
12-31	1809-1819	degeneracy	*[161]	LICENSE[161]
12-32	1820-1825	value	*[161]	LICENSE[161]
12-33	1826-1827	(	*[161]	LICENSE[161]
12-34	1827-1830	the	*[161]	LICENSE[161]
12-35	1831-1832	\[	*[161]	LICENSE[161]
12-36	1832-1839	K-Cores	*[161]	LICENSE[161]
12-37	1840-1846	plugin	*[161]	LICENSE[161]
12-38	1846-1847	\]	*[161]	LICENSE[161]
12-39	1847-1848	(	*[161]	LICENSE[161]
12-40	1848-1853	https	*[161]	LICENSE[161]
12-41	1853-1854	:	*[161]	LICENSE[161]
12-42	1854-1855	/	*[161]	LICENSE[161]
12-43	1855-1856	/	*[161]	LICENSE[161]
12-44	1856-1866	github.com	*[161]	LICENSE[161]
12-45	1866-1867	/	*[161]	LICENSE[161]
12-46	1867-1876	Tulip-Dev	*[161]	LICENSE[161]
12-47	1876-1877	/	*[161]	LICENSE[161]
12-48	1877-1882	tulip	*[161]	LICENSE[161]
12-49	1882-1883	/	*[161]	LICENSE[161]
12-50	1883-1887	blob	*[161]	LICENSE[161]
12-51	1887-1888	/	*[161]	LICENSE[161]
12-52	1888-1894	master	*[161]	LICENSE[161]
12-53	1894-1895	/	*[161]	LICENSE[161]
12-54	1895-1902	plugins	*[161]	LICENSE[161]
12-55	1902-1903	/	*[161]	LICENSE[161]
12-56	1903-1909	metric	*[161]	LICENSE[161]
12-57	1909-1910	/	*[161]	LICENSE[161]
12-58	1910-1920	KCores.cpp	*[161]	LICENSE[161]
12-59	1920-1921	)	*[161]	LICENSE[161]
12-60	1922-1924	in	*[161]	LICENSE[161]
12-61	1925-1930	Tulip	*[161]	LICENSE[161]
12-62	1930-1931	)	*[161]	LICENSE[161]
12-63	1932-1934	in	*[161]	LICENSE[161]
12-64	1935-1940	order	*[161]	LICENSE[161]
12-65	1941-1943	to	*[161]	LICENSE[161]
12-66	1944-1949	speed	*[161]	LICENSE[161]
12-67	1950-1952	up	*[161]	LICENSE[161]
12-68	1953-1956	the	_	_
12-69	1957-1968	enumeration	_	_
12-70	1968-1969	.	_	_

#Text=\*\*Warning!
13-1	1971-1972	\*	_	_
13-2	1972-1973	\*	_	_
13-3	1973-1980	Warning	_	_
13-4	1980-1981	!	_	_

#Text=\*\* This python plugin uses `collections.OrderedDict`.
14-1	1981-1982	\*	_	_
14-2	1982-1983	\*	_	_
14-3	1984-1988	This	_	_
14-4	1989-1995	python	_	_
14-5	1996-2002	plugin	_	_
14-6	2003-2007	uses	_	_
14-7	2008-2009	`	_	_
14-8	2009-2032	collections.OrderedDict	_	_
14-9	2032-2033	`	_	_
14-10	2033-2034	.	_	_

#Text=For python version prior to 2.7, you need to install the package: `pip install ordereddict`  ### \[Clique Percolation\](https://github.com/fqueyroi/tulip\_plugins/tree/master/Cliques)  An implementation of the \[Clique Percolation Method\](https://en.wikipedia.org/wiki/Clique\_percolation\_method) that finds an overlapping clustering of the graph.
15-1	2035-2038	For	_	_
15-2	2039-2045	python	_	_
15-3	2046-2053	version	_	_
15-4	2054-2059	prior	_	_
15-5	2060-2062	to	_	_
15-6	2063-2066	2.7	_	_
15-7	2066-2067	,	_	_
15-8	2068-2071	you	_	_
15-9	2072-2076	need	_	_
15-10	2077-2079	to	_	_
15-11	2080-2087	install	_	_
15-12	2088-2091	the	_	_
15-13	2092-2099	package	_	_
15-14	2099-2100	:	_	_
15-15	2101-2102	`	_	_
15-16	2102-2105	pip	_	_
15-17	2106-2113	install	_	_
15-18	2114-2125	ordereddict	_	_
15-19	2125-2126	`	_	_
15-20	2128-2129	#	_	_
15-21	2129-2130	#	_	_
15-22	2130-2131	#	_	_
15-23	2132-2133	\[	_	_
15-24	2133-2139	Clique	_	_
15-25	2140-2151	Percolation	_	_
15-26	2151-2152	\]	_	_
15-27	2152-2153	(	_	_
15-28	2153-2158	https	_	_
15-29	2158-2159	:	_	_
15-30	2159-2160	/	_	_
15-31	2160-2161	/	_	_
15-32	2161-2171	github.com	_	_
15-33	2171-2172	/	_	_
15-34	2172-2180	fqueyroi	_	_
15-35	2180-2181	/	_	_
15-36	2181-2194	tulip\_plugins	_	_
15-36	2181-2186	tulip	_	_
15-37	2194-2195	/	_	_
15-38	2195-2199	tree	_	_
15-39	2199-2200	/	_	_
15-40	2200-2206	master	_	_
15-41	2206-2207	/	*[160]	ONTOLOGY[160]
15-42	2207-2214	Cliques	*[160]	ONTOLOGY[160]
15-43	2214-2215	)	*[160]	ONTOLOGY[160]
15-44	2217-2219	An	*[160]	ONTOLOGY[160]
15-45	2220-2234	implementation	*[160]	ONTOLOGY[160]
15-46	2235-2237	of	*[160]	ONTOLOGY[160]
15-47	2238-2241	the	*[160]	ONTOLOGY[160]
15-48	2242-2243	\[	*[160]	ONTOLOGY[160]
15-49	2243-2249	Clique	*[160]	ONTOLOGY[160]
15-50	2250-2261	Percolation	*[160]	ONTOLOGY[160]
15-51	2262-2268	Method	*[160]	ONTOLOGY[160]
15-52	2268-2269	\]	*[160]	ONTOLOGY[160]
15-53	2269-2270	(	*[160]	ONTOLOGY[160]
15-54	2270-2275	https	*[160]	ONTOLOGY[160]
15-55	2275-2276	:	*[160]	ONTOLOGY[160]
15-56	2276-2277	/	*[160]	ONTOLOGY[160]
15-57	2277-2278	/	*[160]	ONTOLOGY[160]
15-58	2278-2294	en.wikipedia.org	*[160]	ONTOLOGY[160]
15-59	2294-2295	/	*[160]	ONTOLOGY[160]
15-60	2295-2299	wiki	*[160]	ONTOLOGY[160]
15-61	2299-2300	/	*[160]	ONTOLOGY[160]
15-62	2300-2325	Clique\_percolation\_method	_	_
15-63	2325-2326	)	_	_
15-64	2327-2331	that	_	_
15-65	2332-2337	finds	_	_
15-66	2338-2340	an	_	_
15-67	2341-2352	overlapping	_	_
15-68	2353-2363	clustering	_	_
15-69	2364-2366	of	_	_
15-70	2367-2370	the	_	_
15-71	2371-2376	graph	_	_
15-72	2376-2377	.	_	_

#Text=It does so by merging the k-cliques that share k-1 vertices (k is a parameter of the algorithm).
16-1	2378-2380	It	_	_
16-2	2381-2385	does	_	_
16-3	2386-2388	so	_	_
16-4	2389-2391	by	_	_
16-5	2392-2399	merging	_	_
16-6	2400-2403	the	_	_
16-7	2404-2413	k-cliques	_	_
16-8	2414-2418	that	_	_
16-9	2419-2424	share	_	_
16-10	2425-2426	k	_	_
16-11	2426-2427	-	_	_
16-12	2427-2428	1	_	_
16-13	2429-2437	vertices	_	_
16-14	2438-2439	(	_	_
16-15	2439-2440	k	_	_
16-16	2441-2443	is	_	_
16-17	2444-2445	a	_	_
16-18	2446-2455	parameter	_	_
16-19	2456-2458	of	_	_
16-20	2459-2462	the	_	_
16-21	2463-2472	algorithm	_	_
16-22	2472-2473	)	_	_
16-23	2473-2474	.	_	_

#Text=We actually use the plugin `CliqueEnum` to find maximal cliques rather than enumerating all $k$-cliques.   ### \[Label Propagation\](https://github.com/fqueyroi/tulip\_plugins/tree/master/LabelPropagation)  A simple, fast and efficient graph clustering algorithm.
17-1	2475-2477	We	_	_
17-2	2478-2486	actually	_	_
17-3	2487-2490	use	_	_
17-4	2491-2494	the	_	_
17-5	2495-2501	plugin	_	_
17-6	2502-2503	`	_	_
17-7	2503-2513	CliqueEnum	_	_
17-8	2513-2514	`	_	_
17-9	2515-2517	to	_	_
17-10	2518-2522	find	_	_
17-11	2523-2530	maximal	_	_
17-12	2531-2538	cliques	_	_
17-13	2539-2545	rather	_	_
17-14	2546-2550	than	_	_
17-15	2551-2562	enumerating	_	_
17-16	2563-2566	all	_	_
17-17	2567-2568	$	_	_
17-18	2568-2569	k	_	_
17-19	2569-2570	$	_	_
17-20	2570-2571	-	_	_
17-21	2571-2578	cliques	_	_
17-22	2578-2579	.	_	_
17-23	2582-2583	#	_	_
17-24	2583-2584	#	_	_
17-25	2584-2585	#	_	_
17-26	2586-2587	\[	_	_
17-27	2587-2592	Label	_	_
17-28	2593-2604	Propagation	_	_
17-29	2604-2605	\]	_	_
17-30	2605-2606	(	_	_
17-31	2606-2611	https	_	_
17-32	2611-2612	:	_	_
17-33	2612-2613	/	_	_
17-34	2613-2614	/	_	_
17-35	2614-2624	github.com	*[163]	PROJECT[163]
17-36	2624-2625	/	*[163]	PROJECT[163]
17-37	2625-2633	fqueyroi	*[163]	PROJECT[163]
17-38	2633-2634	/	*[163]	PROJECT[163]
17-39	2634-2647	tulip\_plugins	_	_
17-40	2647-2648	/	_	_
17-41	2648-2652	tree	_	_
17-42	2652-2653	/	_	_
17-43	2653-2659	master	_	_
17-44	2659-2660	/	_	_
17-45	2660-2676	LabelPropagation	_	_
17-46	2676-2677	)	_	_
17-47	2679-2680	A	_	_
17-48	2681-2687	simple	_	_
17-49	2687-2688	,	_	_
17-50	2689-2693	fast	_	_
17-51	2694-2697	and	_	_
17-52	2698-2707	efficient	_	_
17-53	2708-2713	graph	_	_
17-54	2714-2724	clustering	_	_
17-55	2725-2734	algorithm	_	_
17-56	2734-2735	.	_	_

#Text=For a weighted graph G=(V,E,w), it produces a \*partition\* of the vertices V.
18-1	2736-2739	For	_	_
18-2	2740-2741	a	_	_
18-3	2742-2750	weighted	_	_
18-4	2751-2756	graph	_	_
18-5	2757-2758	G	_	_
18-6	2758-2759	=	_	_
18-7	2759-2760	(	_	_
18-8	2760-2761	V	_	_
18-9	2761-2762	,	_	_
18-10	2762-2763	E	_	_
18-11	2763-2764	,	_	_
18-12	2764-2765	w	_	_
18-13	2765-2766	)	*[164]	EVALMETRIC[164]
18-14	2766-2767	,	*[164]	EVALMETRIC[164]
18-15	2768-2770	it	*[164]	EVALMETRIC[164]
18-16	2771-2779	produces	_	_
18-17	2780-2781	a	_	_
18-18	2782-2783	\*	_	_
18-19	2783-2792	partition	_	_
18-20	2792-2793	\*	_	_
18-21	2794-2796	of	_	_
18-22	2797-2800	the	_	_
18-23	2801-2809	vertices	_	_
18-24	2810-2811	V	_	_
18-25	2811-2812	.	_	_

#Text=The algorithm iteratively change vertices labels (that correspond to cluster).
19-1	2815-2818	The	_	_
19-2	2819-2828	algorithm	_	_
19-3	2829-2840	iteratively	_	_
19-4	2841-2847	change	_	_
19-5	2848-2856	vertices	_	_
19-6	2857-2863	labels	_	_
19-7	2864-2865	(	_	_
19-8	2865-2869	that	_	_
19-9	2870-2880	correspond	_	_
19-10	2881-2883	to	*[164]	PROJECT[164]
19-11	2884-2891	cluster	_	_
19-12	2891-2892	)	_	_
19-13	2892-2893	.	_	_

#Text=A vertex will take as label the label that occurs the most in its neighborhood.
20-1	2894-2895	A	_	_
20-2	2896-2902	vertex	_	_
20-3	2903-2907	will	_	_
20-4	2908-2912	take	_	_
20-5	2913-2915	as	_	_
20-6	2916-2921	label	*[146]	PUBLICATION[146]
20-7	2922-2925	the	_	_
20-8	2926-2931	label	_	_
20-9	2932-2936	that	_	_
20-10	2937-2943	occurs	_	_
20-11	2944-2947	the	_	_
20-12	2948-2952	most	_	_
20-13	2953-2955	in	_	_
20-14	2956-2959	its	_	_
20-15	2960-2972	neighborhood	_	_
20-16	2972-2973	.	_	_

#Text=The algoithm will stop after a sufficient number of iterations.
21-1	2974-2977	The	_	_
21-2	2978-2986	algoithm	_	_
21-3	2987-2991	will	_	_
21-4	2992-2996	stop	_	_
21-5	2997-3002	after	_	_
21-6	3003-3004	a	_	_
21-7	3005-3015	sufficient	_	_
21-8	3016-3022	number	*[175]	PROGLANG[175]
21-9	3023-3025	of	*[175]	PROGLANG[175]
21-10	3026-3036	iterations	_	_
21-11	3036-3037	.	_	_

#Text=For more details see:  >Usha Nandini Raghavan, Réka Albert, and Soundar Kumara.
22-1	3039-3042	For	_	_
22-2	3043-3047	more	_	_
22-3	3048-3055	details	_	_
22-4	3056-3059	see	_	_
22-5	3059-3060	:	_	_
22-6	3062-3063	>	_	_
22-7	3063-3067	Usha	_	_
22-8	3068-3075	Nandini	_	_
22-9	3076-3084	Raghavan	_	_
22-10	3084-3085	,	*[157]	WORKSHOP[157]
22-11	3086-3090	Réka	*[157]	WORKSHOP[157]
22-12	3091-3097	Albert	*[157]	WORKSHOP[157]
22-13	3097-3098	,	*[157]	WORKSHOP[157]
22-14	3099-3102	and	*[157]	WORKSHOP[157]
22-15	3103-3110	Soundar	*[157]	WORKSHOP[157]
22-16	3111-3117	Kumara	*[157]	WORKSHOP[157]
22-17	3117-3118	.	_	_

#Text=\*Near linear time algorithm to detect community structures in large-scale networks\*.
23-1	3119-3120	\*	_	_
23-2	3120-3124	Near	_	_
23-3	3125-3131	linear	_	_
23-4	3132-3136	time	_	_
23-5	3137-3146	algorithm	_	_
23-6	3147-3149	to	_	_
23-7	3150-3156	detect	*[168]	SOFTWARE[168]
23-8	3157-3166	community	_	_
23-9	3167-3177	structures	_	_
23-10	3178-3180	in	_	_
23-11	3181-3192	large-scale	_	_
23-12	3193-3201	networks	_	_
23-13	3201-3202	\*	_	_
23-14	3202-3203	.	_	_

#Text=Physical Review E, 76(3) :036106, 2007.
24-1	3204-3212	Physical	_	_
24-2	3213-3219	Review	_	_
24-3	3220-3221	E	_	_
24-4	3221-3222	,	_	_
24-5	3223-3225	76	_	_
24-6	3225-3226	(	_	_
24-7	3226-3227	3	_	_
24-8	3227-3228	)	_	_
24-9	3229-3230	:	_	_
24-10	3230-3236	036106	_	_
24-11	3236-3237	,	_	_
24-12	3238-3242	2007	_	_
24-13	3242-3243	.	_	_

#Text=and   >Ian XY Leung, Pan Hui, Pietro Lìo, and Jon Crowcroft.
25-1	3245-3248	and	_	_
25-2	3251-3252	>	_	_
25-3	3252-3255	Ian	_	_
25-4	3256-3258	XY	_	_
25-5	3259-3264	Leung	_	_
25-6	3264-3265	,	_	_
25-7	3266-3269	Pan	_	_
25-8	3270-3273	Hui	_	_
25-9	3273-3274	,	_	_
25-10	3275-3281	Pietro	_	_
25-11	3282-3285	Lìo	_	_
25-12	3285-3286	,	_	_
25-13	3287-3290	and	_	_
25-14	3291-3294	Jon	_	_
25-15	3295-3304	Crowcroft	_	_
25-16	3304-3305	.	_	_

#Text=\*Towards real-time community detection in large networks.\* Physical Review E, 79(6) :066107, 2009.  ### \[K-Peaks Clustering\](https://github.com/fqueyroi/tulip\_plugins/tree/master/KPeaks)   <a href="url"><img src="https://www.researchgate.net/profile/Francois\_Queyroi/publication/272546777/figure/fig5/AS:668514037792772@1536397575618/Four-different-decompositions-of-a-graph-into-fixed-points-of-degree-peeling-The-induced.ppm" align="left" height="230" width="400" ></a>  A variation of the famous \[K-Cores\](https://en.wikipedia.org/wiki/Degeneracy\_(graph\_theory)) decomposition of the graph.
26-1	3306-3307	\*	_	_
26-2	3307-3314	Towards	_	_
26-3	3315-3324	real-time	_	_
26-4	3325-3334	community	_	_
26-5	3335-3344	detection	*[177]	PROGLANG[177]
26-6	3345-3347	in	*[177]	PROGLANG[177]
26-7	3348-3353	large	*[177]	PROGLANG[177]
26-8	3354-3362	networks	*[177]	PROGLANG[177]
26-9	3362-3363	.	*[177]	PROGLANG[177]
26-10	3363-3364	\*	*[177]	PROGLANG[177]
26-11	3365-3373	Physical	*[177]	PROGLANG[177]
26-12	3374-3380	Review	*[177]	PROGLANG[177]
26-13	3381-3382	E	*[177]	PROGLANG[177]
26-14	3382-3383	,	*[177]	PROGLANG[177]
26-15	3384-3386	79	*[177]	PROGLANG[177]
26-16	3386-3387	(	*[177]	PROGLANG[177]
26-17	3387-3388	6	*[177]	PROGLANG[177]
26-18	3388-3389	)	*[177]	PROGLANG[177]
26-19	3390-3391	:	*[177]	PROGLANG[177]
26-20	3391-3397	066107	*[177]	PROGLANG[177]
26-21	3397-3398	,	*[177]	PROGLANG[177]
26-22	3399-3403	2009	*[177]	PROGLANG[177]
26-23	3403-3404	.	*[177]	PROGLANG[177]
26-24	3406-3407	#	*[177]	PROGLANG[177]
26-25	3407-3408	#	*[177]	PROGLANG[177]
26-26	3408-3409	#	*[177]	PROGLANG[177]
26-27	3410-3411	\[	*[177]	PROGLANG[177]
26-28	3411-3418	K-Peaks	*[177]	PROGLANG[177]
26-29	3419-3429	Clustering	*[177]	PROGLANG[177]
26-30	3429-3430	\]	*[177]	PROGLANG[177]
26-31	3430-3431	(	*[177]	PROGLANG[177]
26-32	3431-3436	https	*[177]	PROGLANG[177]
26-33	3436-3437	:	*[177]	PROGLANG[177]
26-34	3437-3438	/	*[177]	PROGLANG[177]
26-35	3438-3439	/	*[177]	PROGLANG[177]
26-36	3439-3449	github.com	*[177]	PROGLANG[177]
26-37	3449-3450	/	*[177]	PROGLANG[177]
26-38	3450-3458	fqueyroi	*[177]	PROGLANG[177]
26-39	3458-3459	/	*[177]	PROGLANG[177]
26-40	3459-3472	tulip\_plugins	*[177]	PROGLANG[177]
26-41	3472-3473	/	*[177]	PROGLANG[177]
26-42	3473-3477	tree	*[177]	PROGLANG[177]
26-43	3477-3478	/	*[177]	PROGLANG[177]
26-44	3478-3484	master	*[177]	PROGLANG[177]
26-45	3484-3485	/	*[177]	PROGLANG[177]
26-46	3485-3491	KPeaks	*[177]	PROGLANG[177]
26-47	3491-3492	)	*[177]	PROGLANG[177]
26-48	3495-3496	<	*[177]	PROGLANG[177]
26-49	3496-3497	a	*[177]	PROGLANG[177]
26-50	3498-3502	href	*[177]	PROGLANG[177]
26-51	3502-3503	=	*[177]	PROGLANG[177]
26-52	3503-3504	"	*[177]	PROGLANG[177]
26-53	3504-3507	url	*[177]	PROGLANG[177]
26-54	3507-3508	"	*[177]	PROGLANG[177]
26-55	3508-3509	>	*[177]	PROGLANG[177]
26-56	3509-3510	<	*[177]	PROGLANG[177]
26-57	3510-3513	img	*[177]	PROGLANG[177]
26-58	3514-3517	src	*[177]	PROGLANG[177]
26-59	3517-3518	=	*[177]	PROGLANG[177]
26-60	3518-3519	"	*[177]	PROGLANG[177]
26-61	3519-3524	https	*[177]	PROGLANG[177]
26-62	3524-3525	:	*[177]	PROGLANG[177]
26-63	3525-3526	/	*[177]	PROGLANG[177]
26-64	3526-3527	/	*[177]	PROGLANG[177]
26-65	3527-3547	www.researchgate.net	*[177]	PROGLANG[177]
26-66	3547-3548	/	*[177]	PROGLANG[177]
26-67	3548-3555	profile	*[177]	PROGLANG[177]
26-68	3555-3556	/	*[177]	PROGLANG[177]
26-69	3556-3572	Francois\_Queyroi	*[177]	PROGLANG[177]
26-70	3572-3573	/	*[177]	PROGLANG[177]
26-71	3573-3584	publication	*[177]	PROGLANG[177]
26-72	3584-3585	/	*[177]	PROGLANG[177]
26-73	3585-3594	272546777	*[177]	PROGLANG[177]
26-74	3594-3595	/	*[177]	PROGLANG[177]
26-75	3595-3601	figure	*[177]	PROGLANG[177]
26-76	3601-3602	/	*[177]	PROGLANG[177]
26-77	3602-3606	fig5	*[177]	PROGLANG[177]
26-78	3606-3607	/	*[177]	PROGLANG[177]
26-79	3607-3609	AS	*[177]	PROGLANG[177]
26-80	3609-3610	:	*[177]	PROGLANG[177]
26-81	3610-3625	668514037792772	*[177]	PROGLANG[177]
26-82	3625-3626	@	*[177]	PROGLANG[177]
26-83	3626-3639	1536397575618	*[177]	PROGLANG[177]
26-84	3639-3640	/	_	_
26-85	3640-3732	Four-different-decompositions-of-a-graph-into-fixed-points-of-degree-peeling-The-induced.ppm	_	_
26-86	3732-3733	"	_	_
26-87	3734-3739	align	_	_
26-88	3739-3740	=	_	_
26-89	3740-3741	"	_	_
26-90	3741-3745	left	_	_
26-91	3745-3746	"	_	_
26-92	3747-3753	height	_	_
26-93	3753-3754	=	_	_
26-94	3754-3755	"	_	_
26-95	3755-3758	230	_	_
26-96	3758-3759	"	_	_
26-97	3760-3765	width	_	_
26-98	3765-3766	=	_	_
26-99	3766-3767	"	_	_
26-100	3767-3770	400	_	_
26-101	3770-3771	"	_	_
26-102	3772-3773	>	_	_
26-103	3773-3774	<	_	_
26-104	3774-3775	/	_	_
26-105	3775-3776	a	_	_
26-106	3776-3777	>	_	_
26-107	3779-3780	A	_	_
26-108	3781-3790	variation	_	_
26-109	3791-3793	of	_	_
26-110	3794-3797	the	_	_
26-111	3798-3804	famous	_	_
26-112	3805-3806	\[	_	_
26-113	3806-3813	K-Cores	_	_
26-114	3813-3814	\]	_	_
26-115	3814-3815	(	_	_
26-116	3815-3820	https	_	_
26-117	3820-3821	:	_	_
26-118	3821-3822	/	_	_
26-119	3822-3823	/	_	_
26-120	3823-3839	en.wikipedia.org	_	_
26-121	3839-3840	/	_	_
26-122	3840-3844	wiki	_	_
26-123	3844-3845	/	_	_
26-124	3845-3855	Degeneracy	_	_
26-125	3855-3856	\_	_	_
26-126	3856-3857	(	_	_
26-127	3857-3869	graph\_theory	_	_
26-128	3869-3870	)	_	_
26-129	3870-3871	)	_	_
26-130	3872-3885	decomposition	_	_
26-131	3886-3888	of	_	_
26-132	3889-3892	the	_	_
26-133	3893-3898	graph	_	_
26-134	3898-3899	.	_	_

#Text=In the example, node labels corresponds to K-cores values and the hulls to the K-Peaks decomposition.
27-1	3903-3905	In	_	_
27-2	3906-3909	the	_	_
27-3	3910-3917	example	_	_
27-4	3917-3918	,	_	_
27-5	3919-3923	node	_	_
27-6	3924-3930	labels	_	_
27-7	3931-3942	corresponds	_	_
27-8	3943-3945	to	_	_
27-9	3946-3953	K-cores	_	_
27-10	3954-3960	values	_	_
27-11	3961-3964	and	_	_
27-12	3965-3968	the	_	_
27-13	3969-3974	hulls	_	_
27-14	3975-3977	to	_	_
27-15	3978-3981	the	_	_
27-16	3982-3989	K-Peaks	_	_
27-17	3990-4003	decomposition	_	_
27-18	4003-4004	.	_	_

#Text=The k-peak correspond to the maximal subgraph whose core value is k after the removal of nodes with a peak values above k.
28-1	4005-4008	The	_	_
28-2	4009-4015	k-peak	_	_
28-3	4016-4026	correspond	_	_
28-4	4027-4029	to	_	_
28-5	4030-4033	the	_	_
28-6	4034-4041	maximal	_	_
28-7	4042-4050	subgraph	_	_
28-8	4051-4056	whose	_	_
28-9	4057-4061	core	_	_
28-10	4062-4067	value	_	_
28-11	4068-4070	is	_	_
28-12	4071-4072	k	_	_
28-13	4073-4078	after	_	_
28-14	4079-4082	the	_	_
28-15	4083-4090	removal	_	_
28-16	4091-4093	of	_	_
28-17	4094-4099	nodes	_	_
28-18	4100-4104	with	_	_
28-19	4105-4106	a	_	_
28-20	4107-4111	peak	_	_
28-21	4112-4118	values	_	_
28-22	4119-4124	above	_	_
28-23	4125-4126	k	_	_
28-24	4126-4127	.	_	_

#Text=See for details    > J.
29-1	4128-4131	See	_	_
29-2	4132-4135	for	_	_
29-3	4136-4143	details	_	_
29-4	4147-4148	>	_	_
29-5	4149-4150	J	_	_
29-6	4150-4151	.	_	_

#Text=Abello and F.
30-1	4152-4158	Abello	_	_
30-2	4159-4162	and	_	_
30-3	4163-4164	F	*[158]	WORKSHOP[158]
30-4	4164-4165	.	_	_

#Text=Queyroi (2014).
31-1	4166-4173	Queyroi	_	_
31-2	4174-4175	(	_	_
31-3	4175-4179	2014	_	_
31-4	4179-4180	)	*[166]	PROJECT[166]
31-5	4180-4181	.	_	_

#Text=\*Network decomposition into fixed points of degree peeling\*.
32-1	4182-4183	\*	_	_
32-2	4183-4190	Network	_	_
32-3	4191-4204	decomposition	_	_
32-4	4205-4209	into	_	_
32-5	4210-4215	fixed	_	_
32-6	4216-4222	points	_	_
32-7	4223-4225	of	_	_
32-8	4226-4232	degree	_	_
32-9	4233-4240	peeling	_	_
32-10	4240-4241	\*	_	_
32-11	4241-4242	.	_	_

#Text=Social Network Analysis and Mining, 4(1), 191.  ## \[Minimum Spanning Tree\](https://github.com/fqueyroi/tulip\_plugins/tree/master/MinimumSpanningTree)  Compute the \[Minimum Spanning Tree\](https://en.wikipedia.org/wiki/Minimum\_spanning\_tree) of the graph (Python script) using a \[Union-Find\](https://en.wikipedia.org/wiki/Kruskal%27s\_algorithm) data structure.   ## \[Vertex Cycle Cover and Secret Santa!\]
33-1	4243-4249	Social	_	_
33-2	4250-4257	Network	_	_
33-3	4258-4266	Analysis	_	_
33-4	4267-4270	and	_	_
33-5	4271-4277	Mining	_	_
33-6	4277-4278	,	_	_
33-7	4279-4280	4	_	_
33-8	4280-4281	(	_	_
33-9	4281-4282	1	_	_
33-10	4282-4283	)	_	_
33-11	4283-4284	,	_	_
33-12	4285-4288	191	_	_
33-13	4288-4289	.	_	_
33-14	4291-4292	#	_	_
33-15	4292-4293	#	_	_
33-16	4294-4295	\[	_	_
33-17	4295-4302	Minimum	_	_
33-18	4303-4311	Spanning	_	_
33-19	4312-4316	Tree	_	_
33-20	4316-4317	\]	_	_
33-21	4317-4318	(	_	_
33-22	4318-4323	https	_	_
33-23	4323-4324	:	_	_
33-24	4324-4325	/	_	_
33-25	4325-4326	/	_	_
33-26	4326-4336	github.com	_	_
33-27	4336-4337	/	_	_
33-28	4337-4345	fqueyroi	_	_
33-29	4345-4346	/	_	_
33-30	4346-4359	tulip\_plugins	_	_
33-31	4359-4360	/	_	_
33-32	4360-4364	tree	_	_
33-33	4364-4365	/	_	_
33-34	4365-4371	master	_	_
33-35	4371-4372	/	_	_
33-36	4372-4391	MinimumSpanningTree	_	_
33-37	4391-4392	)	_	_
33-38	4394-4401	Compute	_	_
33-39	4402-4405	the	_	_
33-40	4406-4407	\[	_	_
33-41	4407-4414	Minimum	_	_
33-42	4415-4423	Spanning	_	_
33-43	4424-4428	Tree	_	_
33-44	4428-4429	\]	_	_
33-45	4429-4430	(	_	_
33-46	4430-4435	https	_	_
33-47	4435-4436	:	_	_
33-48	4436-4437	/	_	_
33-49	4437-4438	/	_	_
33-50	4438-4454	en.wikipedia.org	_	_
33-51	4454-4455	/	_	_
33-52	4455-4459	wiki	_	_
33-53	4459-4460	/	_	_
33-54	4460-4481	Minimum\_spanning\_tree	_	_
33-55	4481-4482	)	_	_
33-56	4483-4485	of	_	_
33-57	4486-4489	the	_	_
33-58	4490-4495	graph	_	_
33-59	4496-4497	(	_	_
33-60	4497-4503	Python	_	_
33-61	4504-4510	script	_	_
33-62	4510-4511	)	_	_
33-63	4512-4517	using	_	_
33-64	4518-4519	a	_	_
33-65	4520-4521	\[	_	_
33-66	4521-4531	Union-Find	_	_
33-67	4531-4532	\]	*[166]	EVALMETRIC[166]
33-68	4532-4533	(	*[166]	EVALMETRIC[166]
33-69	4533-4538	https	*[166]	EVALMETRIC[166]
33-70	4538-4539	:	*[166]	EVALMETRIC[166]
33-71	4539-4540	/	*[166]	EVALMETRIC[166]
33-72	4540-4541	/	*[166]	EVALMETRIC[166]
33-73	4541-4557	en.wikipedia.org	*[166]	EVALMETRIC[166]
33-74	4557-4558	/	*[166]	EVALMETRIC[166]
33-75	4558-4562	wiki	*[166]	EVALMETRIC[166]
33-76	4562-4563	/	_	_
33-77	4563-4570	Kruskal	_	_
33-78	4570-4571	%	_	_
33-79	4571-4584	27s\_algorithm	_	_
33-80	4584-4585	)	_	_
33-81	4586-4590	data	_	_
33-82	4591-4600	structure	_	_
33-83	4600-4601	.	_	_
33-84	4604-4605	#	_	_
33-85	4605-4606	#	_	_
33-86	4607-4608	\[	_	_
33-87	4608-4614	Vertex	_	_
33-88	4615-4620	Cycle	_	_
33-89	4621-4626	Cover	_	_
33-90	4627-4630	and	_	_
33-91	4631-4637	Secret	_	_
33-92	4638-4643	Santa	_	_
33-93	4643-4644	!	_	_
33-94	4644-4645	\]	_	_

#Text=(https://github.com/fqueyroi/tulip\_plugins/tree/master/VertexCycleCover)  !
34-1	4645-4646	(	_	_
34-2	4646-4651	https	_	_
34-3	4651-4652	:	_	_
34-4	4652-4653	/	_	_
34-5	4653-4654	/	_	_
34-6	4654-4664	github.com	_	_
34-7	4664-4665	/	_	_
34-8	4665-4673	fqueyroi	_	_
34-9	4673-4674	/	_	_
34-10	4674-4687	tulip\_plugins	_	_
34-11	4687-4688	/	_	_
34-12	4688-4692	tree	_	_
34-13	4692-4693	/	_	_
34-14	4693-4699	master	_	_
34-15	4699-4700	/	_	_
34-16	4700-4716	VertexCycleCover	_	_
34-17	4716-4717	)	_	_
34-18	4719-4720	!	_	_

#Text=\[Christmas!\]
35-1	4720-4721	\[	_	_
35-2	4721-4730	Christmas	_	_
35-3	4730-4731	!	_	_
35-4	4731-4732	\]	_	_

#Text=(http://mumuland.m.u.pic.centerblog.net/750a9603.png)  \[Secret Santa\](https://en.wikipedia.org/wiki/Secret\_Santa) is a way for people to exchange gifts but where each person only knows who he/she has to give a gift to.
36-1	4732-4733	(	_	_
36-2	4733-4737	http	_	_
36-3	4737-4738	:	_	_
36-4	4738-4739	/	_	_
36-5	4739-4740	/	_	_
36-6	4740-4771	mumuland.m.u.pic.centerblog.net	_	_
36-7	4771-4772	/	_	_
36-8	4772-4780	750a9603	_	_
36-9	4780-4781	.	_	_
36-10	4781-4784	png	_	_
36-11	4784-4785	)	_	_
36-12	4787-4788	\[	_	_
36-13	4788-4794	Secret	_	_
36-14	4795-4800	Santa	_	_
36-15	4800-4801	\]	_	_
36-16	4801-4802	(	_	_
36-17	4802-4807	https	_	_
36-18	4807-4808	:	_	_
36-19	4808-4809	/	_	_
36-20	4809-4810	/	_	_
36-21	4810-4826	en.wikipedia.org	_	_
36-22	4826-4827	/	_	_
36-23	4827-4831	wiki	_	_
36-24	4831-4832	/	_	_
36-25	4832-4844	Secret\_Santa	_	_
36-26	4844-4845	)	_	_
36-27	4846-4848	is	_	_
36-28	4849-4850	a	_	_
36-29	4851-4854	way	_	_
36-30	4855-4858	for	_	_
36-31	4859-4865	people	_	_
36-32	4866-4868	to	_	_
36-33	4869-4877	exchange	_	_
36-34	4878-4883	gifts	_	_
36-35	4884-4887	but	*[149]	DATASET[149]
36-36	4888-4893	where	*[149]	DATASET[149]
36-37	4894-4898	each	*[149]	DATASET[149]
36-38	4899-4905	person	*[149]	DATASET[149]
36-39	4906-4910	only	*[149]	DATASET[149]
36-40	4911-4916	knows	*[149]	DATASET[149]
36-41	4917-4920	who	*[149]	DATASET[149]
36-42	4921-4923	he	*[149]	DATASET[149]
36-43	4923-4924	/	*[149]	DATASET[149]
36-44	4924-4927	she	*[149]	DATASET[149]
36-45	4928-4931	has	*[149]	DATASET[149]
36-46	4932-4934	to	*[149]	DATASET[149]
36-47	4935-4939	give	*[149]	DATASET[149]
36-48	4940-4941	a	_	_
36-49	4942-4946	gift	_	_
36-50	4947-4949	to	_	_
36-51	4949-4950	.	_	_

#Text=Traditionnaly Secret Santa assignments are done randomly: each participant pick the name of another participant.
37-1	4951-4964	Traditionnaly	_	_
37-2	4965-4971	Secret	_	_
37-3	4972-4977	Santa	_	_
37-4	4978-4989	assignments	_	_
37-5	4990-4993	are	_	_
37-6	4994-4998	done	_	_
37-7	4999-5007	randomly	_	_
37-8	5007-5008	:	_	_
37-9	5009-5013	each	_	_
37-10	5014-5025	participant	_	_
37-11	5026-5030	pick	_	_
37-12	5031-5034	the	_	_
37-13	5035-5039	name	_	_
37-14	5040-5042	of	_	_
37-15	5043-5050	another	_	_
37-16	5051-5062	participant	_	_
37-17	5062-5063	.	_	_

#Text=But one can assume that not all assignments are possible.
38-1	5066-5069	But	_	_
38-2	5070-5073	one	_	_
38-3	5074-5077	can	_	_
38-4	5078-5084	assume	_	_
38-5	5085-5089	that	_	_
38-6	5090-5093	not	_	_
38-7	5094-5097	all	_	_
38-8	5098-5109	assignments	_	_
38-9	5110-5113	are	_	_
38-10	5114-5122	possible	_	_
38-11	5122-5123	.	_	_

#Text=For example, one can want an assignment where parents can not be assigned to their own children or where colleagues in a company have to be assigned to people working in another department.
39-1	5124-5127	For	_	_
39-2	5128-5135	example	_	_
39-3	5135-5136	,	_	_
39-4	5137-5140	one	_	_
39-5	5141-5144	can	_	_
39-6	5145-5149	want	_	_
39-7	5150-5152	an	_	_
39-8	5153-5163	assignment	_	_
39-9	5164-5169	where	_	_
39-10	5170-5177	parents	_	_
39-11	5178-5181	can	_	_
39-12	5182-5185	not	_	_
39-13	5186-5188	be	_	_
39-14	5189-5197	assigned	_	_
39-15	5198-5200	to	_	_
39-16	5201-5206	their	_	_
39-17	5207-5210	own	_	_
39-18	5211-5219	children	_	_
39-19	5220-5222	or	_	_
39-20	5223-5228	where	_	_
39-21	5229-5239	colleagues	_	_
39-22	5240-5242	in	_	_
39-23	5243-5244	a	_	_
39-24	5245-5252	company	_	_
39-25	5253-5257	have	_	_
39-26	5258-5260	to	_	_
39-27	5261-5263	be	_	_
39-28	5264-5272	assigned	*[153]	CONFERENCE[153]
39-29	5273-5275	to	*[153]	CONFERENCE[153]
39-30	5276-5282	people	*[153]	CONFERENCE[153]
39-31	5283-5290	working	*[153]	CONFERENCE[153]
39-32	5291-5293	in	*[153]	CONFERENCE[153]
39-33	5294-5301	another	*[153]	CONFERENCE[153]
39-34	5302-5312	department	*[153]	CONFERENCE[153]
39-35	5312-5313	.	_	_

#Text=If we assume the the various possibilities are summed up in a graph G (an arc between A\->B indicates that A can offer a gift to B) then the problem is to find a \[Vertex Cycle Cover\](https://en.wikipedia.org/wiki/Vertex\_cycle\_cover) of G.
40-1	5316-5318	If	_	_
40-2	5319-5321	we	_	_
40-3	5322-5328	assume	_	_
40-4	5329-5332	the	_	_
40-5	5333-5336	the	_	_
40-6	5337-5344	various	_	_
40-7	5345-5358	possibilities	_	_
40-8	5359-5362	are	_	_
40-9	5363-5369	summed	_	_
40-10	5370-5372	up	_	_
40-11	5373-5375	in	_	_
40-12	5376-5377	a	_	_
40-13	5378-5383	graph	_	_
40-14	5384-5385	G	_	_
40-15	5386-5387	(	_	_
40-16	5387-5389	an	_	_
40-17	5390-5393	arc	_	_
40-18	5394-5401	between	_	_
40-19	5402-5403	A	_	_
40-20	5403-5404	-	_	_
40-21	5404-5405	>	_	_
40-22	5405-5406	B	_	_
40-23	5407-5416	indicates	_	_
40-24	5417-5421	that	_	_
40-25	5422-5423	A	_	_
40-26	5424-5427	can	_	_
40-27	5428-5433	offer	_	_
40-28	5434-5435	a	_	_
40-29	5436-5440	gift	_	_
40-30	5441-5443	to	_	_
40-31	5444-5445	B	_	_
40-32	5445-5446	)	_	_
40-33	5447-5451	then	_	_
40-34	5452-5455	the	_	_
40-35	5456-5463	problem	_	_
40-36	5464-5466	is	_	_
40-37	5467-5469	to	_	_
40-38	5470-5474	find	_	_
40-39	5475-5476	a	_	_
40-40	5477-5478	\[	_	_
40-41	5478-5484	Vertex	_	_
40-42	5485-5490	Cycle	*[170]	SOFTWARE[170]
40-43	5491-5496	Cover	*[170]	SOFTWARE[170]
40-44	5496-5497	\]	*[170]	SOFTWARE[170]
40-45	5497-5498	(	*[170]	SOFTWARE[170]
40-46	5498-5503	https	*[170]	SOFTWARE[170]
40-47	5503-5504	:	*[170]	SOFTWARE[170]
40-48	5504-5505	/	*[170]	SOFTWARE[170]
40-49	5505-5506	/	*[170]	SOFTWARE[170]
40-50	5506-5522	en.wikipedia.org	*[170]	SOFTWARE[170]
40-51	5522-5523	/	*[170]	SOFTWARE[170]
40-52	5523-5527	wiki	*[170]	SOFTWARE[170]
40-53	5527-5528	/	*[170]	SOFTWARE[170]
40-54	5528-5546	Vertex\_cycle\_cover	_	_
40-55	5546-5547	)	_	_
40-56	5548-5550	of	_	_
40-57	5551-5552	G	_	_
40-58	5552-5553	.	_	_

#Text=This problem can be solved using a maximum matching algorithm.
41-1	5554-5558	This	_	_
41-2	5559-5566	problem	*[161]	ONTOLOGY[161]
41-3	5567-5570	can	*[161]	ONTOLOGY[161]
41-4	5571-5573	be	_	_
41-5	5574-5580	solved	_	_
41-6	5581-5586	using	_	_
41-7	5587-5588	a	_	_
41-8	5589-5596	maximum	_	_
41-9	5597-5605	matching	_	_
41-10	5606-5615	algorithm	_	_
41-11	5615-5616	.	_	_

#Text=However, the Secret Santa has to be ... secret.
42-1	5618-5625	However	_	_
42-2	5625-5626	,	*[171]	SOFTWARE[171]
42-3	5627-5630	the	*[171]	SOFTWARE[171]
42-4	5631-5637	Secret	_	_
42-5	5638-5643	Santa	_	_
42-6	5644-5647	has	_	_
42-7	5648-5650	to	_	_
42-8	5651-5653	be	_	_
42-9	5654-5655	.	_	_
42-10	5655-5656	.	_	_
42-11	5656-5657	.	_	_
42-12	5658-5664	secret	_	_
42-13	5664-5665	.	_	_

#Text=Therefore, the Tulip Python plugin "SecretSanta" find a solution where the knowledge of a given assignment can not be used to infer another assignment.
43-1	5666-5675	Therefore	_	_
43-2	5675-5676	,	_	_
43-3	5677-5680	the	_	_
43-4	5681-5686	Tulip	_	_
43-5	5687-5693	Python	_	_
43-6	5694-5700	plugin	_	_
43-7	5701-5702	"	_	_
43-8	5702-5713	SecretSanta	_	_
43-9	5713-5714	"	_	_
43-10	5715-5719	find	_	_
43-11	5720-5721	a	_	_
43-12	5722-5730	solution	_	_
43-13	5731-5736	where	_	_
43-14	5737-5740	the	_	_
43-15	5741-5750	knowledge	_	_
43-16	5751-5753	of	*[162]	LICENSE[162]
43-17	5754-5755	a	*[162]	LICENSE[162]
43-18	5756-5761	given	*[162]	LICENSE[162]
43-19	5762-5772	assignment	_	_
43-20	5773-5776	can	_	_
43-21	5777-5780	not	_	_
43-22	5781-5783	be	_	_
43-23	5784-5788	used	_	_
43-24	5789-5791	to	_	_
43-25	5792-5797	infer	_	_
43-26	5798-5805	another	_	_
43-27	5806-5816	assignment	_	_
43-28	5816-5817	.	_	_

#Text=This is an implementation of the algorithm by \[Liberti and Raimondi\](https://link.springer.com/chapter/10.1007/978-3-540-68880-8\_26) (2008).
44-1	5818-5822	This	_	_
44-2	5823-5825	is	_	_
44-3	5826-5828	an	_	_
44-4	5829-5843	implementation	_	_
44-5	5844-5846	of	_	_
44-6	5847-5850	the	_	_
44-7	5851-5860	algorithm	_	_
44-8	5861-5863	by	*[154]	CONFERENCE[154]
44-9	5864-5865	\[	*[154]	CONFERENCE[154]
44-10	5865-5872	Liberti	_	_
44-11	5873-5876	and	_	_
44-12	5877-5885	Raimondi	_	_
44-13	5885-5886	\]	_	_
44-14	5886-5887	(	_	_
44-15	5887-5892	https	_	_
44-16	5892-5893	:	_	_
44-17	5893-5894	/	_	_
44-18	5894-5895	/	_	_
44-19	5895-5912	link.springer.com	_	_
44-20	5912-5913	/	_	_
44-21	5913-5920	chapter	_	_
44-22	5920-5921	/	_	_
44-23	5921-5928	10.1007	_	_
44-24	5928-5929	/	_	_
44-25	5929-5932	978	_	_
44-26	5932-5933	-	_	_
44-27	5933-5934	3	_	_
44-28	5934-5935	-	_	_
44-29	5935-5938	540	_	_
44-30	5938-5939	-	_	_
44-31	5939-5944	68880	_	_
44-32	5944-5945	-	_	_
44-33	5945-5946	8	_	_
44-34	5946-5947	\_	_	_
44-35	5947-5949	26	_	_
44-36	5949-5950	)	_	_
44-37	5951-5952	(	_	_
44-38	5952-5956	2008	_	_
44-39	5956-5957	)	_	_
44-40	5957-5958	.	_	_