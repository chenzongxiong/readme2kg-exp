#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# CS-TGN This repository contains the implementation of algorithms, and used datasets of paper ``CS-TGN: Community Search via Temporal Graph Neural Networks`` (ACM The Web Conference Companion 2023  (WWW)).    #### Authors: \[Farnoosh Hashemi\](https://farnooshha.github.io//), \[Ali Behrouz\](https://abehrouz.github.io/), \[Milad Rezaei Hajidehi\](https://www.linkedin.com/in/milad-rezaei-hajidehi-63013773/) #### \[Link to the paper\](https://doi.org/10.1145/3543873.3587654) (\[Arxiv\](https://arxiv.org/abs/2303.08964)) #### \[Poster\]() #### \[Brief video explanation\]()    ### Abstract ----------------   Searching for local communities is an important research challenge that allows for personalized community discovery and supports advanced data analysis in various complex networks, such as the World Wide Web, social networks, and brain networks.
1-1	0-1	#	_	_
1-2	2-8	CS-TGN	_	_
1-3	9-13	This	_	_
1-4	14-24	repository	_	_
1-5	25-33	contains	_	_
1-6	34-37	the	_	_
1-7	38-52	implementation	_	_
1-8	53-55	of	_	_
1-9	56-66	algorithms	_	_
1-10	66-67	,	_	_
1-11	68-71	and	_	_
1-12	72-76	used	_	_
1-13	77-85	datasets	_	_
1-14	86-88	of	_	_
1-15	89-94	paper	_	_
1-16	95-96	`	_	_
1-17	96-97	`	_	_
1-18	97-103	CS-TGN	_	_
1-19	103-104	:	_	_
1-20	105-114	Community	_	_
1-21	115-121	Search	_	_
1-22	122-125	via	_	_
1-23	126-134	Temporal	_	_
1-24	135-140	Graph	_	_
1-25	141-147	Neural	_	_
1-26	148-156	Networks	_	_
1-27	156-157	`	_	_
1-28	157-158	`	_	_
1-29	159-160	(	_	_
1-30	160-163	ACM	_	_
1-31	164-167	The	_	_
1-32	168-171	Web	_	_
1-33	172-182	Conference	_	_
1-34	183-192	Companion	_	_
1-35	193-197	2023	_	_
1-36	199-200	(	_	_
1-37	200-203	WWW	_	_
1-38	203-204	)	_	_
1-39	204-205	)	_	_
1-40	205-206	.	_	_
1-41	210-211	#	_	_
1-42	211-212	#	_	_
1-43	212-213	#	_	_
1-44	213-214	#	_	_
1-45	215-222	Authors	_	_
1-46	222-223	:	_	_
1-47	224-225	\[	_	_
1-48	225-233	Farnoosh	_	_
1-49	234-241	Hashemi	_	_
1-50	241-242	\]	*[86]	DATASET[86]
1-51	242-243	(	*[86]	DATASET[86]
1-52	243-248	https	*[86]	DATASET[86]
1-53	248-249	:	*[86]	DATASET[86]
1-54	249-250	/	*[86]	DATASET[86]
1-55	250-251	/	*[86]	DATASET[86]
1-56	251-271	farnooshha.github.io	*[86]	DATASET[86]
1-57	271-272	/	*[86]	DATASET[86]
1-58	272-273	/	*[86]	DATASET[86]
1-59	273-274	)	*[86]	DATASET[86]
1-60	274-275	,	*[86]	DATASET[86]
1-61	276-277	\[	*[86]	DATASET[86]
1-62	277-280	Ali	*[86]	DATASET[86]
1-63	281-288	Behrouz	*[86]	DATASET[86]
1-64	288-289	\]	*[86]	DATASET[86]
1-65	289-290	(	*[86]	DATASET[86]
1-66	290-295	https	*[86]	DATASET[86]
1-67	295-296	:	*[86]	DATASET[86]
1-68	296-297	/	*[86]	DATASET[86]
1-69	297-298	/	*[86]	DATASET[86]
1-70	298-316	abehrouz.github.io	*[86]	DATASET[86]
1-71	316-317	/	*[86]	DATASET[86]
1-72	317-318	)	*[86]	DATASET[86]
1-73	318-319	,	*[86]	DATASET[86]
1-74	320-321	\[	*[86]	DATASET[86]
1-75	321-326	Milad	*[86]	DATASET[86]
1-76	327-333	Rezaei	*[86]	DATASET[86]
1-77	334-342	Hajidehi	*[86]	DATASET[86]
1-78	342-343	\]	*[86]	DATASET[86]
1-79	343-344	(	*[86]	DATASET[86]
1-80	344-349	https	*[86]	DATASET[86]
1-81	349-350	:	*[86]	DATASET[86]
1-82	350-351	/	*[86]	DATASET[86]
1-83	351-352	/	*[86]	DATASET[86]
1-84	352-368	www.linkedin.com	*[86]	DATASET[86]
1-85	368-369	/	*[86]	DATASET[86]
1-86	369-371	in	*[86]	DATASET[86]
1-87	371-372	/	*[86]	DATASET[86]
1-88	372-393	milad-rezaei-hajidehi	_	_
1-89	393-394	-	_	_
1-90	394-402	63013773	_	_
1-91	402-403	/	_	_
1-92	403-404	)	_	_
1-93	405-406	#	_	_
1-94	406-407	#	_	_
1-95	407-408	#	_	_
1-96	408-409	#	_	_
1-97	410-411	\[	_	_
1-98	411-415	Link	_	_
1-99	416-418	to	_	_
1-100	419-422	the	_	_
1-101	423-428	paper	_	_
1-102	428-429	\]	_	_
1-103	429-430	(	_	_
1-104	430-435	https	_	_
1-105	435-436	:	_	_
1-106	436-437	/	_	_
1-107	437-438	/	_	_
1-108	438-445	doi.org	_	_
1-109	445-446	/	_	_
1-110	446-453	10.1145	_	_
1-111	453-454	/	_	_
1-112	454-469	3543873.3587654	_	_
1-113	469-470	)	_	_
1-114	471-472	(	_	_
1-115	472-473	\[	_	_
1-116	473-478	Arxiv	_	_
1-117	478-479	\]	_	_
1-118	479-480	(	_	_
1-119	480-485	https	_	_
1-120	485-486	:	_	_
1-121	486-487	/	_	_
1-122	487-488	/	_	_
1-123	488-497	arxiv.org	_	_
1-124	497-498	/	_	_
1-125	498-501	abs	_	_
1-126	501-502	/	_	_
1-127	502-512	2303.08964	_	_
1-128	512-513	)	_	_
1-129	513-514	)	_	_
1-130	515-516	#	_	_
1-131	516-517	#	_	_
1-132	517-518	#	_	_
1-133	518-519	#	_	_
1-134	520-521	\[	_	_
1-135	521-527	Poster	_	_
1-136	527-528	\]	_	_
1-137	528-529	(	_	_
1-138	529-530	)	_	_
1-139	531-532	#	_	_
1-140	532-533	#	_	_
1-141	533-534	#	_	_
1-142	534-535	#	_	_
1-143	536-537	\[	_	_
1-144	537-542	Brief	_	_
1-145	543-548	video	_	_
1-146	549-560	explanation	_	_
1-147	560-561	\]	_	_
1-148	561-562	(	_	_
1-149	562-563	)	_	_
1-150	567-568	#	_	_
1-151	568-569	#	_	_
1-152	569-570	#	_	_
1-153	571-579	Abstract	_	_
1-154	580-581	-	_	_
1-155	581-582	-	_	_
1-156	582-583	-	_	_
1-157	583-584	-	_	_
1-158	584-585	-	_	_
1-159	585-586	-	_	_
1-160	586-587	-	_	_
1-161	587-588	-	_	_
1-162	588-589	-	_	_
1-163	589-590	-	_	_
1-164	590-591	-	_	_
1-165	591-592	-	_	_
1-166	592-593	-	_	_
1-167	593-594	-	_	_
1-168	594-595	-	_	_
1-169	595-596	-	_	_
1-170	599-608	Searching	_	_
1-171	609-612	for	_	_
1-172	613-618	local	_	_
1-173	619-630	communities	_	_
1-174	631-633	is	_	_
1-175	634-636	an	_	_
1-176	637-646	important	_	_
1-177	647-655	research	_	_
1-178	656-665	challenge	_	_
1-179	666-670	that	_	_
1-180	671-677	allows	_	_
1-181	678-681	for	_	_
1-182	682-694	personalized	_	_
1-183	695-704	community	_	_
1-184	705-714	discovery	_	_
1-185	715-718	and	_	_
1-186	719-727	supports	_	_
1-187	728-736	advanced	_	_
1-188	737-741	data	_	_
1-189	742-750	analysis	_	_
1-190	751-753	in	_	_
1-191	754-761	various	_	_
1-192	762-769	complex	_	_
1-193	770-778	networks	_	_
1-194	778-779	,	_	_
1-195	780-784	such	_	_
1-196	785-787	as	_	_
1-197	788-791	the	_	_
1-198	792-797	World	_	_
1-199	798-802	Wide	_	_
1-200	803-806	Web	_	_
1-201	806-807	,	_	_
1-202	808-814	social	_	_
1-203	815-823	networks	_	_
1-204	823-824	,	_	_
1-205	825-828	and	_	_
1-206	829-834	brain	_	_
1-207	835-843	networks	_	_
1-208	843-844	.	_	_

#Text=The evolution of these networks over time has motivated several recent studies to identify local communities in temporal networks.
2-1	845-848	The	_	_
2-2	849-858	evolution	_	_
2-3	859-861	of	_	_
2-4	862-867	these	_	_
2-5	868-876	networks	_	_
2-6	877-881	over	_	_
2-7	882-886	time	_	_
2-8	887-890	has	_	_
2-9	891-900	motivated	_	_
2-10	901-908	several	_	_
2-11	909-915	recent	_	_
2-12	916-923	studies	*[81]	CONFERENCE[81]
2-13	924-926	to	*[81]	CONFERENCE[81]
2-14	927-935	identify	*[81]	CONFERENCE[81]
2-15	936-941	local	*[81]	CONFERENCE[81]
2-16	942-953	communities	*[81]	CONFERENCE[81]
2-17	954-956	in	*[81]	CONFERENCE[81]
2-18	957-965	temporal	*[81]	CONFERENCE[81]
2-19	966-974	networks	_	_
2-20	974-975	.	_	_

#Text=Given any query nodes, Community Search aims to find a densely connected subgraph containing query nodes.
3-1	976-981	Given	_	_
3-2	982-985	any	_	_
3-3	986-991	query	_	_
3-4	992-997	nodes	_	_
3-5	997-998	,	_	_
3-6	999-1008	Community	_	_
3-7	1009-1015	Search	_	_
3-8	1016-1020	aims	_	_
3-9	1021-1023	to	_	_
3-10	1024-1028	find	_	_
3-11	1029-1030	a	*[87]	DATASET[87]
3-12	1031-1038	densely	_	_
3-13	1039-1048	connected	_	_
3-14	1049-1057	subgraph	_	_
3-15	1058-1068	containing	_	_
3-16	1069-1074	query	_	_
3-17	1075-1080	nodes	_	_
3-18	1080-1081	.	_	_

#Text=However, existing community search approaches in temporal networks have two main limitations: (1) they adopt pre-defined subgraph patterns to model communities, which cannot find communities that do not conform to these patterns in real-world networks, and (2) they only use the aggregation of disjoint structural information to measure quality, missing the dynamic of connections and temporal properties.
4-1	1082-1089	However	_	_
4-2	1089-1090	,	_	_
4-3	1091-1099	existing	_	_
4-4	1100-1109	community	_	_
4-5	1110-1116	search	_	_
4-6	1117-1127	approaches	*[80]	ONTOLOGY[80]
4-7	1128-1130	in	*[80]	ONTOLOGY[80]
4-8	1131-1139	temporal	*[80]	ONTOLOGY[80]
4-9	1140-1148	networks	*[80]	ONTOLOGY[80]
4-10	1149-1153	have	*[80]	ONTOLOGY[80]
4-11	1154-1157	two	*[80]	ONTOLOGY[80]
4-12	1158-1162	main	*[80]	ONTOLOGY[80]
4-13	1163-1174	limitations	*[80]	ONTOLOGY[80]
4-14	1174-1175	:	*[80]	ONTOLOGY[80]
4-15	1176-1177	(	*[80]	ONTOLOGY[80]
4-16	1177-1178	1	*[80]	ONTOLOGY[80]
4-17	1178-1179	)	*[80]	ONTOLOGY[80]
4-18	1180-1184	they	*[80]	ONTOLOGY[80]
4-19	1185-1190	adopt	*[80]	ONTOLOGY[80]
4-20	1191-1202	pre-defined	*[80]	ONTOLOGY[80]
4-21	1203-1211	subgraph	*[80]	ONTOLOGY[80]
4-22	1212-1220	patterns	*[80]	ONTOLOGY[80]
4-23	1221-1223	to	*[80]	ONTOLOGY[80]
4-24	1224-1229	model	*[80]	ONTOLOGY[80]
4-25	1230-1241	communities	_	_
4-26	1241-1242	,	_	_
4-27	1243-1248	which	_	_
4-28	1249-1255	cannot	_	_
4-29	1256-1260	find	_	_
4-30	1261-1272	communities	_	_
4-31	1273-1277	that	_	_
4-32	1278-1280	do	_	_
4-33	1281-1284	not	_	_
4-34	1285-1292	conform	_	_
4-35	1293-1295	to	_	_
4-36	1296-1301	these	_	_
4-37	1302-1310	patterns	_	_
4-38	1311-1313	in	_	_
4-39	1314-1324	real-world	_	_
4-40	1325-1333	networks	_	_
4-41	1333-1334	,	_	_
4-42	1335-1338	and	_	_
4-43	1339-1340	(	_	_
4-44	1340-1341	2	_	_
4-45	1341-1342	)	_	_
4-46	1343-1347	they	_	_
4-47	1348-1352	only	_	_
4-48	1353-1356	use	_	_
4-49	1357-1360	the	_	_
4-50	1361-1372	aggregation	_	_
4-51	1373-1375	of	_	_
4-52	1376-1384	disjoint	_	_
4-53	1385-1395	structural	_	_
4-54	1396-1407	information	_	_
4-55	1408-1410	to	_	_
4-56	1411-1418	measure	_	_
4-57	1419-1426	quality	_	_
4-58	1426-1427	,	_	_
4-59	1428-1435	missing	_	_
4-60	1436-1439	the	_	_
4-61	1440-1447	dynamic	_	_
4-62	1448-1450	of	_	_
4-63	1451-1462	connections	_	_
4-64	1463-1466	and	_	_
4-65	1467-1475	temporal	_	_
4-66	1476-1486	properties	_	_
4-67	1486-1487	.	_	_

#Text=In this paper, we propose a query-driven Temporal Graph Convolutional Network (CS-TGN) that can capture flexible community structures by learning from the ground-truth communities in a data-driven manner.
5-1	1488-1490	In	_	_
5-2	1491-1495	this	_	_
5-3	1496-1501	paper	_	_
5-4	1501-1502	,	_	_
5-5	1503-1505	we	_	_
5-6	1506-1513	propose	_	_
5-7	1514-1515	a	_	_
5-8	1516-1528	query-driven	_	_
5-9	1529-1537	Temporal	_	_
5-10	1538-1543	Graph	_	_
5-11	1544-1557	Convolutional	_	_
5-12	1558-1565	Network	_	_
5-13	1566-1567	(	_	_
5-14	1567-1573	CS-TGN	_	_
5-15	1573-1574	)	_	_
5-16	1575-1579	that	_	_
5-17	1580-1583	can	_	_
5-18	1584-1591	capture	_	_
5-19	1592-1600	flexible	_	_
5-20	1601-1610	community	_	_
5-21	1611-1621	structures	_	_
5-22	1622-1624	by	_	_
5-23	1625-1633	learning	_	_
5-24	1634-1638	from	_	_
5-25	1639-1642	the	_	_
5-26	1643-1655	ground-truth	_	_
5-27	1656-1667	communities	_	_
5-28	1668-1670	in	*[95]	LICENSE[95]
5-29	1671-1672	a	*[95]	LICENSE[95]
5-30	1673-1684	data-driven	*[95]	LICENSE[95]
5-31	1685-1691	manner	*[95]	LICENSE[95]
5-32	1691-1692	.	_	_

#Text=CS-TGN first combines the local query-dependent structure and the global graph embedding in each snapshot of the network and then uses a GRU cell with contextual attention to learn the dynamics of interactions and update node embeddings over time.
6-1	1693-1699	CS-TGN	_	_
6-2	1700-1705	first	_	_
6-3	1706-1714	combines	_	_
6-4	1715-1718	the	_	_
6-5	1719-1724	local	_	_
6-6	1725-1740	query-dependent	_	_
6-7	1741-1750	structure	_	_
6-8	1751-1754	and	_	_
6-9	1755-1758	the	_	_
6-10	1759-1765	global	_	_
6-11	1766-1771	graph	_	_
6-12	1772-1781	embedding	_	_
6-13	1782-1784	in	_	_
6-14	1785-1789	each	_	_
6-15	1790-1798	snapshot	_	_
6-16	1799-1801	of	_	_
6-17	1802-1805	the	_	_
6-18	1806-1813	network	_	_
6-19	1814-1817	and	_	_
6-20	1818-1822	then	_	_
6-21	1823-1827	uses	_	_
6-22	1828-1829	a	_	_
6-23	1830-1833	GRU	_	_
6-24	1834-1838	cell	_	_
6-25	1839-1843	with	_	_
6-26	1844-1854	contextual	_	_
6-27	1855-1864	attention	_	_
6-28	1865-1867	to	_	_
6-29	1868-1873	learn	_	_
6-30	1874-1877	the	_	_
6-31	1878-1886	dynamics	_	_
6-32	1887-1889	of	_	_
6-33	1890-1902	interactions	_	_
6-34	1903-1906	and	*[81]	PUBLICATION[81]
6-35	1907-1913	update	*[81]	PUBLICATION[81]
6-36	1914-1918	node	_	_
6-37	1919-1929	embeddings	_	_
6-38	1930-1934	over	_	_
6-39	1935-1939	time	_	_
6-40	1939-1940	.	_	_

#Text=We demonstrate how this model can be used for interactive community search in an online setting, allowing users to evaluate the found communities and provide feedback.
7-1	1941-1943	We	_	_
7-2	1944-1955	demonstrate	_	_
7-3	1956-1959	how	_	_
7-4	1960-1964	this	_	_
7-5	1965-1970	model	_	_
7-6	1971-1974	can	_	_
7-7	1975-1977	be	_	_
7-8	1978-1982	used	_	_
7-9	1983-1986	for	_	_
7-10	1987-1998	interactive	_	_
7-11	1999-2008	community	_	_
7-12	2009-2015	search	_	_
7-13	2016-2018	in	_	_
7-14	2019-2021	an	_	_
7-15	2022-2028	online	_	_
7-16	2029-2036	setting	_	_
7-17	2036-2037	,	_	_
7-18	2038-2046	allowing	_	_
7-19	2047-2052	users	_	_
7-20	2053-2055	to	_	_
7-21	2056-2064	evaluate	_	_
7-22	2065-2068	the	_	_
7-23	2069-2074	found	_	_
7-24	2075-2086	communities	_	_
7-25	2087-2090	and	_	_
7-26	2091-2098	provide	_	_
7-27	2099-2107	feedback	_	_
7-28	2107-2108	.	_	_

#Text=Experiments on real-world temporal graphs with ground-truth communities validate the superior quality of the solutions obtained and the efficiency of our model in both temporal and interactive static settings.            ### Dependecies & Hardware ---------------- To run our codes you need to have these packages installed:  ``` torch==1.13.0 torch-geometric==2.2.0 torch-scatter==2.1.0 torch-sparse==0.6.15 torch-spline-conv==1.2.1 torchmetrics==0.11.0 ```  A single GPU should be enough to train models.
8-1	2109-2120	Experiments	_	_
8-2	2121-2123	on	_	_
8-3	2124-2134	real-world	_	_
8-4	2135-2143	temporal	_	_
8-5	2144-2150	graphs	_	_
8-6	2151-2155	with	_	_
8-7	2156-2168	ground-truth	_	_
8-8	2169-2180	communities	_	_
8-9	2181-2189	validate	_	_
8-10	2190-2193	the	_	_
8-11	2194-2202	superior	_	_
8-12	2203-2210	quality	_	_
8-13	2211-2213	of	_	_
8-14	2214-2217	the	_	_
8-15	2218-2227	solutions	_	_
8-16	2228-2236	obtained	_	_
8-17	2237-2240	and	_	_
8-18	2241-2244	the	_	_
8-19	2245-2255	efficiency	_	_
8-20	2256-2258	of	_	_
8-21	2259-2262	our	_	_
8-22	2263-2268	model	_	_
8-23	2269-2271	in	_	_
8-24	2272-2276	both	_	_
8-25	2277-2285	temporal	_	_
8-26	2286-2289	and	_	_
8-27	2290-2301	interactive	_	_
8-28	2302-2308	static	_	_
8-29	2309-2317	settings	_	_
8-30	2317-2318	.	_	_
8-31	2330-2331	#	_	_
8-32	2331-2332	#	_	_
8-33	2332-2333	#	_	_
8-34	2334-2345	Dependecies	_	_
8-35	2346-2347	&	_	_
8-36	2348-2356	Hardware	_	_
8-37	2357-2358	-	_	_
8-38	2358-2359	-	_	_
8-39	2359-2360	-	_	_
8-40	2360-2361	-	_	_
8-41	2361-2362	-	_	_
8-42	2362-2363	-	_	_
8-43	2363-2364	-	_	_
8-44	2364-2365	-	_	_
8-45	2365-2366	-	_	_
8-46	2366-2367	-	*[92]	PROGLANG[92]
8-47	2367-2368	-	*[92]	PROGLANG[92]
8-48	2368-2369	-	*[92]	PROGLANG[92]
8-49	2369-2370	-	*[92]	PROGLANG[92]
8-50	2370-2371	-	*[92]	PROGLANG[92]
8-51	2371-2372	-	*[92]	PROGLANG[92]
8-52	2372-2373	-	*[92]	PROGLANG[92]
8-53	2374-2376	To	*[92]	PROGLANG[92]
8-54	2377-2380	run	*[92]	PROGLANG[92]
8-55	2381-2384	our	*[92]	PROGLANG[92]
8-56	2385-2390	codes	*[92]	PROGLANG[92]
8-57	2391-2394	you	*[92]	PROGLANG[92]
8-58	2395-2399	need	*[92]	PROGLANG[92]
8-59	2400-2402	to	*[92]	PROGLANG[92]
8-60	2403-2407	have	*[92]	PROGLANG[92]
8-61	2408-2413	these	*[92]	PROGLANG[92]
8-62	2414-2422	packages	*[92]	PROGLANG[92]
8-63	2423-2432	installed	*[92]	PROGLANG[92]
8-64	2432-2433	:	*[92]	PROGLANG[92]
8-65	2435-2436	`	*[92]	PROGLANG[92]
8-66	2436-2437	`	*[92]	PROGLANG[92]
8-67	2437-2438	`	*[92]	PROGLANG[92]
8-68	2439-2444	torch	*[92]	PROGLANG[92]
8-69	2444-2445	=	*[92]	PROGLANG[92]
8-70	2445-2446	=	*[92]	PROGLANG[92]
8-71	2446-2452	1.13.0	*[92]	PROGLANG[92]
8-72	2453-2468	torch-geometric	*[92]	PROGLANG[92]
8-73	2468-2469	=	*[92]	PROGLANG[92]
8-74	2469-2470	=	*[92]	PROGLANG[92]
8-75	2470-2475	2.2.0	*[92]	PROGLANG[92]
8-76	2476-2489	torch-scatter	*[92]	PROGLANG[92]
8-77	2489-2490	=	*[92]	PROGLANG[92]
8-78	2490-2491	=	*[92]	PROGLANG[92]
8-79	2491-2496	2.1.0	*[92]	PROGLANG[92]
8-80	2497-2509	torch-sparse	*[92]	PROGLANG[92]
8-81	2509-2510	=	_	_
8-82	2510-2511	=	_	_
8-83	2511-2517	0.6.15	_	_
8-84	2518-2535	torch-spline-conv	_	_
8-85	2535-2536	=	_	_
8-86	2536-2537	=	_	_
8-87	2537-2542	1.2.1	_	_
8-88	2543-2555	torchmetrics	_	_
8-89	2555-2556	=	_	_
8-90	2556-2557	=	_	_
8-91	2557-2563	0.11.0	_	_
8-92	2564-2565	`	_	_
8-93	2565-2566	`	_	_
8-94	2566-2567	`	_	_
8-95	2569-2570	A	_	_
8-96	2571-2577	single	_	_
8-97	2578-2581	GPU	_	_
8-98	2582-2588	should	_	_
8-99	2589-2591	be	_	_
8-100	2592-2598	enough	_	_
8-101	2599-2601	to	_	_
8-102	2602-2607	train	_	_
8-103	2608-2614	models	_	_
8-104	2614-2615	.	_	_

#Text=For large datasets we capped at most 5GBs of GPU memory.          ### Components ---------------- The core component is the models impelemented in `models/` directory.
9-1	2616-2619	For	_	_
9-2	2620-2625	large	_	_
9-3	2626-2634	datasets	_	_
9-4	2635-2637	we	_	_
9-5	2638-2644	capped	_	_
9-6	2645-2647	at	_	_
9-7	2648-2652	most	_	_
9-8	2653-2657	5GBs	_	_
9-9	2658-2660	of	_	_
9-10	2661-2664	GPU	_	_
9-11	2665-2671	memory	_	_
9-12	2671-2672	.	_	_
9-13	2682-2683	#	_	_
9-14	2683-2684	#	*[81]	ONTOLOGY[81]
9-15	2684-2685	#	*[81]	ONTOLOGY[81]
9-16	2686-2696	Components	*[81]	ONTOLOGY[81]
9-17	2697-2698	-	*[81]	ONTOLOGY[81]
9-18	2698-2699	-	*[81]	ONTOLOGY[81]
9-19	2699-2700	-	*[81]	ONTOLOGY[81]
9-20	2700-2701	-	*[81]	ONTOLOGY[81]
9-21	2701-2702	-	*[81]	ONTOLOGY[81]
9-22	2702-2703	-	*[81]	ONTOLOGY[81]
9-23	2703-2704	-	*[81]	ONTOLOGY[81]
9-24	2704-2705	-	*[81]	ONTOLOGY[81]
9-25	2705-2706	-	*[81]	ONTOLOGY[81]
9-26	2706-2707	-	*[81]	ONTOLOGY[81]
9-27	2707-2708	-	*[81]	ONTOLOGY[81]
9-28	2708-2709	-	*[81]	ONTOLOGY[81]
9-29	2709-2710	-	*[81]	ONTOLOGY[81]
9-30	2710-2711	-	*[81]	ONTOLOGY[81]
9-31	2711-2712	-	*[81]	ONTOLOGY[81]
9-32	2712-2713	-	*[81]	ONTOLOGY[81]
9-33	2714-2717	The	_	_
9-34	2718-2722	core	_	_
9-35	2723-2732	component	_	_
9-36	2733-2735	is	_	_
9-37	2736-2739	the	_	_
9-38	2740-2746	models	_	_
9-39	2747-2759	impelemented	_	_
9-40	2760-2762	in	_	_
9-41	2763-2764	`	_	_
9-42	2764-2770	models	_	_
9-43	2770-2771	/	_	_
9-44	2771-2772	`	_	_
9-45	2773-2782	directory	_	_
9-46	2782-2783	.	_	_

#Text=You can find the vanilla CSTGN and CSTGN without GRU as well as attention module.
10-1	2784-2787	You	_	_
10-2	2788-2791	can	_	_
10-3	2792-2796	find	_	_
10-4	2797-2800	the	_	_
10-5	2801-2808	vanilla	_	_
10-6	2809-2814	CSTGN	_	_
10-7	2815-2818	and	_	_
10-8	2819-2824	CSTGN	*[96]	LICENSE[96]
10-9	2825-2832	without	*[96]	LICENSE[96]
10-10	2833-2836	GRU	*[96]	LICENSE[96]
10-11	2837-2839	as	*[96]	LICENSE[96]
10-12	2840-2844	well	*[96]	LICENSE[96]
10-13	2845-2847	as	*[96]	LICENSE[96]
10-14	2848-2857	attention	*[96]	LICENSE[96]
10-15	2858-2864	module	*[96]	LICENSE[96]
10-16	2864-2865	.	_	_

#Text=Modelwise, you may enhance the architecture for particular datasets by changing the attention snapshots, number of GCN layers and changing the hidden dimension of models.
11-1	2866-2875	Modelwise	_	_
11-2	2875-2876	,	_	_
11-3	2877-2880	you	_	_
11-4	2881-2884	may	_	_
11-5	2885-2892	enhance	_	_
11-6	2893-2896	the	_	_
11-7	2897-2909	architecture	_	_
11-8	2910-2913	for	_	_
11-9	2914-2924	particular	_	_
11-10	2925-2933	datasets	_	_
11-11	2934-2936	by	_	_
11-12	2937-2945	changing	_	_
11-13	2946-2949	the	_	_
11-14	2950-2959	attention	_	_
11-15	2960-2969	snapshots	_	_
11-16	2969-2970	,	_	_
11-17	2971-2977	number	_	_
11-18	2978-2980	of	_	_
11-19	2981-2984	GCN	_	_
11-20	2985-2991	layers	_	_
11-21	2992-2995	and	_	_
11-22	2996-3004	changing	_	_
11-23	3005-3008	the	_	_
11-24	3009-3015	hidden	*[83]	PUBLICATION[83]
11-25	3016-3025	dimension	*[83]	PUBLICATION[83]
11-26	3026-3028	of	*[83]	PUBLICATION[83]
11-27	3029-3035	models	*[83]	PUBLICATION[83]
11-28	3035-3036	.	_	_

#Text=The `train.py` can be used to trained the RNN network of CSTGN.
12-1	3039-3042	The	_	_
12-2	3043-3044	`	_	_
12-3	3044-3052	train.py	_	_
12-4	3052-3053	`	_	_
12-5	3054-3057	can	_	_
12-6	3058-3060	be	_	_
12-7	3061-3065	used	_	_
12-8	3066-3068	to	_	_
12-9	3069-3076	trained	_	_
12-10	3077-3080	the	_	_
12-11	3081-3084	RNN	_	_
12-12	3085-3092	network	_	_
12-13	3093-3095	of	_	_
12-14	3096-3101	CSTGN	_	_
12-15	3101-3102	.	_	_

#Text=Please read the Dataset Structure for instruction for using it.
13-1	3103-3109	Please	_	_
13-2	3110-3114	read	_	_
13-3	3115-3118	the	_	_
13-4	3119-3126	Dataset	_	_
13-5	3127-3136	Structure	_	_
13-6	3137-3140	for	_	_
13-7	3141-3152	instruction	_	_
13-8	3153-3156	for	_	_
13-9	3157-3162	using	_	_
13-10	3163-3165	it	_	_
13-11	3165-3166	.	_	_

#Text=The `dataset.py` has two classes `QueryFile` and `Snapshot` for representing the query/answer pairs and temporal view of graph at a specific time.
14-1	3169-3172	The	_	_
14-2	3173-3174	`	_	_
14-3	3174-3184	dataset.py	_	_
14-4	3184-3185	`	_	_
14-5	3186-3189	has	_	_
14-6	3190-3193	two	_	_
14-7	3194-3201	classes	_	_
14-8	3202-3203	`	_	_
14-9	3203-3212	QueryFile	_	_
14-10	3212-3213	`	_	_
14-11	3214-3217	and	_	_
14-12	3218-3219	`	_	_
14-13	3219-3227	Snapshot	_	_
14-14	3227-3228	`	_	_
14-15	3229-3232	for	_	_
14-16	3233-3245	representing	_	_
14-17	3246-3249	the	_	_
14-18	3250-3255	query	_	_
14-19	3255-3256	/	*[98]	SOFTWARE[98]
14-20	3256-3262	answer	*[98]	SOFTWARE[98]
14-21	3263-3268	pairs	*[98]	SOFTWARE[98]
14-22	3269-3272	and	*[98]	SOFTWARE[98]
14-23	3273-3281	temporal	_	_
14-24	3282-3286	view	_	_
14-25	3287-3289	of	_	_
14-26	3290-3295	graph	_	_
14-27	3296-3298	at	_	_
14-28	3299-3300	a	_	_
14-29	3301-3309	specific	_	_
14-30	3310-3314	time	_	_
14-31	3314-3315	.	_	_

#Text=The `util/` directory contains some codes to parse specific datasets and generate queries.        ### Dataset Structure ---------------- The graphs and query/answer sets can be in any format but in order to use our train script and dataset utilities these should be in following format.        ### File Structure ---------------- Our training script assume that the data stored in the following format: ``` data/     dataset\_name/         graph\_{snapshot\_id}.txt         graph\_{snapshot\_id}.txt         queries\_{snapshot\_id}.txt         queries\_{snapshot\_id}.txt ```  So for example for a a dataset named `foo` with 3 snapshots it would be like:  ``` data/     foo/         graph\_1.txt         graph\_2.txt         graph\_3.txt         queries\_1.txt         queries\_2.txt         queries\_3.txt         test\_queries.txt         valid\_queries.txt ```        ### Graph file and QueryFiles ---------------- The graph files must have the following format.  ``` node\_id1 node\_id2 .. .. ```  The query files must have the following format.   ``` q1\_node1,q1\_node2,... answer1\_node1,answer1\_node2,... q2\_node1,q2\_node2,... answer2\_node1,answer2\_node2 ```         ### Training the Models & Execution ---------------- Finally the models could be trained and evaluated with the following command.   ``` python3 train.py <DATASET\_NAME> <MAX\_VERTICES> <START\_SNAPSHOT\_ID> <END\_SNAPSHOT\_ID> <THRESHOLD> <HIDDEN\_DIM\_SIZE> <EPOCHS> <LEARNING\_RATE> <REGULARIZATION> ```  For example: ``` python3 train.py football 200 1 4 0.4 64 100 0.001 0.00001 ```   ### Reference ----------------   ``` @inproceedings{CS-TGN, author = {Hashemi, Farnoosh and Behrouz, Ali and Rezaei Hajidehi, Milad}, title = {CS-TGN: Community Search via Temporal Graph Neural Networks}, year = {2023}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/3543873.3587654}, doi = {10.1145/3543873.3587654}, booktitle = {Companion Proceedings of the Web Conference 2023}, numpages = {8}, location = {AUSTIN, TEXAS, USA}, series = {WWW '23} } ```
15-1	3318-3321	The	_	_
15-2	3322-3323	`	_	_
15-3	3323-3327	util	_	_
15-4	3327-3328	/	_	_
15-5	3328-3329	`	_	_
15-6	3330-3339	directory	*[97]	LICENSE[97]
15-7	3340-3348	contains	*[97]	LICENSE[97]
15-8	3349-3353	some	*[97]	LICENSE[97]
15-9	3354-3359	codes	*[97]	LICENSE[97]
15-10	3360-3362	to	*[97]	LICENSE[97]
15-11	3363-3368	parse	*[97]	LICENSE[97]
15-12	3369-3377	specific	*[97]	LICENSE[97]
15-13	3378-3386	datasets	*[97]	LICENSE[97]
15-14	3387-3390	and	*[97]	LICENSE[97]
15-15	3391-3399	generate	*[97]	LICENSE[97]
15-16	3400-3407	queries	*[97]	LICENSE[97]
15-17	3407-3408	.	*[97]	LICENSE[97]
15-18	3416-3417	#	*[97]	LICENSE[97]
15-19	3417-3418	#	*[97]	LICENSE[97]
15-20	3418-3419	#	*[97]	LICENSE[97]
15-21	3420-3427	Dataset	*[97]	LICENSE[97]
15-22	3428-3437	Structure	*[97]	LICENSE[97]
15-23	3438-3439	-	*[97]	LICENSE[97]
15-24	3439-3440	-	*[97]	LICENSE[97]
15-25	3440-3441	-	*[97]	LICENSE[97]
15-26	3441-3442	-	*[97]	LICENSE[97]
15-27	3442-3443	-	*[97]	LICENSE[97]
15-28	3443-3444	-	*[97]	LICENSE[97]
15-29	3444-3445	-	*[97]	LICENSE[97]
15-30	3445-3446	-	*[97]	LICENSE[97]
15-31	3446-3447	-	*[97]	LICENSE[97]
15-32	3447-3448	-	*[97]	LICENSE[97]
15-33	3448-3449	-	*[97]	LICENSE[97]
15-34	3449-3450	-	*[97]	LICENSE[97]
15-35	3450-3451	-	*[97]	LICENSE[97]
15-36	3451-3452	-	*[97]	LICENSE[97]
15-37	3452-3453	-	*[97]	LICENSE[97]
15-38	3453-3454	-	*[97]	LICENSE[97]
15-39	3455-3458	The	*[97]	LICENSE[97]
15-40	3459-3465	graphs	*[97]	LICENSE[97]
15-41	3466-3469	and	*[97]	LICENSE[97]
15-42	3470-3475	query	*[97]	LICENSE[97]
15-43	3475-3476	/	*[97]	LICENSE[97]
15-44	3476-3482	answer	*[97]	LICENSE[97]
15-45	3483-3487	sets	*[97]	LICENSE[97]
15-46	3488-3491	can	*[97]	LICENSE[97]
15-47	3492-3494	be	*[97]	LICENSE[97]
15-48	3495-3497	in	*[97]	LICENSE[97]
15-49	3498-3501	any	*[97]	LICENSE[97]
15-50	3502-3508	format	*[97]	LICENSE[97]
15-51	3509-3512	but	*[97]	LICENSE[97]
15-52	3513-3515	in	*[97]	LICENSE[97]
15-53	3516-3521	order	*[97]	LICENSE[97]
15-54	3522-3524	to	*[97]	LICENSE[97]
15-55	3525-3528	use	*[97]	LICENSE[97]
15-56	3529-3532	our	*[97]	LICENSE[97]
15-57	3533-3538	train	*[97]	LICENSE[97]
15-58	3539-3545	script	*[97]	LICENSE[97]
15-59	3546-3549	and	*[97]	LICENSE[97]
15-60	3550-3557	dataset	*[97]	LICENSE[97]
15-61	3558-3567	utilities	*[97]	LICENSE[97]
15-62	3568-3573	these	*[97]	LICENSE[97]
15-63	3574-3580	should	*[97]	LICENSE[97]
15-64	3581-3583	be	*[97]	LICENSE[97]
15-65	3584-3586	in	*[97]	LICENSE[97]
15-66	3587-3596	following	*[97]	LICENSE[97]
15-67	3597-3603	format	*[97]	LICENSE[97]
15-68	3603-3604	.	*[97]	LICENSE[97]
15-69	3612-3613	#	*[97]	LICENSE[97]
15-70	3613-3614	#	*[97]	LICENSE[97]
15-71	3614-3615	#	*[97]	LICENSE[97]
15-72	3616-3620	File	*[97]	LICENSE[97]
15-73	3621-3630	Structure	*[97]	LICENSE[97]
15-74	3631-3632	-	_	_
15-75	3632-3633	-	_	_
15-76	3633-3634	-	_	_
15-77	3634-3635	-	_	_
15-78	3635-3636	-	_	_
15-79	3636-3637	-	_	_
15-80	3637-3638	-	_	_
15-81	3638-3639	-	_	_
15-82	3639-3640	-	_	_
15-83	3640-3641	-	_	_
15-84	3641-3642	-	_	_
15-85	3642-3643	-	_	_
15-86	3643-3644	-	_	_
15-87	3644-3645	-	_	_
15-88	3645-3646	-	_	_
15-89	3646-3647	-	_	_
15-90	3648-3651	Our	_	_
15-91	3652-3660	training	_	_
15-92	3661-3667	script	_	_
15-93	3668-3674	assume	_	_
15-94	3675-3679	that	_	_
15-95	3680-3683	the	_	_
15-96	3684-3688	data	_	_
15-97	3689-3695	stored	_	_
15-98	3696-3698	in	_	_
15-99	3699-3702	the	_	_
15-100	3703-3712	following	_	_
15-101	3713-3719	format	_	_
15-102	3719-3720	:	_	_
15-103	3721-3722	`	_	_
15-104	3722-3723	`	_	_
15-105	3723-3724	`	_	_
15-106	3725-3729	data	_	_
15-107	3729-3730	/	_	_
15-108	3735-3747	dataset\_name	_	_
15-109	3747-3748	/	_	_
15-110	3757-3762	graph	_	_
15-111	3762-3763	\_	_	_
15-112	3763-3764	{	_	_
15-113	3764-3775	snapshot\_id	_	_
15-114	3775-3776	}	_	_
15-115	3776-3777	.	_	_
15-116	3777-3780	txt	_	_
15-117	3789-3794	graph	_	_
15-118	3794-3795	\_	_	_
15-119	3795-3796	{	_	_
15-120	3796-3807	snapshot\_id	_	_
15-121	3807-3808	}	_	_
15-122	3808-3809	.	_	_
15-123	3809-3812	txt	_	_
15-124	3821-3828	queries	_	_
15-125	3828-3829	\_	_	_
15-126	3829-3830	{	_	_
15-127	3830-3841	snapshot\_id	_	_
15-128	3841-3842	}	_	_
15-129	3842-3843	.	_	_
15-130	3843-3846	txt	_	_
15-131	3855-3862	queries	_	_
15-132	3862-3863	\_	_	_
15-133	3863-3864	{	_	_
15-134	3864-3875	snapshot\_id	_	_
15-135	3875-3876	}	_	_
15-136	3876-3877	.	_	_
15-137	3877-3880	txt	_	_
15-138	3881-3882	`	_	_
15-139	3882-3883	`	_	_
15-140	3883-3884	`	_	_
15-141	3886-3888	So	_	_
15-142	3889-3892	for	_	_
15-143	3893-3900	example	_	_
15-144	3901-3904	for	_	_
15-145	3905-3906	a	_	_
15-146	3907-3908	a	_	_
15-147	3909-3916	dataset	_	_
15-148	3917-3922	named	_	_
15-149	3923-3924	`	_	_
15-150	3924-3927	foo	_	_
15-151	3927-3928	`	_	_
15-152	3929-3933	with	_	_
15-153	3934-3935	3	_	_
15-154	3936-3945	snapshots	_	_
15-155	3946-3948	it	_	_
15-156	3949-3954	would	_	_
15-157	3955-3957	be	_	_
15-158	3958-3962	like	_	_
15-159	3962-3963	:	_	_
15-160	3965-3966	`	_	_
15-161	3966-3967	`	_	_
15-162	3967-3968	`	_	_
15-163	3969-3973	data	_	_
15-164	3973-3974	/	_	_
15-165	3979-3982	foo	_	_
15-166	3982-3983	/	_	_
15-167	3992-3997	graph	_	_
15-168	3997-3998	\_	_	_
15-169	3998-3999	1	_	_
15-170	3999-4000	.	_	_
15-171	4000-4003	txt	_	_
15-172	4012-4017	graph	_	_
15-173	4017-4018	\_	_	_
15-174	4018-4019	2	_	_
15-175	4019-4020	.	_	_
15-176	4020-4023	txt	_	_
15-177	4032-4037	graph	_	_
15-178	4037-4038	\_	_	_
15-179	4038-4039	3	_	_
15-180	4039-4040	.	_	_
15-181	4040-4043	txt	_	_
15-182	4052-4059	queries	_	_
15-183	4059-4060	\_	_	_
15-184	4060-4061	1	_	_
15-185	4061-4062	.	_	_
15-186	4062-4065	txt	_	_
15-187	4074-4081	queries	_	_
15-188	4081-4082	\_	_	_
15-189	4082-4083	2	_	_
15-190	4083-4084	.	_	_
15-191	4084-4087	txt	_	_
15-192	4096-4103	queries	_	_
15-193	4103-4104	\_	_	_
15-194	4104-4105	3	_	_
15-195	4105-4106	.	_	_
15-196	4106-4109	txt	_	_
15-197	4118-4134	test\_queries.txt	_	_
15-198	4143-4160	valid\_queries.txt	_	_
15-199	4161-4162	`	_	_
15-200	4162-4163	`	_	_
15-201	4163-4164	`	_	_
15-202	4172-4173	#	_	_
15-203	4173-4174	#	_	_
15-204	4174-4175	#	_	_
15-205	4176-4181	Graph	_	_
15-206	4182-4186	file	_	_
15-207	4187-4190	and	_	_
15-208	4191-4201	QueryFiles	_	_
15-209	4202-4203	-	_	_
15-210	4203-4204	-	_	_
15-211	4204-4205	-	_	_
15-212	4205-4206	-	_	_
15-213	4206-4207	-	_	_
15-214	4207-4208	-	_	_
15-215	4208-4209	-	_	_
15-216	4209-4210	-	_	_
15-217	4210-4211	-	_	_
15-218	4211-4212	-	_	_
15-219	4212-4213	-	_	_
15-220	4213-4214	-	_	_
15-221	4214-4215	-	_	_
15-222	4215-4216	-	_	_
15-223	4216-4217	-	_	_
15-224	4217-4218	-	_	_
15-225	4219-4222	The	_	_
15-226	4223-4228	graph	_	_
15-227	4229-4234	files	_	_
15-228	4235-4239	must	_	_
15-229	4240-4244	have	_	_
15-230	4245-4248	the	_	_
15-231	4249-4258	following	_	_
15-232	4259-4265	format	_	_
15-233	4265-4266	.	_	_
15-234	4268-4269	`	_	_
15-235	4269-4270	`	_	_
15-236	4270-4271	`	_	_
15-237	4272-4280	node\_id1	_	_
15-238	4281-4289	node\_id2	_	_
15-239	4290-4291	.	_	_
15-240	4291-4292	.	_	_
15-241	4293-4294	.	_	_
15-242	4294-4295	.	_	_
15-243	4296-4297	`	_	_
15-244	4297-4298	`	_	_
15-245	4298-4299	`	_	_
15-246	4301-4304	The	_	_
15-247	4305-4310	query	_	_
15-248	4311-4316	files	_	_
15-249	4317-4321	must	_	_
15-250	4322-4326	have	_	_
15-251	4327-4330	the	_	_
15-252	4331-4340	following	_	_
15-253	4341-4347	format	_	_
15-254	4347-4348	.	_	_
15-255	4351-4352	`	_	_
15-256	4352-4353	`	_	_
15-257	4353-4354	`	_	_
15-258	4355-4357	q1	_	_
15-259	4357-4358	\_	_	_
15-260	4358-4363	node1	_	_
15-261	4363-4364	,	_	_
15-262	4364-4366	q1	_	_
15-263	4366-4367	\_	_	_
15-264	4367-4372	node2	_	_
15-265	4372-4373	,	_	_
15-266	4373-4374	.	_	_
15-267	4374-4375	.	_	_
15-268	4375-4376	.	_	_
15-269	4377-4384	answer1	_	_
15-270	4384-4385	\_	_	_
15-271	4385-4390	node1	_	_
15-272	4390-4391	,	_	_
15-273	4391-4398	answer1	_	_
15-274	4398-4399	\_	_	_
15-275	4399-4404	node2	_	_
15-276	4404-4405	,	_	_
15-277	4405-4406	.	_	_
15-278	4406-4407	.	_	_
15-279	4407-4408	.	_	_
15-280	4409-4411	q2	_	_
15-281	4411-4412	\_	_	_
15-282	4412-4417	node1	_	_
15-283	4417-4418	,	_	_
15-284	4418-4420	q2	_	_
15-285	4420-4421	\_	_	_
15-286	4421-4426	node2	_	_
15-287	4426-4427	,	_	_
15-288	4427-4428	.	_	_
15-289	4428-4429	.	_	_
15-290	4429-4430	.	_	_
15-291	4431-4438	answer2	_	_
15-292	4438-4439	\_	_	_
15-293	4439-4444	node1	_	_
15-294	4444-4445	,	_	_
15-295	4445-4452	answer2	_	_
15-296	4452-4453	\_	_	_
15-297	4453-4458	node2	_	_
15-298	4459-4460	`	_	_
15-299	4460-4461	`	_	_
15-300	4461-4462	`	_	_
15-301	4471-4472	#	_	_
15-302	4472-4473	#	_	_
15-303	4473-4474	#	_	_
15-304	4475-4483	Training	_	_
15-305	4484-4487	the	_	_
15-306	4488-4494	Models	_	_
15-307	4495-4496	&	_	_
15-308	4497-4506	Execution	_	_
15-309	4507-4508	-	_	_
15-310	4508-4509	-	_	_
15-311	4509-4510	-	_	_
15-312	4510-4511	-	_	_
15-313	4511-4512	-	_	_
15-314	4512-4513	-	_	_
15-315	4513-4514	-	_	_
15-316	4514-4515	-	_	_
15-317	4515-4516	-	_	_
15-318	4516-4517	-	_	_
15-319	4517-4518	-	_	_
15-320	4518-4519	-	_	_
15-321	4519-4520	-	_	_
15-322	4520-4521	-	_	_
15-323	4521-4522	-	_	_
15-324	4522-4523	-	_	_
15-325	4524-4531	Finally	_	_
15-326	4532-4535	the	_	_
15-327	4536-4542	models	_	_
15-328	4543-4548	could	_	_
15-329	4549-4551	be	_	_
15-330	4552-4559	trained	_	_
15-331	4560-4563	and	_	_
15-332	4564-4573	evaluated	_	_
15-333	4574-4578	with	_	_
15-334	4579-4582	the	_	_
15-335	4583-4592	following	_	_
15-336	4593-4600	command	_	_
15-337	4600-4601	.	_	_
15-338	4604-4605	`	_	_
15-339	4605-4606	`	_	_
15-340	4606-4607	`	_	_
15-341	4608-4615	python3	_	_
15-341	4608-4614	python	_	_
15-342	4616-4624	train.py	_	_
15-343	4625-4626	<	_	_
15-344	4626-4638	DATASET\_NAME	_	_
15-345	4638-4639	>	_	_
15-346	4640-4641	<	_	_
15-347	4641-4653	MAX\_VERTICES	_	_
15-348	4653-4654	>	_	_
15-349	4655-4656	<	_	_
15-350	4656-4673	START\_SNAPSHOT\_ID	_	_
15-351	4673-4674	>	_	_
15-352	4675-4676	<	_	_
15-353	4676-4691	END\_SNAPSHOT\_ID	_	_
15-354	4691-4692	>	_	_
15-355	4693-4694	<	_	_
15-356	4694-4703	THRESHOLD	_	_
15-357	4703-4704	>	_	_
15-358	4705-4706	<	_	_
15-359	4706-4721	HIDDEN\_DIM\_SIZE	_	_
15-360	4721-4722	>	_	_
15-361	4723-4724	<	_	_
15-362	4724-4730	EPOCHS	_	_
15-363	4730-4731	>	_	_
15-364	4732-4733	<	_	_
15-365	4733-4746	LEARNING\_RATE	_	_
15-366	4746-4747	>	_	_
15-367	4748-4749	<	_	_
15-368	4749-4763	REGULARIZATION	_	_
15-369	4763-4764	>	_	_
15-370	4765-4766	`	_	_
15-371	4766-4767	`	_	_
15-372	4767-4768	`	_	_
15-373	4770-4773	For	_	_
15-374	4774-4781	example	_	_
15-375	4781-4782	:	_	_
15-376	4783-4784	`	_	_
15-377	4784-4785	`	_	_
15-378	4785-4786	`	_	_
15-379	4787-4794	python3	_	_
15-380	4795-4803	train.py	_	_
15-381	4804-4812	football	_	_
15-382	4813-4816	200	_	_
15-383	4817-4818	1	_	_
15-384	4819-4820	4	_	_
15-385	4821-4824	0.4	_	_
15-386	4825-4827	64	_	_
15-387	4828-4831	100	_	_
15-388	4832-4837	0.001	_	_
15-389	4838-4845	0.00001	_	_
15-390	4846-4847	`	_	_
15-391	4847-4848	`	_	_
15-392	4848-4849	`	_	_
15-393	4852-4853	#	_	_
15-394	4853-4854	#	_	_
15-395	4854-4855	#	_	_
15-396	4856-4865	Reference	_	_
15-397	4866-4867	-	_	_
15-398	4867-4868	-	_	_
15-399	4868-4869	-	_	_
15-400	4869-4870	-	_	_
15-401	4870-4871	-	_	_
15-402	4871-4872	-	_	_
15-403	4872-4873	-	_	_
15-404	4873-4874	-	_	_
15-405	4874-4875	-	_	_
15-406	4875-4876	-	_	_
15-407	4876-4877	-	_	_
15-408	4877-4878	-	_	_
15-409	4878-4879	-	_	_
15-410	4879-4880	-	_	_
15-411	4880-4881	-	_	_
15-412	4881-4882	-	_	_
15-413	4885-4886	`	_	_
15-414	4886-4887	`	_	_
15-415	4887-4888	`	_	_
15-416	4889-4890	@	_	_
15-417	4890-4903	inproceedings	_	_
15-418	4903-4904	{	_	_
15-419	4904-4910	CS-TGN	_	_
15-420	4910-4911	,	_	_
15-421	4912-4918	author	_	_
15-422	4919-4920	=	_	_
15-423	4921-4922	{	_	_
15-424	4922-4929	Hashemi	_	_
15-425	4929-4930	,	_	_
15-426	4931-4939	Farnoosh	_	_
15-427	4940-4943	and	_	_
15-428	4944-4951	Behrouz	_	_
15-429	4951-4952	,	_	_
15-430	4953-4956	Ali	_	_
15-431	4957-4960	and	_	_
15-432	4961-4967	Rezaei	_	_
15-433	4968-4976	Hajidehi	_	_
15-434	4976-4977	,	_	_
15-435	4978-4983	Milad	_	_
15-436	4983-4984	}	_	_
15-437	4984-4985	,	_	_
15-438	4986-4991	title	_	_
15-439	4992-4993	=	_	_
15-440	4994-4995	{	_	_
15-441	4995-5001	CS-TGN	_	_
15-442	5001-5002	:	_	_
15-443	5003-5012	Community	_	_
15-444	5013-5019	Search	_	_
15-445	5020-5023	via	_	_
15-446	5024-5032	Temporal	_	_
15-447	5033-5038	Graph	_	_
15-448	5039-5045	Neural	_	_
15-449	5046-5054	Networks	_	_
15-450	5054-5055	}	_	_
15-451	5055-5056	,	_	_
15-452	5057-5061	year	_	_
15-453	5062-5063	=	_	_
15-454	5064-5065	{	_	_
15-455	5065-5069	2023	_	_
15-456	5069-5070	}	_	_
15-457	5070-5071	,	_	_
15-458	5072-5081	publisher	_	_
15-459	5082-5083	=	_	_
15-460	5084-5085	{	_	_
15-461	5085-5096	Association	_	_
15-462	5097-5100	for	_	_
15-463	5101-5110	Computing	_	_
15-464	5111-5120	Machinery	_	_
15-465	5120-5121	}	_	_
15-466	5121-5122	,	_	_
15-467	5123-5130	address	_	_
15-468	5131-5132	=	_	_
15-469	5133-5134	{	_	_
15-470	5134-5137	New	_	_
15-471	5138-5142	York	_	_
15-472	5142-5143	,	_	_
15-473	5144-5146	NY	_	_
15-474	5146-5147	,	_	_
15-475	5148-5151	USA	_	_
15-476	5151-5152	}	_	_
15-477	5152-5153	,	_	_
15-478	5154-5157	url	_	_
15-479	5158-5159	=	_	_
15-480	5160-5161	{	_	_
15-481	5161-5166	https	_	_
15-482	5166-5167	:	_	_
15-483	5167-5168	/	_	_
15-484	5168-5169	/	_	_
15-485	5169-5176	doi.org	_	_
15-486	5176-5177	/	_	_
15-487	5177-5184	10.1145	_	_
15-488	5184-5185	/	_	_
15-489	5185-5200	3543873.3587654	_	_
15-490	5200-5201	}	_	_
15-491	5201-5202	,	_	_
15-492	5203-5206	doi	_	_
15-493	5207-5208	=	_	_
15-494	5209-5210	{	_	_
15-495	5210-5217	10.1145	_	_
15-496	5217-5218	/	_	_
15-497	5218-5233	3543873.3587654	_	_
15-498	5233-5234	}	_	_
15-499	5234-5235	,	_	_
15-500	5236-5245	booktitle	_	_
15-501	5246-5247	=	_	_
15-502	5248-5249	{	_	_
15-503	5249-5258	Companion	_	_
15-504	5259-5270	Proceedings	_	_
15-505	5271-5273	of	_	_
15-506	5274-5277	the	_	_
15-507	5278-5281	Web	_	_
15-508	5282-5292	Conference	_	_
15-509	5293-5297	2023	_	_
15-510	5297-5298	}	_	_
15-511	5298-5299	,	_	_
15-512	5300-5308	numpages	_	_
15-513	5309-5310	=	_	_
15-514	5311-5312	{	_	_
15-515	5312-5313	8	_	_
15-516	5313-5314	}	_	_
15-517	5314-5315	,	_	_
15-518	5316-5324	location	_	_
15-519	5325-5326	=	_	_
15-520	5327-5328	{	_	_
15-521	5328-5334	AUSTIN	_	_
15-522	5334-5335	,	_	_
15-523	5336-5341	TEXAS	_	_
15-524	5341-5342	,	_	_
15-525	5343-5346	USA	_	_
15-526	5346-5347	}	_	_
15-527	5347-5348	,	_	_
15-528	5349-5355	series	_	_
15-529	5356-5357	=	_	_
15-530	5358-5359	{	_	_
15-531	5359-5362	WWW	_	_
15-532	5363-5364	'	_	_
15-533	5364-5366	23	_	_
15-534	5366-5367	}	_	_
15-535	5368-5369	}	_	_
15-536	5370-5371	`	_	_
15-537	5371-5372	`	_	_
15-538	5372-5373	`	_	_