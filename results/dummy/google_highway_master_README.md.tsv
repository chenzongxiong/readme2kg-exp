#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# Efficient and performance-portable vector software  \[//\]: # (placeholder, do not remove)  Highway is a C++ library that provides portable SIMD/vector intrinsics.
1-1	0-1	#	_	_
1-2	2-11	Efficient	_	_
1-3	12-15	and	_	_
1-4	16-36	performance-portable	_	_
1-5	37-43	vector	_	_
1-6	44-52	software	_	_
1-7	54-55	\[	_	_
1-8	55-56	/	_	_
1-9	56-57	/	_	_
1-10	57-58	\]	_	_
1-11	58-59	:	_	_
1-12	60-61	#	_	_
1-13	62-63	(	_	_
1-14	63-74	placeholder	_	_
1-15	74-75	,	_	_
1-16	76-78	do	_	_
1-17	79-82	not	_	_
1-18	83-89	remove	_	_
1-19	89-90	)	_	_
1-20	92-99	Highway	_	_
1-21	100-102	is	*[316]	PROJECT[316]
1-22	103-104	a	*[316]	PROJECT[316]
1-23	105-106	C	*[316]	PROJECT[316]
1-24	106-107	+	*[316]	PROJECT[316]
1-25	107-108	+	*[316]	PROJECT[316]
1-26	109-116	library	*[316]	PROJECT[316]
1-27	117-121	that	*[316]	PROJECT[316]
1-28	122-130	provides	*[316]	PROJECT[316]
1-29	131-139	portable	*[316]	PROJECT[316]
1-30	140-144	SIMD	*[316]	PROJECT[316]
1-31	144-145	/	*[316]	PROJECT[316]
1-32	145-151	vector	*[316]	PROJECT[316]
1-33	152-162	intrinsics	_	_
1-34	162-163	.	_	_

#Text=\[Documentation\](https://google.github.io/highway/en/master/)  Previously licensed under Apache 2, now dual-licensed as Apache 2 / BSD-3.  ## Why  We are passionate about high-performance software.
2-1	165-166	\[	_	_
2-2	166-179	Documentation	_	_
2-3	179-180	\]	_	_
2-4	180-181	(	_	_
2-5	181-186	https	_	_
2-6	186-187	:	_	_
2-7	187-188	/	_	_
2-8	188-189	/	_	_
2-9	189-205	google.github.io	_	_
2-10	205-206	/	_	_
2-11	206-213	highway	_	_
2-12	213-214	/	_	_
2-13	214-216	en	_	_
2-14	216-217	/	_	_
2-15	217-223	master	_	_
2-16	223-224	/	_	_
2-17	224-225	)	_	_
2-18	227-237	Previously	_	_
2-19	238-246	licensed	_	_
2-20	247-252	under	_	_
2-21	253-259	Apache	*[273]	EVALMETRIC[273]
2-22	260-261	2	*[273]	EVALMETRIC[273]
2-23	261-262	,	*[273]	EVALMETRIC[273]
2-24	263-266	now	*[273]	EVALMETRIC[273]
2-25	267-280	dual-licensed	*[273]	EVALMETRIC[273]
2-26	281-283	as	*[273]	EVALMETRIC[273]
2-27	284-290	Apache	_	_
2-28	291-292	2	_	_
2-29	293-294	/	_	_
2-30	295-298	BSD	_	_
2-31	298-299	-	_	_
2-32	299-300	3	_	_
2-33	300-301	.	_	_
2-34	303-304	#	_	_
2-35	304-305	#	_	_
2-36	306-309	Why	_	_
2-37	311-313	We	_	_
2-38	314-317	are	_	_
2-39	318-328	passionate	_	_
2-40	329-334	about	_	_
2-41	335-351	high-performance	_	_
2-42	352-360	software	_	_
2-43	360-361	.	_	_

#Text=We see major untapped potential in CPUs (servers, mobile, desktops).
3-1	362-364	We	_	_
3-2	365-368	see	_	_
3-3	369-374	major	_	_
3-4	375-383	untapped	_	_
3-5	384-393	potential	_	_
3-6	394-396	in	*[305]	SOFTWARE[305]
3-7	397-401	CPUs	_	_
3-8	402-403	(	_	_
3-9	403-410	servers	_	_
3-10	410-411	,	_	_
3-11	412-418	mobile	_	_
3-12	418-419	,	_	_
3-13	420-428	desktops	_	_
3-14	428-429	)	_	_
3-15	429-430	.	_	_

#Text=Highway is for engineers who want to reliably and economically push the boundaries of what is possible in software.  ## How  CPUs provide SIMD/vector instructions that apply the same operation to multiple data items.
4-1	431-438	Highway	_	_
4-2	439-441	is	_	_
4-3	442-445	for	_	_
4-4	446-455	engineers	_	_
4-5	456-459	who	_	_
4-6	460-464	want	_	_
4-7	465-467	to	_	_
4-8	468-476	reliably	_	_
4-9	477-480	and	_	_
4-10	481-493	economically	_	_
4-11	494-498	push	_	_
4-12	499-502	the	_	_
4-13	503-513	boundaries	_	_
4-14	514-516	of	_	_
4-15	517-521	what	_	_
4-16	522-524	is	*[274]	EVALMETRIC[274]
4-17	525-533	possible	*[274]	EVALMETRIC[274]
4-18	534-536	in	*[274]	EVALMETRIC[274]
4-19	537-545	software	*[274]	EVALMETRIC[274]
4-20	545-546	.	*[274]	EVALMETRIC[274]
4-21	548-549	#	*[274]	EVALMETRIC[274]
4-22	549-550	#	*[274]	EVALMETRIC[274]
4-23	551-554	How	*[274]	EVALMETRIC[274]
4-24	556-560	CPUs	*[274]	EVALMETRIC[274]
4-25	561-568	provide	*[274]	EVALMETRIC[274]
4-26	569-573	SIMD	*[274]	EVALMETRIC[274]
4-27	573-574	/	*[274]	EVALMETRIC[274]
4-28	574-580	vector	*[274]	EVALMETRIC[274]
4-29	581-593	instructions	_	_
4-30	594-598	that	_	_
4-31	599-604	apply	_	_
4-32	605-608	the	_	_
4-33	609-613	same	_	_
4-34	614-623	operation	_	_
4-35	624-626	to	_	_
4-36	627-635	multiple	_	_
4-37	636-640	data	_	_
4-38	641-646	items	_	_
4-39	646-647	.	_	_

#Text=This can reduce energy usage e.g.
5-1	648-652	This	_	_
5-2	653-656	can	_	_
5-3	657-663	reduce	_	_
5-4	664-670	energy	_	_
5-5	671-676	usage	_	_
5-6	677-680	e.g	_	_
5-7	680-681	.	_	_

#Text=\*fivefold\* because fewer instructions are executed.
6-1	682-683	\*	_	_
6-2	683-691	fivefold	_	_
6-3	691-692	\*	_	_
6-4	693-700	because	_	_
6-5	701-706	fewer	*[257]	ONTOLOGY[257]
6-6	707-719	instructions	*[257]	ONTOLOGY[257]
6-7	720-723	are	*[257]	ONTOLOGY[257]
6-8	724-732	executed	_	_
6-9	732-733	.	_	_

#Text=We also often see \*5-10x\* speedups.
7-1	734-736	We	_	_
7-2	737-741	also	_	_
7-3	742-747	often	_	_
7-4	748-751	see	_	_
7-5	752-753	\*	_	_
7-6	753-754	5	_	_
7-7	754-755	-	_	_
7-8	755-758	10x	_	_
7-9	758-759	\*	_	_
7-10	760-768	speedups	_	_
7-11	768-769	.	_	_

#Text=Highway makes SIMD/vector programming practical and workable according to these guiding principles:  \*\*Does what you expect\*\*: Highway is a C++ library with carefully-chosen functions that map well to CPU instructions without extensive compiler transformations.
8-1	771-778	Highway	_	_
8-2	779-784	makes	*[265]	CONFERENCE[265]
8-3	785-789	SIMD	*[265]	CONFERENCE[265]
8-4	789-790	/	*[265]	CONFERENCE[265]
8-5	790-796	vector	*[265]	CONFERENCE[265]
8-6	797-808	programming	*[265]	CONFERENCE[265]
8-7	809-818	practical	*[265]	CONFERENCE[265]
8-8	819-822	and	*[265]	CONFERENCE[265]
8-9	823-831	workable	*[265]	CONFERENCE[265]
8-10	832-841	according	*[265]	CONFERENCE[265]
8-11	842-844	to	*[265]	CONFERENCE[265]
8-12	845-850	these	*[265]	CONFERENCE[265]
8-13	851-858	guiding	*[265]	CONFERENCE[265]
8-14	859-869	principles	*[265]	CONFERENCE[265]
8-15	869-870	:	*[265]	CONFERENCE[265]
8-16	872-873	\*	*[265]	CONFERENCE[265]
8-17	873-874	\*	*[265]	CONFERENCE[265]
8-18	874-878	Does	*[265]	CONFERENCE[265]
8-19	879-883	what	*[265]	CONFERENCE[265]
8-20	884-887	you	*[265]	CONFERENCE[265]
8-21	888-894	expect	*[265]	CONFERENCE[265]
8-22	894-895	\*	*[265]	CONFERENCE[265]
8-23	895-896	\*	*[265]	CONFERENCE[265]
8-24	896-897	:	*[265]	CONFERENCE[265]
8-25	898-905	Highway	*[265]	CONFERENCE[265]
8-26	906-908	is	*[265]	CONFERENCE[265]
8-27	909-910	a	*[265]	CONFERENCE[265]
8-28	911-912	C	*[265]	CONFERENCE[265]
8-29	912-913	+	*[265]	CONFERENCE[265]
8-30	913-914	+	*[265]	CONFERENCE[265]
8-31	915-922	library	*[265]	CONFERENCE[265]
8-32	923-927	with	*[265]	CONFERENCE[265]
8-33	928-944	carefully-chosen	*[265]	CONFERENCE[265]
8-34	945-954	functions	*[265]	CONFERENCE[265]
8-35	955-959	that	*[265]	CONFERENCE[265]
8-36	960-963	map	*[265]	CONFERENCE[265]
8-37	964-968	well	*[265]	CONFERENCE[265]
8-38	969-971	to	*[265]	CONFERENCE[265]
8-39	972-975	CPU	*[265]	CONFERENCE[265]
8-40	976-988	instructions	*[265]	CONFERENCE[265]
8-41	989-996	without	*[265]	CONFERENCE[265]
8-42	997-1006	extensive	*[265]	CONFERENCE[265]
8-43	1007-1015	compiler	_	_
8-44	1016-1031	transformations	_	_
8-45	1031-1032	.	_	_

#Text=The resulting code is more predictable and robust to code changes/compiler updates than autovectorization.
9-1	1033-1036	The	_	_
9-2	1037-1046	resulting	_	_
9-3	1047-1051	code	_	_
9-4	1052-1054	is	_	_
9-5	1055-1059	more	_	_
9-6	1060-1071	predictable	_	_
9-7	1072-1075	and	_	_
9-8	1076-1082	robust	_	_
9-9	1083-1085	to	_	_
9-10	1086-1090	code	_	_
9-11	1091-1098	changes	_	_
9-12	1098-1099	/	_	_
9-13	1099-1107	compiler	_	_
9-14	1108-1115	updates	_	_
9-15	1116-1120	than	_	_
9-16	1121-1138	autovectorization	_	_
9-17	1138-1139	.	_	_

#Text=\*\*Works on widely-used platforms\*\*: Highway supports five architectures\; the same application code can target various instruction sets, including those with 'scalable' vectors (size unknown at compile time).
10-1	1141-1142	\*	_	_
10-2	1142-1143	\*	_	_
10-3	1143-1148	Works	_	_
10-4	1149-1151	on	_	_
10-5	1152-1163	widely-used	_	_
10-6	1164-1173	platforms	_	_
10-7	1173-1174	\*	_	_
10-8	1174-1175	\*	_	_
10-9	1175-1176	:	_	_
10-10	1177-1184	Highway	_	_
10-11	1185-1193	supports	_	_
10-12	1194-1198	five	_	_
10-13	1199-1212	architectures	_	_
10-14	1212-1213	\;	_	_
10-15	1214-1217	the	_	_
10-16	1218-1222	same	_	_
10-17	1223-1234	application	_	_
10-18	1235-1239	code	_	_
10-19	1240-1243	can	_	_
10-20	1244-1250	target	_	_
10-21	1251-1258	various	_	_
10-22	1259-1270	instruction	*[266]	CONFERENCE[266]
10-23	1271-1275	sets	*[266]	CONFERENCE[266]
10-24	1275-1276	,	*[266]	CONFERENCE[266]
10-25	1277-1286	including	_	_
10-26	1287-1292	those	_	_
10-27	1293-1297	with	_	_
10-28	1298-1299	'	_	_
10-29	1299-1307	scalable	_	_
10-30	1307-1308	'	_	_
10-31	1309-1316	vectors	_	_
10-32	1317-1318	(	_	_
10-33	1318-1322	size	_	_
10-34	1323-1330	unknown	_	_
10-35	1331-1333	at	_	_
10-36	1334-1341	compile	_	_
10-37	1342-1346	time	_	_
10-38	1346-1347	)	_	_
10-39	1347-1348	.	_	_

#Text=Highway only requires C++11 and supports four families of compilers.
11-1	1349-1356	Highway	_	_
11-2	1357-1361	only	_	_
11-3	1362-1370	requires	_	_
11-4	1371-1372	C	_	_
11-5	1372-1373	+	_	_
11-6	1373-1374	+	_	_
11-7	1374-1376	11	_	_
11-8	1377-1380	and	_	_
11-9	1381-1389	supports	_	_
11-10	1390-1394	four	_	_
11-11	1395-1403	families	_	_
11-12	1404-1406	of	_	_
11-13	1407-1416	compilers	_	_
11-14	1416-1417	.	_	_

#Text=If you would like to use Highway on other platforms, please raise an issue.
12-1	1418-1420	If	_	_
12-2	1421-1424	you	_	_
12-3	1425-1430	would	_	_
12-4	1431-1435	like	_	_
12-5	1436-1438	to	_	_
12-6	1439-1442	use	_	_
12-7	1443-1450	Highway	_	_
12-8	1451-1453	on	_	_
12-9	1454-1459	other	_	_
12-10	1460-1469	platforms	_	_
12-11	1469-1470	,	*[284]	PROGLANG[284]
12-12	1471-1477	please	*[284]	PROGLANG[284]
12-13	1478-1483	raise	*[284]	PROGLANG[284]
12-14	1484-1486	an	_	_
12-15	1487-1492	issue	_	_
12-16	1492-1493	.	_	_

#Text=\*\*Flexible to deploy\*\*: Applications using Highway can run on heterogeneous clouds or client devices, choosing the best available instruction set at runtime.
13-1	1495-1496	\*	_	_
13-2	1496-1497	\*	_	_
13-3	1497-1505	Flexible	_	_
13-4	1506-1508	to	_	_
13-5	1509-1515	deploy	_	_
13-6	1515-1516	\*	_	_
13-7	1516-1517	\*	_	_
13-8	1517-1518	:	_	_
13-9	1519-1531	Applications	_	_
13-10	1532-1537	using	_	_
13-11	1538-1545	Highway	_	_
13-12	1546-1549	can	_	_
13-13	1550-1553	run	_	_
13-14	1554-1556	on	_	_
13-15	1557-1570	heterogeneous	_	_
13-16	1571-1577	clouds	_	_
13-17	1578-1580	or	_	_
13-18	1581-1587	client	_	_
13-19	1588-1595	devices	*[285]	PROGLANG[285]
13-20	1595-1596	,	*[285]	PROGLANG[285]
13-21	1597-1605	choosing	*[285]	PROGLANG[285]
13-22	1606-1609	the	*[285]	PROGLANG[285]
13-23	1610-1614	best	*[285]	PROGLANG[285]
13-24	1615-1624	available	*[285]	PROGLANG[285]
13-25	1625-1636	instruction	*[285]	PROGLANG[285]
13-26	1637-1640	set	_	_
13-27	1641-1643	at	_	_
13-28	1644-1651	runtime	_	_
13-29	1651-1652	.	_	_

#Text=Alternatively, developers may choose to target a single instruction set without any runtime overhead.
14-1	1653-1666	Alternatively	_	_
14-2	1666-1667	,	_	_
14-3	1668-1678	developers	_	_
14-4	1679-1682	may	_	_
14-5	1683-1689	choose	_	_
14-6	1690-1692	to	_	_
14-7	1693-1699	target	_	_
14-8	1700-1701	a	_	_
14-9	1702-1708	single	_	_
14-10	1709-1720	instruction	_	_
14-11	1721-1724	set	_	_
14-12	1725-1732	without	_	_
14-13	1733-1736	any	*[267]	CONFERENCE[267]
14-14	1737-1744	runtime	_	_
14-15	1745-1753	overhead	_	_
14-16	1753-1754	.	_	_

#Text=In both cases, the application code is the same except for swapping `HWY\_STATIC\_DISPATCH` with `HWY\_DYNAMIC\_DISPATCH` plus one line of code.
15-1	1755-1757	In	_	_
15-2	1758-1762	both	_	_
15-3	1763-1768	cases	_	_
15-4	1768-1769	,	_	_
15-5	1770-1773	the	_	_
15-6	1774-1785	application	_	_
15-7	1786-1790	code	_	_
15-8	1791-1793	is	_	_
15-9	1794-1797	the	_	_
15-10	1798-1802	same	_	_
15-11	1803-1809	except	_	_
15-12	1810-1813	for	_	_
15-13	1814-1822	swapping	_	_
15-14	1823-1824	`	_	_
15-15	1824-1843	HWY\_STATIC\_DISPATCH	_	_
15-16	1843-1844	`	*[265]	WORKSHOP[265]
15-17	1845-1849	with	*[265]	WORKSHOP[265]
15-18	1850-1851	`	*[265]	WORKSHOP[265]
15-19	1851-1871	HWY\_DYNAMIC\_DISPATCH	_	_
15-20	1871-1872	`	_	_
15-21	1873-1877	plus	_	_
15-22	1878-1881	one	_	_
15-23	1882-1886	line	_	_
15-24	1887-1889	of	_	_
15-25	1890-1894	code	_	_
15-26	1894-1895	.	_	_

#Text=See also @kfjahnke's \[introduction to dispatching\](https://github.com/kfjahnke/zimt/blob/multi\_isa/examples/multi\_isa\_example/multi\_simd\_isa.md).
16-1	1896-1899	See	_	_
16-2	1900-1904	also	_	_
16-3	1905-1906	@	_	_
16-4	1906-1916	kfjahnke's	_	_
16-5	1917-1918	\[	_	_
16-6	1918-1930	introduction	_	_
16-7	1931-1933	to	_	_
16-8	1934-1945	dispatching	_	_
16-9	1945-1946	\]	_	_
16-10	1946-1947	(	_	_
16-11	1947-1952	https	_	_
16-12	1952-1953	:	_	_
16-13	1953-1954	/	_	_
16-14	1954-1955	/	_	_
16-15	1955-1965	github.com	_	_
16-16	1965-1966	/	_	_
16-17	1966-1974	kfjahnke	_	_
16-18	1974-1975	/	*[259]	LICENSE[259]
16-19	1975-1979	zimt	*[259]	LICENSE[259]
16-20	1979-1980	/	*[259]	LICENSE[259]
16-21	1980-1984	blob	*[259]	LICENSE[259]
16-22	1984-1985	/	*[259]	LICENSE[259]
16-23	1985-1994	multi\_isa	*[259]	LICENSE[259]
16-24	1994-1995	/	*[259]	LICENSE[259]
16-25	1995-2003	examples	*[259]	LICENSE[259]
16-26	2003-2004	/	*[259]	LICENSE[259]
16-27	2004-2021	multi\_isa\_example	*[259]	LICENSE[259]
16-28	2021-2022	/	*[259]	LICENSE[259]
16-29	2022-2039	multi\_simd\_isa.md	_	_
16-30	2039-2040	)	_	_
16-31	2040-2041	.	_	_

#Text=\*\*Suitable for a variety of domains\*\*: Highway provides an extensive set of operations, used for image processing (floating-point), compression, video analysis, linear algebra, cryptography, sorting and random generation.
17-1	2043-2044	\*	_	_
17-2	2044-2045	\*	_	_
17-3	2045-2053	Suitable	_	_
17-4	2054-2057	for	_	_
17-5	2058-2059	a	_	_
17-6	2060-2067	variety	_	_
17-7	2068-2070	of	_	_
17-8	2071-2078	domains	_	_
17-9	2078-2079	\*	_	_
17-10	2079-2080	\*	_	_
17-11	2080-2081	:	_	_
17-12	2082-2089	Highway	_	_
17-13	2090-2098	provides	_	_
17-14	2099-2101	an	_	_
17-15	2102-2111	extensive	_	_
17-16	2112-2115	set	_	_
17-17	2116-2118	of	_	_
17-18	2119-2129	operations	_	_
17-19	2129-2130	,	_	_
17-20	2131-2135	used	_	_
17-21	2136-2139	for	_	_
17-22	2140-2145	image	_	_
17-23	2146-2156	processing	_	_
17-24	2157-2158	(	_	_
17-25	2158-2172	floating-point	_	_
17-26	2172-2173	)	*[268]	CONFERENCE[268]
17-27	2173-2174	,	*[268]	CONFERENCE[268]
17-28	2175-2186	compression	*[268]	CONFERENCE[268]
17-29	2186-2187	,	_	_
17-30	2188-2193	video	_	_
17-31	2194-2202	analysis	_	_
17-32	2202-2203	,	_	_
17-33	2204-2210	linear	_	_
17-34	2211-2218	algebra	_	_
17-35	2218-2219	,	_	_
17-36	2220-2232	cryptography	_	_
17-37	2232-2233	,	_	_
17-38	2234-2241	sorting	_	_
17-39	2242-2245	and	_	_
17-40	2246-2252	random	_	_
17-41	2253-2263	generation	_	_
17-42	2263-2264	.	_	_

#Text=We recognise that new use-cases may require additional ops and are happy to add them where it makes sense (e.g. no performance cliffs on some architectures).
18-1	2265-2267	We	_	_
18-2	2268-2277	recognise	_	_
18-3	2278-2282	that	*[259]	ONTOLOGY[259]
18-4	2283-2286	new	*[259]	ONTOLOGY[259]
18-5	2287-2296	use-cases	*[259]	ONTOLOGY[259]
18-6	2297-2300	may	*[259]	ONTOLOGY[259]
18-7	2301-2308	require	*[259]	ONTOLOGY[259]
18-8	2309-2319	additional	*[259]	ONTOLOGY[259]
18-9	2320-2323	ops	*[259]	ONTOLOGY[259]
18-10	2324-2327	and	*[259]	ONTOLOGY[259]
18-11	2328-2331	are	*[259]	ONTOLOGY[259]
18-12	2332-2337	happy	*[259]	ONTOLOGY[259]
18-13	2338-2340	to	*[259]	ONTOLOGY[259]
18-14	2341-2344	add	*[259]	ONTOLOGY[259]
18-15	2345-2349	them	*[259]	ONTOLOGY[259]
18-16	2350-2355	where	*[259]	ONTOLOGY[259]
18-17	2356-2358	it	*[259]	ONTOLOGY[259]
18-18	2359-2364	makes	*[259]	ONTOLOGY[259]
18-19	2365-2370	sense	*[259]	ONTOLOGY[259]
18-20	2371-2372	(	*[259]	ONTOLOGY[259]
18-21	2372-2375	e.g	*[259]	ONTOLOGY[259]
18-22	2375-2376	.	*[259]	ONTOLOGY[259]
18-23	2377-2379	no	*[259]	ONTOLOGY[259]
18-24	2380-2391	performance	*[259]	ONTOLOGY[259]
18-25	2392-2398	cliffs	*[259]	ONTOLOGY[259]
18-26	2399-2401	on	*[259]	ONTOLOGY[259]
18-27	2402-2406	some	*[259]	ONTOLOGY[259]
18-28	2407-2420	architectures	*[259]	ONTOLOGY[259]
18-29	2420-2421	)	_	_
18-30	2421-2422	.	_	_

#Text=If you would like to discuss, please file an issue.
19-1	2423-2425	If	_	_
19-2	2426-2429	you	_	_
19-3	2430-2435	would	_	_
19-4	2436-2440	like	_	_
19-5	2441-2443	to	_	_
19-6	2444-2451	discuss	_	_
19-7	2451-2452	,	_	_
19-8	2453-2459	please	_	_
19-9	2460-2464	file	_	_
19-10	2465-2467	an	_	_
19-11	2468-2473	issue	_	_
19-12	2473-2474	.	_	_

#Text=\*\*Rewards data-parallel design\*\*: Highway provides tools such as Gather, MaskedLoad, and FixedTag to enable speedups for legacy data structures.
20-1	2476-2477	\*	_	_
20-2	2477-2478	\*	_	_
20-3	2478-2485	Rewards	_	_
20-4	2486-2499	data-parallel	_	_
20-5	2500-2506	design	*[260]	ONTOLOGY[260]
20-6	2506-2507	\*	*[260]	ONTOLOGY[260]
20-7	2507-2508	\*	*[260]	ONTOLOGY[260]
20-8	2508-2509	:	*[260]	ONTOLOGY[260]
20-9	2510-2517	Highway	*[260]	ONTOLOGY[260]
20-10	2518-2526	provides	*[260]	ONTOLOGY[260]
20-11	2527-2532	tools	*[260]	ONTOLOGY[260]
20-12	2533-2537	such	*[260]	ONTOLOGY[260]
20-13	2538-2540	as	*[260]	ONTOLOGY[260]
20-14	2541-2547	Gather	*[260]	ONTOLOGY[260]
20-15	2547-2548	,	*[260]	ONTOLOGY[260]
20-16	2549-2559	MaskedLoad	*[260]	ONTOLOGY[260]
20-17	2559-2560	,	*[260]	ONTOLOGY[260]
20-18	2561-2564	and	*[260]	ONTOLOGY[260]
20-19	2565-2573	FixedTag	*[260]	ONTOLOGY[260]
20-20	2574-2576	to	*[260]	ONTOLOGY[260]
20-21	2577-2583	enable	*[260]	ONTOLOGY[260]
20-22	2584-2592	speedups	*[260]	ONTOLOGY[260]
20-23	2593-2596	for	*[260]	ONTOLOGY[260]
20-24	2597-2603	legacy	_	_
20-25	2604-2608	data	_	_
20-26	2609-2619	structures	_	_
20-27	2619-2620	.	_	_

#Text=However, the biggest gains are unlocked by designing algorithms and data structures for scalable vectors.
21-1	2621-2628	However	_	_
21-2	2628-2629	,	_	_
21-3	2630-2633	the	_	_
21-4	2634-2641	biggest	_	_
21-5	2642-2647	gains	_	_
21-6	2648-2651	are	_	_
21-7	2652-2660	unlocked	_	_
21-8	2661-2663	by	_	_
21-9	2664-2673	designing	_	_
21-10	2674-2684	algorithms	*[246]	PUBLICATION[246]
21-11	2685-2688	and	_	_
21-12	2689-2693	data	_	_
21-13	2694-2704	structures	_	_
21-14	2705-2708	for	_	_
21-15	2709-2717	scalable	_	_
21-16	2718-2725	vectors	_	_
21-17	2725-2726	.	_	_

#Text=Helpful techniques include batching, structure-of-array layouts, and aligned/padded allocations.
22-1	2727-2734	Helpful	_	_
22-2	2735-2745	techniques	_	_
22-3	2746-2753	include	_	_
22-4	2754-2762	batching	_	_
22-5	2762-2763	,	_	_
22-6	2764-2782	structure-of-array	_	_
22-7	2783-2790	layouts	_	_
22-8	2790-2791	,	_	_
22-9	2792-2795	and	_	_
22-10	2796-2803	aligned	_	_
22-11	2803-2804	/	_	_
22-12	2804-2810	padded	_	_
22-13	2811-2822	allocations	_	_
22-14	2822-2823	.	_	_

#Text=We recommend these resources for getting started:  -   \[SIMD for C++ Developers\](http://const.me/articles/simd/simd.pdf) -   \[Algorithms for Modern Hardware\](https://en.algorithmica.org/hpc/) -   \[Optimizing software in C++\](https://agner.org/optimize/optimizing\_cpp.pdf) -   \[Improving performance with SIMD intrinsics in three use cases\](https://stackoverflow.blog/2020/07/08/improving-performance-with-simd-intrinsics-in-three-use-cases/)  ## Examples  Online demos using Compiler Explorer:  -   \[multiple targets with dynamic dispatch\](https://gcc.godbolt.org/z/KM3ben7ET)     (more complicated, but flexible and uses best available SIMD) -   \[single target using -m flags\](https://gcc.godbolt.org/z/rGnjMevKG)     (simpler, but requires/only uses the instruction set enabled by compiler     flags)  We observe that Highway is referenced in the following open source projects, found via sourcegraph.com.
23-1	2825-2827	We	_	_
23-2	2828-2837	recommend	_	_
23-3	2838-2843	these	_	_
23-4	2844-2853	resources	_	_
23-5	2854-2857	for	_	_
23-6	2858-2865	getting	_	_
23-7	2866-2873	started	_	_
23-8	2873-2874	:	*[276]	EVALMETRIC[276]
23-9	2876-2877	-	*[276]	EVALMETRIC[276]
23-10	2880-2881	\[	*[276]	EVALMETRIC[276]
23-11	2881-2885	SIMD	*[276]	EVALMETRIC[276]
23-12	2886-2889	for	*[276]	EVALMETRIC[276]
23-13	2890-2891	C	*[276]	EVALMETRIC[276]
23-14	2891-2892	+	*[276]	EVALMETRIC[276]
23-15	2892-2893	+	*[276]	EVALMETRIC[276]
23-16	2894-2904	Developers	*[276]	EVALMETRIC[276]
23-17	2904-2905	\]	*[276]	EVALMETRIC[276]
23-18	2905-2906	(	*[276]	EVALMETRIC[276]
23-19	2906-2910	http	*[276]	EVALMETRIC[276]
23-20	2910-2911	:	*[276]	EVALMETRIC[276]
23-21	2911-2912	/	*[276]	EVALMETRIC[276]
23-22	2912-2913	/	*[276]	EVALMETRIC[276]
23-23	2913-2921	const.me	*[276]	EVALMETRIC[276]
23-24	2921-2922	/	*[276]	EVALMETRIC[276]
23-25	2922-2930	articles	*[276]	EVALMETRIC[276]
23-26	2930-2931	/	*[276]	EVALMETRIC[276]
23-27	2931-2935	simd	*[276]	EVALMETRIC[276]
23-28	2935-2936	/	*[276]	EVALMETRIC[276]
23-29	2936-2944	simd.pdf	*[276]	EVALMETRIC[276]
23-30	2944-2945	)	*[276]	EVALMETRIC[276]
23-31	2946-2947	-	*[276]	EVALMETRIC[276]
23-32	2950-2951	\[	*[276]	EVALMETRIC[276]
23-33	2951-2961	Algorithms	*[276]	EVALMETRIC[276]
23-34	2962-2965	for	_	_
23-35	2966-2972	Modern	_	_
23-36	2973-2981	Hardware	_	_
23-37	2981-2982	\]	_	_
23-38	2982-2983	(	_	_
23-39	2983-2988	https	_	_
23-40	2988-2989	:	_	_
23-41	2989-2990	/	_	_
23-42	2990-2991	/	_	_
23-43	2991-3010	en.algorithmica.org	_	_
23-44	3010-3011	/	_	_
23-45	3011-3014	hpc	_	_
23-46	3014-3015	/	_	_
23-47	3015-3016	)	_	_
23-48	3017-3018	-	_	_
23-49	3021-3022	\[	_	_
23-50	3022-3032	Optimizing	_	_
23-51	3033-3041	software	_	_
23-52	3042-3044	in	_	_
23-53	3045-3046	C	_	_
23-54	3046-3047	+	_	_
23-55	3047-3048	+	_	_
23-56	3048-3049	\]	_	_
23-57	3049-3050	(	_	_
23-58	3050-3055	https	_	_
23-59	3055-3056	:	_	_
23-60	3056-3057	/	_	_
23-61	3057-3058	/	_	_
23-62	3058-3067	agner.org	_	_
23-63	3067-3068	/	_	_
23-64	3068-3076	optimize	_	_
23-65	3076-3077	/	_	_
23-66	3077-3095	optimizing\_cpp.pdf	_	_
23-67	3095-3096	)	_	_
23-68	3097-3098	-	_	_
23-69	3101-3102	\[	_	_
23-70	3102-3111	Improving	_	_
23-71	3112-3123	performance	_	_
23-72	3124-3128	with	_	_
23-73	3129-3133	SIMD	_	_
23-74	3134-3144	intrinsics	_	_
23-75	3145-3147	in	_	_
23-76	3148-3153	three	_	_
23-77	3154-3157	use	_	_
23-78	3158-3163	cases	_	_
23-79	3163-3164	\]	_	_
23-80	3164-3165	(	_	_
23-81	3165-3170	https	_	_
23-82	3170-3171	:	_	_
23-83	3171-3172	/	_	_
23-84	3172-3173	/	_	_
23-85	3173-3191	stackoverflow.blog	_	_
23-86	3191-3192	/	_	_
23-87	3192-3196	2020	_	_
23-88	3196-3197	/	_	_
23-89	3197-3199	07	_	_
23-90	3199-3200	/	_	_
23-91	3200-3202	08	_	_
23-92	3202-3203	/	_	_
23-93	3203-3264	improving-performance-with-simd-intrinsics-in-three-use-cases	_	_
23-94	3264-3265	/	_	_
23-95	3265-3266	)	_	_
23-96	3268-3269	#	_	_
23-97	3269-3270	#	_	_
23-98	3271-3279	Examples	_	_
23-99	3281-3287	Online	_	_
23-100	3288-3293	demos	_	_
23-101	3294-3299	using	_	_
23-102	3300-3308	Compiler	_	_
23-103	3309-3317	Explorer	_	_
23-104	3317-3318	:	_	_
23-105	3320-3321	-	_	_
23-106	3324-3325	\[	_	_
23-107	3325-3333	multiple	_	_
23-108	3334-3341	targets	_	_
23-109	3342-3346	with	_	_
23-110	3347-3354	dynamic	_	_
23-111	3355-3363	dispatch	_	_
23-112	3363-3364	\]	_	_
23-113	3364-3365	(	_	_
23-114	3365-3370	https	_	_
23-115	3370-3371	:	_	_
23-116	3371-3372	/	_	_
23-117	3372-3373	/	_	_
23-118	3373-3388	gcc.godbolt.org	_	_
23-119	3388-3389	/	_	_
23-120	3389-3390	z	_	_
23-121	3390-3391	/	_	_
23-122	3391-3400	KM3ben7ET	_	_
23-123	3400-3401	)	_	_
23-124	3406-3407	(	_	_
23-125	3407-3411	more	_	_
23-126	3412-3423	complicated	_	_
23-127	3423-3424	,	_	_
23-128	3425-3428	but	_	_
23-129	3429-3437	flexible	_	_
23-130	3438-3441	and	_	_
23-131	3442-3446	uses	_	_
23-132	3447-3451	best	_	_
23-133	3452-3461	available	_	_
23-134	3462-3466	SIMD	_	_
23-135	3466-3467	)	_	_
23-136	3468-3469	-	_	_
23-137	3472-3473	\[	_	_
23-138	3473-3479	single	_	_
23-139	3480-3486	target	_	_
23-140	3487-3492	using	_	_
23-141	3493-3494	-	_	_
23-142	3494-3495	m	_	_
23-143	3496-3501	flags	_	_
23-144	3501-3502	\]	_	_
23-145	3502-3503	(	_	_
23-146	3503-3508	https	_	_
23-147	3508-3509	:	_	_
23-148	3509-3510	/	_	_
23-149	3510-3511	/	_	_
23-150	3511-3526	gcc.godbolt.org	_	_
23-151	3526-3527	/	_	_
23-152	3527-3528	z	_	_
23-153	3528-3529	/	_	_
23-154	3529-3538	rGnjMevKG	_	_
23-155	3538-3539	)	_	_
23-156	3544-3545	(	_	_
23-157	3545-3552	simpler	_	_
23-158	3552-3553	,	_	_
23-159	3554-3557	but	_	_
23-160	3558-3566	requires	_	_
23-161	3566-3567	/	_	_
23-162	3567-3571	only	_	_
23-163	3572-3576	uses	_	_
23-164	3577-3580	the	_	_
23-165	3581-3592	instruction	_	_
23-166	3593-3596	set	_	_
23-167	3597-3604	enabled	_	_
23-168	3605-3607	by	_	_
23-169	3608-3616	compiler	_	_
23-170	3621-3626	flags	_	_
23-171	3626-3627	)	_	_
23-172	3629-3631	We	_	_
23-173	3632-3639	observe	_	_
23-174	3640-3644	that	_	_
23-175	3645-3652	Highway	_	_
23-176	3653-3655	is	_	_
23-177	3656-3666	referenced	_	_
23-178	3667-3669	in	_	_
23-179	3670-3673	the	_	_
23-180	3674-3683	following	_	_
23-181	3684-3688	open	_	_
23-182	3689-3695	source	_	_
23-183	3696-3704	projects	_	_
23-184	3704-3705	,	_	_
23-185	3706-3711	found	_	_
23-186	3712-3715	via	_	_
23-187	3716-3731	sourcegraph.com	_	_
23-188	3731-3732	.	_	_

#Text=Most are GitHub repositories.
24-1	3733-3737	Most	_	_
24-2	3738-3741	are	_	_
24-3	3742-3748	GitHub	_	_
24-4	3749-3761	repositories	_	_
24-5	3761-3762	.	_	_

#Text=If you would like to add your project or link to it directly, feel free to raise an issue or contact us via the below email
25-1	3763-3765	If	_	_
25-2	3766-3769	you	_	_
25-3	3770-3775	would	_	_
25-4	3776-3780	like	_	_
25-5	3781-3783	to	_	_
25-6	3784-3787	add	_	_
25-7	3788-3792	your	_	_
25-8	3793-3800	project	_	_
25-9	3801-3803	or	_	_
25-10	3804-3808	link	_	_
25-11	3809-3811	to	_	_
25-12	3812-3814	it	_	_
25-13	3815-3823	directly	_	_
25-14	3823-3824	,	_	_
25-15	3825-3829	feel	_	_
25-16	3830-3834	free	_	_
25-17	3835-3837	to	_	_
25-18	3838-3843	raise	_	_
25-19	3844-3846	an	_	_
25-20	3847-3852	issue	_	_
25-21	3853-3855	or	_	_
25-22	3856-3863	contact	_	_
25-23	3864-3866	us	_	_
25-24	3867-3870	via	_	_
25-25	3871-3874	the	_	_
25-26	3875-3880	below	_	_
25-27	3881-3886	email	_	_

#Text=.
26-1	3886-3887	.	_	_

#Text=\*   Audio: \[Zimtohrli perceptual metric\](https://github.com/google/zimtohrli) \*   Browsers: Chromium (+Vivaldi), Firefox (+floorp / foxhound / librewolf /     Waterfox) \*   Computational biology: \[RNA analysis\](https://github.com/bnprks/BPCells) \*   Computer graphics: \[Sparse voxel renderer\](https://github.com/rools/voxl) \*   Cryptography: google/distributed\_point\_functions, google/shell-encryption \*   Data structures: bkille/BitLib \*   Image codecs: eustas/2im,     \[Grok JPEG 2000\](https://github.com/GrokImageCompression/grok),     \[JPEG XL\](https://github.com/libjxl/libjxl),     \[JPEGenc\](https://github.com/osamu620/JPEGenc),     \[Jpegli\](https://github.com/google/jpegli), OpenHTJ2K \*   Image processing: cloudinary/ssimulacra2, m-ab-s/media-autobuild\_suite,     \[libvips\](https://github.com/libvips/libvips) \*   Image viewers: AlienCowEatCake/ImageViewer, diffractor/diffractor,     mirillis/jpegxl-wic,     \[Lux panorama/image viewer\](https://bitbucket.org/kfj/pv/) \*   Information retrieval:     \[iresearch database index\](https://github.com/iresearch-toolkit/iresearch),     michaeljclark/zvec,     \[nebula interactive analytics / OLAP\](https://github.com/varchar-io/nebula),     \[ScaNN Scalable Nearest Neighbors\](https://github.com/google-research/google-research/tree/7a269cb2ce0ae1db591fe11b62cbc0be7d72532a/scann),     \[vectorlite vector search\](https://github.com/1yefuwang1/vectorlite/) \*   Machine learning: \[gemma.cpp\](https://github.com/google/gemma.cpp),     Tensorflow, Numpy, zpye/SimpleInfer \*   Robotics:     \[MIT Model-Based Design and Verification\](https://github.com/RobotLocomotion/drake)  Other  \*   \[Evaluation of C++ SIMD Libraries\](https://www.mnm-team.org/pub/Fopras/rock23/):     "Highway excelled with a strong performance across multiple SIMD extensions     \[..\].
27-1	3889-3890	\*	_	_
27-2	3893-3898	Audio	_	_
27-3	3898-3899	:	_	_
27-4	3900-3901	\[	_	_
27-5	3901-3910	Zimtohrli	_	_
27-6	3911-3921	perceptual	_	_
27-7	3922-3928	metric	_	_
27-8	3928-3929	\]	_	_
27-9	3929-3930	(	_	_
27-10	3930-3935	https	_	_
27-11	3935-3936	:	_	_
27-12	3936-3937	/	_	_
27-13	3937-3938	/	_	_
27-14	3938-3948	github.com	_	_
27-15	3948-3949	/	_	_
27-16	3949-3955	google	_	_
27-17	3955-3956	/	_	_
27-18	3956-3965	zimtohrli	_	_
27-19	3965-3966	)	_	_
27-20	3967-3968	\*	_	_
27-21	3971-3979	Browsers	_	_
27-22	3979-3980	:	_	_
27-23	3981-3989	Chromium	_	_
27-24	3990-3991	(	_	_
27-25	3991-3992	+	_	_
27-26	3992-3999	Vivaldi	_	_
27-27	3999-4000	)	_	_
27-28	4000-4001	,	_	_
27-29	4002-4009	Firefox	_	_
27-30	4010-4011	(	_	_
27-31	4011-4012	+	_	_
27-32	4012-4018	floorp	_	_
27-33	4019-4020	/	_	_
27-34	4021-4029	foxhound	_	_
27-35	4030-4031	/	_	_
27-36	4032-4041	librewolf	_	_
27-37	4042-4043	/	_	_
27-38	4048-4056	Waterfox	_	_
27-39	4056-4057	)	_	_
27-40	4058-4059	\*	_	_
27-41	4062-4075	Computational	_	_
27-42	4076-4083	biology	_	_
27-43	4083-4084	:	_	_
27-44	4085-4086	\[	_	_
27-45	4086-4089	RNA	_	_
27-46	4090-4098	analysis	_	_
27-47	4098-4099	\]	_	_
27-48	4099-4100	(	_	_
27-49	4100-4105	https	_	_
27-50	4105-4106	:	_	_
27-51	4106-4107	/	_	_
27-52	4107-4108	/	_	_
27-53	4108-4118	github.com	_	_
27-54	4118-4119	/	_	_
27-55	4119-4125	bnprks	_	_
27-56	4125-4126	/	_	_
27-57	4126-4133	BPCells	_	_
27-58	4133-4134	)	_	_
27-59	4135-4136	\*	_	_
27-60	4139-4147	Computer	_	_
27-61	4148-4156	graphics	_	_
27-62	4156-4157	:	_	_
27-63	4158-4159	\[	_	_
27-64	4159-4165	Sparse	_	_
27-65	4166-4171	voxel	_	_
27-66	4172-4180	renderer	_	_
27-67	4180-4181	\]	_	_
27-68	4181-4182	(	_	_
27-69	4182-4187	https	_	_
27-70	4187-4188	:	_	_
27-71	4188-4189	/	_	_
27-72	4189-4190	/	_	_
27-73	4190-4200	github.com	_	_
27-74	4200-4201	/	_	_
27-75	4201-4206	rools	_	_
27-76	4206-4207	/	_	_
27-77	4207-4211	voxl	_	_
27-78	4211-4212	)	_	_
27-79	4213-4214	\*	_	_
27-80	4217-4229	Cryptography	_	_
27-81	4229-4230	:	_	_
27-82	4231-4237	google	_	_
27-83	4237-4238	/	_	_
27-84	4238-4265	distributed\_point\_functions	_	_
27-85	4265-4266	,	_	_
27-86	4267-4273	google	_	_
27-87	4273-4274	/	_	_
27-88	4274-4290	shell-encryption	_	_
27-89	4291-4292	\*	_	_
27-90	4295-4299	Data	_	_
27-91	4300-4310	structures	_	_
27-92	4310-4311	:	_	_
27-93	4312-4318	bkille	_	_
27-94	4318-4319	/	_	_
27-95	4319-4325	BitLib	_	_
27-96	4326-4327	\*	_	_
27-97	4330-4335	Image	_	_
27-98	4336-4342	codecs	_	_
27-99	4342-4343	:	_	_
27-100	4344-4350	eustas	_	_
27-101	4350-4351	/	*[247]	PUBLICATION[247]
27-102	4351-4354	2im	*[247]	PUBLICATION[247]
27-103	4354-4355	,	*[247]	PUBLICATION[247]
27-104	4360-4361	\[	*[247]	PUBLICATION[247]
27-105	4361-4365	Grok	*[247]	PUBLICATION[247]
27-106	4366-4370	JPEG	_	_
27-107	4371-4375	2000	_	_
27-108	4375-4376	\]	_	_
27-109	4376-4377	(	_	_
27-110	4377-4382	https	_	_
27-111	4382-4383	:	_	_
27-112	4383-4384	/	_	_
27-113	4384-4385	/	_	_
27-114	4385-4395	github.com	_	_
27-115	4395-4396	/	_	_
27-116	4396-4416	GrokImageCompression	_	_
27-117	4416-4417	/	_	_
27-118	4417-4421	grok	_	_
27-119	4421-4422	)	_	_
27-120	4422-4423	,	_	_
27-121	4428-4429	\[	_	_
27-122	4429-4433	JPEG	_	_
27-123	4434-4436	XL	_	_
27-124	4436-4437	\]	_	_
27-125	4437-4438	(	_	_
27-126	4438-4443	https	_	_
27-127	4443-4444	:	_	_
27-128	4444-4445	/	_	_
27-129	4445-4446	/	_	_
27-130	4446-4456	github.com	_	_
27-131	4456-4457	/	_	_
27-132	4457-4463	libjxl	_	_
27-133	4463-4464	/	_	_
27-134	4464-4470	libjxl	_	_
27-135	4470-4471	)	_	_
27-136	4471-4472	,	_	_
27-137	4477-4478	\[	_	_
27-138	4478-4485	JPEGenc	_	_
27-139	4485-4486	\]	_	_
27-140	4486-4487	(	_	_
27-141	4487-4492	https	_	_
27-142	4492-4493	:	_	_
27-143	4493-4494	/	_	_
27-144	4494-4495	/	_	_
27-145	4495-4505	github.com	_	_
27-146	4505-4506	/	_	_
27-147	4506-4514	osamu620	_	_
27-148	4514-4515	/	_	_
27-149	4515-4522	JPEGenc	_	_
27-150	4522-4523	)	_	_
27-151	4523-4524	,	_	_
27-152	4529-4530	\[	_	_
27-153	4530-4536	Jpegli	_	_
27-154	4536-4537	\]	_	_
27-155	4537-4538	(	_	_
27-156	4538-4543	https	_	_
27-157	4543-4544	:	_	_
27-158	4544-4545	/	_	_
27-159	4545-4546	/	_	_
27-160	4546-4556	github.com	_	_
27-161	4556-4557	/	_	_
27-162	4557-4563	google	_	_
27-163	4563-4564	/	_	_
27-164	4564-4570	jpegli	_	_
27-165	4570-4571	)	_	_
27-166	4571-4572	,	_	_
27-167	4573-4582	OpenHTJ2K	_	_
27-168	4583-4584	\*	_	_
27-169	4587-4592	Image	_	_
27-170	4593-4603	processing	_	_
27-171	4603-4604	:	_	_
27-172	4605-4615	cloudinary	_	_
27-173	4615-4616	/	_	_
27-174	4616-4627	ssimulacra2	_	_
27-175	4627-4628	,	_	_
27-176	4629-4635	m-ab-s	_	_
27-177	4635-4636	/	_	_
27-178	4636-4657	media-autobuild\_suite	_	_
27-179	4657-4658	,	_	_
27-180	4663-4664	\[	_	_
27-181	4664-4671	libvips	_	_
27-182	4671-4672	\]	_	_
27-183	4672-4673	(	_	_
27-184	4673-4678	https	_	_
27-185	4678-4679	:	_	_
27-186	4679-4680	/	_	_
27-187	4680-4681	/	_	_
27-188	4681-4691	github.com	_	_
27-189	4691-4692	/	_	_
27-190	4692-4699	libvips	_	_
27-191	4699-4700	/	_	_
27-192	4700-4707	libvips	_	_
27-193	4707-4708	)	_	_
27-194	4709-4710	\*	_	_
27-195	4713-4718	Image	_	_
27-196	4719-4726	viewers	_	_
27-197	4726-4727	:	_	_
27-198	4728-4743	AlienCowEatCake	_	_
27-199	4743-4744	/	_	_
27-200	4744-4755	ImageViewer	_	_
27-201	4755-4756	,	_	_
27-202	4757-4767	diffractor	_	_
27-203	4767-4768	/	_	_
27-204	4768-4778	diffractor	_	_
27-205	4778-4779	,	_	_
27-206	4784-4792	mirillis	_	_
27-207	4792-4793	/	_	_
27-208	4793-4803	jpegxl-wic	_	_
27-209	4803-4804	,	_	_
27-210	4809-4810	\[	_	_
27-211	4810-4813	Lux	_	_
27-212	4814-4822	panorama	_	_
27-213	4822-4823	/	_	_
27-214	4823-4828	image	_	_
27-215	4829-4835	viewer	_	_
27-216	4835-4836	\]	_	_
27-217	4836-4837	(	_	_
27-218	4837-4842	https	_	_
27-219	4842-4843	:	_	_
27-220	4843-4844	/	_	_
27-221	4844-4845	/	_	_
27-222	4845-4858	bitbucket.org	_	_
27-223	4858-4859	/	_	_
27-224	4859-4862	kfj	_	_
27-225	4862-4863	/	_	_
27-226	4863-4865	pv	_	_
27-227	4865-4866	/	_	_
27-228	4866-4867	)	_	_
27-229	4868-4869	\*	_	_
27-230	4872-4883	Information	_	_
27-231	4884-4893	retrieval	_	_
27-232	4893-4894	:	_	_
27-233	4899-4900	\[	_	_
27-234	4900-4909	iresearch	_	_
27-235	4910-4918	database	_	_
27-236	4919-4924	index	_	_
27-237	4924-4925	\]	_	_
27-238	4925-4926	(	_	_
27-239	4926-4931	https	_	_
27-240	4931-4932	:	_	_
27-241	4932-4933	/	_	_
27-242	4933-4934	/	_	_
27-243	4934-4944	github.com	_	_
27-244	4944-4945	/	_	_
27-245	4945-4962	iresearch-toolkit	_	_
27-246	4962-4963	/	_	_
27-247	4963-4972	iresearch	_	_
27-248	4972-4973	)	_	_
27-249	4973-4974	,	_	_
27-250	4979-4992	michaeljclark	_	_
27-251	4992-4993	/	_	_
27-252	4993-4997	zvec	_	_
27-253	4997-4998	,	_	_
27-254	5003-5004	\[	_	_
27-255	5004-5010	nebula	_	_
27-256	5011-5022	interactive	_	_
27-257	5023-5032	analytics	_	_
27-258	5033-5034	/	_	_
27-259	5035-5039	OLAP	_	_
27-260	5039-5040	\]	_	_
27-261	5040-5041	(	_	_
27-262	5041-5046	https	_	_
27-263	5046-5047	:	_	_
27-264	5047-5048	/	_	_
27-265	5048-5049	/	_	_
27-266	5049-5059	github.com	_	_
27-267	5059-5060	/	_	_
27-268	5060-5070	varchar-io	_	_
27-269	5070-5071	/	_	_
27-270	5071-5077	nebula	_	_
27-271	5077-5078	)	_	_
27-272	5078-5079	,	_	_
27-273	5084-5085	\[	_	_
27-274	5085-5090	ScaNN	_	_
27-275	5091-5099	Scalable	_	_
27-276	5100-5107	Nearest	_	_
27-277	5108-5117	Neighbors	_	_
27-278	5117-5118	\]	_	_
27-279	5118-5119	(	_	_
27-280	5119-5124	https	_	_
27-281	5124-5125	:	_	_
27-282	5125-5126	/	_	_
27-283	5126-5127	/	_	_
27-284	5127-5137	github.com	_	_
27-285	5137-5138	/	_	_
27-286	5138-5153	google-research	_	_
27-287	5153-5154	/	_	_
27-288	5154-5169	google-research	_	_
27-289	5169-5170	/	_	_
27-290	5170-5174	tree	_	_
27-291	5174-5175	/	_	_
27-292	5175-5215	7a269cb2ce0ae1db591fe11b62cbc0be7d72532a	_	_
27-293	5215-5216	/	_	_
27-294	5216-5221	scann	_	_
27-295	5221-5222	)	_	_
27-296	5222-5223	,	_	_
27-297	5228-5229	\[	_	_
27-298	5229-5239	vectorlite	_	_
27-299	5240-5246	vector	_	_
27-300	5247-5253	search	_	_
27-301	5253-5254	\]	_	_
27-302	5254-5255	(	_	_
27-303	5255-5260	https	_	_
27-304	5260-5261	:	_	_
27-305	5261-5262	/	_	_
27-306	5262-5263	/	_	_
27-307	5263-5273	github.com	_	_
27-308	5273-5274	/	_	_
27-309	5274-5284	1yefuwang1	_	_
27-310	5284-5285	/	_	_
27-311	5285-5295	vectorlite	_	_
27-312	5295-5296	/	_	_
27-313	5296-5297	)	_	_
27-314	5298-5299	\*	_	_
27-315	5302-5309	Machine	_	_
27-316	5310-5318	learning	_	_
27-317	5318-5319	:	_	_
27-318	5320-5321	\[	_	_
27-319	5321-5330	gemma.cpp	_	_
27-320	5330-5331	\]	_	_
27-321	5331-5332	(	_	_
27-322	5332-5337	https	_	_
27-323	5337-5338	:	_	_
27-324	5338-5339	/	_	_
27-325	5339-5340	/	_	_
27-326	5340-5350	github.com	_	_
27-327	5350-5351	/	_	_
27-328	5351-5357	google	_	_
27-329	5357-5358	/	_	_
27-330	5358-5367	gemma.cpp	_	_
27-331	5367-5368	)	_	_
27-332	5368-5369	,	_	_
27-333	5374-5384	Tensorflow	_	_
27-334	5384-5385	,	_	_
27-335	5386-5391	Numpy	_	_
27-336	5391-5392	,	_	_
27-337	5393-5397	zpye	_	_
27-338	5397-5398	/	_	_
27-339	5398-5409	SimpleInfer	_	_
27-340	5410-5411	\*	_	_
27-341	5414-5422	Robotics	_	_
27-342	5422-5423	:	_	_
27-343	5428-5429	\[	_	_
27-344	5429-5432	MIT	_	_
27-345	5433-5444	Model-Based	_	_
27-346	5445-5451	Design	_	_
27-347	5452-5455	and	_	_
27-348	5456-5468	Verification	_	_
27-349	5468-5469	\]	_	_
27-350	5469-5470	(	_	_
27-351	5470-5475	https	_	_
27-352	5475-5476	:	_	_
27-353	5476-5477	/	_	_
27-354	5477-5478	/	_	_
27-355	5478-5488	github.com	_	_
27-356	5488-5489	/	_	_
27-357	5489-5504	RobotLocomotion	_	_
27-358	5504-5505	/	_	_
27-359	5505-5510	drake	_	_
27-360	5510-5511	)	_	_
27-361	5513-5518	Other	_	_
27-362	5520-5521	\*	_	_
27-363	5524-5525	\[	_	_
27-364	5525-5535	Evaluation	_	_
27-365	5536-5538	of	_	_
27-366	5539-5540	C	_	_
27-367	5540-5541	+	_	_
27-368	5541-5542	+	_	_
27-369	5543-5547	SIMD	_	_
27-370	5548-5557	Libraries	_	_
27-371	5557-5558	\]	_	_
27-372	5558-5559	(	_	_
27-373	5559-5564	https	_	_
27-374	5564-5565	:	_	_
27-375	5565-5566	/	_	_
27-376	5566-5567	/	_	_
27-377	5567-5583	www.mnm-team.org	_	_
27-378	5583-5584	/	_	_
27-379	5584-5587	pub	_	_
27-380	5587-5588	/	_	_
27-381	5588-5594	Fopras	_	_
27-382	5594-5595	/	_	_
27-383	5595-5601	rock23	_	_
27-384	5601-5602	/	_	_
27-385	5602-5603	)	_	_
27-386	5603-5604	:	_	_
27-387	5609-5610	"	_	_
27-388	5610-5617	Highway	_	_
27-389	5618-5626	excelled	_	_
27-390	5627-5631	with	_	_
27-391	5632-5633	a	_	_
27-392	5634-5640	strong	_	_
27-393	5641-5652	performance	_	_
27-394	5653-5659	across	_	_
27-395	5660-5668	multiple	_	_
27-396	5669-5673	SIMD	_	_
27-397	5674-5684	extensions	_	_
27-398	5689-5690	\[	_	_
27-399	5690-5691	.	_	_
27-400	5691-5692	.	_	_
27-401	5692-5693	\]	_	_
27-402	5693-5694	.	_	_

#Text=Thus, Highway may currently be the most suitable SIMD library for many     software projects." \*   \[zimt\](https://github.com/kfjahnke/zimt): C++11 template library to process n-dimensional arrays with multi-threaded SIMD code \*   \[vectorized Quicksort\](https://github.com/google/highway/tree/master/hwy/contrib/sort) (\[paper\](https://arxiv.org/abs/2205.05982))  If you'd like to get Highway, in addition to cloning from this GitHub repository or using it as a Git submodule, you can also find it in the following package managers or repositories:  \*   alpinelinux \*   conan-io \*   conda-forge \*   DragonFlyBSD, \*   fd00/yacp \*   freebsd \*   getsolus/packages \*   ghostbsd \*   microsoft/vcpkg \*   MidnightBSD \*   MSYS2 \*   NetBSD \*   openSUSE \*   opnsense \*   Xilinx/Vitis\_Libraries \*   xmake-io/xmake-repo  See also the list at https://repology.org/project/highway-simd-library/versions .  ## Current status  ### Targets  Highway supports 24 targets, listed in alphabetical order of platform:  -   Any: `EMU128`, `SCALAR`\; -   Armv7+: `NEON\_WITHOUT\_AES`, `NEON`, `NEON\_BF16`, `SVE`, `SVE2`, `SVE\_256`,     `SVE2\_128`\; -   IBM Z: `Z14`, `Z15`\; -   POWER: `PPC8` (v2.07), `PPC9` (v3.0), `PPC10` (v3.1B, not yet supported due     to compiler bugs, see #1207\; also requires QEMU 7.2)\; -   RISC-V: `RVV` (1.0)\; -   WebAssembly: `WASM`, `WASM\_EMU256` (a 2x unrolled version of wasm128,     enabled if `HWY\_WANT\_WASM2` is defined.
28-1	5695-5699	Thus	_	_
28-2	5699-5700	,	_	_
28-3	5701-5708	Highway	_	_
28-4	5709-5712	may	_	_
28-5	5713-5722	currently	_	_
28-6	5723-5725	be	_	_
28-7	5726-5729	the	_	_
28-8	5730-5734	most	_	_
28-9	5735-5743	suitable	_	_
28-10	5744-5748	SIMD	_	_
28-11	5749-5756	library	_	_
28-12	5757-5760	for	_	_
28-13	5761-5765	many	_	_
28-14	5770-5778	software	_	_
28-15	5779-5787	projects	_	_
28-16	5787-5788	.	_	_
28-17	5788-5789	"	_	_
28-18	5790-5791	\*	_	_
28-19	5794-5795	\[	_	_
28-20	5795-5799	zimt	_	_
28-21	5799-5800	\]	_	_
28-22	5800-5801	(	_	_
28-23	5801-5806	https	_	_
28-24	5806-5807	:	_	_
28-25	5807-5808	/	_	_
28-26	5808-5809	/	_	_
28-27	5809-5819	github.com	_	_
28-28	5819-5820	/	_	_
28-29	5820-5828	kfjahnke	_	_
28-30	5828-5829	/	_	_
28-31	5829-5833	zimt	_	_
28-32	5833-5834	)	_	_
28-33	5834-5835	:	_	_
28-34	5836-5837	C	_	_
28-35	5837-5838	+	_	_
28-36	5838-5839	+	_	_
28-37	5839-5841	11	_	_
28-38	5842-5850	template	_	_
28-39	5851-5858	library	_	_
28-40	5859-5861	to	_	_
28-41	5862-5869	process	_	_
28-42	5870-5883	n-dimensional	_	_
28-43	5884-5890	arrays	_	_
28-44	5891-5895	with	_	_
28-45	5896-5910	multi-threaded	_	_
28-46	5911-5915	SIMD	_	_
28-47	5916-5920	code	_	_
28-48	5921-5922	\*	_	_
28-49	5925-5926	\[	_	_
28-50	5926-5936	vectorized	_	_
28-51	5937-5946	Quicksort	_	_
28-52	5946-5947	\]	_	_
28-53	5947-5948	(	_	_
28-54	5948-5953	https	_	_
28-55	5953-5954	:	_	_
28-56	5954-5955	/	_	_
28-57	5955-5956	/	_	_
28-58	5956-5966	github.com	_	_
28-59	5966-5967	/	_	_
28-60	5967-5973	google	_	_
28-61	5973-5974	/	_	_
28-62	5974-5981	highway	_	_
28-63	5981-5982	/	_	_
28-64	5982-5986	tree	_	_
28-65	5986-5987	/	_	_
28-66	5987-5993	master	_	_
28-67	5993-5994	/	_	_
28-68	5994-5997	hwy	_	_
28-69	5997-5998	/	_	_
28-70	5998-6005	contrib	_	_
28-71	6005-6006	/	_	_
28-72	6006-6010	sort	_	_
28-73	6010-6011	)	_	_
28-74	6012-6013	(	_	_
28-75	6013-6014	\[	_	_
28-76	6014-6019	paper	_	_
28-77	6019-6020	\]	_	_
28-78	6020-6021	(	_	_
28-79	6021-6026	https	_	_
28-80	6026-6027	:	_	_
28-81	6027-6028	/	_	_
28-82	6028-6029	/	_	_
28-83	6029-6038	arxiv.org	_	_
28-84	6038-6039	/	_	_
28-85	6039-6042	abs	_	_
28-86	6042-6043	/	_	_
28-87	6043-6053	2205.05982	_	_
28-88	6053-6054	)	_	_
28-89	6054-6055	)	_	_
28-90	6057-6059	If	_	_
28-91	6060-6065	you'd	_	_
28-92	6066-6070	like	_	_
28-93	6071-6073	to	_	_
28-94	6074-6077	get	_	_
28-95	6078-6085	Highway	_	_
28-96	6085-6086	,	_	_
28-97	6087-6089	in	_	_
28-98	6090-6098	addition	_	_
28-99	6099-6101	to	_	_
28-100	6102-6109	cloning	_	_
28-101	6110-6114	from	_	_
28-102	6115-6119	this	_	_
28-103	6120-6126	GitHub	_	_
28-104	6127-6137	repository	_	_
28-105	6138-6140	or	_	_
28-106	6141-6146	using	_	_
28-107	6147-6149	it	_	_
28-108	6150-6152	as	_	_
28-109	6153-6154	a	_	_
28-110	6155-6158	Git	_	_
28-111	6159-6168	submodule	_	_
28-112	6168-6169	,	_	_
28-113	6170-6173	you	_	_
28-114	6174-6177	can	_	_
28-115	6178-6182	also	_	_
28-116	6183-6187	find	_	_
28-117	6188-6190	it	_	_
28-118	6191-6193	in	_	_
28-119	6194-6197	the	_	_
28-120	6198-6207	following	_	_
28-121	6208-6215	package	_	_
28-122	6216-6224	managers	_	_
28-123	6225-6227	or	_	_
28-124	6228-6240	repositories	_	_
28-125	6240-6241	:	_	_
28-126	6243-6244	\*	_	_
28-127	6247-6258	alpinelinux	_	_
28-128	6259-6260	\*	_	_
28-129	6263-6271	conan-io	_	_
28-130	6272-6273	\*	_	_
28-131	6276-6287	conda-forge	_	_
28-132	6288-6289	\*	_	_
28-133	6292-6304	DragonFlyBSD	_	_
28-134	6304-6305	,	_	_
28-135	6306-6307	\*	_	_
28-136	6310-6314	fd00	_	_
28-137	6314-6315	/	_	_
28-138	6315-6319	yacp	_	_
28-139	6320-6321	\*	_	_
28-140	6324-6331	freebsd	_	_
28-141	6332-6333	\*	_	_
28-142	6336-6344	getsolus	_	_
28-143	6344-6345	/	_	_
28-144	6345-6353	packages	_	_
28-145	6354-6355	\*	_	_
28-146	6358-6366	ghostbsd	_	_
28-147	6367-6368	\*	_	_
28-148	6371-6380	microsoft	_	_
28-149	6380-6381	/	_	_
28-150	6381-6386	vcpkg	_	_
28-151	6387-6388	\*	_	_
28-152	6391-6402	MidnightBSD	_	_
28-153	6403-6404	\*	_	_
28-154	6407-6412	MSYS2	_	_
28-155	6413-6414	\*	_	_
28-156	6417-6423	NetBSD	_	_
28-157	6424-6425	\*	_	_
28-158	6428-6436	openSUSE	_	_
28-159	6437-6438	\*	_	_
28-160	6441-6449	opnsense	_	_
28-161	6450-6451	\*	_	_
28-162	6454-6460	Xilinx	_	_
28-163	6460-6461	/	_	_
28-164	6461-6476	Vitis\_Libraries	_	_
28-165	6477-6478	\*	_	_
28-166	6481-6489	xmake-io	_	_
28-167	6489-6490	/	_	_
28-168	6490-6500	xmake-repo	_	_
28-169	6502-6505	See	_	_
28-170	6506-6510	also	_	_
28-171	6511-6514	the	_	_
28-172	6515-6519	list	_	_
28-173	6520-6522	at	_	_
28-174	6523-6528	https	_	_
28-175	6528-6529	:	_	_
28-176	6529-6530	/	_	_
28-177	6530-6531	/	_	_
28-178	6531-6543	repology.org	_	_
28-179	6543-6544	/	_	_
28-180	6544-6551	project	_	_
28-181	6551-6552	/	_	_
28-182	6552-6572	highway-simd-library	_	_
28-183	6572-6573	/	_	_
28-184	6573-6581	versions	_	_
28-185	6582-6583	.	_	_
28-186	6585-6586	#	_	_
28-187	6586-6587	#	_	_
28-188	6588-6595	Current	_	_
28-189	6596-6602	status	_	_
28-190	6604-6605	#	_	_
28-191	6605-6606	#	_	_
28-192	6606-6607	#	_	_
28-193	6608-6615	Targets	_	_
28-194	6617-6624	Highway	_	_
28-195	6625-6633	supports	_	_
28-196	6634-6636	24	_	_
28-197	6637-6644	targets	_	_
28-198	6644-6645	,	_	_
28-199	6646-6652	listed	_	_
28-200	6653-6655	in	_	_
28-201	6656-6668	alphabetical	_	_
28-202	6669-6674	order	_	_
28-203	6675-6677	of	_	_
28-204	6678-6686	platform	_	_
28-205	6686-6687	:	_	_
28-206	6689-6690	-	_	_
28-207	6693-6696	Any	_	_
28-208	6696-6697	:	_	_
28-209	6698-6699	`	_	_
28-210	6699-6705	EMU128	_	_
28-211	6705-6706	`	_	_
28-212	6706-6707	,	_	_
28-213	6708-6709	`	_	_
28-214	6709-6715	SCALAR	*[307]	SOFTWARE[307]
28-215	6715-6716	`	*[307]	SOFTWARE[307]
28-216	6716-6717	\;	*[307]	SOFTWARE[307]
28-217	6718-6719	-	*[307]	SOFTWARE[307]
28-218	6722-6727	Armv7	*[307]	SOFTWARE[307]
28-219	6727-6728	+	*[307]	SOFTWARE[307]
28-220	6728-6729	:	*[307]	SOFTWARE[307]
28-221	6730-6731	`	*[307]	SOFTWARE[307]
28-222	6731-6747	NEON\_WITHOUT\_AES	*[307]	SOFTWARE[307]
28-223	6747-6748	`	*[307]	SOFTWARE[307]
28-224	6748-6749	,	*[307]	SOFTWARE[307]
28-225	6750-6751	`	*[307]	SOFTWARE[307]
28-226	6751-6755	NEON	*[307]	SOFTWARE[307]
28-227	6755-6756	`	*[307]	SOFTWARE[307]
28-228	6756-6757	,	*[307]	SOFTWARE[307]
28-229	6758-6759	`	*[307]	SOFTWARE[307]
28-230	6759-6768	NEON\_BF16	*[307]	SOFTWARE[307]
28-231	6768-6769	`	*[307]	SOFTWARE[307]
28-232	6769-6770	,	*[307]	SOFTWARE[307]
28-233	6771-6772	`	*[307]	SOFTWARE[307]
28-234	6772-6775	SVE	*[307]	SOFTWARE[307]
28-235	6775-6776	`	*[307]	SOFTWARE[307]
28-236	6776-6777	,	*[307]	SOFTWARE[307]
28-237	6778-6779	`	*[307]	SOFTWARE[307]
28-238	6779-6783	SVE2	*[307]	SOFTWARE[307]
28-239	6783-6784	`	*[307]	SOFTWARE[307]
28-240	6784-6785	,	*[307]	SOFTWARE[307]
28-241	6786-6787	`	*[307]	SOFTWARE[307]
28-242	6787-6790	SVE	*[307]	SOFTWARE[307]
28-243	6790-6791	\_	*[307]	SOFTWARE[307]
28-244	6791-6794	256	*[307]	SOFTWARE[307]
28-245	6794-6795	`	*[307]	SOFTWARE[307]
28-246	6795-6796	,	*[307]	SOFTWARE[307]
28-247	6801-6802	`	*[307]	SOFTWARE[307]
28-248	6802-6806	SVE2	*[307]	SOFTWARE[307]
28-249	6806-6807	\_	*[307]	SOFTWARE[307]
28-250	6807-6810	128	*[307]	SOFTWARE[307]
28-251	6810-6811	`	*[307]	SOFTWARE[307]
28-252	6811-6812	\;	*[307]	SOFTWARE[307]
28-253	6813-6814	-	*[307]	SOFTWARE[307]
28-254	6817-6820	IBM	*[307]	SOFTWARE[307]
28-255	6821-6822	Z	*[307]	SOFTWARE[307]
28-256	6822-6823	:	*[307]	SOFTWARE[307]
28-257	6824-6825	`	*[307]	SOFTWARE[307]
28-258	6825-6828	Z14	*[307]	SOFTWARE[307]
28-259	6828-6829	`	*[307]	SOFTWARE[307]
28-260	6829-6830	,	*[307]	SOFTWARE[307]
28-261	6831-6832	`	*[307]	SOFTWARE[307]
28-262	6832-6835	Z15	*[307]	SOFTWARE[307]
28-263	6835-6836	`	*[307]	SOFTWARE[307]
28-264	6836-6837	\;	*[307]	SOFTWARE[307]
28-265	6838-6839	-	*[307]	SOFTWARE[307]
28-266	6842-6847	POWER	*[307]	SOFTWARE[307]
28-267	6847-6848	:	*[307]	SOFTWARE[307]
28-268	6849-6850	`	*[307]	SOFTWARE[307]
28-269	6850-6854	PPC8	*[307]	SOFTWARE[307]
28-270	6854-6855	`	*[307]	SOFTWARE[307]
28-271	6856-6857	(	*[307]	SOFTWARE[307]
28-272	6857-6862	v2.07	_	_
28-273	6862-6863	)	_	_
28-274	6863-6864	,	_	_
28-275	6865-6866	`	_	_
28-276	6866-6870	PPC9	_	_
28-277	6870-6871	`	_	_
28-278	6872-6873	(	_	_
28-279	6873-6877	v3.0	_	_
28-280	6877-6878	)	_	_
28-281	6878-6879	,	_	_
28-282	6880-6881	`	_	_
28-283	6881-6886	PPC10	_	_
28-284	6886-6887	`	_	_
28-285	6888-6889	(	_	_
28-286	6889-6894	v3.1B	_	_
28-287	6894-6895	,	_	_
28-288	6896-6899	not	_	_
28-289	6900-6903	yet	_	_
28-290	6904-6913	supported	_	_
28-291	6914-6917	due	_	_
28-292	6922-6924	to	_	_
28-293	6925-6933	compiler	_	_
28-294	6934-6938	bugs	_	_
28-295	6938-6939	,	_	_
28-296	6940-6943	see	_	_
28-297	6944-6949	#1207	_	_
28-298	6949-6950	\;	_	_
28-299	6951-6955	also	_	_
28-300	6956-6964	requires	_	_
28-301	6965-6969	QEMU	_	_
28-302	6970-6973	7.2	_	_
28-303	6973-6974	)	_	_
28-304	6974-6975	\;	_	_
28-305	6976-6977	-	_	_
28-306	6980-6986	RISC-V	_	_
28-307	6986-6987	:	_	_
28-308	6988-6989	`	_	_
28-309	6989-6992	RVV	_	_
28-310	6992-6993	`	_	_
28-311	6994-6995	(	_	_
28-312	6995-6998	1.0	_	_
28-313	6998-6999	)	_	_
28-314	6999-7000	\;	_	_
28-315	7001-7002	-	_	_
28-316	7005-7016	WebAssembly	_	_
28-317	7016-7017	:	_	_
28-318	7018-7019	`	_	_
28-319	7019-7023	WASM	_	_
28-320	7023-7024	`	_	_
28-321	7024-7025	,	_	_
28-322	7026-7027	`	_	_
28-323	7027-7038	WASM\_EMU256	_	_
28-324	7038-7039	`	_	_
28-325	7040-7041	(	_	_
28-326	7041-7042	a	_	_
28-327	7043-7045	2x	_	_
28-328	7046-7054	unrolled	_	_
28-329	7055-7062	version	_	_
28-330	7063-7065	of	_	_
28-331	7066-7073	wasm128	_	_
28-332	7073-7074	,	_	_
28-333	7079-7086	enabled	_	_
28-334	7087-7089	if	_	_
28-335	7090-7091	`	_	_
28-336	7091-7105	HWY\_WANT\_WASM2	_	_
28-337	7105-7106	`	_	_
28-338	7107-7109	is	_	_
28-339	7110-7117	defined	_	_
28-340	7117-7118	.	_	_

#Text=This will remain supported until it     is potentially superseded by a future version of WASM.)\; -   x86:     -   `SSE2`     -   `SSSE3` (~Intel Core)     -   `SSE4` (~Nehalem, also includes AES + CLMUL)
29-1	7119-7123	This	_	_
29-2	7124-7128	will	_	_
29-3	7129-7135	remain	_	_
29-4	7136-7145	supported	_	_
29-5	7146-7151	until	_	_
29-6	7152-7154	it	_	_
29-7	7159-7161	is	_	_
29-8	7162-7173	potentially	_	_
29-9	7174-7184	superseded	_	_
29-10	7185-7187	by	_	_
29-11	7188-7189	a	_	_
29-12	7190-7196	future	_	_
29-13	7197-7204	version	_	_
29-14	7205-7207	of	_	_
29-15	7208-7212	WASM	_	_
29-16	7212-7213	.	*[308]	SOFTWARE[308]
29-17	7213-7214	)	*[308]	SOFTWARE[308]
29-18	7214-7215	\;	*[308]	SOFTWARE[308]
29-19	7216-7217	-	*[308]	SOFTWARE[308]
29-20	7220-7223	x86	*[308]	SOFTWARE[308]
29-21	7223-7224	:	*[308]	SOFTWARE[308]
29-22	7229-7230	-	*[308]	SOFTWARE[308]
29-23	7233-7234	`	*[308]	SOFTWARE[308]
29-24	7234-7238	SSE2	*[308]	SOFTWARE[308]
29-25	7238-7239	`	*[308]	SOFTWARE[308]
29-26	7244-7245	-	*[308]	SOFTWARE[308]
29-27	7248-7249	`	*[308]	SOFTWARE[308]
29-28	7249-7254	SSSE3	*[308]	SOFTWARE[308]
29-29	7254-7255	`	*[308]	SOFTWARE[308]
29-30	7256-7257	(	*[308]	SOFTWARE[308]
29-31	7257-7258	~	*[308]	SOFTWARE[308]
29-32	7258-7263	Intel	*[308]	SOFTWARE[308]
29-33	7264-7268	Core	*[308]	SOFTWARE[308]
29-34	7268-7269	)	*[308]	SOFTWARE[308]
29-35	7274-7275	-	*[308]	SOFTWARE[308]
29-36	7278-7279	`	*[308]	SOFTWARE[308]
29-37	7279-7283	SSE4	*[308]	SOFTWARE[308]
29-38	7283-7284	`	*[308]	SOFTWARE[308]
29-39	7285-7286	(	*[308]	SOFTWARE[308]
29-40	7286-7287	~	*[308]	SOFTWARE[308]
29-41	7287-7294	Nehalem	*[308]	SOFTWARE[308]
29-42	7294-7295	,	*[308]	SOFTWARE[308]
29-43	7296-7300	also	*[308]	SOFTWARE[308]
29-44	7301-7309	includes	_	_
29-45	7310-7313	AES	_	_
29-46	7314-7315	+	_	_
29-47	7316-7321	CLMUL	_	_
29-48	7321-7322	)	_	_

#Text=.
30-1	7322-7323	.	_	_

#Text=-   `AVX2` (~Haswell, also includes BMI2 + F16 + FMA)     -   `AVX3` (~Skylake, AVX-512F/BW/CD/DQ/VL)     -   `AVX3\_DL` (~Icelake, includes BitAlg + CLMUL + GFNI + VAES + VBMI +         VBMI2 + VNNI + VPOPCNT\; requires opt-in by defining `HWY\_WANT\_AVX3\_DL`         unless compiling for static dispatch),     -   `AVX3\_ZEN4` (like AVX3\_DL but optimized for AMD Zen4\; requires opt-in by         defining `HWY\_WANT\_AVX3\_ZEN4` if compiling for static dispatch, but         enabled by default for runtime dispatch),     -   `AVX3\_SPR` (~Sapphire Rapids, includes AVX-512FP16)  Our policy is that unless otherwise specified, targets will remain supported as long as they can be (cross-)compiled with currently supported Clang or GCC, and tested using QEMU.
31-1	7328-7329	-	_	_
31-2	7332-7333	`	_	_
31-3	7333-7337	AVX2	_	_
31-4	7337-7338	`	_	_
31-5	7339-7340	(	_	_
31-6	7340-7341	~	_	_
31-7	7341-7348	Haswell	_	_
31-8	7348-7349	,	_	_
31-9	7350-7354	also	_	_
31-10	7355-7363	includes	_	_
31-11	7364-7368	BMI2	_	_
31-12	7369-7370	+	_	_
31-13	7371-7374	F16	_	_
31-14	7375-7376	+	_	_
31-15	7377-7380	FMA	_	_
31-16	7380-7381	)	_	_
31-17	7386-7387	-	_	_
31-18	7390-7391	`	_	_
31-19	7391-7395	AVX3	_	_
31-20	7395-7396	`	_	_
31-21	7397-7398	(	_	_
31-22	7398-7399	~	_	_
31-23	7399-7406	Skylake	_	_
31-24	7406-7407	,	_	_
31-25	7408-7411	AVX	_	_
31-26	7411-7412	-	_	_
31-27	7412-7416	512F	_	_
31-28	7416-7417	/	_	_
31-29	7417-7419	BW	_	_
31-30	7419-7420	/	_	_
31-31	7420-7422	CD	_	_
31-32	7422-7423	/	_	_
31-33	7423-7425	DQ	_	_
31-34	7425-7426	/	_	_
31-35	7426-7428	VL	_	_
31-36	7428-7429	)	_	_
31-37	7434-7435	-	_	_
31-38	7438-7439	`	_	_
31-39	7439-7443	AVX3	_	_
31-40	7443-7444	\_	_	_
31-41	7444-7446	DL	_	_
31-42	7446-7447	`	_	_
31-43	7448-7449	(	_	_
31-44	7449-7450	~	_	_
31-45	7450-7457	Icelake	_	_
31-46	7457-7458	,	_	_
31-47	7459-7467	includes	_	_
31-48	7468-7474	BitAlg	_	_
31-49	7475-7476	+	_	_
31-50	7477-7482	CLMUL	_	_
31-51	7483-7484	+	_	_
31-52	7485-7489	GFNI	_	_
31-53	7490-7491	+	_	_
31-54	7492-7496	VAES	_	_
31-55	7497-7498	+	_	_
31-56	7499-7503	VBMI	_	_
31-57	7504-7505	+	_	_
31-58	7514-7519	VBMI2	_	_
31-59	7520-7521	+	_	_
31-60	7522-7526	VNNI	_	_
31-61	7527-7528	+	_	_
31-62	7529-7536	VPOPCNT	_	_
31-63	7536-7537	\;	_	_
31-64	7538-7546	requires	_	_
31-65	7547-7553	opt-in	_	_
31-66	7554-7556	by	_	_
31-67	7557-7565	defining	_	_
31-68	7566-7567	`	_	_
31-69	7567-7580	HWY\_WANT\_AVX3	_	_
31-70	7580-7581	\_	_	_
31-71	7581-7583	DL	_	_
31-72	7583-7584	`	_	_
31-73	7593-7599	unless	_	_
31-74	7600-7609	compiling	_	_
31-75	7610-7613	for	_	_
31-76	7614-7620	static	_	_
31-77	7621-7629	dispatch	_	_
31-78	7629-7630	)	_	_
31-79	7630-7631	,	_	_
31-80	7636-7637	-	_	_
31-81	7640-7641	`	_	_
31-82	7641-7645	AVX3	_	_
31-83	7645-7646	\_	_	_
31-84	7646-7650	ZEN4	_	_
31-85	7650-7651	`	_	_
31-86	7652-7653	(	_	_
31-87	7653-7657	like	_	_
31-88	7658-7662	AVX3	_	_
31-89	7662-7663	\_	_	_
31-90	7663-7665	DL	_	_
31-91	7666-7669	but	_	_
31-92	7670-7679	optimized	_	_
31-93	7680-7683	for	_	_
31-94	7684-7687	AMD	_	_
31-95	7688-7692	Zen4	_	_
31-96	7692-7693	\;	_	_
31-97	7694-7702	requires	_	_
31-98	7703-7709	opt-in	_	_
31-99	7710-7712	by	_	_
31-100	7721-7729	defining	_	_
31-101	7730-7731	`	_	_
31-102	7731-7744	HWY\_WANT\_AVX3	_	_
31-103	7744-7745	\_	_	_
31-104	7745-7749	ZEN4	_	_
31-105	7749-7750	`	_	_
31-106	7751-7753	if	_	_
31-107	7754-7763	compiling	_	_
31-108	7764-7767	for	_	_
31-109	7768-7774	static	_	_
31-110	7775-7783	dispatch	_	_
31-111	7783-7784	,	_	_
31-112	7785-7788	but	_	_
31-113	7797-7804	enabled	_	_
31-114	7805-7807	by	_	_
31-115	7808-7815	default	_	_
31-116	7816-7819	for	_	_
31-117	7820-7827	runtime	_	_
31-118	7828-7836	dispatch	_	_
31-119	7836-7837	)	_	_
31-120	7837-7838	,	_	_
31-121	7843-7844	-	_	_
31-122	7847-7848	`	_	_
31-123	7848-7852	AVX3	_	_
31-124	7852-7853	\_	_	_
31-125	7853-7856	SPR	_	_
31-126	7856-7857	`	_	_
31-127	7858-7859	(	_	_
31-128	7859-7860	~	_	_
31-129	7860-7868	Sapphire	_	_
31-130	7869-7875	Rapids	_	_
31-131	7875-7876	,	_	_
31-132	7877-7885	includes	_	_
31-133	7886-7889	AVX	_	_
31-134	7889-7890	-	_	_
31-135	7890-7897	512FP16	_	_
31-136	7897-7898	)	_	_
31-137	7900-7903	Our	_	_
31-138	7904-7910	policy	_	_
31-139	7911-7913	is	_	_
31-140	7914-7918	that	_	_
31-141	7919-7925	unless	_	_
31-142	7926-7935	otherwise	_	_
31-143	7936-7945	specified	_	_
31-144	7945-7946	,	_	_
31-145	7947-7954	targets	_	_
31-146	7955-7959	will	_	_
31-147	7960-7966	remain	_	_
31-148	7967-7976	supported	_	_
31-149	7977-7979	as	_	_
31-150	7980-7984	long	_	_
31-151	7985-7987	as	_	_
31-152	7988-7992	they	_	_
31-153	7993-7996	can	_	_
31-154	7997-7999	be	_	_
31-155	8000-8001	(	_	_
31-156	8001-8006	cross	_	_
31-157	8006-8007	-	_	_
31-158	8007-8008	)	_	_
31-159	8008-8016	compiled	_	_
31-160	8017-8021	with	_	_
31-161	8022-8031	currently	_	_
31-162	8032-8041	supported	_	_
31-163	8042-8047	Clang	_	_
31-164	8048-8050	or	_	_
31-165	8051-8054	GCC	_	_
31-166	8054-8055	,	_	_
31-167	8056-8059	and	_	_
31-168	8060-8066	tested	_	_
31-169	8067-8072	using	_	_
31-170	8073-8077	QEMU	_	_
31-171	8077-8078	.	_	_

#Text=If the target can be compiled with LLVM trunk and tested using our version of QEMU without extra flags, then it is eligible for inclusion in our continuous testing infrastructure.
32-1	8079-8081	If	_	_
32-2	8082-8085	the	_	_
32-3	8086-8092	target	_	_
32-4	8093-8096	can	_	_
32-5	8097-8099	be	_	_
32-6	8100-8108	compiled	_	_
32-7	8109-8113	with	_	_
32-8	8114-8118	LLVM	_	_
32-9	8119-8124	trunk	_	_
32-10	8125-8128	and	_	_
32-11	8129-8135	tested	_	_
32-12	8136-8141	using	_	_
32-13	8142-8145	our	_	_
32-14	8146-8153	version	_	_
32-15	8154-8156	of	_	_
32-16	8157-8161	QEMU	_	_
32-17	8162-8169	without	_	_
32-18	8170-8175	extra	_	_
32-19	8176-8181	flags	_	_
32-20	8181-8182	,	_	_
32-21	8183-8187	then	_	_
32-22	8188-8190	it	_	_
32-23	8191-8193	is	_	_
32-24	8194-8202	eligible	_	_
32-25	8203-8206	for	_	_
32-26	8207-8216	inclusion	_	_
32-27	8217-8219	in	_	_
32-28	8220-8223	our	_	_
32-29	8224-8234	continuous	_	_
32-30	8235-8242	testing	_	_
32-31	8243-8257	infrastructure	_	_
32-32	8257-8258	.	_	_

#Text=Otherwise, the target will be manually tested before releases with selected versions/configurations of Clang and GCC.
33-1	8259-8268	Otherwise	_	_
33-2	8268-8269	,	_	_
33-3	8270-8273	the	_	_
33-4	8274-8280	target	_	_
33-5	8281-8285	will	_	_
33-6	8286-8288	be	_	_
33-7	8289-8297	manually	_	_
33-8	8298-8304	tested	_	_
33-9	8305-8311	before	_	_
33-10	8312-8320	releases	_	_
33-11	8321-8325	with	_	_
33-12	8326-8334	selected	*[260]	LICENSE[260]
33-13	8335-8343	versions	*[260]	LICENSE[260]
33-14	8343-8344	/	*[260]	LICENSE[260]
33-15	8344-8358	configurations	*[260]	LICENSE[260]
33-16	8359-8361	of	*[260]	LICENSE[260]
33-17	8362-8367	Clang	_	_
33-18	8368-8371	and	_	_
33-19	8372-8375	GCC	_	_
33-20	8375-8376	.	_	_

#Text=SVE was initially tested using farm\_sve (see acknowledgments).  ### Versioning  Highway releases aim to follow the semver.org system (MAJOR.MINOR.PATCH), incrementing MINOR after backward-compatible additions and PATCH after backward-compatible fixes.
34-1	8378-8381	SVE	_	_
34-2	8382-8385	was	_	_
34-3	8386-8395	initially	_	_
34-4	8396-8402	tested	_	_
34-5	8403-8408	using	_	_
34-6	8409-8417	farm\_sve	_	_
34-7	8418-8419	(	_	_
34-8	8419-8422	see	_	_
34-9	8423-8438	acknowledgments	_	_
34-10	8438-8439	)	_	_
34-11	8439-8440	.	_	_
34-12	8442-8443	#	_	_
34-13	8443-8444	#	_	_
34-14	8444-8445	#	_	_
34-15	8446-8456	Versioning	_	_
34-16	8458-8465	Highway	_	_
34-17	8466-8474	releases	_	_
34-18	8475-8478	aim	_	_
34-19	8479-8481	to	_	_
34-20	8482-8488	follow	_	_
34-21	8489-8492	the	_	_
34-22	8493-8503	semver.org	_	_
34-23	8504-8510	system	_	_
34-24	8511-8512	(	_	_
34-25	8512-8529	MAJOR.MINOR.PATCH	_	_
34-26	8529-8530	)	_	_
34-27	8530-8531	,	_	_
34-28	8532-8544	incrementing	_	_
34-29	8545-8550	MINOR	_	_
34-30	8551-8556	after	_	_
34-31	8557-8576	backward-compatible	_	_
34-32	8577-8586	additions	_	_
34-33	8587-8590	and	_	_
34-34	8591-8596	PATCH	_	_
34-35	8597-8602	after	_	_
34-36	8603-8622	backward-compatible	_	_
34-37	8623-8628	fixes	_	_
34-38	8628-8629	.	_	_

#Text=We recommend using releases (rather than the Git tip) because they are tested more extensively, see below.
35-1	8630-8632	We	_	_
35-2	8633-8642	recommend	_	_
35-3	8643-8648	using	_	_
35-4	8649-8657	releases	_	_
35-5	8658-8659	(	_	_
35-6	8659-8665	rather	_	_
35-7	8666-8670	than	_	_
35-8	8671-8674	the	_	_
35-9	8675-8678	Git	_	_
35-10	8679-8682	tip	_	_
35-11	8682-8683	)	_	_
35-12	8684-8691	because	_	_
35-13	8692-8696	they	_	_
35-14	8697-8700	are	_	_
35-15	8701-8707	tested	_	_
35-16	8708-8712	more	_	_
35-17	8713-8724	extensively	_	_
35-18	8724-8725	,	_	_
35-19	8726-8729	see	_	_
35-20	8730-8735	below	_	_
35-21	8735-8736	.	_	_

#Text=The current version 1.0 signals an increased focus on backwards compatibility.
36-1	8738-8741	The	_	_
36-2	8742-8749	current	_	_
36-3	8750-8757	version	_	_
36-4	8758-8761	1.0	_	_
36-5	8762-8769	signals	_	_
36-6	8770-8772	an	_	_
36-7	8773-8782	increased	_	_
36-8	8783-8788	focus	_	_
36-9	8789-8791	on	_	_
36-10	8792-8801	backwards	_	_
36-11	8802-8815	compatibility	_	_
36-12	8815-8816	.	_	_

#Text=Applications using documented functionality will remain compatible with future updates that have the same major version number.  ### Testing  Continuous integration tests build with a recent version of Clang (running on native x86, or QEMU for RISC-V and Arm) and MSVC 2019 (v19.28, running on native x86).
37-1	8817-8829	Applications	_	_
37-2	8830-8835	using	_	_
37-3	8836-8846	documented	_	_
37-4	8847-8860	functionality	_	_
37-5	8861-8865	will	_	_
37-6	8866-8872	remain	_	_
37-7	8873-8883	compatible	_	_
37-8	8884-8888	with	_	_
37-9	8889-8895	future	_	_
37-10	8896-8903	updates	_	_
37-11	8904-8908	that	_	_
37-12	8909-8913	have	_	_
37-13	8914-8917	the	_	_
37-14	8918-8922	same	*[248]	PUBLICATION[248]
37-15	8923-8928	major	*[248]	PUBLICATION[248]
37-16	8929-8936	version	*[248]	PUBLICATION[248]
37-17	8937-8943	number	*[248]	PUBLICATION[248]
37-18	8943-8944	.	*[248]	PUBLICATION[248]
37-19	8946-8947	#	*[248]	PUBLICATION[248]
37-20	8947-8948	#	*[248]	PUBLICATION[248]
37-21	8948-8949	#	*[248]	PUBLICATION[248]
37-22	8950-8957	Testing	*[248]	PUBLICATION[248]
37-23	8959-8969	Continuous	*[248]	PUBLICATION[248]
37-24	8970-8981	integration	*[248]	PUBLICATION[248]
37-25	8982-8987	tests	*[248]	PUBLICATION[248]
37-26	8988-8993	build	*[248]	PUBLICATION[248]
37-27	8994-8998	with	*[248]	PUBLICATION[248]
37-28	8999-9000	a	*[248]	PUBLICATION[248]
37-29	9001-9007	recent	_	_
37-30	9008-9015	version	_	_
37-31	9016-9018	of	_	_
37-32	9019-9024	Clang	_	_
37-33	9025-9026	(	_	_
37-34	9026-9033	running	_	_
37-35	9034-9036	on	_	_
37-36	9037-9043	native	_	_
37-37	9044-9047	x86	_	_
37-38	9047-9048	,	_	_
37-39	9049-9051	or	_	_
37-40	9052-9056	QEMU	_	_
37-41	9057-9060	for	_	_
37-42	9061-9067	RISC-V	_	_
37-43	9068-9071	and	_	_
37-44	9072-9075	Arm	_	_
37-45	9075-9076	)	_	_
37-46	9077-9080	and	_	_
37-47	9081-9085	MSVC	_	_
37-48	9086-9090	2019	_	_
37-49	9091-9092	(	_	_
37-50	9092-9098	v19.28	_	_
37-51	9098-9099	,	_	_
37-52	9100-9107	running	_	_
37-53	9108-9110	on	_	_
37-54	9111-9117	native	_	_
37-55	9118-9121	x86	_	_
37-56	9121-9122	)	_	_
37-57	9122-9123	.	_	_

#Text=Before releases, we also test on x86 with Clang and GCC, and Armv7/8 via GCC cross-compile.
38-1	9125-9131	Before	_	_
38-2	9132-9140	releases	_	_
38-3	9140-9141	,	_	_
38-4	9142-9144	we	_	_
38-5	9145-9149	also	_	_
38-6	9150-9154	test	_	_
38-7	9155-9157	on	_	_
38-8	9158-9161	x86	_	_
38-9	9162-9166	with	_	_
38-10	9167-9172	Clang	_	_
38-11	9173-9176	and	_	_
38-12	9177-9180	GCC	*[267]	WORKSHOP[267]
38-13	9180-9181	,	*[267]	WORKSHOP[267]
38-14	9182-9185	and	*[267]	WORKSHOP[267]
38-15	9186-9191	Armv7	*[267]	WORKSHOP[267]
38-16	9191-9192	/	*[267]	WORKSHOP[267]
38-17	9192-9193	8	*[267]	WORKSHOP[267]
38-18	9194-9197	via	_	_
38-19	9198-9201	GCC	_	_
38-20	9202-9215	cross-compile	_	_
38-21	9215-9216	.	_	_

#Text=See the \[testing process\](g3doc/release\_testing\_process.md) for details.  ### Related modules  The `contrib` directory contains SIMD-related utilities: an image class with aligned rows, a math library (16 functions already implemented, mostly trigonometry), and functions for computing dot products and sorting.  ### Other libraries  If you only require x86 support, you may also use Agner Fog's \[VCL vector class library\](https://github.com/vectorclass).
39-1	9217-9220	See	_	_
39-2	9221-9224	the	_	_
39-3	9225-9226	\[	_	_
39-4	9226-9233	testing	_	_
39-5	9234-9241	process	_	_
39-6	9241-9242	\]	_	_
39-7	9242-9243	(	_	_
39-8	9243-9248	g3doc	_	_
39-9	9248-9249	/	_	_
39-10	9249-9275	release\_testing\_process.md	_	_
39-11	9275-9276	)	_	_
39-12	9277-9280	for	_	_
39-13	9281-9288	details	_	_
39-14	9288-9289	.	_	_
39-15	9291-9292	#	_	_
39-16	9292-9293	#	_	_
39-17	9293-9294	#	_	_
39-18	9295-9302	Related	_	_
39-19	9303-9310	modules	_	_
39-20	9312-9315	The	_	_
39-21	9316-9317	`	_	_
39-22	9317-9324	contrib	_	_
39-23	9324-9325	`	_	_
39-24	9326-9335	directory	_	_
39-25	9336-9344	contains	_	_
39-26	9345-9357	SIMD-related	_	_
39-27	9358-9367	utilities	_	_
39-28	9367-9368	:	_	_
39-29	9369-9371	an	_	_
39-30	9372-9377	image	_	_
39-31	9378-9383	class	_	_
39-32	9384-9388	with	_	_
39-33	9389-9396	aligned	_	_
39-34	9397-9401	rows	*[261]	LICENSE[261]
39-35	9401-9402	,	*[261]	LICENSE[261]
39-36	9403-9404	a	*[261]	LICENSE[261]
39-37	9405-9409	math	*[261]	LICENSE[261]
39-38	9410-9417	library	*[261]	LICENSE[261]
39-39	9418-9419	(	*[261]	LICENSE[261]
39-40	9419-9421	16	*[261]	LICENSE[261]
39-41	9422-9431	functions	*[261]	LICENSE[261]
39-42	9432-9439	already	*[261]	LICENSE[261]
39-43	9440-9451	implemented	*[261]	LICENSE[261]
39-44	9451-9452	,	*[261]	LICENSE[261]
39-45	9453-9459	mostly	*[261]	LICENSE[261]
39-46	9460-9472	trigonometry	*[261]	LICENSE[261]
39-47	9472-9473	)	*[261]	LICENSE[261]
39-48	9473-9474	,	*[261]	LICENSE[261]
39-49	9475-9478	and	*[261]	LICENSE[261]
39-50	9479-9488	functions	*[261]	LICENSE[261]
39-51	9489-9492	for	*[261]	LICENSE[261]
39-52	9493-9502	computing	*[261]	LICENSE[261]
39-53	9503-9506	dot	*[261]	LICENSE[261]
39-54	9507-9515	products	*[261]	LICENSE[261]
39-55	9516-9519	and	*[261]	LICENSE[261]
39-56	9520-9527	sorting	*[261]	LICENSE[261]
39-57	9527-9528	.	*[261]	LICENSE[261]
39-58	9530-9531	#	*[261]	LICENSE[261]
39-59	9531-9532	#	*[261]	LICENSE[261]
39-60	9532-9533	#	*[261]	LICENSE[261]
39-61	9534-9539	Other	*[261]	LICENSE[261]
39-62	9540-9549	libraries	*[261]	LICENSE[261]
39-63	9551-9553	If	*[261]	LICENSE[261]
39-64	9554-9557	you	*[261]	LICENSE[261]
39-65	9558-9562	only	*[261]	LICENSE[261]
39-66	9563-9570	require	*[261]	LICENSE[261]
39-67	9571-9574	x86	*[261]	LICENSE[261]
39-68	9575-9582	support	*[261]	LICENSE[261]
39-69	9582-9583	,	*[261]	LICENSE[261]
39-70	9584-9587	you	*[261]	LICENSE[261]
39-71	9588-9591	may	*[261]	LICENSE[261]
39-72	9592-9596	also	*[261]	LICENSE[261]
39-73	9597-9600	use	*[261]	LICENSE[261]
39-74	9601-9606	Agner	*[261]	LICENSE[261]
39-75	9607-9612	Fog's	*[261]	LICENSE[261]
39-76	9613-9614	\[	*[261]	LICENSE[261]
39-77	9614-9617	VCL	*[261]	LICENSE[261]
39-78	9618-9624	vector	*[261]	LICENSE[261]
39-79	9625-9630	class	_	_
39-80	9631-9638	library	_	_
39-81	9638-9639	\]	_	_
39-82	9639-9640	(	_	_
39-83	9640-9645	https	_	_
39-84	9645-9646	:	_	_
39-85	9646-9647	/	_	_
39-86	9647-9648	/	_	_
39-87	9648-9658	github.com	_	_
39-88	9658-9659	/	_	_
39-89	9659-9670	vectorclass	_	_
39-90	9670-9671	)	_	_
39-91	9671-9672	.	_	_

#Text=It includes many functions including a complete math library.
40-1	9673-9675	It	_	_
40-2	9676-9684	includes	_	_
40-3	9685-9689	many	_	_
40-4	9690-9699	functions	_	_
40-5	9700-9709	including	_	_
40-6	9710-9711	a	_	_
40-7	9712-9720	complete	_	_
40-8	9721-9725	math	_	_
40-9	9726-9733	library	_	_
40-10	9733-9734	.	_	_

#Text=If you have existing code using x86/NEON intrinsics, you may be interested in \[SIMDe\](https://github.com/simd-everywhere/simde), which emulates those intrinsics using other platforms' intrinsics or autovectorization.  ## Installation  This project uses CMake to generate and build.
41-1	9736-9738	If	_	_
41-2	9739-9742	you	_	_
41-3	9743-9747	have	_	_
41-4	9748-9756	existing	_	_
41-5	9757-9761	code	_	_
41-6	9762-9767	using	_	_
41-7	9768-9771	x86	_	_
41-8	9771-9772	/	_	_
41-9	9772-9776	NEON	_	_
41-10	9777-9787	intrinsics	_	_
41-11	9787-9788	,	_	_
41-12	9789-9792	you	_	_
41-13	9793-9796	may	_	_
41-14	9797-9799	be	_	_
41-15	9800-9810	interested	_	_
41-16	9811-9813	in	_	_
41-17	9814-9815	\[	_	_
41-18	9815-9820	SIMDe	_	_
41-19	9820-9821	\]	_	_
41-20	9821-9822	(	_	_
41-21	9822-9827	https	_	_
41-22	9827-9828	:	_	_
41-23	9828-9829	/	_	_
41-24	9829-9830	/	_	_
41-25	9830-9840	github.com	_	_
41-26	9840-9841	/	_	_
41-27	9841-9856	simd-everywhere	_	_
41-28	9856-9857	/	_	_
41-29	9857-9862	simde	_	_
41-30	9862-9863	)	_	_
41-31	9863-9864	,	_	_
41-32	9865-9870	which	_	_
41-33	9871-9879	emulates	_	_
41-34	9880-9885	those	_	_
41-35	9886-9896	intrinsics	_	_
41-36	9897-9902	using	*[248]	DATASET[248]
41-37	9903-9908	other	*[248]	DATASET[248]
41-38	9909-9918	platforms	*[248]	DATASET[248]
41-39	9918-9919	'	*[248]	DATASET[248]
41-40	9920-9930	intrinsics	_	_
41-41	9931-9933	or	_	_
41-42	9934-9951	autovectorization	_	_
41-43	9951-9952	.	_	_
41-44	9954-9955	#	_	_
41-45	9955-9956	#	_	_
41-46	9957-9969	Installation	_	_
41-47	9971-9975	This	_	_
41-48	9976-9983	project	_	_
41-49	9984-9988	uses	_	_
41-50	9989-9994	CMake	_	_
41-51	9995-9997	to	_	_
41-52	9998-10006	generate	_	_
41-53	10007-10010	and	_	_
41-54	10011-10016	build	_	_
41-55	10016-10017	.	_	_

#Text=In a Debian-based system you can install it via:  ```bash sudo apt install cmake ```  Highway's unit tests use \[googletest\](https://github.com/google/googletest).
42-1	10018-10020	In	_	_
42-2	10021-10022	a	_	_
42-3	10023-10035	Debian-based	_	_
42-3	10023-10029	Debian	_	_
42-4	10036-10042	system	_	_
42-5	10043-10046	you	_	_
42-6	10047-10050	can	_	_
42-7	10051-10058	install	_	_
42-8	10059-10061	it	_	_
42-9	10062-10065	via	_	_
42-10	10065-10066	:	_	_
42-11	10068-10069	`	_	_
42-12	10069-10070	`	_	_
42-13	10070-10071	`	_	_
42-14	10071-10075	bash	_	_
42-15	10076-10080	sudo	_	_
42-16	10081-10084	apt	_	_
42-17	10085-10092	install	*[270]	PROJECT[270]
42-18	10093-10098	cmake	*[270]	PROJECT[270]
42-19	10099-10100	`	*[270]	PROJECT[270]
42-20	10100-10101	`	*[270]	PROJECT[270]
42-21	10101-10102	`	*[270]	PROJECT[270]
42-22	10104-10113	Highway's	*[270]	PROJECT[270]
42-23	10114-10118	unit	*[270]	PROJECT[270]
42-24	10119-10124	tests	*[270]	PROJECT[270]
42-25	10125-10128	use	*[270]	PROJECT[270]
42-26	10129-10130	\[	*[270]	PROJECT[270]
42-27	10130-10140	googletest	*[270]	PROJECT[270]
42-28	10140-10141	\]	*[270]	PROJECT[270]
42-29	10141-10142	(	*[270]	PROJECT[270]
42-30	10142-10147	https	*[270]	PROJECT[270]
42-31	10147-10148	:	*[270]	PROJECT[270]
42-32	10148-10149	/	*[270]	PROJECT[270]
42-33	10149-10150	/	*[270]	PROJECT[270]
42-34	10150-10160	github.com	_	_
42-35	10160-10161	/	_	_
42-36	10161-10167	google	_	_
42-37	10167-10168	/	_	_
42-38	10168-10178	googletest	_	_
42-39	10178-10179	)	_	_
42-40	10179-10180	.	_	_

#Text=By default, Highway's CMake downloads this dependency at configuration time.
43-1	10181-10183	By	_	_
43-2	10184-10191	default	_	_
43-3	10191-10192	,	_	_
43-4	10193-10202	Highway's	_	_
43-5	10203-10208	CMake	*[271]	PROJECT[271]
43-6	10209-10218	downloads	*[271]	PROJECT[271]
43-7	10219-10223	this	*[271]	PROJECT[271]
43-8	10224-10234	dependency	_	_
43-9	10235-10237	at	_	_
43-10	10238-10251	configuration	_	_
43-11	10252-10256	time	_	_
43-12	10256-10257	.	_	_

#Text=You can avoid this by setting the `HWY\_SYSTEM\_GTEST` CMake variable to ON and installing gtest separately:  ```bash sudo apt install libgtest-dev ```  Alternatively, you can define `HWY\_TEST\_STANDALONE=1` and remove all occurrences of `gtest\_main` in each BUILD file, then tests avoid the dependency on GUnit.
44-1	10258-10261	You	_	_
44-2	10262-10265	can	_	_
44-3	10266-10271	avoid	_	_
44-4	10272-10276	this	_	_
44-5	10277-10279	by	_	_
44-6	10280-10287	setting	_	_
44-7	10288-10291	the	_	_
44-8	10292-10293	`	_	_
44-9	10293-10309	HWY\_SYSTEM\_GTEST	_	_
44-10	10309-10310	`	_	_
44-11	10311-10316	CMake	_	_
44-12	10317-10325	variable	_	_
44-13	10326-10328	to	_	_
44-14	10329-10331	ON	_	_
44-15	10332-10335	and	_	_
44-16	10336-10346	installing	_	_
44-17	10347-10352	gtest	_	_
44-18	10353-10363	separately	_	_
44-19	10363-10364	:	_	_
44-20	10366-10367	`	_	_
44-21	10367-10368	`	_	_
44-22	10368-10369	`	_	_
44-23	10369-10373	bash	_	_
44-24	10374-10378	sudo	_	_
44-25	10379-10382	apt	_	_
44-26	10383-10390	install	_	_
44-27	10391-10403	libgtest-dev	_	_
44-28	10404-10405	`	_	_
44-29	10405-10406	`	_	_
44-30	10406-10407	`	_	_
44-31	10409-10422	Alternatively	_	_
44-32	10422-10423	,	_	_
44-33	10424-10427	you	_	_
44-34	10428-10431	can	_	_
44-35	10432-10438	define	_	_
44-36	10439-10440	`	_	_
44-37	10440-10459	HWY\_TEST\_STANDALONE	_	_
44-38	10459-10460	=	*[250]	PUBLICATION[250]
44-39	10460-10461	1	*[250]	PUBLICATION[250]
44-40	10461-10462	`	*[250]	PUBLICATION[250]
44-41	10463-10466	and	*[250]	PUBLICATION[250]
44-42	10467-10473	remove	*[250]	PUBLICATION[250]
44-43	10474-10477	all	*[250]	PUBLICATION[250]
44-44	10478-10489	occurrences	*[250]	PUBLICATION[250]
44-45	10490-10492	of	*[250]	PUBLICATION[250]
44-46	10493-10494	`	_	_
44-47	10494-10504	gtest\_main	_	_
44-48	10504-10505	`	_	_
44-49	10506-10508	in	_	_
44-50	10509-10513	each	_	_
44-51	10514-10519	BUILD	_	_
44-52	10520-10524	file	_	_
44-53	10524-10525	,	_	_
44-54	10526-10530	then	_	_
44-55	10531-10536	tests	_	_
44-56	10537-10542	avoid	_	_
44-57	10543-10546	the	_	_
44-58	10547-10557	dependency	_	_
44-59	10558-10560	on	_	_
44-60	10561-10566	GUnit	_	_
44-61	10566-10567	.	_	_

#Text=Running cross-compiled tests requires support from the OS, which on Debian is provided by the `qemu-user-binfmt` package.
45-1	10569-10576	Running	_	_
45-2	10577-10591	cross-compiled	_	_
45-3	10592-10597	tests	_	_
45-4	10598-10606	requires	_	_
45-5	10607-10614	support	*[288]	PROGLANG[288]
45-6	10615-10619	from	*[288]	PROGLANG[288]
45-7	10620-10623	the	*[288]	PROGLANG[288]
45-8	10624-10626	OS	*[288]	PROGLANG[288]
45-9	10626-10627	,	*[288]	PROGLANG[288]
45-10	10628-10633	which	*[288]	PROGLANG[288]
45-11	10634-10636	on	*[288]	PROGLANG[288]
45-12	10637-10643	Debian	*[288]	PROGLANG[288]
45-13	10644-10646	is	*[288]	PROGLANG[288]
45-14	10647-10655	provided	*[288]	PROGLANG[288]
45-15	10656-10658	by	*[288]	PROGLANG[288]
45-16	10659-10662	the	*[288]	PROGLANG[288]
45-17	10663-10664	`	*[288]	PROGLANG[288]
45-18	10664-10680	qemu-user-binfmt	*[288]	PROGLANG[288]
45-19	10680-10681	`	_	_
45-20	10682-10689	package	_	_
45-21	10689-10690	.	_	_

#Text=To build Highway as a shared or static library (depending on BUILD\_SHARED\_LIBS), the standard CMake workflow can be used:  ```bash mkdir -p build && cd build cmake .. make -j && make test ```  Or you can run `run\_tests.sh` (`run\_tests.bat` on Windows).
46-1	10692-10694	To	_	_
46-2	10695-10700	build	_	_
46-3	10701-10708	Highway	_	_
46-4	10709-10711	as	_	_
46-5	10712-10713	a	_	_
46-6	10714-10720	shared	_	_
46-7	10721-10723	or	_	_
46-8	10724-10730	static	_	_
46-9	10731-10738	library	_	_
46-10	10739-10740	(	_	_
46-11	10740-10749	depending	_	_
46-12	10750-10752	on	_	_
46-13	10753-10770	BUILD\_SHARED\_LIBS	_	_
46-14	10770-10771	)	_	_
46-15	10771-10772	,	_	_
46-16	10773-10776	the	_	_
46-17	10777-10785	standard	_	_
46-18	10786-10791	CMake	_	_
46-19	10792-10800	workflow	_	_
46-20	10801-10804	can	_	_
46-21	10805-10807	be	_	_
46-22	10808-10812	used	_	_
46-23	10812-10813	:	_	_
46-24	10815-10816	`	_	_
46-25	10816-10817	`	_	_
46-26	10817-10818	`	_	_
46-27	10818-10822	bash	_	_
46-28	10823-10828	mkdir	_	_
46-29	10829-10830	-	_	_
46-30	10830-10831	p	_	_
46-31	10832-10837	build	_	_
46-32	10838-10839	&	_	_
46-33	10839-10840	&	_	_
46-34	10841-10843	cd	_	_
46-35	10844-10849	build	_	_
46-36	10850-10855	cmake	_	_
46-37	10856-10857	.	_	_
46-38	10857-10858	.	_	_
46-39	10859-10863	make	_	_
46-40	10864-10865	-	_	_
46-41	10865-10866	j	_	_
46-42	10867-10868	&	_	_
46-43	10868-10869	&	_	_
46-44	10870-10874	make	_	_
46-45	10875-10879	test	_	_
46-46	10880-10881	`	_	_
46-47	10881-10882	`	_	_
46-48	10882-10883	`	_	_
46-49	10885-10887	Or	_	_
46-50	10888-10891	you	_	_
46-51	10892-10895	can	_	_
46-52	10896-10899	run	_	_
46-53	10900-10901	`	_	_
46-54	10901-10913	run\_tests.sh	*[270]	CONFERENCE[270]
46-55	10913-10914	`	*[270]	CONFERENCE[270]
46-56	10915-10916	(	*[270]	CONFERENCE[270]
46-57	10916-10917	`	*[270]	CONFERENCE[270]
46-58	10917-10930	run\_tests.bat	*[270]	CONFERENCE[270]
46-59	10930-10931	`	*[270]	CONFERENCE[270]
46-60	10932-10934	on	*[270]	CONFERENCE[270]
46-61	10935-10942	Windows	_	_
46-62	10942-10943	)	_	_
46-63	10943-10944	.	_	_

#Text=Bazel is also supported for building, but it is not as widely used/tested.
47-1	10946-10951	Bazel	_	_
47-2	10952-10954	is	_	_
47-3	10955-10959	also	_	_
47-4	10960-10969	supported	_	_
47-5	10970-10973	for	_	_
47-6	10974-10982	building	_	_
47-7	10982-10983	,	_	_
47-8	10984-10987	but	_	_
47-9	10988-10990	it	_	_
47-10	10991-10993	is	*[262]	LICENSE[262]
47-11	10994-10997	not	*[262]	LICENSE[262]
47-12	10998-11000	as	_	_
47-13	11001-11007	widely	_	_
47-14	11008-11012	used	_	_
47-15	11012-11013	/	_	_
47-16	11013-11019	tested	_	_
47-17	11019-11020	.	_	_

#Text=When building for Armv7, a limitation of current compilers requires you to add `-DHWY\_CMAKE\_ARM7:BOOL=ON` to the CMake command line\; see #834 and #1032.
48-1	11022-11026	When	_	_
48-2	11027-11035	building	_	_
48-3	11036-11039	for	_	_
48-4	11040-11045	Armv7	_	_
48-5	11045-11046	,	_	_
48-6	11047-11048	a	_	_
48-7	11049-11059	limitation	_	_
48-8	11060-11062	of	_	_
48-9	11063-11070	current	_	_
48-10	11071-11080	compilers	_	_
48-11	11081-11089	requires	*[249]	DATASET[249]
48-12	11090-11093	you	*[249]	DATASET[249]
48-13	11094-11096	to	*[249]	DATASET[249]
48-14	11097-11100	add	*[249]	DATASET[249]
48-15	11101-11102	`	*[249]	DATASET[249]
48-16	11102-11103	-	*[249]	DATASET[249]
48-17	11103-11118	DHWY\_CMAKE\_ARM7	*[249]	DATASET[249]
48-18	11118-11119	:	*[249]	DATASET[249]
48-19	11119-11123	BOOL	_	_
48-20	11123-11124	=	_	_
48-21	11124-11126	ON	_	_
48-22	11126-11127	`	_	_
48-23	11128-11130	to	_	_
48-24	11131-11134	the	_	_
48-25	11135-11140	CMake	_	_
48-26	11141-11148	command	_	_
48-27	11149-11153	line	_	_
48-28	11153-11154	\;	_	_
48-29	11155-11158	see	_	_
48-30	11159-11163	#834	_	_
48-31	11164-11167	and	_	_
48-32	11168-11173	#1032	_	_
48-33	11173-11174	.	_	_

#Text=We understand that work is underway to remove this limitation.
49-1	11175-11177	We	_	_
49-2	11178-11188	understand	_	_
49-3	11189-11193	that	*[289]	PROGLANG[289]
49-4	11194-11198	work	_	_
49-5	11199-11201	is	_	_
49-6	11202-11210	underway	_	_
49-7	11211-11213	to	_	_
49-8	11214-11220	remove	_	_
49-9	11221-11225	this	_	_
49-10	11226-11236	limitation	_	_
49-11	11236-11237	.	_	_

#Text=Building on 32-bit x86 is not officially supported, and AVX2/3 are disabled by default there.
50-1	11239-11247	Building	_	_
50-2	11248-11250	on	_	_
50-3	11251-11253	32	_	_
50-4	11253-11254	-	_	_
50-5	11254-11257	bit	_	_
50-6	11258-11261	x86	_	_
50-7	11262-11264	is	_	_
50-8	11265-11268	not	_	_
50-9	11269-11279	officially	_	_
50-10	11280-11289	supported	_	_
50-11	11289-11290	,	_	_
50-12	11291-11294	and	_	_
50-13	11295-11299	AVX2	_	_
50-14	11299-11300	/	_	_
50-15	11300-11301	3	_	_
50-16	11302-11305	are	_	_
50-17	11306-11314	disabled	_	_
50-18	11315-11317	by	_	_
50-19	11318-11325	default	_	_
50-20	11326-11331	there	_	_
50-21	11331-11332	.	_	_

#Text=Note that johnplatts has successfully built and run the Highway tests on 32-bit x86, including AVX2/3, on GCC 7/8 and Clang 8/11/12.
51-1	11333-11337	Note	_	_
51-2	11338-11342	that	_	_
51-3	11343-11353	johnplatts	_	_
51-4	11354-11357	has	_	_
51-5	11358-11370	successfully	_	_
51-6	11371-11376	built	_	_
51-7	11377-11380	and	_	_
51-8	11381-11384	run	_	_
51-9	11385-11388	the	_	_
51-10	11389-11396	Highway	_	_
51-11	11397-11402	tests	_	_
51-12	11403-11405	on	_	_
51-13	11406-11408	32	_	_
51-14	11408-11409	-	_	_
51-15	11409-11412	bit	_	_
51-16	11413-11416	x86	_	_
51-17	11416-11417	,	_	_
51-18	11418-11427	including	_	_
51-19	11428-11432	AVX2	_	_
51-20	11432-11433	/	_	_
51-21	11433-11434	3	_	_
51-22	11434-11435	,	_	_
51-23	11436-11438	on	_	_
51-24	11439-11442	GCC	_	_
51-25	11443-11444	7	_	_
51-26	11444-11445	/	_	_
51-27	11445-11446	8	_	_
51-28	11447-11450	and	_	_
51-29	11451-11456	Clang	_	_
51-30	11457-11458	8	_	_
51-31	11458-11459	/	_	_
51-32	11459-11461	11	_	_
51-33	11461-11462	/	*[271]	CONFERENCE[271]
51-34	11462-11464	12	*[271]	CONFERENCE[271]
51-35	11464-11465	.	_	_

#Text=On Ubuntu 22.04, Clang 11 and 12, but not later versions, require extra compiler flags `-m32 -isystem /usr/i686-linux-gnu/include`.
52-1	11466-11468	On	_	_
52-2	11469-11475	Ubuntu	_	_
52-3	11476-11481	22.04	_	_
52-4	11481-11482	,	_	_
52-5	11483-11488	Clang	_	_
52-6	11489-11491	11	_	_
52-7	11492-11495	and	_	_
52-8	11496-11498	12	_	_
52-9	11498-11499	,	_	_
52-10	11500-11503	but	_	_
52-11	11504-11507	not	_	_
52-12	11508-11513	later	_	_
52-13	11514-11522	versions	_	_
52-14	11522-11523	,	_	_
52-15	11524-11531	require	_	_
52-16	11532-11537	extra	_	_
52-17	11538-11546	compiler	_	_
52-18	11547-11552	flags	_	_
52-19	11553-11554	`	_	_
52-20	11554-11555	-	_	_
52-21	11555-11558	m32	_	_
52-22	11559-11560	-	_	_
52-23	11560-11567	isystem	_	_
52-24	11568-11569	/	*[250]	DATASET[250]
52-25	11569-11572	usr	*[250]	DATASET[250]
52-26	11572-11573	/	*[250]	DATASET[250]
52-27	11573-11577	i686	*[250]	DATASET[250]
52-28	11577-11578	-	_	_
52-29	11578-11587	linux-gnu	_	_
52-30	11587-11588	/	_	_
52-31	11588-11595	include	_	_
52-32	11595-11596	`	_	_
52-33	11596-11597	.	_	_

#Text=Clang 10 and earlier require the above plus `-isystem /usr/i686-linux-gnu/include/c++/12/i686-linux-gnu`.
53-1	11598-11603	Clang	_	_
53-2	11604-11606	10	_	_
53-3	11607-11610	and	_	_
53-4	11611-11618	earlier	_	_
53-5	11619-11626	require	_	_
53-6	11627-11630	the	_	_
53-7	11631-11636	above	_	_
53-8	11637-11641	plus	_	_
53-9	11642-11643	`	_	_
53-10	11643-11644	-	_	_
53-11	11644-11651	isystem	_	_
53-12	11652-11653	/	_	_
53-13	11653-11656	usr	_	_
53-14	11656-11657	/	_	_
53-15	11657-11661	i686	_	_
53-16	11661-11662	-	_	_
53-17	11662-11671	linux-gnu	_	_
53-18	11671-11672	/	_	_
53-19	11672-11679	include	_	_
53-20	11679-11680	/	_	_
53-21	11680-11681	c	_	_
53-22	11681-11682	+	_	_
53-23	11682-11683	+	_	_
53-24	11683-11684	/	_	_
53-25	11684-11686	12	_	_
53-26	11686-11687	/	_	_
53-27	11687-11691	i686	_	_
53-28	11691-11692	-	_	_
53-29	11692-11701	linux-gnu	_	_
53-30	11701-11702	`	_	_
53-31	11702-11703	.	_	_

#Text=See #1279.  ## Building highway - Using vcpkg  highway is now available in \[vcpkg\](https://github.com/Microsoft/vcpkg)  ```bash vcpkg install highway ```  The highway port in vcpkg is kept up to date by Microsoft team members and community contributors.
54-1	11704-11707	See	_	_
54-2	11708-11713	#1279	_	_
54-3	11713-11714	.	_	_
54-4	11716-11717	#	_	_
54-5	11717-11718	#	_	_
54-6	11719-11727	Building	_	_
54-7	11728-11735	highway	_	_
54-8	11736-11737	-	_	_
54-9	11738-11743	Using	_	_
54-10	11744-11749	vcpkg	_	_
54-11	11751-11758	highway	_	_
54-12	11759-11761	is	_	_
54-13	11762-11765	now	_	_
54-14	11766-11775	available	_	_
54-15	11776-11778	in	_	_
54-16	11779-11780	\[	_	_
54-17	11780-11785	vcpkg	_	_
54-18	11785-11786	\]	_	_
54-19	11786-11787	(	_	_
54-20	11787-11792	https	_	_
54-21	11792-11793	:	_	_
54-22	11793-11794	/	_	_
54-23	11794-11795	/	_	_
54-24	11795-11805	github.com	_	_
54-25	11805-11806	/	_	_
54-26	11806-11815	Microsoft	_	_
54-27	11815-11816	/	_	_
54-28	11816-11821	vcpkg	_	_
54-29	11821-11822	)	_	_
54-30	11824-11825	`	_	_
54-31	11825-11826	`	_	_
54-32	11826-11827	`	_	_
54-33	11827-11831	bash	_	_
54-34	11832-11837	vcpkg	_	_
54-35	11838-11845	install	_	_
54-36	11846-11853	highway	_	_
54-37	11854-11855	`	_	_
54-38	11855-11856	`	_	_
54-39	11856-11857	`	_	_
54-40	11859-11862	The	_	_
54-41	11863-11870	highway	_	_
54-42	11871-11875	port	_	_
54-43	11876-11878	in	_	_
54-44	11879-11884	vcpkg	_	_
54-45	11885-11887	is	_	_
54-46	11888-11892	kept	_	_
54-47	11893-11895	up	_	_
54-48	11896-11898	to	_	_
54-49	11899-11903	date	_	_
54-50	11904-11906	by	_	_
54-51	11907-11916	Microsoft	_	_
54-52	11917-11921	team	_	_
54-53	11922-11929	members	_	_
54-54	11930-11933	and	_	_
54-55	11934-11943	community	_	_
54-56	11944-11956	contributors	_	_
54-57	11956-11957	.	_	_

#Text=If the version is out of date, please \[create an issue or pull request\](https://github.com/Microsoft/vcpkg) on the vcpkg repository.  ## Quick start  You can use the `benchmark` inside examples/ as a starting point.
55-1	11958-11960	If	_	_
55-2	11961-11964	the	_	_
55-3	11965-11972	version	_	_
55-4	11973-11975	is	_	_
55-5	11976-11979	out	_	_
55-6	11980-11982	of	_	_
55-7	11983-11987	date	_	_
55-8	11987-11988	,	_	_
55-9	11989-11995	please	_	_
55-10	11996-11997	\[	_	_
55-11	11997-12003	create	_	_
55-12	12004-12006	an	_	_
55-13	12007-12012	issue	_	_
55-14	12013-12015	or	_	_
55-15	12016-12020	pull	_	_
55-16	12021-12028	request	_	_
55-17	12028-12029	\]	_	_
55-18	12029-12030	(	_	_
55-19	12030-12035	https	_	_
55-20	12035-12036	:	_	_
55-21	12036-12037	/	_	_
55-22	12037-12038	/	_	_
55-23	12038-12048	github.com	_	_
55-24	12048-12049	/	_	_
55-25	12049-12058	Microsoft	_	_
55-26	12058-12059	/	_	_
55-27	12059-12064	vcpkg	_	_
55-28	12064-12065	)	_	_
55-29	12066-12068	on	_	_
55-30	12069-12072	the	_	_
55-31	12073-12078	vcpkg	_	_
55-32	12079-12089	repository	_	_
55-33	12089-12090	.	_	_
55-34	12092-12093	#	_	_
55-35	12093-12094	#	_	_
55-36	12095-12100	Quick	_	_
55-37	12101-12106	start	_	_
55-38	12108-12111	You	_	_
55-39	12112-12115	can	_	_
55-40	12116-12119	use	_	_
55-41	12120-12123	the	_	_
55-42	12124-12125	`	_	_
55-43	12125-12134	benchmark	_	_
55-44	12134-12135	`	_	_
55-45	12136-12142	inside	_	_
55-46	12143-12151	examples	_	_
55-47	12151-12152	/	*[269]	WORKSHOP[269]
55-48	12153-12155	as	*[269]	WORKSHOP[269]
55-49	12156-12157	a	*[269]	WORKSHOP[269]
55-50	12158-12166	starting	*[269]	WORKSHOP[269]
55-51	12167-12172	point	_	_
55-52	12172-12173	.	_	_

#Text=A \[quick-reference page\](g3doc/quick\_reference.md) briefly lists all operations and their parameters, and the \[instruction\_matrix\](g3doc/instruction\_matrix.pdf) indicates the number of instructions per operation.
56-1	12175-12176	A	_	_
56-2	12177-12178	\[	_	_
56-3	12178-12193	quick-reference	_	_
56-4	12194-12198	page	_	_
56-5	12198-12199	\]	*[270]	WORKSHOP[270]
56-6	12199-12200	(	*[270]	WORKSHOP[270]
56-7	12200-12205	g3doc	*[270]	WORKSHOP[270]
56-8	12205-12206	/	*[270]	WORKSHOP[270]
56-9	12206-12224	quick\_reference.md	_	_
56-10	12224-12225	)	_	_
56-11	12226-12233	briefly	_	_
56-12	12234-12239	lists	_	_
56-13	12240-12243	all	_	_
56-14	12244-12254	operations	_	_
56-15	12255-12258	and	_	_
56-16	12259-12264	their	_	_
56-17	12265-12275	parameters	_	_
56-18	12275-12276	,	_	_
56-19	12277-12280	and	_	_
56-20	12281-12284	the	_	_
56-21	12285-12286	\[	_	_
56-22	12286-12304	instruction\_matrix	_	_
56-23	12304-12305	\]	_	_
56-24	12305-12306	(	_	_
56-25	12306-12311	g3doc	_	_
56-26	12311-12312	/	_	_
56-27	12312-12334	instruction\_matrix.pdf	_	_
56-28	12334-12335	)	_	_
56-29	12336-12345	indicates	_	_
56-30	12346-12349	the	_	_
56-31	12350-12356	number	_	_
56-32	12357-12359	of	_	_
56-33	12360-12372	instructions	_	_
56-34	12373-12376	per	_	_
56-35	12377-12386	operation	_	_
56-36	12386-12387	.	_	_

#Text=The \[FAQ\](g3doc/faq.md) answers questions about portability, API design and where to find more information.
57-1	12389-12392	The	_	_
57-2	12393-12394	\[	_	_
57-3	12394-12397	FAQ	_	_
57-4	12397-12398	\]	_	_
57-5	12398-12399	(	_	_
57-6	12399-12404	g3doc	_	_
57-7	12404-12405	/	*[310]	SOFTWARE[310]
57-8	12405-12411	faq.md	*[310]	SOFTWARE[310]
57-9	12411-12412	)	*[310]	SOFTWARE[310]
57-10	12413-12420	answers	*[310]	SOFTWARE[310]
57-11	12421-12430	questions	*[310]	SOFTWARE[310]
57-12	12431-12436	about	*[310]	SOFTWARE[310]
57-13	12437-12448	portability	*[310]	SOFTWARE[310]
57-14	12448-12449	,	*[310]	SOFTWARE[310]
57-15	12450-12453	API	*[310]	SOFTWARE[310]
57-16	12454-12460	design	*[310]	SOFTWARE[310]
57-17	12461-12464	and	*[310]	SOFTWARE[310]
57-18	12465-12470	where	*[310]	SOFTWARE[310]
57-19	12471-12473	to	_	_
57-20	12474-12478	find	_	_
57-21	12479-12483	more	_	_
57-22	12484-12495	information	_	_
57-23	12495-12496	.	_	_

#Text=We recommend using full SIMD vectors whenever possible for maximum performance portability.
58-1	12498-12500	We	_	_
58-2	12501-12510	recommend	_	_
58-3	12511-12516	using	_	_
58-4	12517-12521	full	_	_
58-5	12522-12526	SIMD	_	_
58-6	12527-12534	vectors	_	_
58-7	12535-12543	whenever	_	_
58-8	12544-12552	possible	_	_
58-9	12553-12556	for	_	_
58-10	12557-12564	maximum	*[251]	DATASET[251]
58-11	12565-12576	performance	*[251]	DATASET[251]
58-12	12577-12588	portability	*[251]	DATASET[251]
58-13	12588-12589	.	_	_

#Text=To obtain them, pass a `ScalableTag<float>` (or equivalently `HWY\_FULL(float)`) tag to functions such as `Zero/Set/Load`.
59-1	12590-12592	To	_	_
59-2	12593-12599	obtain	_	_
59-3	12600-12604	them	_	_
59-4	12604-12605	,	_	_
59-5	12606-12610	pass	_	_
59-6	12611-12612	a	_	_
59-7	12613-12614	`	_	_
59-8	12614-12625	ScalableTag	_	_
59-9	12625-12626	<	_	_
59-10	12626-12631	float	_	_
59-11	12631-12632	>	_	_
59-12	12632-12633	`	_	_
59-13	12634-12635	(	_	_
59-14	12635-12637	or	_	_
59-15	12638-12650	equivalently	_	_
59-16	12651-12652	`	_	_
59-17	12652-12660	HWY\_FULL	_	_
59-18	12660-12661	(	*[262]	ONTOLOGY[262]
59-19	12661-12666	float	*[262]	ONTOLOGY[262]
59-20	12666-12667	)	*[262]	ONTOLOGY[262]
59-21	12667-12668	`	*[262]	ONTOLOGY[262]
59-22	12668-12669	)	*[262]	ONTOLOGY[262]
59-23	12670-12673	tag	*[262]	ONTOLOGY[262]
59-24	12674-12676	to	*[262]	ONTOLOGY[262]
59-25	12677-12686	functions	*[262]	ONTOLOGY[262]
59-26	12687-12691	such	*[262]	ONTOLOGY[262]
59-27	12692-12694	as	*[262]	ONTOLOGY[262]
59-28	12695-12696	`	*[262]	ONTOLOGY[262]
59-29	12696-12700	Zero	*[262]	ONTOLOGY[262]
59-30	12700-12701	/	*[262]	ONTOLOGY[262]
59-31	12701-12704	Set	_	_
59-32	12704-12705	/	_	_
59-33	12705-12709	Load	_	_
59-34	12709-12710	`	_	_
59-35	12710-12711	.	_	_

#Text=There are two alternatives for use-cases requiring an upper bound on the lanes:  -   For up to `N` lanes, specify `CappedTag<T, N>` or the equivalent     `HWY\_CAPPED(T, N)`.
60-1	12712-12717	There	_	_
60-2	12718-12721	are	_	_
60-3	12722-12725	two	_	_
60-4	12726-12738	alternatives	_	_
60-5	12739-12742	for	_	_
60-6	12743-12752	use-cases	_	_
60-7	12753-12762	requiring	_	_
60-8	12763-12765	an	_	_
60-9	12766-12771	upper	_	_
60-10	12772-12777	bound	_	_
60-11	12778-12780	on	_	_
60-12	12781-12784	the	_	_
60-13	12785-12790	lanes	_	_
60-14	12790-12791	:	_	_
60-15	12793-12794	-	_	_
60-16	12797-12800	For	_	_
60-17	12801-12803	up	_	_
60-18	12804-12806	to	_	_
60-19	12807-12808	`	_	_
60-20	12808-12809	N	_	_
60-21	12809-12810	`	*[263]	ONTOLOGY[263]
60-22	12811-12816	lanes	*[263]	ONTOLOGY[263]
60-23	12816-12817	,	*[263]	ONTOLOGY[263]
60-24	12818-12825	specify	*[263]	ONTOLOGY[263]
60-25	12826-12827	`	*[263]	ONTOLOGY[263]
60-26	12827-12836	CappedTag	_	_
60-27	12836-12837	<	_	_
60-28	12837-12838	T	_	_
60-29	12838-12839	,	_	_
60-30	12840-12841	N	_	_
60-31	12841-12842	>	_	_
60-32	12842-12843	`	_	_
60-33	12844-12846	or	_	_
60-34	12847-12850	the	_	_
60-35	12851-12861	equivalent	_	_
60-36	12866-12867	`	_	_
60-37	12867-12877	HWY\_CAPPED	_	_
60-38	12877-12878	(	_	_
60-39	12878-12879	T	_	_
60-40	12879-12880	,	_	_
60-41	12881-12882	N	_	_
60-42	12882-12883	)	_	_
60-43	12883-12884	`	_	_
60-44	12884-12885	.	_	_

#Text=The actual number of lanes will be `N` rounded down to     the nearest power of two, such as 4 if `N` is 5, or 8 if `N` is 8.
61-1	12886-12889	The	_	_
61-2	12890-12896	actual	_	_
61-3	12897-12903	number	_	_
61-4	12904-12906	of	_	_
61-5	12907-12912	lanes	_	_
61-6	12913-12917	will	_	_
61-7	12918-12920	be	_	_
61-8	12921-12922	`	_	_
61-9	12922-12923	N	_	_
61-10	12923-12924	`	_	_
61-11	12925-12932	rounded	_	_
61-12	12933-12937	down	_	_
61-13	12938-12940	to	_	_
61-14	12945-12948	the	_	_
61-15	12949-12956	nearest	_	_
61-16	12957-12962	power	_	_
61-17	12963-12965	of	_	_
61-18	12966-12969	two	_	_
61-19	12969-12970	,	_	_
61-20	12971-12975	such	_	_
61-21	12976-12978	as	_	_
61-22	12979-12980	4	_	_
61-23	12981-12983	if	_	_
61-24	12984-12985	`	_	_
61-25	12985-12986	N	*[272]	PROJECT[272]
61-26	12986-12987	`	*[272]	PROJECT[272]
61-27	12988-12990	is	*[272]	PROJECT[272]
61-28	12991-12992	5	*[272]	PROJECT[272]
61-29	12992-12993	,	*[272]	PROJECT[272]
61-30	12994-12996	or	*[272]	PROJECT[272]
61-31	12997-12998	8	*[272]	PROJECT[272]
61-32	12999-13001	if	*[272]	PROJECT[272]
61-33	13002-13003	`	*[272]	PROJECT[272]
61-34	13003-13004	N	*[272]	PROJECT[272]
61-35	13004-13005	`	*[272]	PROJECT[272]
61-36	13006-13008	is	*[272]	PROJECT[272]
61-37	13009-13010	8	*[272]	PROJECT[272]
61-38	13010-13011	.	_	_

#Text=This is     useful for data structures such as a narrow matrix.
62-1	13012-13016	This	_	_
62-2	13017-13019	is	_	_
62-3	13024-13030	useful	_	_
62-4	13031-13034	for	_	_
62-5	13035-13039	data	_	_
62-6	13040-13050	structures	*[278]	EVALMETRIC[278]
62-7	13051-13055	such	*[278]	EVALMETRIC[278]
62-8	13056-13058	as	*[278]	EVALMETRIC[278]
62-9	13059-13060	a	_	_
62-10	13061-13067	narrow	_	_
62-11	13068-13074	matrix	_	_
62-12	13074-13075	.	_	_

#Text=A loop is still required     because vectors may actually have fewer than `N` lanes
63-1	13076-13077	A	_	_
63-2	13078-13082	loop	_	_
63-3	13083-13085	is	_	_
63-4	13086-13091	still	_	_
63-5	13092-13100	required	_	_
63-6	13105-13112	because	_	_
63-7	13113-13120	vectors	_	_
63-8	13121-13124	may	_	_
63-9	13125-13133	actually	_	_
63-10	13134-13138	have	_	_
63-11	13139-13144	fewer	_	_
63-12	13145-13149	than	_	_
63-13	13150-13151	`	*[252]	DATASET[252]
63-14	13151-13152	N	*[252]	DATASET[252]
63-15	13152-13153	`	_	_
63-16	13154-13159	lanes	_	_

#Text=.
64-1	13159-13160	.	_	_

#Text=-   For exactly a power of two `N` lanes, specify `FixedTag<T, N>`.
65-1	13162-13163	-	_	_
65-2	13166-13169	For	_	_
65-3	13170-13177	exactly	_	_
65-4	13178-13179	a	_	_
65-5	13180-13185	power	_	_
65-6	13186-13188	of	_	_
65-7	13189-13192	two	*[271]	WORKSHOP[271]
65-8	13193-13194	`	*[271]	WORKSHOP[271]
65-9	13194-13195	N	*[271]	WORKSHOP[271]
65-10	13195-13196	`	*[271]	WORKSHOP[271]
65-11	13197-13202	lanes	*[271]	WORKSHOP[271]
65-12	13202-13203	,	*[271]	WORKSHOP[271]
65-13	13204-13211	specify	_	_
65-14	13212-13213	`	_	_
65-15	13213-13221	FixedTag	_	_
65-16	13221-13222	<	_	_
65-17	13222-13223	T	_	_
65-18	13223-13224	,	_	_
65-19	13225-13226	N	_	_
65-20	13226-13227	>	_	_
65-21	13227-13228	`	_	_
65-22	13228-13229	.	_	_

#Text=The largest     supported `N` depends on the target, but is guaranteed to be at least     `16/sizeof(T)`.
66-1	13230-13233	The	_	_
66-2	13234-13241	largest	_	_
66-3	13246-13255	supported	_	_
66-4	13256-13257	`	_	_
66-5	13257-13258	N	_	_
66-6	13258-13259	`	_	_
66-7	13260-13267	depends	_	_
66-8	13268-13270	on	_	_
66-9	13271-13274	the	_	_
66-10	13275-13281	target	_	_
66-11	13281-13282	,	_	_
66-12	13283-13286	but	_	_
66-13	13287-13289	is	_	_
66-14	13290-13300	guaranteed	_	_
66-15	13301-13303	to	_	_
66-16	13304-13306	be	_	_
66-17	13307-13309	at	*[263]	LICENSE[263]
66-18	13310-13315	least	*[263]	LICENSE[263]
66-19	13320-13321	`	*[263]	LICENSE[263]
66-20	13321-13323	16	*[263]	LICENSE[263]
66-21	13323-13324	/	*[263]	LICENSE[263]
66-22	13324-13330	sizeof	_	_
66-23	13330-13331	(	_	_
66-24	13331-13332	T	_	_
66-25	13332-13333	)	_	_
66-26	13333-13334	`	_	_
66-27	13334-13335	.	_	_

#Text=Due to ADL restrictions, user code calling Highway ops must either: \*   Reside inside `namespace hwy { namespace HWY\_NAMESPACE {`\; or \*   prefix each op with an alias such as `namespace hn = hwy::HWY\_NAMESPACE\;     hn::Add()`\; or \*   add using-declarations for each op used: `using hwy::HWY\_NAMESPACE::Add\;`.
67-1	13337-13340	Due	_	_
67-2	13341-13343	to	_	_
67-3	13344-13347	ADL	_	_
67-4	13348-13360	restrictions	_	_
67-5	13360-13361	,	_	_
67-6	13362-13366	user	_	_
67-7	13367-13371	code	_	_
67-8	13372-13379	calling	_	_
67-9	13380-13387	Highway	_	_
67-10	13388-13391	ops	_	_
67-11	13392-13396	must	_	_
67-12	13397-13403	either	_	_
67-13	13403-13404	:	_	_
67-14	13405-13406	\*	_	_
67-15	13409-13415	Reside	_	_
67-16	13416-13422	inside	_	_
67-17	13423-13424	`	_	_
67-18	13424-13433	namespace	_	_
67-19	13434-13437	hwy	_	_
67-20	13438-13439	{	_	_
67-21	13440-13449	namespace	_	_
67-22	13450-13463	HWY\_NAMESPACE	_	_
67-23	13464-13465	{	_	_
67-24	13465-13466	`	_	_
67-25	13466-13467	\;	_	_
67-26	13468-13470	or	_	_
67-27	13471-13472	\*	_	_
67-28	13475-13481	prefix	_	_
67-29	13482-13486	each	_	_
67-30	13487-13489	op	_	_
67-31	13490-13494	with	_	_
67-32	13495-13497	an	_	_
67-33	13498-13503	alias	_	_
67-34	13504-13508	such	_	_
67-35	13509-13511	as	_	_
67-36	13512-13513	`	_	_
67-37	13513-13522	namespace	_	_
67-38	13523-13525	hn	_	_
67-39	13526-13527	=	_	_
67-40	13528-13531	hwy	_	_
67-41	13531-13532	:	_	_
67-42	13532-13533	:	_	_
67-43	13533-13546	HWY\_NAMESPACE	_	_
67-44	13546-13547	\;	_	_
67-45	13552-13554	hn	_	_
67-46	13554-13555	:	_	_
67-47	13555-13556	:	_	_
67-48	13556-13559	Add	_	_
67-49	13559-13560	(	_	_
67-50	13560-13561	)	_	_
67-51	13561-13562	`	_	_
67-52	13562-13563	\;	_	_
67-53	13564-13566	or	_	_
67-54	13567-13568	\*	_	_
67-55	13571-13574	add	_	_
67-56	13575-13593	using-declarations	_	_
67-57	13594-13597	for	_	_
67-58	13598-13602	each	_	_
67-59	13603-13605	op	_	_
67-60	13606-13610	used	_	_
67-61	13610-13611	:	_	_
67-62	13612-13613	`	_	_
67-63	13613-13618	using	_	_
67-64	13619-13622	hwy	_	_
67-65	13622-13623	:	_	_
67-66	13623-13624	:	_	_
67-67	13624-13637	HWY\_NAMESPACE	_	_
67-68	13637-13638	:	_	_
67-69	13638-13639	:	_	_
67-70	13639-13642	Add	_	_
67-71	13642-13643	\;	_	_
67-72	13643-13644	`	_	_
67-73	13644-13645	.	_	_

#Text=Additionally, each function that calls Highway ops (such as `Load`) must either be prefixed with `HWY\_ATTR`, OR reside between `HWY\_BEFORE\_NAMESPACE()` and `HWY\_AFTER\_NAMESPACE()`.
68-1	13647-13659	Additionally	_	_
68-2	13659-13660	,	_	_
68-3	13661-13665	each	_	_
68-4	13666-13674	function	_	_
68-5	13675-13679	that	_	_
68-6	13680-13685	calls	_	_
68-7	13686-13693	Highway	_	_
68-8	13694-13697	ops	*[290]	PROGLANG[290]
68-9	13698-13699	(	*[290]	PROGLANG[290]
68-10	13699-13703	such	*[290]	PROGLANG[290]
68-11	13704-13706	as	*[290]	PROGLANG[290]
68-12	13707-13708	`	*[290]	PROGLANG[290]
68-13	13708-13712	Load	*[290]	PROGLANG[290]
68-14	13712-13713	`	*[290]	PROGLANG[290]
68-15	13713-13714	)	*[290]	PROGLANG[290]
68-16	13715-13719	must	_	_
68-17	13720-13726	either	_	_
68-18	13727-13729	be	_	_
68-19	13730-13738	prefixed	_	_
68-20	13739-13743	with	_	_
68-21	13744-13745	`	_	_
68-22	13745-13753	HWY\_ATTR	_	_
68-23	13753-13754	`	_	_
68-24	13754-13755	,	_	_
68-25	13756-13758	OR	_	_
68-26	13759-13765	reside	_	_
68-27	13766-13773	between	_	_
68-28	13774-13775	`	_	_
68-29	13775-13795	HWY\_BEFORE\_NAMESPACE	_	_
68-30	13795-13796	(	_	_
68-31	13796-13797	)	_	_
68-32	13797-13798	`	_	_
68-33	13799-13802	and	_	_
68-34	13803-13804	`	_	_
68-35	13804-13823	HWY\_AFTER\_NAMESPACE	_	_
68-36	13823-13824	(	_	_
68-37	13824-13825	)	_	_
68-38	13825-13826	`	_	_
68-39	13826-13827	.	_	_

#Text=Lambda functions currently require `HWY\_ATTR` before their opening brace.
69-1	13828-13834	Lambda	_	_
69-2	13835-13844	functions	_	_
69-3	13845-13854	currently	_	_
69-4	13855-13862	require	_	_
69-5	13863-13864	`	_	_
69-6	13864-13872	HWY\_ATTR	_	_
69-7	13872-13873	`	_	_
69-8	13874-13880	before	_	_
69-9	13881-13886	their	_	_
69-10	13887-13894	opening	_	_
69-11	13895-13900	brace	_	_
69-12	13900-13901	.	_	_

#Text=Do not use namespace-scope nor `static` initializers for SIMD vectors because this can cause SIGILL when using runtime dispatch and the compiler chooses an initializer compiled for a target not supported by the current CPU.
70-1	13903-13905	Do	_	_
70-2	13906-13909	not	_	_
70-3	13910-13913	use	_	_
70-4	13914-13929	namespace-scope	_	_
70-5	13930-13933	nor	_	_
70-6	13934-13935	`	_	_
70-7	13935-13941	static	_	_
70-8	13941-13942	`	_	_
70-9	13943-13955	initializers	_	_
70-10	13956-13959	for	_	_
70-11	13960-13964	SIMD	_	_
70-12	13965-13972	vectors	*[273]	CONFERENCE[273]
70-13	13973-13980	because	*[273]	CONFERENCE[273]
70-14	13981-13985	this	*[273]	CONFERENCE[273]
70-15	13986-13989	can	*[273]	CONFERENCE[273]
70-16	13990-13995	cause	*[273]	CONFERENCE[273]
70-17	13996-14002	SIGILL	*[273]	CONFERENCE[273]
70-18	14003-14007	when	*[273]	CONFERENCE[273]
70-19	14008-14013	using	*[273]	CONFERENCE[273]
70-20	14014-14021	runtime	*[273]	CONFERENCE[273]
70-21	14022-14030	dispatch	*[273]	CONFERENCE[273]
70-22	14031-14034	and	*[273]	CONFERENCE[273]
70-23	14035-14038	the	*[273]	CONFERENCE[273]
70-24	14039-14047	compiler	*[273]	CONFERENCE[273]
70-25	14048-14055	chooses	*[273]	CONFERENCE[273]
70-26	14056-14058	an	*[273]	CONFERENCE[273]
70-27	14059-14070	initializer	*[273]	CONFERENCE[273]
70-28	14071-14079	compiled	_	_
70-29	14080-14083	for	_	_
70-30	14084-14085	a	_	_
70-31	14086-14092	target	_	_
70-32	14093-14096	not	_	_
70-33	14097-14106	supported	_	_
70-34	14107-14109	by	_	_
70-35	14110-14113	the	_	_
70-36	14114-14121	current	_	_
70-37	14122-14125	CPU	_	_
70-38	14125-14126	.	_	_

#Text=Instead, constants initialized via `Set` should generally be local (const) variables.
71-1	14127-14134	Instead	_	_
71-2	14134-14135	,	_	_
71-3	14136-14145	constants	_	_
71-4	14146-14157	initialized	_	_
71-5	14158-14161	via	_	_
71-6	14162-14163	`	_	_
71-7	14163-14166	Set	_	_
71-8	14166-14167	`	_	_
71-9	14168-14174	should	_	_
71-10	14175-14184	generally	_	_
71-11	14185-14187	be	_	_
71-12	14188-14193	local	_	_
71-13	14194-14195	(	*[279]	EVALMETRIC[279]
71-14	14195-14200	const	*[279]	EVALMETRIC[279]
71-15	14200-14201	)	*[279]	EVALMETRIC[279]
71-16	14202-14211	variables	*[279]	EVALMETRIC[279]
71-17	14211-14212	.	_	_

#Text=The entry points into code using Highway differ slightly depending on whether they use static or dynamic dispatch.
72-1	14214-14217	The	_	_
72-2	14218-14223	entry	_	_
72-3	14224-14230	points	*[272]	WORKSHOP[272]
72-4	14231-14235	into	*[272]	WORKSHOP[272]
72-5	14236-14240	code	*[272]	WORKSHOP[272]
72-6	14241-14246	using	*[272]	WORKSHOP[272]
72-7	14247-14254	Highway	*[272]	WORKSHOP[272]
72-8	14255-14261	differ	*[272]	WORKSHOP[272]
72-9	14262-14270	slightly	_	_
72-10	14271-14280	depending	_	_
72-11	14281-14283	on	_	_
72-12	14284-14291	whether	_	_
72-13	14292-14296	they	_	_
72-14	14297-14300	use	_	_
72-15	14301-14307	static	_	_
72-16	14308-14310	or	_	_
72-17	14311-14318	dynamic	_	_
72-18	14319-14327	dispatch	_	_
72-19	14327-14328	.	_	_

#Text=In both cases, we recommend that the top-level function receives one or more pointers to arrays, rather than target-specific vector types
73-1	14329-14331	In	_	_
73-2	14332-14336	both	_	_
73-3	14337-14342	cases	_	_
73-4	14342-14343	,	_	_
73-5	14344-14346	we	_	_
73-6	14347-14356	recommend	_	_
73-7	14357-14361	that	_	_
73-8	14362-14365	the	_	_
73-9	14366-14375	top-level	_	_
73-10	14376-14384	function	_	_
73-11	14385-14393	receives	_	_
73-12	14394-14397	one	_	_
73-13	14398-14400	or	_	_
73-14	14401-14405	more	_	_
73-15	14406-14414	pointers	_	_
73-16	14415-14417	to	_	_
73-17	14418-14424	arrays	_	_
73-18	14424-14425	,	_	_
73-19	14426-14432	rather	_	_
73-20	14433-14437	than	_	_
73-21	14438-14453	target-specific	_	_
73-22	14454-14460	vector	_	_
73-23	14461-14466	types	_	_

#Text=.
74-1	14466-14467	.	_	_

#Text=\*   For static dispatch, `HWY\_TARGET` will be the best available target among     `HWY\_BASELINE\_TARGETS`, i.e. those allowed for use by the compiler (see     \[quick-reference\](g3doc/quick\_reference.md)).
75-1	14469-14470	\*	_	_
75-2	14473-14476	For	_	_
75-3	14477-14483	static	_	_
75-4	14484-14492	dispatch	*[264]	LICENSE[264]
75-5	14492-14493	,	*[264]	LICENSE[264]
75-6	14494-14495	`	*[264]	LICENSE[264]
75-7	14495-14505	HWY\_TARGET	*[264]	LICENSE[264]
75-8	14505-14506	`	*[264]	LICENSE[264]
75-9	14507-14511	will	*[264]	LICENSE[264]
75-10	14512-14514	be	*[264]	LICENSE[264]
75-11	14515-14518	the	*[264]	LICENSE[264]
75-12	14519-14523	best	*[264]	LICENSE[264]
75-13	14524-14533	available	*[264]	LICENSE[264]
75-14	14534-14540	target	*[264]	LICENSE[264]
75-15	14541-14546	among	*[264]	LICENSE[264]
75-16	14551-14552	`	*[264]	LICENSE[264]
75-17	14552-14572	HWY\_BASELINE\_TARGETS	*[264]	LICENSE[264]
75-18	14572-14573	`	*[264]	LICENSE[264]
75-19	14573-14574	,	*[264]	LICENSE[264]
75-20	14575-14578	i.e	*[264]	LICENSE[264]
75-21	14578-14579	.	*[264]	LICENSE[264]
75-22	14580-14585	those	*[264]	LICENSE[264]
75-23	14586-14593	allowed	*[264]	LICENSE[264]
75-24	14594-14597	for	*[264]	LICENSE[264]
75-25	14598-14601	use	*[264]	LICENSE[264]
75-26	14602-14604	by	*[264]	LICENSE[264]
75-27	14605-14608	the	*[264]	LICENSE[264]
75-28	14609-14617	compiler	*[264]	LICENSE[264]
75-29	14618-14619	(	*[264]	LICENSE[264]
75-30	14619-14622	see	*[264]	LICENSE[264]
75-31	14627-14628	\[	*[264]	LICENSE[264]
75-32	14628-14643	quick-reference	*[264]	LICENSE[264]
75-33	14643-14644	\]	*[264]	LICENSE[264]
75-34	14644-14645	(	*[264]	LICENSE[264]
75-35	14645-14650	g3doc	*[264]	LICENSE[264]
75-36	14650-14651	/	*[264]	LICENSE[264]
75-37	14651-14669	quick\_reference.md	_	_
75-38	14669-14670	)	_	_
75-39	14670-14671	)	_	_
75-40	14671-14672	.	_	_

#Text=Functions inside     `HWY\_NAMESPACE` can be called using `HWY\_STATIC\_DISPATCH(func)(args)` within     the same module they are defined in.
76-1	14673-14682	Functions	_	_
76-2	14683-14689	inside	_	_
76-3	14694-14695	`	_	_
76-4	14695-14708	HWY\_NAMESPACE	_	_
76-5	14708-14709	`	_	_
76-6	14710-14713	can	_	_
76-7	14714-14716	be	_	_
76-8	14717-14723	called	_	_
76-9	14724-14729	using	_	_
76-10	14730-14731	`	_	_
76-11	14731-14750	HWY\_STATIC\_DISPATCH	_	_
76-12	14750-14751	(	*[274]	CONFERENCE[274]
76-13	14751-14755	func	*[274]	CONFERENCE[274]
76-14	14755-14756	)	*[274]	CONFERENCE[274]
76-15	14756-14757	(	*[274]	CONFERENCE[274]
76-16	14757-14761	args	_	_
76-17	14761-14762	)	_	_
76-18	14762-14763	`	_	_
76-19	14764-14770	within	_	_
76-20	14775-14778	the	_	_
76-21	14779-14783	same	_	_
76-22	14784-14790	module	_	_
76-23	14791-14795	they	_	_
76-24	14796-14799	are	_	_
76-25	14800-14807	defined	_	_
76-26	14808-14810	in	_	_
76-27	14810-14811	.	_	_

#Text=You can call the function from other     modules by wrapping it in a regular function and declaring the regular     function in a header
77-1	14812-14815	You	_	_
77-2	14816-14819	can	_	_
77-3	14820-14824	call	_	_
77-4	14825-14828	the	_	_
77-5	14829-14837	function	_	_
77-6	14838-14842	from	_	_
77-7	14843-14848	other	_	_
77-8	14853-14860	modules	_	_
77-9	14861-14863	by	_	_
77-10	14864-14872	wrapping	_	_
77-11	14873-14875	it	*[274]	PROJECT[274]
77-12	14876-14878	in	*[274]	PROJECT[274]
77-13	14879-14880	a	*[274]	PROJECT[274]
77-14	14881-14888	regular	_	_
77-15	14889-14897	function	_	_
77-16	14898-14901	and	_	_
77-17	14902-14911	declaring	_	_
77-18	14912-14915	the	_	_
77-19	14916-14923	regular	_	_
77-20	14928-14936	function	_	_
77-21	14937-14939	in	_	_
77-22	14940-14941	a	_	_
77-23	14942-14948	header	_	_

#Text=.
78-1	14948-14949	.	_	_

#Text=\*   For dynamic dispatch, a table of function pointers is generated via the     `HWY\_EXPORT` macro that is used by `HWY\_DYNAMIC\_DISPATCH(func)(args)` to     call the best function pointer for the current CPU's supported targets.
79-1	14951-14952	\*	_	_
79-2	14955-14958	For	_	_
79-3	14959-14966	dynamic	_	_
79-4	14967-14975	dispatch	_	_
79-5	14975-14976	,	_	_
79-6	14977-14978	a	_	_
79-7	14979-14984	table	_	_
79-8	14985-14987	of	_	_
79-9	14988-14996	function	_	_
79-10	14997-15005	pointers	_	_
79-11	15006-15008	is	_	_
79-12	15009-15018	generated	_	_
79-13	15019-15022	via	*[311]	SOFTWARE[311]
79-14	15023-15026	the	*[311]	SOFTWARE[311]
79-15	15031-15032	`	*[311]	SOFTWARE[311]
79-16	15032-15042	HWY\_EXPORT	*[311]	SOFTWARE[311]
79-17	15042-15043	`	*[311]	SOFTWARE[311]
79-18	15044-15049	macro	*[311]	SOFTWARE[311]
79-19	15050-15054	that	*[311]	SOFTWARE[311]
79-20	15055-15057	is	*[311]	SOFTWARE[311]
79-21	15058-15062	used	*[311]	SOFTWARE[311]
79-22	15063-15065	by	*[311]	SOFTWARE[311]
79-23	15066-15067	`	*[311]	SOFTWARE[311]
79-24	15067-15087	HWY\_DYNAMIC\_DISPATCH	*[311]	SOFTWARE[311]
79-25	15087-15088	(	*[311]	SOFTWARE[311]
79-26	15088-15092	func	*[311]	SOFTWARE[311]
79-27	15092-15093	)	*[311]	SOFTWARE[311]
79-28	15093-15094	(	*[311]	SOFTWARE[311]
79-29	15094-15098	args	*[311]	SOFTWARE[311]
79-30	15098-15099	)	*[311]	SOFTWARE[311]
79-31	15099-15100	`	*[311]	SOFTWARE[311]
79-32	15101-15103	to	*[311]	SOFTWARE[311]
79-33	15108-15112	call	*[311]	SOFTWARE[311]
79-34	15113-15116	the	*[311]	SOFTWARE[311]
79-35	15117-15121	best	*[311]	SOFTWARE[311]
79-36	15122-15130	function	*[311]	SOFTWARE[311]
79-37	15131-15138	pointer	*[311]	SOFTWARE[311]
79-38	15139-15142	for	*[311]	SOFTWARE[311]
79-39	15143-15146	the	*[311]	SOFTWARE[311]
79-40	15147-15154	current	*[311]	SOFTWARE[311]
79-41	15155-15160	CPU's	*[311]	SOFTWARE[311]
79-42	15161-15170	supported	*[311]	SOFTWARE[311]
79-43	15171-15178	targets	_	_
79-44	15178-15179	.	_	_

#Text=A     module is automatically compiled for each target in `HWY\_TARGETS` (see     \[quick-reference\](g3doc/quick\_reference.md)) if `HWY\_TARGET\_INCLUDE` is     defined and `foreach\_target.h` is included.
80-1	15180-15181	A	_	_
80-2	15186-15192	module	_	_
80-3	15193-15195	is	_	_
80-4	15196-15209	automatically	_	_
80-5	15210-15218	compiled	_	_
80-6	15219-15222	for	_	_
80-7	15223-15227	each	_	_
80-8	15228-15234	target	_	_
80-9	15235-15237	in	_	_
80-10	15238-15239	`	_	_
80-11	15239-15250	HWY\_TARGETS	_	_
80-12	15250-15251	`	_	_
80-13	15252-15253	(	_	_
80-14	15253-15256	see	_	_
80-15	15261-15262	\[	_	_
80-16	15262-15277	quick-reference	_	_
80-17	15277-15278	\]	_	_
80-18	15278-15279	(	_	_
80-19	15279-15284	g3doc	_	_
80-20	15284-15285	/	_	_
80-21	15285-15303	quick\_reference.md	_	_
80-22	15303-15304	)	_	_
80-23	15304-15305	)	_	_
80-24	15306-15308	if	_	_
80-25	15309-15310	`	_	_
80-26	15310-15328	HWY\_TARGET\_INCLUDE	_	_
80-27	15328-15329	`	_	_
80-28	15330-15332	is	_	_
80-29	15337-15344	defined	_	_
80-30	15345-15348	and	_	_
80-31	15349-15350	`	_	_
80-32	15350-15366	foreach\_target.h	_	_
80-33	15366-15367	`	_	_
80-34	15368-15370	is	_	_
80-35	15371-15379	included	_	_
80-36	15379-15380	.	_	_

#Text=Note that the first invocation     of `HWY\_DYNAMIC\_DISPATCH`, or each call to the pointer returned by the first     invocation of `HWY\_DYNAMIC\_POINTER`, involves some CPU detection overhead.
81-1	15381-15385	Note	_	_
81-2	15386-15390	that	_	_
81-3	15391-15394	the	_	_
81-4	15395-15400	first	_	_
81-5	15401-15411	invocation	_	_
81-6	15416-15418	of	_	_
81-7	15419-15420	`	_	_
81-8	15420-15440	HWY\_DYNAMIC\_DISPATCH	_	_
81-9	15440-15441	`	_	_
81-10	15441-15442	,	_	_
81-11	15443-15445	or	_	_
81-12	15446-15450	each	_	_
81-13	15451-15455	call	_	_
81-14	15456-15458	to	_	_
81-15	15459-15462	the	_	_
81-16	15463-15470	pointer	_	_
81-17	15471-15479	returned	_	_
81-18	15480-15482	by	_	_
81-19	15483-15486	the	_	_
81-20	15487-15492	first	_	_
81-21	15497-15507	invocation	_	_
81-22	15508-15510	of	_	_
81-23	15511-15512	`	_	_
81-24	15512-15531	HWY\_DYNAMIC\_POINTER	_	_
81-25	15531-15532	`	_	_
81-26	15532-15533	,	_	_
81-27	15534-15542	involves	_	_
81-28	15543-15547	some	_	_
81-29	15548-15551	CPU	_	_
81-30	15552-15561	detection	_	_
81-31	15562-15570	overhead	_	_
81-32	15570-15571	.	_	_

#Text=You can prevent this by calling the following before any invocation of     `HWY\_DYNAMIC\_\*`: `hwy::GetChosenTarget().Update(hwy::SupportedTargets())\;`.
82-1	15576-15579	You	_	_
82-2	15580-15583	can	_	_
82-3	15584-15591	prevent	_	_
82-4	15592-15596	this	_	_
82-5	15597-15599	by	_	_
82-6	15600-15607	calling	_	_
82-7	15608-15611	the	_	_
82-8	15612-15621	following	_	_
82-9	15622-15628	before	_	_
82-10	15629-15632	any	_	_
82-11	15633-15643	invocation	_	_
82-12	15644-15646	of	_	_
82-13	15651-15652	`	_	_
82-14	15652-15663	HWY\_DYNAMIC	_	_
82-15	15663-15664	\_	_	_
82-16	15664-15665	\*	_	_
82-17	15665-15666	`	_	_
82-18	15666-15667	:	_	_
82-19	15668-15669	`	_	_
82-20	15669-15672	hwy	*[265]	LICENSE[265]
82-21	15672-15673	:	*[265]	LICENSE[265]
82-22	15673-15674	:	*[265]	LICENSE[265]
82-23	15674-15689	GetChosenTarget	*[265]	LICENSE[265]
82-24	15689-15690	(	*[265]	LICENSE[265]
82-25	15690-15691	)	*[265]	LICENSE[265]
82-26	15691-15692	.	*[265]	LICENSE[265]
82-27	15692-15698	Update	*[265]	LICENSE[265]
82-28	15698-15699	(	*[265]	LICENSE[265]
82-29	15699-15702	hwy	*[265]	LICENSE[265]
82-30	15702-15703	:	*[265]	LICENSE[265]
82-31	15703-15704	:	*[265]	LICENSE[265]
82-32	15704-15720	SupportedTargets	_	_
82-33	15720-15721	(	_	_
82-34	15721-15722	)	_	_
82-35	15722-15723	)	_	_
82-36	15723-15724	\;	_	_
82-37	15724-15725	`	_	_
82-38	15725-15726	.	_	_

#Text=See also a separate \[introduction to dynamic dispatch\](https://github.com/kfjahnke/zimt/blob/multi\_isa/examples/multi\_isa\_example/multi\_simd\_isa.md) by @kfjahnke.
83-1	15728-15731	See	_	_
83-2	15732-15736	also	_	_
83-3	15737-15738	a	_	_
83-4	15739-15747	separate	_	_
83-5	15748-15749	\[	_	_
83-6	15749-15761	introduction	_	_
83-7	15762-15764	to	_	_
83-8	15765-15772	dynamic	_	_
83-9	15773-15781	dispatch	_	_
83-10	15781-15782	\]	_	_
83-11	15782-15783	(	_	_
83-12	15783-15788	https	_	_
83-13	15788-15789	:	_	_
83-14	15789-15790	/	_	_
83-15	15790-15791	/	_	_
83-16	15791-15801	github.com	_	_
83-17	15801-15802	/	_	_
83-18	15802-15810	kfjahnke	_	_
83-19	15810-15811	/	_	_
83-20	15811-15815	zimt	_	_
83-21	15815-15816	/	_	_
83-22	15816-15820	blob	_	_
83-23	15820-15821	/	_	_
83-24	15821-15830	multi\_isa	_	_
83-25	15830-15831	/	_	_
83-26	15831-15839	examples	_	_
83-27	15839-15840	/	_	_
83-28	15840-15857	multi\_isa\_example	_	_
83-29	15857-15858	/	_	_
83-30	15858-15875	multi\_simd\_isa.md	_	_
83-31	15875-15876	)	_	_
83-32	15877-15879	by	_	_
83-33	15880-15881	@	_	_
83-34	15881-15889	kfjahnke	_	_
83-35	15889-15890	.	_	_

#Text=When using dynamic dispatch, `foreach\_target.h` is included from translation units (.cc files), not headers.
84-1	15892-15896	When	_	_
84-2	15897-15902	using	_	_
84-3	15903-15910	dynamic	_	_
84-4	15911-15919	dispatch	_	_
84-5	15919-15920	,	_	_
84-6	15921-15922	`	_	_
84-7	15922-15938	foreach\_target.h	_	_
84-8	15938-15939	`	*[281]	EVALMETRIC[281]
84-9	15940-15942	is	*[281]	EVALMETRIC[281]
84-10	15943-15951	included	*[281]	EVALMETRIC[281]
84-11	15952-15956	from	*[281]	EVALMETRIC[281]
84-12	15957-15968	translation	*[281]	EVALMETRIC[281]
84-13	15969-15974	units	*[281]	EVALMETRIC[281]
84-14	15975-15976	(	*[281]	EVALMETRIC[281]
84-15	15976-15977	.	*[281]	EVALMETRIC[281]
84-16	15977-15979	cc	*[281]	EVALMETRIC[281]
84-17	15980-15985	files	*[281]	EVALMETRIC[281]
84-18	15985-15986	)	*[281]	EVALMETRIC[281]
84-19	15986-15987	,	*[281]	EVALMETRIC[281]
84-20	15988-15991	not	_	_
84-21	15992-15999	headers	_	_
84-22	15999-16000	.	_	_

#Text=Headers containing vector code shared between several translation units require a special include guard, for example the following taken from `examples/skeleton-inl.h`:  ``` #if defined(HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H\_) == defined(HWY\_TARGET\_TOGGLE) #ifdef HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H\_ #undef HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H\_ #else #define HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H\_ #endif  #include "hwy/highway.h" // Your vector code #endif ```  By convention, we name such headers `-inl.h` because their contents (often function templates) are usually inlined.  ## Compiler flags  Applications should be compiled with optimizations enabled.
85-1	16001-16008	Headers	_	_
85-2	16009-16019	containing	_	_
85-3	16020-16026	vector	_	_
85-4	16027-16031	code	_	_
85-5	16032-16038	shared	_	_
85-6	16039-16046	between	_	_
85-7	16047-16054	several	_	_
85-8	16055-16066	translation	_	_
85-9	16067-16072	units	_	_
85-10	16073-16080	require	_	_
85-11	16081-16082	a	_	_
85-12	16083-16090	special	_	_
85-13	16091-16098	include	_	_
85-14	16099-16104	guard	_	_
85-15	16104-16105	,	_	_
85-16	16106-16109	for	_	_
85-17	16110-16117	example	_	_
85-18	16118-16121	the	_	_
85-19	16122-16131	following	_	_
85-20	16132-16137	taken	_	_
85-21	16138-16142	from	_	_
85-22	16143-16144	`	_	_
85-23	16144-16152	examples	_	_
85-24	16152-16153	/	_	_
85-25	16153-16167	skeleton-inl.h	_	_
85-26	16167-16168	`	_	_
85-27	16168-16169	:	_	_
85-28	16171-16172	`	_	_
85-29	16172-16173	`	_	_
85-30	16173-16174	`	_	_
85-31	16175-16176	#	_	_
85-32	16176-16178	if	_	_
85-33	16179-16186	defined	_	_
85-34	16186-16187	(	_	_
85-35	16187-16222	HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H	_	_
85-36	16222-16223	\_	_	_
85-37	16223-16224	)	_	_
85-38	16225-16226	=	_	_
85-39	16226-16227	=	_	_
85-40	16228-16235	defined	_	_
85-41	16235-16236	(	_	_
85-42	16236-16253	HWY\_TARGET\_TOGGLE	_	_
85-43	16253-16254	)	_	_
85-44	16255-16256	#	_	_
85-45	16256-16261	ifdef	_	_
85-46	16262-16297	HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H	_	_
85-47	16297-16298	\_	_	_
85-48	16299-16300	#	_	_
85-49	16300-16305	undef	_	_
85-50	16306-16341	HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H	_	_
85-51	16341-16342	\_	_	_
85-52	16343-16344	#	_	_
85-53	16344-16348	else	_	_
85-54	16349-16350	#	_	_
85-55	16350-16356	define	_	_
85-56	16357-16392	HIGHWAY\_HWY\_EXAMPLES\_SKELETON\_INL\_H	_	_
85-57	16392-16393	\_	_	_
85-58	16394-16395	#	_	_
85-59	16395-16400	endif	_	_
85-60	16402-16403	#	_	_
85-61	16403-16410	include	_	_
85-62	16411-16412	"	_	_
85-63	16412-16415	hwy	_	_
85-64	16415-16416	/	_	_
85-65	16416-16425	highway.h	_	_
85-66	16425-16426	"	_	_
85-67	16427-16428	/	_	_
85-68	16428-16429	/	_	_
85-69	16430-16434	Your	_	_
85-70	16435-16441	vector	_	_
85-71	16442-16446	code	_	_
85-72	16447-16448	#	_	_
85-73	16448-16453	endif	_	_
85-74	16454-16455	`	_	_
85-75	16455-16456	`	_	_
85-76	16456-16457	`	_	_
85-77	16459-16461	By	_	_
85-78	16462-16472	convention	_	_
85-79	16472-16473	,	_	_
85-80	16474-16476	we	_	_
85-81	16477-16481	name	*[292]	PROGLANG[292]
85-82	16482-16486	such	_	_
85-83	16487-16494	headers	_	_
85-84	16495-16496	`	_	_
85-85	16496-16497	-	_	_
85-86	16497-16502	inl.h	_	_
85-87	16502-16503	`	_	_
85-88	16504-16511	because	_	_
85-89	16512-16517	their	_	_
85-90	16518-16526	contents	_	_
85-91	16527-16528	(	_	_
85-92	16528-16533	often	_	_
85-93	16534-16542	function	_	_
85-94	16543-16552	templates	_	_
85-95	16552-16553	)	_	_
85-96	16554-16557	are	_	_
85-97	16558-16565	usually	_	_
85-98	16566-16573	inlined	_	_
85-99	16573-16574	.	_	_
85-100	16576-16577	#	_	_
85-101	16577-16578	#	_	_
85-102	16579-16587	Compiler	_	_
85-103	16588-16593	flags	_	_
85-104	16595-16607	Applications	_	_
85-105	16608-16614	should	_	_
85-106	16615-16617	be	_	_
85-107	16618-16626	compiled	_	_
85-108	16627-16631	with	_	_
85-109	16632-16645	optimizations	_	_
85-110	16646-16653	enabled	_	_
85-111	16653-16654	.	_	_

#Text=Without inlining SIMD code may slow down by factors of 10 to 100.
86-1	16655-16662	Without	_	_
86-2	16663-16671	inlining	_	_
86-3	16672-16676	SIMD	_	_
86-4	16677-16681	code	_	_
86-5	16682-16685	may	_	_
86-6	16686-16690	slow	_	_
86-7	16691-16695	down	_	_
86-8	16696-16698	by	_	_
86-9	16699-16706	factors	_	_
86-10	16707-16709	of	_	_
86-11	16710-16712	10	_	_
86-12	16713-16715	to	_	_
86-13	16716-16719	100	_	_
86-14	16719-16720	.	_	_

#Text=For clang and GCC, `-O2` is generally sufficient.
87-1	16721-16724	For	_	_
87-2	16725-16730	clang	_	_
87-3	16731-16734	and	_	_
87-4	16735-16738	GCC	_	_
87-5	16738-16739	,	_	_
87-6	16740-16741	`	_	_
87-7	16741-16742	-	*[293]	PROGLANG[293]
87-8	16742-16744	O2	*[293]	PROGLANG[293]
87-9	16744-16745	`	*[293]	PROGLANG[293]
87-10	16746-16748	is	*[293]	PROGLANG[293]
87-11	16749-16758	generally	_	_
87-12	16759-16769	sufficient	_	_
87-13	16769-16770	.	_	_

#Text=For MSVC, we recommend compiling with `/Gv` to allow non-inlined functions to pass vector arguments in registers.
88-1	16772-16775	For	_	_
88-2	16776-16780	MSVC	_	_
88-3	16780-16781	,	_	_
88-4	16782-16784	we	_	_
88-5	16785-16794	recommend	_	_
88-6	16795-16804	compiling	_	_
88-7	16805-16809	with	_	_
88-8	16810-16811	`	_	_
88-9	16811-16812	/	_	_
88-10	16812-16814	Gv	_	_
88-11	16814-16815	`	_	_
88-12	16816-16818	to	_	_
88-13	16819-16824	allow	_	_
88-14	16825-16836	non-inlined	_	_
88-15	16837-16846	functions	_	_
88-16	16847-16849	to	_	_
88-17	16850-16854	pass	_	_
88-18	16855-16861	vector	_	_
88-19	16862-16871	arguments	_	_
88-20	16872-16874	in	_	_
88-21	16875-16884	registers	_	_
88-22	16884-16885	.	_	_

#Text=If intending to use the AVX2 target together with half-width vectors (e.g. for `PromoteTo`), it is also important to compile with `/arch:AVX2`.
89-1	16886-16888	If	_	_
89-2	16889-16898	intending	_	_
89-3	16899-16901	to	_	_
89-4	16902-16905	use	_	_
89-5	16906-16909	the	_	_
89-6	16910-16914	AVX2	_	_
89-7	16915-16921	target	_	_
89-8	16922-16930	together	_	_
89-9	16931-16935	with	_	_
89-10	16936-16946	half-width	_	_
89-11	16947-16954	vectors	_	_
89-12	16955-16956	(	_	_
89-13	16956-16959	e.g	_	_
89-14	16959-16960	.	_	_
89-15	16961-16964	for	_	_
89-16	16965-16966	`	_	_
89-17	16966-16975	PromoteTo	_	_
89-18	16975-16976	`	_	_
89-19	16976-16977	)	_	_
89-20	16977-16978	,	_	_
89-21	16979-16981	it	_	_
89-22	16982-16984	is	_	_
89-23	16985-16989	also	_	_
89-24	16990-16999	important	_	_
89-25	17000-17002	to	_	_
89-26	17003-17010	compile	_	_
89-27	17011-17015	with	_	_
89-28	17016-17017	`	_	_
89-29	17017-17018	/	_	_
89-30	17018-17022	arch	_	_
89-31	17022-17023	:	_	_
89-32	17023-17027	AVX2	_	_
89-33	17027-17028	`	_	_
89-34	17028-17029	.	_	_

#Text=This seems to be the only way to reliably generate VEX-encoded SSE instructions on MSVC.
90-1	17030-17034	This	_	_
90-2	17035-17040	seems	_	_
90-3	17041-17043	to	_	_
90-4	17044-17046	be	_	_
90-5	17047-17050	the	*[252]	PUBLICATION[252]
90-6	17051-17055	only	*[252]	PUBLICATION[252]
90-7	17056-17059	way	*[252]	PUBLICATION[252]
90-8	17060-17062	to	*[252]	PUBLICATION[252]
90-9	17063-17071	reliably	*[252]	PUBLICATION[252]
90-10	17072-17080	generate	*[252]	PUBLICATION[252]
90-11	17081-17092	VEX-encoded	*[252]	PUBLICATION[252]
90-12	17093-17096	SSE	*[252]	PUBLICATION[252]
90-13	17097-17109	instructions	*[252]	PUBLICATION[252]
90-14	17110-17112	on	*[252]	PUBLICATION[252]
90-15	17113-17117	MSVC	_	_
90-16	17117-17118	.	_	_

#Text=Sometimes MSVC generates VEX-encoded SSE instructions, if they are mixed with AVX, but not always, see \[DevCom-10618264\](https://developercommunity.visualstudio.com/t/10618264).
91-1	17119-17128	Sometimes	_	_
91-2	17129-17133	MSVC	_	_
91-3	17134-17143	generates	_	_
91-4	17144-17155	VEX-encoded	_	_
91-5	17156-17159	SSE	_	_
91-6	17160-17172	instructions	_	_
91-7	17172-17173	,	_	_
91-8	17174-17176	if	_	_
91-9	17177-17181	they	_	_
91-10	17182-17185	are	_	_
91-11	17186-17191	mixed	_	_
91-12	17192-17196	with	_	_
91-13	17197-17200	AVX	_	_
91-14	17200-17201	,	_	_
91-15	17202-17205	but	_	_
91-16	17206-17209	not	_	_
91-17	17210-17216	always	_	_
91-18	17216-17217	,	_	_
91-19	17218-17221	see	_	_
91-20	17222-17223	\[	_	_
91-21	17223-17229	DevCom	_	_
91-22	17229-17230	-	_	_
91-23	17230-17238	10618264	_	_
91-24	17238-17239	\]	_	_
91-25	17239-17240	(	_	_
91-26	17240-17245	https	_	_
91-27	17245-17246	:	_	_
91-28	17246-17247	/	_	_
91-29	17247-17248	/	_	_
91-30	17248-17283	developercommunity.visualstudio.com	_	_
91-31	17283-17284	/	*[282]	EVALMETRIC[282]
91-32	17284-17285	t	*[282]	EVALMETRIC[282]
91-33	17285-17286	/	*[282]	EVALMETRIC[282]
91-34	17286-17294	10618264	_	_
91-35	17294-17295	)	_	_
91-36	17295-17296	.	_	_

#Text=Otherwise, mixing VEX-encoded AVX2 instructions and non-VEX SSE may cause severe performance degradation.
92-1	17297-17306	Otherwise	_	_
92-2	17306-17307	,	*[275]	CONFERENCE[275]
92-3	17308-17314	mixing	*[275]	CONFERENCE[275]
92-4	17315-17326	VEX-encoded	*[275]	CONFERENCE[275]
92-5	17327-17331	AVX2	*[275]	CONFERENCE[275]
92-6	17332-17344	instructions	_	_
92-7	17345-17348	and	_	_
92-8	17349-17356	non-VEX	_	_
92-9	17357-17360	SSE	_	_
92-10	17361-17364	may	_	_
92-11	17365-17370	cause	_	_
92-12	17371-17377	severe	_	_
92-13	17378-17389	performance	_	_
92-14	17390-17401	degradation	_	_
92-15	17401-17402	.	_	_

#Text=Unfortunately, with `/arch:AVX2` option, the resulting binary will then require AVX2.
93-1	17403-17416	Unfortunately	_	_
93-2	17416-17417	,	_	_
93-3	17418-17422	with	_	_
93-4	17423-17424	`	_	_
93-5	17424-17425	/	_	_
93-6	17425-17429	arch	_	_
93-7	17429-17430	:	_	_
93-8	17430-17434	AVX2	_	_
93-9	17434-17435	`	_	_
93-10	17436-17442	option	_	_
93-11	17442-17443	,	_	_
93-12	17444-17447	the	_	_
93-13	17448-17457	resulting	_	_
93-14	17458-17464	binary	_	_
93-15	17465-17469	will	_	_
93-16	17470-17474	then	_	_
93-17	17475-17482	require	_	_
93-18	17483-17487	AVX2	_	_
93-19	17487-17488	.	_	_

#Text=Note that no such flag is needed for clang and GCC because they support target-specific attributes, which we use to ensure proper VEX code generation for AVX2 targets.  ## Strip-mining loops  When vectorizing a loop, an important question is whether and how to deal with a number of iterations ('trip count', denoted `count`) that does not evenly divide the vector size `N = Lanes(d)`.
94-1	17489-17493	Note	_	_
94-2	17494-17498	that	_	_
94-3	17499-17501	no	_	_
94-4	17502-17506	such	_	_
94-5	17507-17511	flag	_	_
94-6	17512-17514	is	_	_
94-7	17515-17521	needed	_	_
94-8	17522-17525	for	_	_
94-9	17526-17531	clang	_	_
94-10	17532-17535	and	_	_
94-11	17536-17539	GCC	_	_
94-12	17540-17547	because	_	_
94-13	17548-17552	they	_	_
94-14	17553-17560	support	_	_
94-15	17561-17576	target-specific	_	_
94-16	17577-17587	attributes	_	_
94-17	17587-17588	,	_	_
94-18	17589-17594	which	_	_
94-19	17595-17597	we	_	_
94-20	17598-17601	use	_	_
94-21	17602-17604	to	_	_
94-22	17605-17611	ensure	_	_
94-23	17612-17618	proper	_	_
94-24	17619-17622	VEX	_	_
94-25	17623-17627	code	_	_
94-26	17628-17638	generation	_	_
94-27	17639-17642	for	_	_
94-28	17643-17647	AVX2	_	_
94-29	17648-17655	targets	_	_
94-30	17655-17656	.	_	_
94-31	17658-17659	#	_	_
94-32	17659-17660	#	_	_
94-33	17661-17673	Strip-mining	_	_
94-34	17674-17679	loops	_	_
94-35	17681-17685	When	_	_
94-36	17686-17697	vectorizing	_	_
94-37	17698-17699	a	_	_
94-38	17700-17704	loop	_	_
94-39	17704-17705	,	_	_
94-40	17706-17708	an	_	_
94-41	17709-17718	important	_	_
94-42	17719-17727	question	_	_
94-43	17728-17730	is	_	_
94-44	17731-17738	whether	_	_
94-45	17739-17742	and	_	_
94-46	17743-17746	how	_	_
94-47	17747-17749	to	_	_
94-48	17750-17754	deal	_	_
94-49	17755-17759	with	_	_
94-50	17760-17761	a	_	_
94-51	17762-17768	number	*[253]	DATASET[253]
94-52	17769-17771	of	*[253]	DATASET[253]
94-53	17772-17782	iterations	*[253]	DATASET[253]
94-54	17783-17784	(	*[253]	DATASET[253]
94-55	17784-17785	'	*[253]	DATASET[253]
94-56	17785-17789	trip	*[253]	DATASET[253]
94-57	17790-17795	count	_	_
94-58	17795-17796	'	_	_
94-59	17796-17797	,	_	_
94-60	17798-17805	denoted	_	_
94-61	17806-17807	`	_	_
94-62	17807-17812	count	_	_
94-63	17812-17813	`	_	_
94-64	17813-17814	)	_	_
94-65	17815-17819	that	_	_
94-66	17820-17824	does	_	_
94-67	17825-17828	not	_	_
94-68	17829-17835	evenly	_	_
94-69	17836-17842	divide	_	_
94-70	17843-17846	the	_	_
94-71	17847-17853	vector	_	_
94-72	17854-17858	size	_	_
94-73	17859-17860	`	_	_
94-74	17860-17861	N	_	_
94-75	17862-17863	=	_	_
94-76	17864-17869	Lanes	_	_
94-77	17869-17870	(	_	_
94-78	17870-17871	d	_	_
94-79	17871-17872	)	_	_
94-80	17872-17873	`	_	_
94-81	17873-17874	.	_	_

#Text=For example, it may be necessary to avoid writing past the end of an array.
95-1	17875-17878	For	_	_
95-2	17879-17886	example	_	_
95-3	17886-17887	,	_	_
95-4	17888-17890	it	_	_
95-5	17891-17894	may	_	_
95-6	17895-17897	be	_	_
95-7	17898-17907	necessary	_	_
95-8	17908-17910	to	_	_
95-9	17911-17916	avoid	_	_
95-10	17917-17924	writing	_	_
95-11	17925-17929	past	*[283]	EVALMETRIC[283]
95-12	17930-17933	the	*[283]	EVALMETRIC[283]
95-13	17934-17937	end	*[283]	EVALMETRIC[283]
95-14	17938-17940	of	*[283]	EVALMETRIC[283]
95-15	17941-17943	an	*[283]	EVALMETRIC[283]
95-16	17944-17949	array	*[283]	EVALMETRIC[283]
95-17	17949-17950	.	_	_

#Text=In this section, let `T` denote the element type and `d = ScalableTag<T>`.
96-1	17952-17954	In	_	_
96-2	17955-17959	this	_	_
96-3	17960-17967	section	_	_
96-4	17967-17968	,	_	_
96-5	17969-17972	let	_	_
96-6	17973-17974	`	_	_
96-7	17974-17975	T	_	_
96-8	17975-17976	`	_	_
96-9	17977-17983	denote	_	_
96-10	17984-17987	the	_	_
96-11	17988-17995	element	_	_
96-12	17996-18000	type	_	_
96-13	18001-18004	and	_	_
96-14	18005-18006	`	_	_
96-15	18006-18007	d	_	_
96-16	18008-18009	=	_	_
96-17	18010-18021	ScalableTag	_	_
96-18	18021-18022	<	_	_
96-19	18022-18023	T	_	_
96-20	18023-18024	>	_	_
96-21	18024-18025	`	_	_
96-22	18025-18026	.	_	_

#Text=Assume the loop body is given as a function `template<bool partial, class D> void LoopBody(D d, size\_t index, size\_t max\_n)`.
97-1	18027-18033	Assume	_	_
97-2	18034-18037	the	_	_
97-3	18038-18042	loop	_	_
97-4	18043-18047	body	_	_
97-5	18048-18050	is	_	_
97-6	18051-18056	given	_	_
97-7	18057-18059	as	_	_
97-8	18060-18061	a	_	_
97-9	18062-18070	function	_	_
97-10	18071-18072	`	_	_
97-11	18072-18080	template	_	_
97-12	18080-18081	<	_	_
97-13	18081-18085	bool	_	_
97-14	18086-18093	partial	_	_
97-15	18093-18094	,	_	_
97-16	18095-18100	class	_	_
97-17	18101-18102	D	_	_
97-18	18102-18103	>	_	_
97-19	18104-18108	void	_	_
97-20	18109-18117	LoopBody	_	_
97-21	18117-18118	(	_	_
97-22	18118-18119	D	_	_
97-23	18120-18121	d	_	_
97-24	18121-18122	,	_	_
97-25	18123-18129	size\_t	_	_
97-26	18130-18135	index	*[276]	CONFERENCE[276]
97-27	18135-18136	,	*[276]	CONFERENCE[276]
97-28	18137-18143	size\_t	*[276]	CONFERENCE[276]
97-29	18144-18149	max\_n	_	_
97-30	18149-18150	)	_	_
97-31	18150-18151	`	_	_
97-32	18151-18152	.	_	_

#Text="Strip-mining" is a technique for vectorizing a loop by transforming it into an outer loop and inner loop, such that the number of iterations in the inner loop matches the vector width.
98-1	18154-18155	"	_	_
98-2	18155-18167	Strip-mining	_	_
98-3	18167-18168	"	_	_
98-4	18169-18171	is	_	_
98-5	18172-18173	a	_	_
98-6	18174-18183	technique	_	_
98-7	18184-18187	for	_	_
98-8	18188-18199	vectorizing	_	_
98-9	18200-18201	a	_	_
98-10	18202-18206	loop	_	_
98-11	18207-18209	by	_	_
98-12	18210-18222	transforming	_	_
98-13	18223-18225	it	_	_
98-14	18226-18230	into	_	_
98-15	18231-18233	an	_	_
98-16	18234-18239	outer	_	_
98-17	18240-18244	loop	_	_
98-18	18245-18248	and	_	_
98-19	18249-18254	inner	_	_
98-20	18255-18259	loop	_	_
98-21	18259-18260	,	*[294]	PROGLANG[294]
98-22	18261-18265	such	_	_
98-23	18266-18270	that	_	_
98-24	18271-18274	the	_	_
98-25	18275-18281	number	_	_
98-26	18282-18284	of	_	_
98-27	18285-18295	iterations	_	_
98-28	18296-18298	in	_	_
98-29	18299-18302	the	_	_
98-30	18303-18308	inner	_	_
98-31	18309-18313	loop	_	_
98-32	18314-18321	matches	_	_
98-33	18322-18325	the	_	_
98-34	18326-18332	vector	_	_
98-35	18333-18338	width	_	_
98-36	18338-18339	.	_	_

#Text=Then, the inner loop is replaced with vector operations.
99-1	18340-18344	Then	_	_
99-2	18344-18345	,	_	_
99-3	18346-18349	the	_	_
99-4	18350-18355	inner	_	_
99-5	18356-18360	loop	_	_
99-6	18361-18363	is	_	_
99-7	18364-18372	replaced	_	_
99-8	18373-18377	with	_	_
99-9	18378-18384	vector	_	_
99-10	18385-18395	operations	*[255]	DATASET[255]
99-11	18395-18396	.	_	_

#Text=Highway offers several strategies for loop vectorization:  \*   Ensure all inputs/outputs are padded.
100-1	18398-18405	Highway	_	_
100-2	18406-18412	offers	_	_
100-3	18413-18420	several	_	_
100-4	18421-18431	strategies	_	_
100-5	18432-18435	for	*[284]	EVALMETRIC[284]
100-6	18436-18440	loop	*[284]	EVALMETRIC[284]
100-7	18441-18454	vectorization	*[284]	EVALMETRIC[284]
100-8	18454-18455	:	*[284]	EVALMETRIC[284]
100-9	18457-18458	\*	_	_
100-10	18461-18467	Ensure	_	_
100-11	18468-18471	all	_	_
100-12	18472-18478	inputs	_	_
100-13	18478-18479	/	_	_
100-14	18479-18486	outputs	_	_
100-15	18487-18490	are	_	_
100-16	18491-18497	padded	_	_
100-17	18497-18498	.	_	_

#Text=Then the (outer) loop is simply      ```     for (size\_t i = 0\; i < count\; i += N) LoopBody<false>(d, i, 0)\;     ```     Here, the template parameter and second function argument are not needed.
101-1	18499-18503	Then	_	_
101-2	18504-18507	the	_	_
101-3	18508-18509	(	_	_
101-4	18509-18514	outer	_	_
101-5	18514-18515	)	_	_
101-6	18516-18520	loop	_	_
101-7	18521-18523	is	_	_
101-8	18524-18530	simply	_	_
101-9	18536-18537	`	_	_
101-10	18537-18538	`	_	_
101-11	18538-18539	`	_	_
101-12	18544-18547	for	_	_
101-13	18548-18549	(	_	_
101-14	18549-18555	size\_t	_	_
101-15	18556-18557	i	_	_
101-16	18558-18559	=	_	_
101-17	18560-18561	0	_	_
101-18	18561-18562	\;	_	_
101-19	18563-18564	i	_	_
101-20	18565-18566	<	_	_
101-21	18567-18572	count	_	_
101-22	18572-18573	\;	*[313]	SOFTWARE[313]
101-23	18574-18575	i	*[313]	SOFTWARE[313]
101-24	18576-18577	+	*[313]	SOFTWARE[313]
101-25	18577-18578	=	*[313]	SOFTWARE[313]
101-26	18579-18580	N	*[313]	SOFTWARE[313]
101-27	18580-18581	)	*[313]	SOFTWARE[313]
101-28	18582-18590	LoopBody	*[313]	SOFTWARE[313]
101-29	18590-18591	<	*[313]	SOFTWARE[313]
101-30	18591-18596	false	*[313]	SOFTWARE[313]
101-31	18596-18597	>	*[313]	SOFTWARE[313]
101-32	18597-18598	(	*[313]	SOFTWARE[313]
101-33	18598-18599	d	*[313]	SOFTWARE[313]
101-34	18599-18600	,	*[313]	SOFTWARE[313]
101-35	18601-18602	i	*[313]	SOFTWARE[313]
101-36	18602-18603	,	*[313]	SOFTWARE[313]
101-37	18604-18605	0	*[313]	SOFTWARE[313]
101-38	18605-18606	)	*[313]	SOFTWARE[313]
101-39	18606-18607	\;	*[313]	SOFTWARE[313]
101-40	18612-18613	`	*[313]	SOFTWARE[313]
101-41	18613-18614	`	*[313]	SOFTWARE[313]
101-42	18614-18615	`	*[313]	SOFTWARE[313]
101-43	18620-18624	Here	*[313]	SOFTWARE[313]
101-44	18624-18625	,	*[313]	SOFTWARE[313]
101-45	18626-18629	the	*[313]	SOFTWARE[313]
101-46	18630-18638	template	*[313]	SOFTWARE[313]
101-47	18639-18648	parameter	*[313]	SOFTWARE[313]
101-48	18649-18652	and	*[313]	SOFTWARE[313]
101-49	18653-18659	second	*[313]	SOFTWARE[313]
101-50	18660-18668	function	*[313]	SOFTWARE[313]
101-51	18669-18677	argument	*[313]	SOFTWARE[313]
101-52	18678-18681	are	*[313]	SOFTWARE[313]
101-53	18682-18685	not	*[313]	SOFTWARE[313]
101-54	18686-18692	needed	*[313]	SOFTWARE[313]
101-55	18692-18693	.	_	_

#Text=This is the preferred option, unless `N` is in the thousands and vector     operations are pipelined with long latencies.
102-1	18699-18703	This	_	_
102-2	18704-18706	is	_	_
102-3	18707-18710	the	_	_
102-4	18711-18720	preferred	_	_
102-5	18721-18727	option	_	_
102-6	18727-18728	,	_	_
102-7	18729-18735	unless	_	_
102-8	18736-18737	`	_	_
102-9	18737-18738	N	_	_
102-10	18738-18739	`	_	_
102-11	18740-18742	is	_	_
102-12	18743-18745	in	_	_
102-13	18746-18749	the	_	_
102-14	18750-18759	thousands	_	_
102-15	18760-18763	and	_	_
102-16	18764-18770	vector	_	_
102-17	18775-18785	operations	_	_
102-18	18786-18789	are	_	_
102-19	18790-18799	pipelined	_	_
102-20	18800-18804	with	*[256]	DATASET[256]
102-21	18805-18809	long	*[256]	DATASET[256]
102-22	18810-18819	latencies	*[256]	DATASET[256]
102-23	18819-18820	.	_	_

#Text=This was the case for     supercomputers in the 90s, but nowadays ALUs are cheap and we see most     implementations split vectors into 1, 2 or 4 parts, so there is little cost     to processing entire vectors even if we do not need all their lanes.
103-1	18821-18825	This	_	_
103-2	18826-18829	was	_	_
103-3	18830-18833	the	_	_
103-4	18834-18838	case	_	_
103-5	18839-18842	for	_	_
103-6	18847-18861	supercomputers	_	_
103-7	18862-18864	in	_	_
103-8	18865-18868	the	_	_
103-9	18869-18872	90s	_	_
103-10	18872-18873	,	_	_
103-11	18874-18877	but	_	_
103-12	18878-18886	nowadays	_	_
103-13	18887-18891	ALUs	_	_
103-14	18892-18895	are	_	_
103-15	18896-18901	cheap	_	_
103-16	18902-18905	and	_	_
103-17	18906-18908	we	_	_
103-18	18909-18912	see	_	_
103-19	18913-18917	most	_	_
103-20	18922-18937	implementations	_	_
103-21	18938-18943	split	_	_
103-22	18944-18951	vectors	_	_
103-23	18952-18956	into	*[274]	WORKSHOP[274]
103-24	18957-18958	1	*[274]	WORKSHOP[274]
103-25	18958-18959	,	*[274]	WORKSHOP[274]
103-26	18960-18961	2	*[274]	WORKSHOP[274]
103-27	18962-18964	or	*[274]	WORKSHOP[274]
103-28	18965-18966	4	*[274]	WORKSHOP[274]
103-29	18967-18972	parts	*[274]	WORKSHOP[274]
103-30	18972-18973	,	*[274]	WORKSHOP[274]
103-31	18974-18976	so	*[274]	WORKSHOP[274]
103-32	18977-18982	there	*[274]	WORKSHOP[274]
103-33	18983-18985	is	*[274]	WORKSHOP[274]
103-34	18986-18992	little	_	_
103-35	18993-18997	cost	_	_
103-36	19002-19004	to	_	_
103-37	19005-19015	processing	_	_
103-38	19016-19022	entire	_	_
103-39	19023-19030	vectors	_	_
103-40	19031-19035	even	_	_
103-41	19036-19038	if	_	_
103-42	19039-19041	we	_	_
103-43	19042-19044	do	_	_
103-44	19045-19048	not	_	_
103-45	19049-19053	need	_	_
103-46	19054-19057	all	_	_
103-47	19058-19063	their	_	_
103-48	19064-19069	lanes	_	_
103-49	19069-19070	.	_	_

#Text=Indeed     this avoids the (potentially large) cost of predication or partial     loads/stores on older targets, and does not duplicate code
104-1	19071-19077	Indeed	_	_
104-2	19082-19086	this	_	_
104-3	19087-19093	avoids	_	_
104-4	19094-19097	the	_	_
104-5	19098-19099	(	_	_
104-6	19099-19110	potentially	_	_
104-7	19111-19116	large	_	_
104-8	19116-19117	)	_	_
104-9	19118-19122	cost	_	_
104-10	19123-19125	of	_	_
104-11	19126-19137	predication	_	_
104-12	19138-19140	or	*[285]	EVALMETRIC[285]
104-13	19141-19148	partial	_	_
104-14	19153-19158	loads	_	_
104-15	19158-19159	/	_	_
104-16	19159-19165	stores	_	_
104-17	19166-19168	on	_	_
104-18	19169-19174	older	_	_
104-19	19175-19182	targets	_	_
104-20	19182-19183	,	_	_
104-21	19184-19187	and	_	_
104-22	19188-19192	does	_	_
104-23	19193-19196	not	_	_
104-24	19197-19206	duplicate	_	_
104-25	19207-19211	code	_	_

#Text=.
105-1	19211-19212	.	_	_

#Text=\*   Process whole vectors and include previously processed elements     in the last vector:     ```     for (size\_t i = 0\; i < count\; i += N) LoopBody<false>(d, HWY\_MIN(i, count - N), 0)\;     ```      This is the second preferred option provided that `count >= N`     and `LoopBody` is idempotent.
106-1	19214-19215	\*	_	_
106-2	19218-19225	Process	_	_
106-3	19226-19231	whole	_	_
106-4	19232-19239	vectors	_	_
106-5	19240-19243	and	_	_
106-6	19244-19251	include	_	_
106-7	19252-19262	previously	_	_
106-8	19263-19272	processed	_	_
106-9	19273-19281	elements	_	_
106-10	19286-19288	in	_	_
106-11	19289-19292	the	_	_
106-12	19293-19297	last	_	_
106-13	19298-19304	vector	_	_
106-14	19304-19305	:	_	_
106-15	19310-19311	`	_	_
106-16	19311-19312	`	_	_
106-17	19312-19313	`	_	_
106-18	19318-19321	for	_	_
106-19	19322-19323	(	_	_
106-20	19323-19329	size\_t	_	_
106-21	19330-19331	i	_	_
106-22	19332-19333	=	_	_
106-23	19334-19335	0	_	_
106-24	19335-19336	\;	_	_
106-25	19337-19338	i	_	_
106-26	19339-19340	<	_	_
106-27	19341-19346	count	_	_
106-28	19346-19347	\;	*[277]	CONFERENCE[277]
106-29	19348-19349	i	*[277]	CONFERENCE[277]
106-30	19350-19351	+	*[277]	CONFERENCE[277]
106-31	19351-19352	=	*[277]	CONFERENCE[277]
106-32	19353-19354	N	*[277]	CONFERENCE[277]
106-33	19354-19355	)	*[277]	CONFERENCE[277]
106-34	19356-19364	LoopBody	*[277]	CONFERENCE[277]
106-35	19364-19365	<	*[277]	CONFERENCE[277]
106-36	19365-19370	false	*[277]	CONFERENCE[277]
106-37	19370-19371	>	*[277]	CONFERENCE[277]
106-38	19371-19372	(	*[277]	CONFERENCE[277]
106-39	19372-19373	d	*[277]	CONFERENCE[277]
106-40	19373-19374	,	*[277]	CONFERENCE[277]
106-41	19375-19382	HWY\_MIN	*[277]	CONFERENCE[277]
106-42	19382-19383	(	*[277]	CONFERENCE[277]
106-43	19383-19384	i	*[277]	CONFERENCE[277]
106-44	19384-19385	,	*[277]	CONFERENCE[277]
106-45	19386-19391	count	*[277]	CONFERENCE[277]
106-46	19392-19393	-	*[277]	CONFERENCE[277]
106-47	19394-19395	N	*[277]	CONFERENCE[277]
106-48	19395-19396	)	*[277]	CONFERENCE[277]
106-49	19396-19397	,	*[277]	CONFERENCE[277]
106-50	19398-19399	0	*[277]	CONFERENCE[277]
106-51	19399-19400	)	*[277]	CONFERENCE[277]
106-52	19400-19401	\;	_	_
106-53	19406-19407	`	_	_
106-54	19407-19408	`	_	_
106-55	19408-19409	`	_	_
106-56	19415-19419	This	_	_
106-57	19420-19422	is	_	_
106-58	19423-19426	the	_	_
106-59	19427-19433	second	_	_
106-60	19434-19443	preferred	_	_
106-61	19444-19450	option	_	_
106-62	19451-19459	provided	_	_
106-63	19460-19464	that	_	_
106-64	19465-19466	`	_	_
106-65	19466-19471	count	_	_
106-66	19472-19473	>	_	_
106-67	19473-19474	=	_	_
106-68	19475-19476	N	_	_
106-69	19476-19477	`	_	_
106-70	19482-19485	and	_	_
106-71	19486-19487	`	_	_
106-72	19487-19495	LoopBody	_	_
106-73	19495-19496	`	_	_
106-74	19497-19499	is	_	_
106-75	19500-19510	idempotent	_	_
106-76	19510-19511	.	_	_

#Text=Some elements might be processed twice, but     a single code path and full vectorization is usually worth it.
107-1	19512-19516	Some	_	_
107-2	19517-19525	elements	_	_
107-3	19526-19531	might	_	_
107-4	19532-19534	be	*[314]	SOFTWARE[314]
107-5	19535-19544	processed	_	_
107-6	19545-19550	twice	_	_
107-7	19550-19551	,	_	_
107-8	19552-19555	but	_	_
107-9	19560-19561	a	_	_
107-10	19562-19568	single	_	_
107-11	19569-19573	code	_	_
107-12	19574-19578	path	_	_
107-13	19579-19582	and	_	_
107-14	19583-19587	full	_	_
107-15	19588-19601	vectorization	_	_
107-16	19602-19604	is	_	_
107-17	19605-19612	usually	_	_
107-18	19613-19618	worth	_	_
107-19	19619-19621	it	_	_
107-20	19621-19622	.	_	_

#Text=Even if     `count < N`, it usually makes sense to pad inputs/outputs up to `N`
108-1	19623-19627	Even	_	_
108-2	19628-19630	if	_	_
108-3	19635-19636	`	_	_
108-4	19636-19641	count	_	_
108-5	19642-19643	<	_	_
108-6	19644-19645	N	_	_
108-7	19645-19646	`	_	_
108-8	19646-19647	,	_	_
108-9	19648-19650	it	_	_
108-10	19651-19658	usually	_	_
108-11	19659-19664	makes	_	_
108-12	19665-19670	sense	_	_
108-13	19671-19673	to	_	_
108-14	19674-19677	pad	_	_
108-15	19678-19684	inputs	_	_
108-16	19684-19685	/	_	_
108-17	19685-19692	outputs	_	_
108-18	19693-19695	up	_	_
108-19	19696-19698	to	_	_
108-20	19699-19700	`	_	_
108-21	19700-19701	N	_	_
108-22	19701-19702	`	_	_

#Text=.
109-1	19702-19703	.	_	_

#Text=\*   Use the `Transform\*` functions in hwy/contrib/algo/transform-inl.h.
110-1	19705-19706	\*	_	_
110-2	19709-19712	Use	_	_
110-3	19713-19716	the	_	_
110-4	19717-19718	`	_	_
110-5	19718-19727	Transform	_	_
110-6	19727-19728	\*	_	_
110-7	19728-19729	`	_	_
110-8	19730-19739	functions	_	_
110-9	19740-19742	in	*[266]	LICENSE[266]
110-10	19743-19746	hwy	*[266]	LICENSE[266]
110-11	19746-19747	/	*[266]	LICENSE[266]
110-12	19747-19754	contrib	*[266]	LICENSE[266]
110-13	19754-19755	/	*[266]	LICENSE[266]
110-14	19755-19759	algo	*[266]	LICENSE[266]
110-15	19759-19760	/	_	_
110-16	19760-19775	transform-inl.h	_	_
110-17	19775-19776	.	_	_

#Text=This     takes care of the loop and remainder handling and you simply define a     generic lambda function (C++14) or functor which receives the current vector     from the input/output array, plus optionally vectors from up to two extra     input arrays, and returns the value to write to the input/output array.
111-1	19777-19781	This	_	_
111-2	19786-19791	takes	_	_
111-3	19792-19796	care	_	_
111-4	19797-19799	of	_	_
111-5	19800-19803	the	_	_
111-6	19804-19808	loop	_	_
111-7	19809-19812	and	_	_
111-8	19813-19822	remainder	_	_
111-9	19823-19831	handling	_	_
111-10	19832-19835	and	_	_
111-11	19836-19839	you	_	_
111-12	19840-19846	simply	_	_
111-13	19847-19853	define	_	_
111-14	19854-19855	a	_	_
111-15	19860-19867	generic	_	_
111-16	19868-19874	lambda	_	_
111-17	19875-19883	function	_	_
111-18	19884-19885	(	_	_
111-19	19885-19886	C	_	_
111-20	19886-19887	+	_	_
111-21	19887-19888	+	_	_
111-22	19888-19890	14	_	_
111-23	19890-19891	)	_	_
111-24	19892-19894	or	_	_
111-25	19895-19902	functor	_	_
111-26	19903-19908	which	_	_
111-27	19909-19917	receives	_	_
111-28	19918-19921	the	_	_
111-29	19922-19929	current	_	_
111-30	19930-19936	vector	_	_
111-31	19941-19945	from	_	_
111-32	19946-19949	the	_	_
111-33	19950-19955	input	*[253]	PUBLICATION[253]
111-34	19955-19956	/	*[253]	PUBLICATION[253]
111-35	19956-19962	output	*[253]	PUBLICATION[253]
111-36	19963-19968	array	*[253]	PUBLICATION[253]
111-37	19968-19969	,	*[253]	PUBLICATION[253]
111-38	19970-19974	plus	*[253]	PUBLICATION[253]
111-39	19975-19985	optionally	*[253]	PUBLICATION[253]
111-40	19986-19993	vectors	*[253]	PUBLICATION[253]
111-41	19994-19998	from	*[253]	PUBLICATION[253]
111-42	19999-20001	up	*[253]	PUBLICATION[253]
111-43	20002-20004	to	*[253]	PUBLICATION[253]
111-44	20005-20008	two	*[253]	PUBLICATION[253]
111-45	20009-20014	extra	_	_
111-46	20019-20024	input	_	_
111-47	20025-20031	arrays	_	_
111-48	20031-20032	,	_	_
111-49	20033-20036	and	_	_
111-50	20037-20044	returns	_	_
111-51	20045-20048	the	_	_
111-52	20049-20054	value	_	_
111-53	20055-20057	to	_	_
111-54	20058-20063	write	_	_
111-55	20064-20066	to	_	_
111-56	20067-20070	the	_	_
111-57	20071-20076	input	_	_
111-58	20076-20077	/	_	_
111-59	20077-20083	output	_	_
111-60	20084-20089	array	_	_
111-61	20089-20090	.	_	_

#Text=Here is an example implementing the BLAS function SAXPY (`alpha \* x + y`):      ```     Transform1(d, x, n, y, \[\](auto d, const auto v, const auto v1) HWY\_ATTR {       return MulAdd(Set(d, alpha), v, v1)\;     })\;     ```  \*   Process whole vectors as above, followed by a scalar loop:      ```     size\_t i = 0\;     for (\; i + N <= count\; i += N) LoopBody<false>(d, i, 0)\;     for (\; i < count\; ++i) LoopBody<false>(CappedTag<T, 1>(), i, 0)\;     ```     The template parameter and second function arguments are again not needed.
112-1	20096-20100	Here	_	_
112-2	20101-20103	is	_	_
112-3	20104-20106	an	_	_
112-4	20107-20114	example	_	_
112-5	20115-20127	implementing	_	_
112-6	20128-20131	the	*[278]	CONFERENCE[278]
112-7	20132-20136	BLAS	*[278]	CONFERENCE[278]
112-8	20137-20145	function	*[278]	CONFERENCE[278]
112-9	20146-20151	SAXPY	*[278]	CONFERENCE[278]
112-10	20152-20153	(	*[278]	CONFERENCE[278]
112-11	20153-20154	`	*[278]	CONFERENCE[278]
112-12	20154-20159	alpha	*[278]	CONFERENCE[278]
112-13	20160-20161	\*	*[278]	CONFERENCE[278]
112-14	20162-20163	x	*[278]	CONFERENCE[278]
112-15	20164-20165	+	*[278]	CONFERENCE[278]
112-16	20166-20167	y	*[278]	CONFERENCE[278]
112-17	20167-20168	`	*[278]	CONFERENCE[278]
112-18	20168-20169	)	*[278]	CONFERENCE[278]
112-19	20169-20170	:	*[278]	CONFERENCE[278]
112-20	20176-20177	`	*[278]	CONFERENCE[278]
112-21	20177-20178	`	*[278]	CONFERENCE[278]
112-22	20178-20179	`	*[278]	CONFERENCE[278]
112-23	20184-20194	Transform1	*[278]	CONFERENCE[278]
112-24	20194-20195	(	*[278]	CONFERENCE[278]
112-25	20195-20196	d	*[278]	CONFERENCE[278]
112-26	20196-20197	,	*[278]	CONFERENCE[278]
112-27	20198-20199	x	*[278]	CONFERENCE[278]
112-28	20199-20200	,	*[278]	CONFERENCE[278]
112-29	20201-20202	n	*[278]	CONFERENCE[278]
112-30	20202-20203	,	*[278]	CONFERENCE[278]
112-31	20204-20205	y	*[278]	CONFERENCE[278]
112-32	20205-20206	,	*[278]	CONFERENCE[278]
112-33	20207-20208	\[	*[278]	CONFERENCE[278]
112-34	20208-20209	\]	*[278]	CONFERENCE[278]
112-35	20209-20210	(	*[278]	CONFERENCE[278]
112-36	20210-20214	auto	*[278]	CONFERENCE[278]
112-37	20215-20216	d	*[278]	CONFERENCE[278]
112-38	20216-20217	,	*[278]	CONFERENCE[278]
112-39	20218-20223	const	*[278]	CONFERENCE[278]
112-40	20224-20228	auto	*[278]	CONFERENCE[278]
112-41	20229-20230	v	*[278]	CONFERENCE[278]
112-42	20230-20231	,	*[278]	CONFERENCE[278]
112-43	20232-20237	const	*[278]	CONFERENCE[278]
112-44	20238-20242	auto	*[278]	CONFERENCE[278]
112-45	20243-20245	v1	*[278]	CONFERENCE[278]
112-46	20245-20246	)	*[278]	CONFERENCE[278]
112-47	20247-20255	HWY\_ATTR	*[278]	CONFERENCE[278]
112-48	20256-20257	{	*[278]	CONFERENCE[278]
112-49	20264-20270	return	*[278]	CONFERENCE[278]
112-50	20271-20277	MulAdd	*[278]	CONFERENCE[278]
112-51	20277-20278	(	*[278]	CONFERENCE[278]
112-52	20278-20281	Set	*[278]	CONFERENCE[278]
112-53	20281-20282	(	*[278]	CONFERENCE[278]
112-54	20282-20283	d	*[278]	CONFERENCE[278]
112-55	20283-20284	,	*[278]	CONFERENCE[278]
112-56	20285-20290	alpha	*[278]	CONFERENCE[278]
112-57	20290-20291	)	*[278]	CONFERENCE[278]
112-58	20291-20292	,	*[278]	CONFERENCE[278]
112-59	20293-20294	v	*[278]	CONFERENCE[278]
112-60	20294-20295	,	*[278]	CONFERENCE[278]
112-61	20296-20298	v1	*[278]	CONFERENCE[278]
112-62	20298-20299	)	*[278]	CONFERENCE[278]
112-63	20299-20300	\;	*[278]	CONFERENCE[278]
112-64	20305-20306	}	*[278]	CONFERENCE[278]
112-65	20306-20307	)	*[278]	CONFERENCE[278]
112-66	20307-20308	\;	*[278]	CONFERENCE[278]
112-67	20313-20314	`	*[278]	CONFERENCE[278]
112-68	20314-20315	`	*[278]	CONFERENCE[278]
112-69	20315-20316	`	*[278]	CONFERENCE[278]
112-70	20318-20319	\*	*[278]	CONFERENCE[278]
112-71	20322-20329	Process	*[278]	CONFERENCE[278]
112-72	20330-20335	whole	*[278]	CONFERENCE[278]
112-73	20336-20343	vectors	*[278]	CONFERENCE[278]
112-74	20344-20346	as	*[278]	CONFERENCE[278]
112-75	20347-20352	above	*[278]	CONFERENCE[278]
112-76	20352-20353	,	*[278]	CONFERENCE[278]
112-77	20354-20362	followed	*[278]	CONFERENCE[278]
112-78	20363-20365	by	*[278]	CONFERENCE[278]
112-79	20366-20367	a	_	_
112-80	20368-20374	scalar	_	_
112-81	20375-20379	loop	_	_
112-82	20379-20380	:	_	_
112-83	20386-20387	`	_	_
112-84	20387-20388	`	_	_
112-85	20388-20389	`	_	_
112-86	20394-20400	size\_t	_	_
112-87	20401-20402	i	_	_
112-88	20403-20404	=	_	_
112-89	20405-20406	0	_	_
112-90	20406-20407	\;	_	_
112-91	20412-20415	for	_	_
112-92	20416-20417	(	_	_
112-93	20417-20418	\;	_	_
112-94	20419-20420	i	_	_
112-95	20421-20422	+	_	_
112-96	20423-20424	N	_	_
112-97	20425-20426	<	_	_
112-98	20426-20427	=	_	_
112-99	20428-20433	count	_	_
112-100	20433-20434	\;	_	_
112-101	20435-20436	i	_	_
112-102	20437-20438	+	_	_
112-103	20438-20439	=	_	_
112-104	20440-20441	N	_	_
112-105	20441-20442	)	_	_
112-106	20443-20451	LoopBody	_	_
112-107	20451-20452	<	_	_
112-108	20452-20457	false	_	_
112-109	20457-20458	>	_	_
112-110	20458-20459	(	_	_
112-111	20459-20460	d	_	_
112-112	20460-20461	,	_	_
112-113	20462-20463	i	_	_
112-114	20463-20464	,	_	_
112-115	20465-20466	0	_	_
112-116	20466-20467	)	_	_
112-117	20467-20468	\;	_	_
112-118	20473-20476	for	_	_
112-119	20477-20478	(	_	_
112-120	20478-20479	\;	_	_
112-121	20480-20481	i	_	_
112-122	20482-20483	<	_	_
112-123	20484-20489	count	_	_
112-124	20489-20490	\;	_	_
112-125	20491-20492	+	_	_
112-126	20492-20493	+	_	_
112-127	20493-20494	i	_	_
112-128	20494-20495	)	_	_
112-129	20496-20504	LoopBody	_	_
112-130	20504-20505	<	_	_
112-131	20505-20510	false	_	_
112-132	20510-20511	>	_	_
112-133	20511-20512	(	_	_
112-134	20512-20521	CappedTag	_	_
112-135	20521-20522	<	_	_
112-136	20522-20523	T	_	_
112-137	20523-20524	,	_	_
112-138	20525-20526	1	_	_
112-139	20526-20527	>	_	_
112-140	20527-20528	(	_	_
112-141	20528-20529	)	_	_
112-142	20529-20530	,	_	_
112-143	20531-20532	i	_	_
112-144	20532-20533	,	_	_
112-145	20534-20535	0	_	_
112-146	20535-20536	)	_	_
112-147	20536-20537	\;	_	_
112-148	20542-20543	`	_	_
112-149	20543-20544	`	_	_
112-150	20544-20545	`	_	_
112-151	20550-20553	The	_	_
112-152	20554-20562	template	_	_
112-153	20563-20572	parameter	_	_
112-154	20573-20576	and	_	_
112-155	20577-20583	second	_	_
112-156	20584-20592	function	_	_
112-157	20593-20602	arguments	_	_
112-158	20603-20606	are	_	_
112-159	20607-20612	again	_	_
112-160	20613-20616	not	_	_
112-161	20617-20623	needed	_	_
112-162	20623-20624	.	_	_

#Text=This avoids duplicating code, and is reasonable if `count` is large.
113-1	20630-20634	This	_	_
113-2	20635-20641	avoids	_	_
113-3	20642-20653	duplicating	_	_
113-4	20654-20658	code	_	_
113-5	20658-20659	,	*[295]	PROGLANG[295]
113-6	20660-20663	and	*[295]	PROGLANG[295]
113-7	20664-20666	is	*[295]	PROGLANG[295]
113-8	20667-20677	reasonable	*[295]	PROGLANG[295]
113-9	20678-20680	if	*[295]	PROGLANG[295]
113-10	20681-20682	`	*[295]	PROGLANG[295]
113-11	20682-20687	count	_	_
113-12	20687-20688	`	_	_
113-13	20689-20691	is	_	_
113-14	20692-20697	large	_	_
113-15	20697-20698	.	_	_

#Text=If `count` is small, the second loop may be slower than the next option
114-1	20703-20705	If	_	_
114-2	20706-20707	`	_	_
114-3	20707-20712	count	_	_
114-4	20712-20713	`	*[257]	DATASET[257]
114-5	20714-20716	is	*[257]	DATASET[257]
114-6	20717-20722	small	*[257]	DATASET[257]
114-7	20722-20723	,	*[257]	DATASET[257]
114-8	20724-20727	the	*[257]	DATASET[257]
114-9	20728-20734	second	_	_
114-10	20735-20739	loop	_	_
114-11	20740-20743	may	_	_
114-12	20744-20746	be	_	_
114-13	20747-20753	slower	_	_
114-14	20754-20758	than	_	_
114-15	20759-20762	the	_	_
114-16	20763-20767	next	_	_
114-17	20768-20774	option	_	_

#Text=.
115-1	20774-20775	.	_	_

#Text=\*   Process whole vectors as above, followed by a single call to a modified     `LoopBody` with masking:      ```     size\_t i = 0\;     for (\; i + N <= count\; i += N) {       LoopBody<false>(d, i, 0)\;     }     if (i < count) {       LoopBody<true>(d, i, count - i)\;     }     ```     Now the template parameter and third function argument can be used inside     `LoopBody` to non-atomically 'blend' the first `num\_remaining` lanes of `v`     with the previous contents of memory at subsequent locations:     `BlendedStore(v, FirstN(d, num\_remaining), d, pointer)\;`.
116-1	20777-20778	\*	_	_
116-2	20781-20788	Process	_	_
116-3	20789-20794	whole	_	_
116-4	20795-20802	vectors	_	_
116-5	20803-20805	as	_	_
116-6	20806-20811	above	_	_
116-7	20811-20812	,	_	_
116-8	20813-20821	followed	_	_
116-9	20822-20824	by	_	_
116-10	20825-20826	a	_	_
116-11	20827-20833	single	_	_
116-12	20834-20838	call	_	_
116-13	20839-20841	to	_	_
116-14	20842-20843	a	_	_
116-15	20844-20852	modified	_	_
116-16	20857-20858	`	_	_
116-17	20858-20866	LoopBody	_	_
116-18	20866-20867	`	_	_
116-19	20868-20872	with	_	_
116-20	20873-20880	masking	_	_
116-21	20880-20881	:	_	_
116-22	20887-20888	`	_	_
116-23	20888-20889	`	_	_
116-24	20889-20890	`	_	_
116-25	20895-20901	size\_t	_	_
116-26	20902-20903	i	_	_
116-27	20904-20905	=	_	_
116-28	20906-20907	0	_	_
116-29	20907-20908	\;	_	_
116-30	20913-20916	for	_	_
116-31	20917-20918	(	_	_
116-32	20918-20919	\;	_	_
116-33	20920-20921	i	_	_
116-34	20922-20923	+	_	_
116-35	20924-20925	N	_	_
116-36	20926-20927	<	_	_
116-37	20927-20928	=	_	_
116-38	20929-20934	count	_	_
116-39	20934-20935	\;	_	_
116-40	20936-20937	i	_	_
116-41	20938-20939	+	_	_
116-42	20939-20940	=	_	_
116-43	20941-20942	N	_	_
116-44	20942-20943	)	_	_
116-45	20944-20945	{	_	_
116-46	20952-20960	LoopBody	_	_
116-47	20960-20961	<	_	_
116-48	20961-20966	false	_	_
116-49	20966-20967	>	_	_
116-50	20967-20968	(	_	_
116-51	20968-20969	d	_	_
116-52	20969-20970	,	_	_
116-53	20971-20972	i	_	_
116-54	20972-20973	,	_	_
116-55	20974-20975	0	_	_
116-56	20975-20976	)	_	_
116-57	20976-20977	\;	_	_
116-58	20982-20983	}	_	_
116-59	20988-20990	if	_	_
116-60	20991-20992	(	_	_
116-61	20992-20993	i	_	_
116-62	20994-20995	<	_	_
116-63	20996-21001	count	_	_
116-64	21001-21002	)	_	_
116-65	21003-21004	{	_	_
116-66	21011-21019	LoopBody	_	_
116-67	21019-21020	<	_	_
116-68	21020-21024	true	_	_
116-69	21024-21025	>	_	_
116-70	21025-21026	(	_	_
116-71	21026-21027	d	_	_
116-72	21027-21028	,	_	_
116-73	21029-21030	i	_	_
116-74	21030-21031	,	_	_
116-75	21032-21037	count	_	_
116-76	21038-21039	-	_	_
116-77	21040-21041	i	_	_
116-78	21041-21042	)	_	_
116-79	21042-21043	\;	_	_
116-80	21048-21049	}	_	_
116-81	21054-21055	`	_	_
116-82	21055-21056	`	_	_
116-83	21056-21057	`	_	_
116-84	21062-21065	Now	_	_
116-85	21066-21069	the	_	_
116-86	21070-21078	template	_	_
116-87	21079-21088	parameter	_	_
116-88	21089-21092	and	_	_
116-89	21093-21098	third	_	_
116-90	21099-21107	function	_	_
116-91	21108-21116	argument	_	_
116-92	21117-21120	can	_	_
116-93	21121-21123	be	_	_
116-94	21124-21128	used	_	_
116-95	21129-21135	inside	_	_
116-96	21140-21141	`	_	_
116-97	21141-21149	LoopBody	_	_
116-98	21149-21150	`	_	_
116-99	21151-21153	to	_	_
116-100	21154-21168	non-atomically	_	_
116-101	21169-21170	'	_	_
116-102	21170-21175	blend	_	_
116-103	21175-21176	'	_	_
116-104	21177-21180	the	_	_
116-105	21181-21186	first	_	_
116-106	21187-21188	`	_	_
116-107	21188-21201	num\_remaining	_	_
116-108	21201-21202	`	_	_
116-109	21203-21208	lanes	_	_
116-110	21209-21211	of	_	_
116-111	21212-21213	`	_	_
116-112	21213-21214	v	_	_
116-113	21214-21215	`	_	_
116-114	21220-21224	with	_	_
116-115	21225-21228	the	_	_
116-116	21229-21237	previous	_	_
116-117	21238-21246	contents	_	_
116-118	21247-21249	of	_	_
116-119	21250-21256	memory	_	_
116-120	21257-21259	at	_	_
116-121	21260-21270	subsequent	_	_
116-122	21271-21280	locations	*[315]	SOFTWARE[315]
116-123	21280-21281	:	*[315]	SOFTWARE[315]
116-124	21286-21287	`	*[315]	SOFTWARE[315]
116-125	21287-21299	BlendedStore	_	_
116-126	21299-21300	(	_	_
116-127	21300-21301	v	_	_
116-128	21301-21302	,	_	_
116-129	21303-21309	FirstN	_	_
116-130	21309-21310	(	_	_
116-131	21310-21311	d	_	_
116-132	21311-21312	,	_	_
116-133	21313-21326	num\_remaining	_	_
116-134	21326-21327	)	_	_
116-135	21327-21328	,	_	_
116-136	21329-21330	d	_	_
116-137	21330-21331	,	_	_
116-138	21332-21339	pointer	_	_
116-139	21339-21340	)	_	_
116-140	21340-21341	\;	_	_
116-141	21341-21342	`	_	_
116-142	21342-21343	.	_	_

#Text=Similarly,     `MaskedLoad(FirstN(d, num\_remaining), d, pointer)` loads the first     `num\_remaining` elements and returns zero in other lanes.
117-1	21344-21353	Similarly	_	_
117-2	21353-21354	,	_	_
117-3	21359-21360	`	_	_
117-4	21360-21370	MaskedLoad	_	_
117-5	21370-21371	(	_	_
117-6	21371-21377	FirstN	_	_
117-7	21377-21378	(	_	_
117-8	21378-21379	d	_	_
117-9	21379-21380	,	_	_
117-10	21381-21394	num\_remaining	_	_
117-11	21394-21395	)	*[254]	PUBLICATION[254]
117-12	21395-21396	,	*[254]	PUBLICATION[254]
117-13	21397-21398	d	*[254]	PUBLICATION[254]
117-14	21398-21399	,	*[254]	PUBLICATION[254]
117-15	21400-21407	pointer	*[254]	PUBLICATION[254]
117-16	21407-21408	)	*[254]	PUBLICATION[254]
117-17	21408-21409	`	*[254]	PUBLICATION[254]
117-18	21410-21415	loads	*[254]	PUBLICATION[254]
117-19	21416-21419	the	*[254]	PUBLICATION[254]
117-20	21420-21425	first	*[254]	PUBLICATION[254]
117-21	21430-21431	`	*[254]	PUBLICATION[254]
117-22	21431-21444	num\_remaining	*[254]	PUBLICATION[254]
117-23	21444-21445	`	*[254]	PUBLICATION[254]
117-24	21446-21454	elements	*[254]	PUBLICATION[254]
117-25	21455-21458	and	*[254]	PUBLICATION[254]
117-26	21459-21466	returns	*[254]	PUBLICATION[254]
117-27	21467-21471	zero	*[254]	PUBLICATION[254]
117-28	21472-21474	in	*[254]	PUBLICATION[254]
117-29	21475-21480	other	*[254]	PUBLICATION[254]
117-30	21481-21486	lanes	*[254]	PUBLICATION[254]
117-31	21486-21487	.	_	_

#Text=This is a good default when it is infeasible to ensure vectors are padded,     but is only safe `#if !
118-1	21493-21497	This	_	_
118-2	21498-21500	is	_	_
118-3	21501-21502	a	_	_
118-4	21503-21507	good	_	_
118-5	21508-21515	default	_	_
118-6	21516-21520	when	_	_
118-7	21521-21523	it	_	_
118-8	21524-21526	is	_	_
118-9	21527-21537	infeasible	_	_
118-10	21538-21540	to	_	_
118-11	21541-21547	ensure	_	_
118-12	21548-21555	vectors	_	_
118-13	21556-21559	are	_	_
118-14	21560-21566	padded	_	_
118-15	21566-21567	,	_	_
118-16	21572-21575	but	_	_
118-17	21576-21578	is	_	_
118-18	21579-21583	only	_	_
118-19	21584-21588	safe	_	_
118-20	21589-21590	`	_	_
118-21	21590-21591	#	_	_
118-22	21591-21593	if	_	_
118-23	21594-21595	!	_	_

#Text=HWY\_MEM\_OPS\_MIGHT\_FAULT`!
119-1	21595-21618	HWY\_MEM\_OPS\_MIGHT\_FAULT	_	_
119-2	21618-21619	`	*[258]	DATASET[258]
119-3	21619-21620	!	_	_

#Text=In contrast to the scalar loop, only a single final iteration is needed.
120-1	21625-21627	In	_	_
120-2	21628-21636	contrast	_	_
120-3	21637-21639	to	*[287]	EVALMETRIC[287]
120-4	21640-21643	the	*[287]	EVALMETRIC[287]
120-5	21644-21650	scalar	*[287]	EVALMETRIC[287]
120-6	21651-21655	loop	*[287]	EVALMETRIC[287]
120-7	21655-21656	,	*[287]	EVALMETRIC[287]
120-8	21657-21661	only	*[287]	EVALMETRIC[287]
120-9	21662-21663	a	*[287]	EVALMETRIC[287]
120-10	21664-21670	single	_	_
120-11	21671-21676	final	_	_
120-12	21677-21686	iteration	_	_
120-13	21687-21689	is	_	_
120-14	21690-21696	needed	_	_
120-15	21696-21697	.	_	_

#Text=The increased code size from two loop bodies is expected to be worthwhile     because it avoids the cost of masking in all but the final iteration.  ## Additional resources  \*   \[Highway introduction (slides)\](g3doc/highway\_intro.pdf) \*   \[Overview of instructions per operation on different architectures\](g3doc/instruction\_matrix.pdf) \*   \[Design philosophy and comparison\](g3doc/design\_philosophy.md) \*   \[Implementation details\](g3doc/impl\_details.md)  ## Acknowledgments  We have used \[farm-sve\](https://gitlab.inria.fr/bramas/farm-sve) by Berenger Bramas\; it has proved useful for checking the SVE port on an x86 development machine.
121-1	21702-21705	The	_	_
121-2	21706-21715	increased	_	_
121-3	21716-21720	code	_	_
121-4	21721-21725	size	_	_
121-5	21726-21730	from	_	_
121-6	21731-21734	two	_	_
121-7	21735-21739	loop	_	_
121-8	21740-21746	bodies	_	_
121-9	21747-21749	is	_	_
121-10	21750-21758	expected	_	_
121-11	21759-21761	to	_	_
121-12	21762-21764	be	_	_
121-13	21765-21775	worthwhile	_	_
121-14	21780-21787	because	_	_
121-15	21788-21790	it	_	_
121-16	21791-21797	avoids	_	_
121-17	21798-21801	the	_	_
121-18	21802-21806	cost	_	_
121-19	21807-21809	of	_	_
121-20	21810-21817	masking	_	_
121-21	21818-21820	in	_	_
121-22	21821-21824	all	_	_
121-23	21825-21828	but	_	_
121-24	21829-21832	the	_	_
121-25	21833-21838	final	_	_
121-26	21839-21848	iteration	_	_
121-27	21848-21849	.	_	_
121-28	21851-21852	#	_	_
121-29	21852-21853	#	_	_
121-30	21854-21864	Additional	_	_
121-31	21865-21874	resources	_	_
121-32	21876-21877	\*	_	_
121-33	21880-21881	\[	_	_
121-34	21881-21888	Highway	_	_
121-35	21889-21901	introduction	_	_
121-36	21902-21903	(	_	_
121-37	21903-21909	slides	_	_
121-38	21909-21910	)	_	_
121-39	21910-21911	\]	_	_
121-40	21911-21912	(	_	_
121-41	21912-21917	g3doc	_	_
121-42	21917-21918	/	_	_
121-43	21918-21935	highway\_intro.pdf	_	_
121-44	21935-21936	)	_	_
121-45	21937-21938	\*	_	_
121-46	21941-21942	\[	_	_
121-47	21942-21950	Overview	_	_
121-48	21951-21953	of	_	_
121-49	21954-21966	instructions	_	_
121-50	21967-21970	per	_	_
121-51	21971-21980	operation	_	_
121-52	21981-21983	on	_	_
121-53	21984-21993	different	_	_
121-54	21994-22007	architectures	_	_
121-55	22007-22008	\]	_	_
121-56	22008-22009	(	_	_
121-57	22009-22014	g3doc	_	_
121-58	22014-22015	/	_	_
121-59	22015-22037	instruction\_matrix.pdf	_	_
121-60	22037-22038	)	_	_
121-61	22039-22040	\*	_	_
121-62	22043-22044	\[	_	_
121-63	22044-22050	Design	_	_
121-64	22051-22061	philosophy	_	_
121-65	22062-22065	and	_	_
121-66	22066-22076	comparison	_	_
121-67	22076-22077	\]	_	_
121-68	22077-22078	(	_	_
121-69	22078-22083	g3doc	_	_
121-70	22083-22084	/	_	_
121-71	22084-22104	design\_philosophy.md	_	_
121-72	22104-22105	)	_	_
121-73	22106-22107	\*	_	_
121-74	22110-22111	\[	_	_
121-75	22111-22125	Implementation	_	_
121-76	22126-22133	details	_	_
121-77	22133-22134	\]	_	_
121-78	22134-22135	(	_	_
121-79	22135-22140	g3doc	_	_
121-80	22140-22141	/	_	_
121-81	22141-22156	impl\_details.md	_	_
121-82	22156-22157	)	_	_
121-83	22159-22160	#	_	_
121-84	22160-22161	#	_	_
121-85	22162-22177	Acknowledgments	_	_
121-86	22179-22181	We	_	_
121-87	22182-22186	have	_	_
121-88	22187-22191	used	_	_
121-89	22192-22193	\[	_	_
121-90	22193-22201	farm-sve	_	_
121-91	22201-22202	\]	_	_
121-92	22202-22203	(	_	_
121-93	22203-22208	https	_	_
121-94	22208-22209	:	_	_
121-95	22209-22210	/	_	_
121-96	22210-22211	/	_	_
121-97	22211-22226	gitlab.inria.fr	_	_
121-98	22226-22227	/	_	_
121-99	22227-22233	bramas	_	_
121-100	22233-22234	/	_	_
121-101	22234-22242	farm-sve	_	_
121-102	22242-22243	)	_	_
121-103	22244-22246	by	_	_
121-104	22247-22255	Berenger	_	_
121-105	22256-22262	Bramas	_	_
121-106	22262-22263	\;	_	_
121-107	22264-22266	it	_	_
121-108	22267-22270	has	_	_
121-109	22271-22277	proved	_	_
121-110	22278-22284	useful	_	_
121-111	22285-22288	for	_	_
121-112	22289-22297	checking	_	_
121-113	22298-22301	the	_	_
121-114	22302-22305	SVE	_	_
121-115	22306-22310	port	_	_
121-116	22311-22313	on	_	_
121-117	22314-22316	an	_	_
121-118	22317-22320	x86	_	_
121-119	22321-22332	development	_	_
121-120	22333-22340	machine	_	_
121-121	22340-22341	.	_	_

#Text=This is not an officially supported Google product.
122-1	22343-22347	This	_	_
122-2	22348-22350	is	_	_
122-3	22351-22354	not	_	_
122-4	22355-22357	an	_	_
122-5	22358-22368	officially	_	_
122-6	22369-22378	supported	_	_
122-7	22379-22385	Google	_	_
122-8	22386-22393	product	_	_
122-9	22393-22394	.	_	_

#Text=Contact: janwas@google.com
123-1	22395-22402	Contact	_	_
123-2	22402-22403	:	_	_
123-3	22404-22410	janwas	*[265]	ONTOLOGY[265]
123-4	22410-22411	@	*[265]	ONTOLOGY[265]
123-5	22411-22421	google.com	_	_