```markdown
Please see the full install instructions below to build `<SOFTWARE>megaman</SOFTWARE>` from source.  ## Installation from source  To install `<SOFTWARE>megaman</SOFTWARE>` from source requires the following:  - `<PROGLANG>python</PROGLANG>` tested with versions 2.7, 3.5 and 3.6 - `<SOFTWARE>numpy</SOFTWARE>` version 1.8 or higher - `<SOFTWARE>scipy</SOFTWARE>` version 0.16.0 or higher - `<SOFTWARE>scikit-learn</SOFTWARE>` - `<SOFTWARE>FLANN</SOFTWARE>` - `<SOFTWARE>pyflann</SOFTWARE>` which offers another method of computing distance matrices (this is bundled with the `<SOFTWARE>FLANN</SOFTWARE>` source code) - `<SOFTWARE>cython</SOFTWARE>` - a C++ compiler such as ``gcc``/``g++``  Optional requirements include  - `<SOFTWARE>pyamg</SOFTWARE>`, which allows for faster decompositions of large matrices - `<SOFTWARE>nose</SOFTWARE>` for running the unit tests - `<SOFTWARE>h5py</SOFTWARE>` for reading testing .mat files - `<SOFTWARE>plotly</SOFTWARE>` an graphing library for interactive plot   These requirements can be installed on Linux and MacOSX using the following conda command:  ```shell $ conda create -n manifold_env `<PROGLANG>python</PROGLANG>`=3.5 -y # can also use `<PROGLANG>python</PROGLANG>`=2.7 or `<PROGLANG>python</PROGLANG>`=3.6  $ source activate manifold_env $ conda install --channel=conda-forge -y pip `<SOFTWARE>nose</SOFTWARE>` coverage `<SOFTWARE>cython</SOFTWARE>` `<SOFTWARE>numpy</SOFTWARE>` `<SOFTWARE>scipy</SOFTWARE>` \                                          `<SOFTWARE>scikit-learn</SOFTWARE>` `<SOFTWARE>pyflann</SOFTWARE>` `<SOFTWARE>pyamg</SOFTWARE>` `<SOFTWARE>h5py</SOFTWARE>` `<SOFTWARE>plotly</SOFTWARE>` ```  Clone this repository and `cd` into source repository  ```shell $ cd /tmp/ $ git clone https://github.com/mmp2/`<SOFTWARE>megaman</SOFTWARE>`.git $ cd `<SOFTWARE>megaman</SOFTWARE>` ```  Finally, within the source repository, run this command to install the ``<SOFTWARE>megaman</SOFTWARE>`` package itself: ```shell $ `<PROGLANG>python</PROGLANG>` setup.py install ```  ## Unit Tests `<SOFTWARE>megaman</SOFTWARE>` uses ``<SOFTWARE>nose</SOFTWARE>`` for unit tests.
```