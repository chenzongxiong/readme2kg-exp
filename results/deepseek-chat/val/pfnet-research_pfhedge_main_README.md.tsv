#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=<h1 align="center">PFHedge: Deep Hedging in PyTorch</h1>  \[!
1-1	0-1	<	_	_
1-2	1-3	h1	*[1]	SOFTWARE[1]
1-3	4-9	align	_	_
1-4	9-10	=	_	_
1-5	10-11	"	_	_
1-6	11-17	center	_	_
1-7	17-18	"	_	_
1-8	18-19	>	_	_
1-9	19-26	PFHedge	_	_
1-10	26-27	:	_	_
1-11	28-32	Deep	_	_
1-12	33-40	Hedging	_	_
1-13	41-43	in	_	_
1-14	44-51	PyTorch	_	_
1-15	51-52	<	_	_
1-16	52-53	/	_	_
1-17	53-55	h1	_	_
1-18	55-56	>	_	_
1-19	58-59	\[	_	_
1-20	59-60	!	_	_

#Text=\[python\](https://img.shields.io/pypi/pyversions/pfhedge.svg)\](https://pypi.org/project/pfhedge) \[!
2-1	60-61	\[	_	_
2-2	61-67	python	_	_
2-3	67-68	\]	_	_
2-4	68-69	(	_	_
2-5	69-74	https	_	_
2-6	74-75	:	_	_
2-7	75-76	/	_	_
2-8	76-77	/	_	_
2-9	77-91	img.shields.io	_	_
2-10	91-92	/	_	_
2-11	92-96	pypi	_	_
2-12	96-97	/	_	_
2-13	97-107	pyversions	_	_
2-14	107-108	/	_	_
2-15	108-119	pfhedge.svg	_	_
2-16	119-120	)	_	_
2-17	120-121	\]	_	_
2-18	121-122	(	_	_
2-19	122-127	https	_	_
2-20	127-128	:	_	_
2-21	128-129	/	_	_
2-22	129-130	/	_	_
2-23	130-138	pypi.org	_	_
2-24	138-139	/	_	_
2-25	139-146	project	_	_
2-26	146-147	/	_	_
2-27	147-154	pfhedge	_	_
2-28	154-155	)	_	_
2-29	156-157	\[	_	_
2-30	157-158	!	_	_

#Text=\[pypi\](https://img.shields.io/pypi/v/pfhedge.svg)\](https://pypi.org/project/pfhedge) \[!
3-1	158-159	\[	_	_
3-2	159-163	pypi	_	_
3-3	163-164	\]	_	_
3-4	164-165	(	_	_
3-5	165-170	https	_	_
3-6	170-171	:	_	_
3-7	171-172	/	_	_
3-8	172-173	/	_	_
3-9	173-187	img.shields.io	_	_
3-10	187-188	/	_	_
3-11	188-192	pypi	_	_
3-12	192-193	/	_	_
3-13	193-194	v	_	_
3-14	194-195	/	_	_
3-15	195-206	pfhedge.svg	_	_
3-16	206-207	)	_	_
3-17	207-208	\]	_	_
3-18	208-209	(	_	_
3-19	209-214	https	_	_
3-20	214-215	:	_	_
3-21	215-216	/	_	_
3-22	216-217	/	_	_
3-23	217-225	pypi.org	_	_
3-24	225-226	/	_	_
3-25	226-233	project	_	_
3-26	233-234	/	_	_
3-27	234-241	pfhedge	_	_
3-28	241-242	)	_	_
3-29	243-244	\[	_	_
3-30	244-245	!	_	_

#Text=\[CI\](https://github.com/pfnet-research/pfhedge/workflows/CI/badge.svg)\](https://github.com/pfnet-research/pfhedge/actions?
4-1	245-246	\[	_	_
4-2	246-248	CI	_	_
4-3	248-249	\]	_	_
4-4	249-250	(	_	_
4-5	250-255	https	_	_
4-6	255-256	:	_	_
4-7	256-257	/	_	_
4-8	257-258	/	_	_
4-9	258-268	github.com	_	_
4-10	268-269	/	_	_
4-11	269-283	pfnet-research	_	_
4-12	283-284	/	_	_
4-13	284-291	pfhedge	_	_
4-14	291-292	/	_	_
4-15	292-301	workflows	_	_
4-16	301-302	/	_	_
4-17	302-304	CI	_	_
4-18	304-305	/	_	_
4-19	305-314	badge.svg	_	_
4-20	314-315	)	_	_
4-21	315-316	\]	_	_
4-22	316-317	(	_	_
4-23	317-322	https	_	_
4-24	322-323	:	_	_
4-25	323-324	/	_	_
4-26	324-325	/	_	_
4-27	325-335	github.com	_	_
4-28	335-336	/	_	_
4-29	336-350	pfnet-research	_	_
4-30	350-351	/	_	_
4-31	351-358	pfhedge	_	_
4-32	358-359	/	_	_
4-33	359-366	actions	_	_
4-34	366-367	?	_	_

#Text=query=workflow%3ACI) \[!
5-1	367-372	query	_	_
5-2	372-373	=	_	_
5-3	373-381	workflow	_	_
5-4	381-382	%	_	_
5-5	382-386	3ACI	_	_
5-6	386-387	)	_	_
5-7	388-389	\[	_	_
5-8	389-390	!	_	_

#Text=\[codecov\](https://codecov.io/gh/pfnet-research/pfhedge/branch/main/graph/badge.svg?
6-1	390-391	\[	_	_
6-2	391-398	codecov	_	_
6-3	398-399	\]	_	_
6-4	399-400	(	_	_
6-5	400-405	https	_	_
6-6	405-406	:	_	_
6-7	406-407	/	_	_
6-8	407-408	/	_	_
6-9	408-418	codecov.io	_	_
6-10	418-419	/	_	_
6-11	419-421	gh	_	_
6-12	421-422	/	_	_
6-13	422-436	pfnet-research	_	_
6-14	436-437	/	_	_
6-15	437-444	pfhedge	_	_
6-16	444-445	/	_	_
6-17	445-451	branch	_	_
6-18	451-452	/	_	_
6-19	452-456	main	_	_
6-20	456-457	/	_	_
6-21	457-462	graph	_	_
6-22	462-463	/	_	_
6-23	463-472	badge.svg	_	_
6-24	472-473	?	_	_

#Text=token=GpXV1ldVCN)\](https://codecov.io/gh/pfnet-research/pfhedge) \[!
7-1	473-478	token	_	_
7-2	478-479	=	_	_
7-3	479-489	GpXV1ldVCN	_	_
7-4	489-490	)	_	_
7-5	490-491	\]	_	_
7-6	491-492	(	_	_
7-7	492-497	https	_	_
7-8	497-498	:	_	_
7-9	498-499	/	_	_
7-10	499-500	/	_	_
7-11	500-510	codecov.io	_	_
7-11	500-507	codecov	_	_
7-12	510-511	/	_	_
7-13	511-513	gh	_	_
7-14	513-514	/	_	_
7-15	514-528	pfnet-research	_	_
7-16	528-529	/	_	_
7-17	529-536	pfhedge	_	_
7-18	536-537	)	_	_
7-19	538-539	\[	_	_
7-20	539-540	!	_	_

#Text=\[downloads\](https://img.shields.io/pypi/dm/pfhedge)\](https://pypi.org/project/pfhedge) \[!
8-1	540-541	\[	_	_
8-2	541-550	downloads	_	_
8-3	550-551	\]	_	_
8-4	551-552	(	_	_
8-5	552-557	https	_	_
8-6	557-558	:	_	_
8-7	558-559	/	_	_
8-8	559-560	/	_	_
8-9	560-574	img.shields.io	_	_
8-10	574-575	/	_	_
8-11	575-579	pypi	_	_
8-12	579-580	/	_	_
8-13	580-582	dm	_	_
8-14	582-583	/	_	_
8-15	583-590	pfhedge	_	_
8-16	590-591	)	_	_
8-17	591-592	\]	_	_
8-18	592-593	(	_	_
8-19	593-598	https	_	_
8-20	598-599	:	_	_
8-21	599-600	/	_	_
8-22	600-601	/	_	_
8-23	601-609	pypi.org	_	_
8-24	609-610	/	_	_
8-25	610-617	project	_	_
8-26	617-618	/	_	_
8-27	618-625	pfhedge	_	_
8-28	625-626	)	_	_
8-29	627-628	\[	_	_
8-30	628-629	!	_	_

#Text=\[code style: black\](https://img.shields.io/badge/code%20style-black-000000.svg)\](https://github.com/psf/black) !
9-1	629-630	\[	_	_
9-2	630-634	code	_	_
9-3	635-640	style	_	_
9-4	640-641	:	_	_
9-5	642-647	black	_	_
9-6	647-648	\]	_	_
9-7	648-649	(	_	_
9-8	649-654	https	_	_
9-9	654-655	:	_	_
9-10	655-656	/	_	_
9-11	656-657	/	_	_
9-12	657-671	img.shields.io	_	_
9-13	671-672	/	_	_
9-14	672-677	badge	_	_
9-15	677-678	/	_	_
9-16	678-682	code	_	_
9-17	682-683	%	_	_
9-18	683-696	20style-black	_	_
9-19	696-697	-	_	_
9-20	697-703	000000	_	_
9-21	703-704	.	_	_
9-22	704-707	svg	_	_
9-23	707-708	)	_	_
9-24	708-709	\]	_	_
9-25	709-710	(	_	_
9-26	710-715	https	_	_
9-27	715-716	:	_	_
9-28	716-717	/	_	_
9-29	717-718	/	_	_
9-30	718-728	github.com	_	_
9-31	728-729	/	_	_
9-32	729-732	psf	_	_
9-33	732-733	/	_	_
9-34	733-738	black	_	_
9-35	738-739	)	_	_
9-36	740-741	!	_	_

#Text=\[pytorch\](https://img.shields.io/badge/torch-1.9.0--%20%7C%202.0.0---red)  \*\*PFHedge\*\* is a \[PyTorch\](https://pytorch.org/)-based framework for \[Deep Hedging\]\[deep-hedging-arxiv\]
10-1	741-742	\[	_	_
10-2	742-749	pytorch	_	_
10-3	749-750	\]	_	_
10-4	750-751	(	_	_
10-5	751-756	https	_	_
10-6	756-757	:	_	_
10-7	757-758	/	_	_
10-8	758-759	/	_	_
10-9	759-773	img.shields.io	_	_
10-10	773-774	/	_	_
10-11	774-779	badge	_	_
10-12	779-780	/	_	_
10-13	780-785	torch	_	_
10-14	785-786	-	_	_
10-15	786-791	1.9.0	_	_
10-16	791-792	-	_	_
10-17	792-793	-	_	_
10-18	793-794	%	_	_
10-19	794-797	20%	_	_
10-20	797-799	7C	_	_
10-21	799-800	%	_	_
10-22	800-807	202.0.0	_	_
10-23	807-808	-	_	_
10-24	808-809	-	_	_
10-25	809-810	-	_	_
10-26	810-813	red	_	_
10-27	813-814	)	_	_
10-28	816-817	\*	_	_
10-29	817-818	\*	_	_
10-30	818-825	PFHedge	_	_
10-31	825-826	\*	_	_
10-32	826-827	\*	_	_
10-33	828-830	is	_	_
10-34	831-832	a	_	_
10-35	833-834	\[	_	_
10-36	834-841	PyTorch	_	_
10-37	841-842	\]	_	_
10-38	842-843	(	_	_
10-39	843-848	https	_	_
10-40	848-849	:	_	_
10-41	849-850	/	_	_
10-42	850-851	/	_	_
10-43	851-862	pytorch.org	_	_
10-43	851-858	pytorch	_	_
10-44	862-863	/	_	_
10-45	863-864	)	_	_
10-46	864-865	-	_	_
10-47	865-870	based	_	_
10-48	871-880	framework	_	_
10-49	881-884	for	_	_
10-50	885-886	\[	_	_
10-51	886-890	Deep	_	_
10-52	891-898	Hedging	_	_
10-53	898-899	\]	_	_
10-54	899-900	\[	_	_
10-55	900-918	deep-hedging-arxiv	_	_
10-56	918-919	\]	_	_

#Text=.
11-1	919-920	.	_	_

#Text=\* \[PFHedge Documentation\](https://pfnet-research.github.io/pfhedge/) \* \[Neural Network Architecture for Efficient Deep Hedging\](https://tech.preferred.jp/en/blog/neural-network-architecture-for-efficient-deep-hedging/) (\[Japanese version\](https://tech.preferred.jp/ja/blog/deep-hedging/))  ## What is Deep Hedging?
12-1	922-923	\*	_	_
12-2	924-925	\[	_	_
12-3	925-932	PFHedge	_	_
12-4	933-946	Documentation	_	_
12-5	946-947	\]	_	_
12-6	947-948	(	_	_
12-7	948-953	https	_	_
12-8	953-954	:	_	_
12-9	954-955	/	_	_
12-10	955-956	/	_	_
12-11	956-980	pfnet-research.github.io	_	_
12-12	980-981	/	_	_
12-13	981-988	pfhedge	_	_
12-14	988-989	/	_	_
12-15	989-990	)	_	_
12-16	991-992	\*	_	_
12-17	993-994	\[	_	_
12-18	994-1000	Neural	_	_
12-19	1001-1008	Network	_	_
12-20	1009-1021	Architecture	_	_
12-21	1022-1025	for	_	_
12-22	1026-1035	Efficient	_	_
12-23	1036-1040	Deep	_	_
12-24	1041-1048	Hedging	_	_
12-25	1048-1049	\]	_	_
12-26	1049-1050	(	_	_
12-27	1050-1055	https	_	_
12-28	1055-1056	:	_	_
12-29	1056-1057	/	_	_
12-30	1057-1058	/	_	_
12-31	1058-1075	tech.preferred.jp	_	_
12-32	1075-1076	/	_	_
12-33	1076-1078	en	_	_
12-34	1078-1079	/	_	_
12-35	1079-1083	blog	_	_
12-36	1083-1084	/	_	_
12-37	1084-1138	neural-network-architecture-for-efficient-deep-hedging	_	_
12-38	1138-1139	/	_	_
12-39	1139-1140	)	_	_
12-40	1141-1142	(	_	_
12-41	1142-1143	\[	_	_
12-42	1143-1151	Japanese	_	_
12-43	1152-1159	version	_	_
12-44	1159-1160	\]	_	_
12-45	1160-1161	(	_	_
12-46	1161-1166	https	_	_
12-47	1166-1167	:	_	_
12-48	1167-1168	/	_	_
12-49	1168-1169	/	_	_
12-50	1169-1186	tech.preferred.jp	_	_
12-51	1186-1187	/	_	_
12-52	1187-1189	ja	_	_
12-53	1189-1190	/	_	_
12-54	1190-1194	blog	_	_
12-55	1194-1195	/	_	_
12-56	1195-1207	deep-hedging	_	_
12-57	1207-1208	/	_	_
12-58	1208-1209	)	_	_
12-59	1209-1210	)	_	_
12-60	1212-1213	#	_	_
12-61	1213-1214	#	_	_
12-62	1215-1219	What	_	_
12-63	1220-1222	is	_	_
12-64	1223-1227	Deep	_	_
12-65	1228-1235	Hedging	_	_
12-66	1235-1236	?	_	_

#Text=\[\*\*Deep Hedging\*\*\]\[deep-hedging-arxiv\] is a deep learning-based framework to hedge financial derivatives.
13-1	1238-1239	\[	_	_
13-2	1239-1240	\*	_	_
13-3	1240-1241	\*	_	_
13-4	1241-1245	Deep	_	_
13-5	1246-1253	Hedging	_	_
13-6	1253-1254	\*	_	_
13-7	1254-1255	\*	_	_
13-8	1255-1256	\]	_	_
13-9	1256-1257	\[	_	_
13-10	1257-1275	deep-hedging-arxiv	_	_
13-11	1275-1276	\]	_	_
13-12	1277-1279	is	_	_
13-13	1280-1281	a	_	_
13-14	1282-1286	deep	_	_
13-15	1287-1301	learning-based	_	_
13-16	1302-1311	framework	_	_
13-17	1312-1314	to	_	_
13-18	1315-1320	hedge	_	_
13-19	1321-1330	financial	_	_
13-20	1331-1342	derivatives	_	_
13-21	1342-1343	.	_	_

#Text=Hedging \[financial derivatives\](https://en.wikipedia.org/wiki/Derivative\_(finance)) in the presence of market frictions (e.g., transaction cost) is a challenging task.
14-1	1345-1352	Hedging	_	_
14-2	1353-1354	\[	_	_
14-3	1354-1363	financial	_	_
14-4	1364-1375	derivatives	_	_
14-5	1375-1376	\]	_	_
14-6	1376-1377	(	_	_
14-7	1377-1382	https	_	_
14-8	1382-1383	:	_	_
14-9	1383-1384	/	_	_
14-10	1384-1385	/	_	_
14-11	1385-1401	en.wikipedia.org	_	_
14-12	1401-1402	/	_	_
14-13	1402-1406	wiki	_	_
14-14	1406-1407	/	_	_
14-15	1407-1417	Derivative	_	_
14-16	1417-1418	\_	_	_
14-17	1418-1419	(	_	_
14-18	1419-1426	finance	_	_
14-19	1426-1427	)	_	_
14-20	1427-1428	)	_	_
14-21	1429-1431	in	_	_
14-22	1432-1435	the	_	_
14-23	1436-1444	presence	_	_
14-24	1445-1447	of	_	_
14-25	1448-1454	market	_	_
14-26	1455-1464	frictions	_	_
14-27	1465-1466	(	_	_
14-28	1466-1469	e.g	_	_
14-29	1469-1470	.	_	_
14-30	1470-1471	,	_	_
14-31	1472-1483	transaction	_	_
14-32	1484-1488	cost	_	_
14-33	1488-1489	)	_	_
14-34	1490-1492	is	_	_
14-35	1493-1494	a	_	_
14-36	1495-1506	challenging	_	_
14-37	1507-1511	task	_	_
14-38	1511-1512	.	_	_

#Text=In the absence of market frictions, the perfect hedge is accessible based on the \[Black-Scholes model\](https://en.wikipedia.org/wiki/Black%E2%80%93Scholes\_model).
15-1	1513-1515	In	_	_
15-2	1516-1519	the	_	_
15-3	1520-1527	absence	_	_
15-4	1528-1530	of	_	_
15-5	1531-1537	market	_	_
15-6	1538-1547	frictions	_	_
15-7	1547-1548	,	_	_
15-8	1549-1552	the	_	_
15-9	1553-1560	perfect	_	_
15-10	1561-1566	hedge	_	_
15-11	1567-1569	is	_	_
15-12	1570-1580	accessible	_	_
15-13	1581-1586	based	_	_
15-14	1587-1589	on	_	_
15-15	1590-1593	the	_	_
15-16	1594-1595	\[	_	_
15-17	1595-1608	Black-Scholes	_	_
15-18	1609-1614	model	_	_
15-19	1614-1615	\]	_	_
15-20	1615-1616	(	_	_
15-21	1616-1621	https	_	_
15-22	1621-1622	:	_	_
15-23	1622-1623	/	_	_
15-24	1623-1624	/	_	_
15-25	1624-1640	en.wikipedia.org	_	_
15-26	1640-1641	/	_	_
15-27	1641-1645	wiki	_	_
15-28	1645-1646	/	_	_
15-29	1646-1651	Black	_	_
15-30	1651-1652	%	_	_
15-31	1652-1655	E2%	_	_
15-32	1655-1658	80%	_	_
15-33	1658-1673	93Scholes\_model	_	_
15-34	1673-1674	)	_	_
15-35	1674-1675	.	_	_

#Text=The real market, in contrast, always involves frictions and thereby makes hedging optimization much more challenging.
16-1	1676-1679	The	_	_
16-2	1680-1684	real	_	_
16-3	1685-1691	market	_	_
16-4	1691-1692	,	_	_
16-5	1693-1695	in	_	_
16-6	1696-1704	contrast	_	_
16-7	1704-1705	,	_	_
16-8	1706-1712	always	_	_
16-9	1713-1721	involves	_	_
16-10	1722-1731	frictions	_	_
16-11	1732-1735	and	_	_
16-12	1736-1743	thereby	_	_
16-13	1744-1749	makes	_	_
16-14	1750-1757	hedging	_	_
16-15	1758-1770	optimization	_	_
16-16	1771-1775	much	_	_
16-17	1776-1780	more	_	_
16-18	1781-1792	challenging	_	_
16-19	1792-1793	.	_	_

#Text=Since the analytic formulas (such as the \[Black-Scholes formula\](https://en.wikipedia.org/wiki/Black%E2%80%93Scholes\_model#Black%E2%80%93Scholes\_formula)) are no longer available in such a market, it may be necessary to adjust model-based Greeks to hedge and price derivatives based on experiences.
17-1	1794-1799	Since	_	_
17-2	1800-1803	the	_	_
17-3	1804-1812	analytic	_	_
17-4	1813-1821	formulas	_	_
17-5	1822-1823	(	_	_
17-6	1823-1827	such	_	_
17-7	1828-1830	as	_	_
17-8	1831-1834	the	_	_
17-9	1835-1836	\[	_	_
17-10	1836-1849	Black-Scholes	_	_
17-11	1850-1857	formula	_	_
17-12	1857-1858	\]	_	_
17-13	1858-1859	(	_	_
17-14	1859-1864	https	_	_
17-15	1864-1865	:	_	_
17-16	1865-1866	/	_	_
17-17	1866-1867	/	_	_
17-18	1867-1883	en.wikipedia.org	_	_
17-19	1883-1884	/	_	_
17-20	1884-1888	wiki	_	_
17-21	1888-1889	/	_	_
17-22	1889-1894	Black	_	_
17-23	1894-1895	%	_	_
17-24	1895-1898	E2%	_	_
17-25	1898-1901	80%	_	_
17-26	1901-1916	93Scholes\_model	_	_
17-27	1916-1917	#	_	_
17-28	1917-1922	Black	_	_
17-29	1922-1923	%	_	_
17-30	1923-1926	E2%	_	_
17-31	1926-1929	80%	_	_
17-32	1929-1946	93Scholes\_formula	_	_
17-33	1946-1947	)	_	_
17-34	1947-1948	)	_	_
17-35	1949-1952	are	_	_
17-36	1953-1955	no	_	_
17-37	1956-1962	longer	_	_
17-38	1963-1972	available	_	_
17-39	1973-1975	in	_	_
17-40	1976-1980	such	_	_
17-41	1981-1982	a	_	_
17-42	1983-1989	market	_	_
17-43	1989-1990	,	_	_
17-44	1991-1993	it	_	_
17-45	1994-1997	may	_	_
17-46	1998-2000	be	_	_
17-47	2001-2010	necessary	_	_
17-48	2011-2013	to	_	_
17-49	2014-2020	adjust	_	_
17-50	2021-2032	model-based	_	_
17-51	2033-2039	Greeks	_	_
17-52	2040-2042	to	_	_
17-53	2043-2048	hedge	_	_
17-54	2049-2052	and	_	_
17-55	2053-2058	price	_	_
17-56	2059-2070	derivatives	_	_
17-57	2071-2076	based	_	_
17-58	2077-2079	on	_	_
17-59	2080-2091	experiences	_	_
17-60	2091-2092	.	_	_

#Text=\[Deep Hedging\]\[deep-hedging-arxiv\] is a ground-breaking framework to optimize such hedging operations.
18-1	2094-2095	\[	_	_
18-2	2095-2099	Deep	_	_
18-3	2100-2107	Hedging	_	_
18-4	2107-2108	\]	_	_
18-5	2108-2109	\[	_	_
18-6	2109-2127	deep-hedging-arxiv	_	_
18-7	2127-2128	\]	_	_
18-8	2129-2131	is	_	_
18-9	2132-2133	a	_	_
18-10	2134-2149	ground-breaking	_	_
18-11	2150-2159	framework	_	_
18-12	2160-2162	to	_	_
18-13	2163-2171	optimize	_	_
18-14	2172-2176	such	_	_
18-15	2177-2184	hedging	_	_
18-16	2185-2195	operations	_	_
18-17	2195-2196	.	_	_

#Text=In this framework, a neural network is trained to hedge derivatives so that it minimizes a proper \[risk measure\](https://en.wikipedia.org/wiki/Risk\_measure).
19-1	2197-2199	In	_	_
19-2	2200-2204	this	_	_
19-3	2205-2214	framework	_	_
19-4	2214-2215	,	_	_
19-5	2216-2217	a	_	_
19-6	2218-2224	neural	_	_
19-7	2225-2232	network	_	_
19-8	2233-2235	is	_	_
19-9	2236-2243	trained	_	_
19-10	2244-2246	to	_	_
19-11	2247-2252	hedge	_	_
19-12	2253-2264	derivatives	_	_
19-13	2265-2267	so	_	_
19-14	2268-2272	that	_	_
19-15	2273-2275	it	_	_
19-16	2276-2285	minimizes	_	_
19-17	2286-2287	a	_	_
19-18	2288-2294	proper	_	_
19-19	2295-2296	\[	_	_
19-20	2296-2300	risk	_	_
19-21	2301-2308	measure	_	_
19-22	2308-2309	\]	_	_
19-23	2309-2310	(	_	_
19-24	2310-2315	https	_	_
19-25	2315-2316	:	_	_
19-26	2316-2317	/	_	_
19-27	2317-2318	/	_	_
19-28	2318-2334	en.wikipedia.org	_	_
19-29	2334-2335	/	_	_
19-30	2335-2339	wiki	_	_
19-31	2339-2340	/	_	_
19-32	2340-2352	Risk\_measure	_	_
19-33	2352-2353	)	_	_
19-34	2353-2354	.	_	_

#Text=By virtue of the high representability of a neural network and modern optimization algorithms, one can expect to achieve the optimal hedge by training a neural network.
20-1	2355-2357	By	_	_
20-2	2358-2364	virtue	_	_
20-3	2365-2367	of	_	_
20-4	2368-2371	the	_	_
20-5	2372-2376	high	_	_
20-6	2377-2393	representability	_	_
20-7	2394-2396	of	_	_
20-8	2397-2398	a	_	_
20-9	2399-2405	neural	_	_
20-10	2406-2413	network	_	_
20-11	2414-2417	and	_	_
20-12	2418-2424	modern	_	_
20-13	2425-2437	optimization	_	_
20-14	2438-2448	algorithms	_	_
20-15	2448-2449	,	_	_
20-16	2450-2453	one	_	_
20-17	2454-2457	can	_	_
20-18	2458-2464	expect	_	_
20-19	2465-2467	to	_	_
20-20	2468-2475	achieve	_	_
20-21	2476-2479	the	_	_
20-22	2480-2487	optimal	_	_
20-23	2488-2493	hedge	_	_
20-24	2494-2496	by	_	_
20-25	2497-2505	training	_	_
20-26	2506-2507	a	_	_
20-27	2508-2514	neural	_	_
20-28	2515-2522	network	_	_
20-29	2522-2523	.	_	_

#Text=Indeed, the experiments in \[Bühler \*et al.\* 18\]\[deep-hedging-qf\] and \[Imaki \*et al.\* 21\]\[ntb-network-arxiv\] show high feasibility and scalability of Deep Hedging algorithms for options under transaction costs.
21-1	2524-2530	Indeed	_	_
21-2	2530-2531	,	_	_
21-3	2532-2535	the	_	_
21-4	2536-2547	experiments	_	_
21-5	2548-2550	in	_	_
21-6	2551-2552	\[	_	_
21-7	2552-2558	Bühler	_	_
21-8	2559-2560	\*	_	_
21-9	2560-2562	et	_	_
21-10	2563-2565	al	_	_
21-11	2565-2566	.	_	_
21-12	2566-2567	\*	_	_
21-13	2568-2570	18	_	_
21-14	2570-2571	\]	_	_
21-15	2571-2572	\[	_	_
21-16	2572-2587	deep-hedging-qf	_	_
21-17	2587-2588	\]	_	_
21-18	2589-2592	and	_	_
21-19	2593-2594	\[	_	_
21-20	2594-2599	Imaki	_	_
21-21	2600-2601	\*	_	_
21-22	2601-2603	et	_	_
21-23	2604-2606	al	_	_
21-24	2606-2607	.	_	_
21-25	2607-2608	\*	_	_
21-26	2609-2611	21	_	_
21-27	2611-2612	\]	_	_
21-28	2612-2613	\[	_	_
21-29	2613-2630	ntb-network-arxiv	_	_
21-30	2630-2631	\]	_	_
21-31	2632-2636	show	_	_
21-32	2637-2641	high	_	_
21-33	2642-2653	feasibility	_	_
21-34	2654-2657	and	_	_
21-35	2658-2669	scalability	_	_
21-36	2670-2672	of	_	_
21-37	2673-2677	Deep	_	_
21-38	2678-2685	Hedging	_	_
21-39	2686-2696	algorithms	_	_
21-40	2697-2700	for	_	_
21-41	2701-2708	options	_	_
21-42	2709-2714	under	_	_
21-43	2715-2726	transaction	_	_
21-44	2727-2732	costs	_	_
21-45	2732-2733	.	_	_

#Text=Global investment banks are looking to \[rethink the Greeks-based hedging\](https://www.risk.net/derivatives/6875321/deep-hedging-and-the-end-of-the-black-scholes-era) with Deep Hedging and \[slash considerable amount of hedging costs\](https://www.risk.net/derivatives/6691696/jp-morgan-turns-to-machine-learning-for-options-hedging).
22-1	2735-2741	Global	_	_
22-2	2742-2752	investment	_	_
22-3	2753-2758	banks	_	_
22-4	2759-2762	are	_	_
22-5	2763-2770	looking	_	_
22-6	2771-2773	to	_	_
22-7	2774-2775	\[	_	_
22-8	2775-2782	rethink	_	_
22-9	2783-2786	the	_	_
22-10	2787-2799	Greeks-based	_	_
22-11	2800-2807	hedging	_	_
22-12	2807-2808	\]	_	_
22-13	2808-2809	(	_	_
22-14	2809-2814	https	_	_
22-15	2814-2815	:	_	_
22-16	2815-2816	/	_	_
22-17	2816-2817	/	_	_
22-18	2817-2829	www.risk.net	_	_
22-19	2829-2830	/	_	_
22-20	2830-2841	derivatives	_	_
22-21	2841-2842	/	_	_
22-22	2842-2849	6875321	_	_
22-23	2849-2850	/	_	_
22-24	2850-2899	deep-hedging-and-the-end-of-the-black-scholes-era	_	_
22-25	2899-2900	)	_	_
22-26	2901-2905	with	_	_
22-27	2906-2910	Deep	_	_
22-28	2911-2918	Hedging	_	_
22-29	2919-2922	and	_	_
22-30	2923-2924	\[	_	_
22-31	2924-2929	slash	_	_
22-32	2930-2942	considerable	_	_
22-33	2943-2949	amount	_	_
22-34	2950-2952	of	_	_
22-35	2953-2960	hedging	_	_
22-36	2961-2966	costs	_	_
22-37	2966-2967	\]	_	_
22-38	2967-2968	(	_	_
22-39	2968-2973	https	_	_
22-40	2973-2974	:	_	_
22-41	2974-2975	/	_	_
22-42	2975-2976	/	_	_
22-43	2976-2988	www.risk.net	_	_
22-44	2988-2989	/	_	_
22-45	2989-3000	derivatives	_	_
22-46	3000-3001	/	_	_
22-47	3001-3008	6691696	_	_
22-48	3008-3009	/	_	_
22-49	3009-3064	jp-morgan-turns-to-machine-learning-for-options-hedging	_	_
22-50	3064-3065	)	_	_
22-51	3065-3066	.	_	_

#Text=This could be the "game-changer" in the trillion-dollar industry of derivatives.
23-1	3067-3071	This	_	_
23-2	3072-3077	could	_	_
23-3	3078-3080	be	_	_
23-4	3081-3084	the	_	_
23-5	3085-3086	"	_	_
23-6	3086-3098	game-changer	_	_
23-7	3098-3099	"	_	_
23-8	3100-3102	in	_	_
23-9	3103-3106	the	_	_
23-10	3107-3122	trillion-dollar	_	_
23-11	3123-3131	industry	_	_
23-12	3132-3134	of	_	_
23-13	3135-3146	derivatives	_	_
23-14	3146-3147	.	_	_

#Text=PFHedge enables you to experience this revolutionary framework on your own.
24-1	3149-3156	PFHedge	_	_
24-2	3157-3164	enables	_	_
24-3	3165-3168	you	_	_
24-4	3169-3171	to	_	_
24-5	3172-3182	experience	_	_
24-6	3183-3187	this	_	_
24-7	3188-3201	revolutionary	_	_
24-8	3202-3211	framework	_	_
24-9	3212-3214	on	_	_
24-10	3215-3219	your	_	_
24-11	3220-3223	own	_	_
24-12	3223-3224	.	_	_

#Text=You can try, tweak, and delve into Deep Hedging algorithms using PyTorch.
25-1	3225-3228	You	_	_
25-2	3229-3232	can	_	_
25-3	3233-3236	try	_	_
25-4	3236-3237	,	_	_
25-5	3238-3243	tweak	_	_
25-6	3243-3244	,	_	_
25-7	3245-3248	and	_	_
25-8	3249-3254	delve	_	_
25-9	3255-3259	into	_	_
25-10	3260-3264	Deep	_	_
25-11	3265-3272	Hedging	_	_
25-12	3273-3283	algorithms	_	_
25-13	3284-3289	using	_	_
25-14	3290-3297	PyTorch	_	_
25-15	3297-3298	.	_	_

#Text=We hope PFHedge accelerates the research and development of Deep Hedging.  ## Features  ### Imperative Experiences  \* PFHedge is designed to be intuitive and imperative to streamline your research on Deep Hedging. \* You can quickly build a `Hedger` and then `fit` and `price` derivatives right away. \* You can easily tweak your model, risk measure, derivative, optimizer, and other setups on the fly.  ### Seamless Integration with \[PyTorch\](https://pytorch.org/)  \* PFHedge is built to be deeply integrated into \[PyTorch\](https://pytorch.org/). \* Your Deep-Hedger can be built as a \[`Module`\](https://pytorch.org/docs/stable/generated/torch.nn.Module.html) and trained by any \[`Optimizer`\](https://pytorch.org/docs/stable/optim.html). \* You can use GPUs to boost your hedging optimization (See below).  ### Effortless Extensions  \* You can build new hedging models, derivatives, and features with little glue code. \* You can build new hedging models by just subclassing \[`Module`\](https://pytorch.org/docs/stable/generated/torch.nn.Module.html). \* You can quickly try out your own stochastic processes, derivatives, and input features.  ### Batteries Included  \* PFHedge provides useful \[`Module`\](https://pytorch.org/docs/stable/generated/torch.nn.Module.html)s for Deep Hedging in \[`pfhedge.nn`\](https://pfnet-research.github.io/pfhedge/nn.html). \* You can create \[Black-Scholes' delta-hedging\](https://en.wikipedia.org/wiki/Delta\_neutral), \[Whalley-Wilmott's strategy\]\[whalley-wilmott\], and so forth. \* Common risk measures such as \[an entropic risk measure\](https://en.wikipedia.org/wiki/Entropic\_risk\_measure) and \[an expected shortfall\](https://en.wikipedia.org/wiki/Expected\_shortfall) are available.  ## Install  ```sh pip install pfhedge ```  ## How to Use  \[!
26-1	3299-3301	We	_	_
26-2	3302-3306	hope	_	_
26-3	3307-3314	PFHedge	_	_
26-4	3315-3326	accelerates	_	_
26-5	3327-3330	the	_	_
26-6	3331-3339	research	_	_
26-7	3340-3343	and	_	_
26-8	3344-3355	development	_	_
26-9	3356-3358	of	_	_
26-10	3359-3363	Deep	_	_
26-11	3364-3371	Hedging	_	_
26-12	3371-3372	.	_	_
26-13	3374-3375	#	_	_
26-14	3375-3376	#	_	_
26-15	3377-3385	Features	_	_
26-16	3387-3388	#	_	_
26-17	3388-3389	#	_	_
26-18	3389-3390	#	_	_
26-19	3391-3401	Imperative	_	_
26-20	3402-3413	Experiences	_	_
26-21	3415-3416	\*	_	_
26-22	3417-3424	PFHedge	_	_
26-23	3425-3427	is	_	_
26-24	3428-3436	designed	_	_
26-25	3437-3439	to	_	_
26-26	3440-3442	be	_	_
26-27	3443-3452	intuitive	_	_
26-28	3453-3456	and	_	_
26-29	3457-3467	imperative	_	_
26-30	3468-3470	to	_	_
26-31	3471-3481	streamline	_	_
26-32	3482-3486	your	_	_
26-33	3487-3495	research	_	_
26-34	3496-3498	on	_	_
26-35	3499-3503	Deep	_	_
26-36	3504-3511	Hedging	_	_
26-37	3511-3512	.	_	_
26-38	3513-3514	\*	_	_
26-39	3515-3518	You	_	_
26-40	3519-3522	can	_	_
26-41	3523-3530	quickly	_	_
26-42	3531-3536	build	_	_
26-43	3537-3538	a	_	_
26-44	3539-3540	`	_	_
26-45	3540-3546	Hedger	_	_
26-46	3546-3547	`	_	_
26-47	3548-3551	and	_	_
26-48	3552-3556	then	_	_
26-49	3557-3558	`	_	_
26-50	3558-3561	fit	_	_
26-51	3561-3562	`	_	_
26-52	3563-3566	and	_	_
26-53	3567-3568	`	_	_
26-54	3568-3573	price	_	_
26-55	3573-3574	`	_	_
26-56	3575-3586	derivatives	_	_
26-57	3587-3592	right	_	_
26-58	3593-3597	away	_	_
26-59	3597-3598	.	_	_
26-60	3599-3600	\*	_	_
26-61	3601-3604	You	_	_
26-62	3605-3608	can	_	_
26-63	3609-3615	easily	_	_
26-64	3616-3621	tweak	_	_
26-65	3622-3626	your	_	_
26-66	3627-3632	model	_	_
26-67	3632-3633	,	_	_
26-68	3634-3638	risk	_	_
26-69	3639-3646	measure	_	_
26-70	3646-3647	,	_	_
26-71	3648-3658	derivative	_	_
26-72	3658-3659	,	_	_
26-73	3660-3669	optimizer	_	_
26-74	3669-3670	,	_	_
26-75	3671-3674	and	_	_
26-76	3675-3680	other	_	_
26-77	3681-3687	setups	_	_
26-78	3688-3690	on	_	_
26-79	3691-3694	the	_	_
26-80	3695-3698	fly	_	_
26-81	3698-3699	.	_	_
26-82	3701-3702	#	_	_
26-83	3702-3703	#	_	_
26-84	3703-3704	#	_	_
26-85	3705-3713	Seamless	_	_
26-86	3714-3725	Integration	_	_
26-87	3726-3730	with	_	_
26-88	3731-3732	\[	_	_
26-89	3732-3739	PyTorch	_	_
26-90	3739-3740	\]	_	_
26-91	3740-3741	(	_	_
26-92	3741-3746	https	_	_
26-93	3746-3747	:	_	_
26-94	3747-3748	/	_	_
26-95	3748-3749	/	_	_
26-96	3749-3760	pytorch.org	_	_
26-96	3749-3756	pytorch	_	_
26-97	3760-3761	/	_	_
26-98	3761-3762	)	_	_
26-99	3764-3765	\*	_	_
26-100	3766-3773	PFHedge	_	_
26-101	3774-3776	is	_	_
26-102	3777-3782	built	_	_
26-103	3783-3785	to	_	_
26-104	3786-3788	be	_	_
26-105	3789-3795	deeply	_	_
26-106	3796-3806	integrated	_	_
26-107	3807-3811	into	_	_
26-108	3812-3813	\[	_	_
26-109	3813-3820	PyTorch	_	_
26-110	3820-3821	\]	_	_
26-111	3821-3822	(	_	_
26-112	3822-3827	https	_	_
26-113	3827-3828	:	_	_
26-114	3828-3829	/	_	_
26-115	3829-3830	/	_	_
26-116	3830-3841	pytorch.org	_	_
26-116	3830-3837	pytorch	_	_
26-117	3841-3842	/	_	_
26-118	3842-3843	)	_	_
26-119	3843-3844	.	_	_
26-120	3845-3846	\*	_	_
26-121	3847-3851	Your	_	_
26-122	3852-3863	Deep-Hedger	_	_
26-123	3864-3867	can	_	_
26-124	3868-3870	be	_	_
26-125	3871-3876	built	_	_
26-126	3877-3879	as	_	_
26-127	3880-3881	a	_	_
26-128	3882-3883	\[	_	_
26-129	3883-3884	`	_	_
26-130	3884-3890	Module	_	_
26-131	3890-3891	`	_	_
26-132	3891-3892	\]	_	_
26-133	3892-3893	(	_	_
26-134	3893-3898	https	_	_
26-135	3898-3899	:	_	_
26-136	3899-3900	/	_	_
26-137	3900-3901	/	_	_
26-138	3901-3912	pytorch.org	_	_
26-138	3901-3908	pytorch	_	_
26-139	3912-3913	/	_	_
26-140	3913-3917	docs	_	_
26-141	3917-3918	/	_	_
26-142	3918-3924	stable	_	_
26-143	3924-3925	/	_	_
26-144	3925-3934	generated	_	_
26-145	3934-3935	/	_	_
26-146	3935-3955	torch.nn.Module.html	_	_
26-146	3935-3940	torch	_	_
26-147	3955-3956	)	_	_
26-148	3957-3960	and	_	_
26-149	3961-3968	trained	_	_
26-150	3969-3971	by	_	_
26-151	3972-3975	any	_	_
26-152	3976-3977	\[	_	_
26-153	3977-3978	`	_	_
26-154	3978-3987	Optimizer	_	_
26-155	3987-3988	`	_	_
26-156	3988-3989	\]	_	_
26-157	3989-3990	(	_	_
26-158	3990-3995	https	_	_
26-159	3995-3996	:	_	_
26-160	3996-3997	/	_	_
26-161	3997-3998	/	_	_
26-162	3998-4009	pytorch.org	_	_
26-162	3998-4005	pytorch	_	_
26-163	4009-4010	/	_	_
26-164	4010-4014	docs	_	_
26-165	4014-4015	/	_	_
26-166	4015-4021	stable	_	_
26-167	4021-4022	/	_	_
26-168	4022-4032	optim.html	_	_
26-169	4032-4033	)	_	_
26-170	4033-4034	.	_	_
26-171	4035-4036	\*	_	_
26-172	4037-4040	You	_	_
26-173	4041-4044	can	_	_
26-174	4045-4048	use	_	_
26-175	4049-4053	GPUs	_	_
26-176	4054-4056	to	_	_
26-177	4057-4062	boost	_	_
26-178	4063-4067	your	_	_
26-179	4068-4075	hedging	_	_
26-180	4076-4088	optimization	_	_
26-181	4089-4090	(	_	_
26-182	4090-4093	See	_	_
26-183	4094-4099	below	_	_
26-184	4099-4100	)	_	_
26-185	4100-4101	.	_	_
26-186	4103-4104	#	_	_
26-187	4104-4105	#	_	_
26-188	4105-4106	#	_	_
26-189	4107-4117	Effortless	_	_
26-190	4118-4128	Extensions	_	_
26-191	4130-4131	\*	_	_
26-192	4132-4135	You	_	_
26-193	4136-4139	can	_	_
26-194	4140-4145	build	_	_
26-195	4146-4149	new	_	_
26-196	4150-4157	hedging	_	_
26-197	4158-4164	models	_	_
26-198	4164-4165	,	_	_
26-199	4166-4177	derivatives	_	_
26-200	4177-4178	,	_	_
26-201	4179-4182	and	_	_
26-202	4183-4191	features	_	_
26-203	4192-4196	with	_	_
26-204	4197-4203	little	_	_
26-205	4204-4208	glue	_	_
26-206	4209-4213	code	_	_
26-207	4213-4214	.	_	_
26-208	4215-4216	\*	_	_
26-209	4217-4220	You	_	_
26-210	4221-4224	can	_	_
26-211	4225-4230	build	_	_
26-212	4231-4234	new	_	_
26-213	4235-4242	hedging	_	_
26-214	4243-4249	models	_	_
26-215	4250-4252	by	_	_
26-216	4253-4257	just	_	_
26-217	4258-4269	subclassing	_	_
26-218	4270-4271	\[	_	_
26-219	4271-4272	`	_	_
26-220	4272-4278	Module	_	_
26-221	4278-4279	`	_	_
26-222	4279-4280	\]	_	_
26-223	4280-4281	(	_	_
26-224	4281-4286	https	_	_
26-225	4286-4287	:	_	_
26-226	4287-4288	/	_	_
26-227	4288-4289	/	_	_
26-228	4289-4300	pytorch.org	_	_
26-228	4289-4296	pytorch	_	_
26-229	4300-4301	/	_	_
26-230	4301-4305	docs	_	_
26-231	4305-4306	/	_	_
26-232	4306-4312	stable	_	_
26-233	4312-4313	/	_	_
26-234	4313-4322	generated	_	_
26-235	4322-4323	/	_	_
26-236	4323-4343	torch.nn.Module.html	_	_
26-236	4323-4328	torch	_	_
26-237	4343-4344	)	_	_
26-238	4344-4345	.	_	_
26-239	4346-4347	\*	_	_
26-240	4348-4351	You	_	_
26-241	4352-4355	can	_	_
26-242	4356-4363	quickly	_	_
26-243	4364-4367	try	_	_
26-244	4368-4371	out	_	_
26-245	4372-4376	your	_	_
26-246	4377-4380	own	_	_
26-247	4381-4391	stochastic	_	_
26-248	4392-4401	processes	_	_
26-249	4401-4402	,	_	_
26-250	4403-4414	derivatives	_	_
26-251	4414-4415	,	_	_
26-252	4416-4419	and	_	_
26-253	4420-4425	input	_	_
26-254	4426-4434	features	_	_
26-255	4434-4435	.	_	_
26-256	4437-4438	#	_	_
26-257	4438-4439	#	_	_
26-258	4439-4440	#	_	_
26-259	4441-4450	Batteries	_	_
26-260	4451-4459	Included	_	_
26-261	4461-4462	\*	_	_
26-262	4463-4470	PFHedge	_	_
26-263	4471-4479	provides	_	_
26-264	4480-4486	useful	_	_
26-265	4487-4488	\[	_	_
26-266	4488-4489	`	_	_
26-267	4489-4495	Module	_	_
26-268	4495-4496	`	_	_
26-269	4496-4497	\]	_	_
26-270	4497-4498	(	_	_
26-271	4498-4503	https	_	_
26-272	4503-4504	:	_	_
26-273	4504-4505	/	_	_
26-274	4505-4506	/	_	_
26-275	4506-4517	pytorch.org	_	_
26-275	4506-4513	pytorch	_	_
26-276	4517-4518	/	_	_
26-277	4518-4522	docs	_	_
26-278	4522-4523	/	_	_
26-279	4523-4529	stable	_	_
26-280	4529-4530	/	_	_
26-281	4530-4539	generated	_	_
26-282	4539-4540	/	_	_
26-283	4540-4560	torch.nn.Module.html	_	_
26-283	4540-4545	torch	_	_
26-284	4560-4561	)	_	_
26-285	4561-4562	s	_	_
26-286	4563-4566	for	_	_
26-287	4567-4571	Deep	_	_
26-288	4572-4579	Hedging	_	_
26-289	4580-4582	in	_	_
26-290	4583-4584	\[	_	_
26-291	4584-4585	`	_	_
26-292	4585-4595	pfhedge.nn	_	_
26-292	4585-4592	pfhedge	_	_
26-293	4595-4596	`	_	_
26-294	4596-4597	\]	_	_
26-295	4597-4598	(	_	_
26-296	4598-4603	https	_	_
26-297	4603-4604	:	_	_
26-298	4604-4605	/	_	_
26-299	4605-4606	/	_	_
26-300	4606-4630	pfnet-research.github.io	_	_
26-301	4630-4631	/	_	_
26-302	4631-4638	pfhedge	_	_
26-303	4638-4639	/	_	_
26-304	4639-4646	nn.html	_	_
26-305	4646-4647	)	_	_
26-306	4647-4648	.	_	_
26-307	4649-4650	\*	_	_
26-308	4651-4654	You	_	_
26-309	4655-4658	can	_	_
26-310	4659-4665	create	_	_
26-311	4666-4667	\[	_	_
26-312	4667-4680	Black-Scholes	_	_
26-313	4680-4681	'	_	_
26-314	4682-4695	delta-hedging	_	_
26-315	4695-4696	\]	_	_
26-316	4696-4697	(	_	_
26-317	4697-4702	https	_	_
26-318	4702-4703	:	_	_
26-319	4703-4704	/	_	_
26-320	4704-4705	/	_	_
26-321	4705-4721	en.wikipedia.org	_	_
26-322	4721-4722	/	_	_
26-323	4722-4726	wiki	_	_
26-324	4726-4727	/	_	_
26-325	4727-4740	Delta\_neutral	_	_
26-326	4740-4741	)	_	_
26-327	4741-4742	,	_	_
26-328	4743-4744	\[	_	_
26-329	4744-4761	Whalley-Wilmott's	_	_
26-330	4762-4770	strategy	_	_
26-331	4770-4771	\]	_	_
26-332	4771-4772	\[	_	_
26-333	4772-4787	whalley-wilmott	_	_
26-334	4787-4788	\]	_	_
26-335	4788-4789	,	_	_
26-336	4790-4793	and	_	_
26-337	4794-4796	so	_	_
26-338	4797-4802	forth	_	_
26-339	4802-4803	.	_	_
26-340	4804-4805	\*	_	_
26-341	4806-4812	Common	_	_
26-342	4813-4817	risk	_	_
26-343	4818-4826	measures	_	_
26-344	4827-4831	such	_	_
26-345	4832-4834	as	_	_
26-346	4835-4836	\[	_	_
26-347	4836-4838	an	_	_
26-348	4839-4847	entropic	_	_
26-349	4848-4852	risk	_	_
26-350	4853-4860	measure	_	_
26-351	4860-4861	\]	_	_
26-352	4861-4862	(	_	_
26-353	4862-4867	https	_	_
26-354	4867-4868	:	_	_
26-355	4868-4869	/	_	_
26-356	4869-4870	/	_	_
26-357	4870-4886	en.wikipedia.org	_	_
26-358	4886-4887	/	_	_
26-359	4887-4891	wiki	_	_
26-360	4891-4892	/	_	_
26-361	4892-4913	Entropic\_risk\_measure	_	_
26-362	4913-4914	)	_	_
26-363	4915-4918	and	_	_
26-364	4919-4920	\[	_	_
26-365	4920-4922	an	_	_
26-366	4923-4931	expected	_	_
26-367	4932-4941	shortfall	_	_
26-368	4941-4942	\]	_	_
26-369	4942-4943	(	_	_
26-370	4943-4948	https	_	_
26-371	4948-4949	:	_	_
26-372	4949-4950	/	_	_
26-373	4950-4951	/	_	_
26-374	4951-4967	en.wikipedia.org	_	_
26-375	4967-4968	/	_	_
26-376	4968-4972	wiki	_	_
26-377	4972-4973	/	_	_
26-378	4973-4991	Expected\_shortfall	_	_
26-379	4991-4992	)	_	_
26-380	4993-4996	are	_	_
26-381	4997-5006	available	_	_
26-382	5006-5007	.	_	_
26-383	5009-5010	#	_	_
26-384	5010-5011	#	_	_
26-385	5012-5019	Install	_	_
26-386	5021-5022	`	_	_
26-387	5022-5023	`	_	_
26-388	5023-5024	`	_	_
26-389	5024-5026	sh	_	_
26-390	5027-5030	pip	_	_
26-391	5031-5038	install	_	_
26-392	5039-5046	pfhedge	_	_
26-393	5047-5048	`	_	_
26-394	5048-5049	`	_	_
26-395	5049-5050	`	_	_
26-396	5052-5053	#	_	_
26-397	5053-5054	#	_	_
26-398	5055-5058	How	_	_
26-399	5059-5061	to	_	_
26-400	5062-5065	Use	_	_
26-401	5067-5068	\[	_	_
26-402	5068-5069	!	_	_

#Text=\[Open In Colab\](https://colab.research.google.com/assets/colab-badge.svg)\]\[example-readme-colab\]  ### Prepare a Derivative to Hedge  Financial instruments are provided in \[`pfhedge.instruments`\](https://pfnet-research.github.io/pfhedge/instruments.html) and classified into two types:  \* \*\*`Primary` instruments\*\*: A primary instrument is a basic financial instrument that is traded on a market, and therefore their prices are accessible as the market prices.
27-1	5069-5070	\[	_	_
27-2	5070-5074	Open	_	_
27-3	5075-5077	In	_	_
27-4	5078-5083	Colab	_	_
27-5	5083-5084	\]	_	_
27-6	5084-5085	(	_	_
27-7	5085-5090	https	_	_
27-8	5090-5091	:	_	_
27-9	5091-5092	/	_	_
27-10	5092-5093	/	_	_
27-11	5093-5118	colab.research.google.com	_	_
27-11	5093-5098	colab	_	_
27-12	5118-5119	/	_	_
27-13	5119-5125	assets	_	_
27-14	5125-5126	/	_	_
27-15	5126-5141	colab-badge.svg	_	_
27-16	5141-5142	)	_	_
27-17	5142-5143	\]	_	_
27-18	5143-5144	\[	_	_
27-19	5144-5164	example-readme-colab	_	_
27-20	5164-5165	\]	_	_
27-21	5167-5168	#	_	_
27-22	5168-5169	#	_	_
27-23	5169-5170	#	_	_
27-24	5171-5178	Prepare	_	_
27-25	5179-5180	a	_	_
27-26	5181-5191	Derivative	_	_
27-27	5192-5194	to	_	_
27-28	5195-5200	Hedge	_	_
27-29	5202-5211	Financial	_	_
27-30	5212-5223	instruments	_	_
27-31	5224-5227	are	_	_
27-32	5228-5236	provided	_	_
27-33	5237-5239	in	_	_
27-34	5240-5241	\[	_	_
27-35	5241-5242	`	_	_
27-36	5242-5261	pfhedge.instruments	_	_
27-36	5242-5249	pfhedge	_	_
27-37	5261-5262	`	_	_
27-38	5262-5263	\]	_	_
27-39	5263-5264	(	_	_
27-40	5264-5269	https	_	_
27-41	5269-5270	:	_	_
27-42	5270-5271	/	_	_
27-43	5271-5272	/	_	_
27-44	5272-5296	pfnet-research.github.io	_	_
27-45	5296-5297	/	_	_
27-46	5297-5304	pfhedge	_	_
27-47	5304-5305	/	_	_
27-48	5305-5321	instruments.html	_	_
27-49	5321-5322	)	_	_
27-50	5323-5326	and	_	_
27-51	5327-5337	classified	_	_
27-52	5338-5342	into	_	_
27-53	5343-5346	two	_	_
27-54	5347-5352	types	_	_
27-55	5352-5353	:	_	_
27-56	5355-5356	\*	_	_
27-57	5357-5358	\*	_	_
27-58	5358-5359	\*	_	_
27-59	5359-5360	`	_	_
27-60	5360-5367	Primary	_	_
27-61	5367-5368	`	_	_
27-62	5369-5380	instruments	_	_
27-63	5380-5381	\*	_	_
27-64	5381-5382	\*	_	_
27-65	5382-5383	:	_	_
27-66	5384-5385	A	_	_
27-67	5386-5393	primary	_	_
27-68	5394-5404	instrument	_	_
27-69	5405-5407	is	_	_
27-70	5408-5409	a	_	_
27-71	5410-5415	basic	_	_
27-72	5416-5425	financial	_	_
27-73	5426-5436	instrument	_	_
27-74	5437-5441	that	_	_
27-75	5442-5444	is	_	_
27-76	5445-5451	traded	_	_
27-77	5452-5454	on	_	_
27-78	5455-5456	a	_	_
27-79	5457-5463	market	_	_
27-80	5463-5464	,	_	_
27-81	5465-5468	and	_	_
27-82	5469-5478	therefore	_	_
27-83	5479-5484	their	_	_
27-84	5485-5491	prices	_	_
27-85	5492-5495	are	_	_
27-86	5496-5506	accessible	_	_
27-87	5507-5509	as	_	_
27-88	5510-5513	the	_	_
27-89	5514-5520	market	_	_
27-90	5521-5527	prices	_	_
27-91	5527-5528	.	_	_

#Text=Examples include stocks, bonds, commodities, and currencies. \* \*\*`Derivative` instruments\*\*: A derivative is a financial instrument whose payoff is contingent on a primary instrument.
28-1	5529-5537	Examples	_	_
28-2	5538-5545	include	_	_
28-3	5546-5552	stocks	_	_
28-4	5552-5553	,	_	_
28-5	5554-5559	bonds	_	_
28-6	5559-5560	,	_	_
28-7	5561-5572	commodities	_	_
28-8	5572-5573	,	_	_
28-9	5574-5577	and	_	_
28-10	5578-5588	currencies	_	_
28-11	5588-5589	.	_	_
28-12	5590-5591	\*	_	_
28-13	5592-5593	\*	_	_
28-14	5593-5594	\*	_	_
28-15	5594-5595	`	_	_
28-16	5595-5605	Derivative	_	_
28-17	5605-5606	`	_	_
28-18	5607-5618	instruments	_	_
28-19	5618-5619	\*	_	_
28-20	5619-5620	\*	_	_
28-21	5620-5621	:	_	_
28-22	5622-5623	A	_	_
28-23	5624-5634	derivative	_	_
28-24	5635-5637	is	_	_
28-25	5638-5639	a	_	_
28-26	5640-5649	financial	_	_
28-27	5650-5660	instrument	_	_
28-28	5661-5666	whose	_	_
28-29	5667-5673	payoff	_	_
28-30	5674-5676	is	_	_
28-31	5677-5687	contingent	_	_
28-32	5688-5690	on	_	_
28-33	5691-5692	a	_	_
28-34	5693-5700	primary	_	_
28-35	5701-5711	instrument	_	_
28-36	5711-5712	.	_	_

#Text=An (over-the-counter) derivative is not traded on the market, and therefore the price is not directly accessible.
29-1	5713-5715	An	_	_
29-2	5716-5717	(	_	_
29-3	5717-5733	over-the-counter	_	_
29-4	5733-5734	)	_	_
29-5	5735-5745	derivative	_	_
29-6	5746-5748	is	_	_
29-7	5749-5752	not	_	_
29-8	5753-5759	traded	_	_
29-9	5760-5762	on	_	_
29-10	5763-5766	the	_	_
29-11	5767-5773	market	_	_
29-12	5773-5774	,	_	_
29-13	5775-5778	and	_	_
29-14	5779-5788	therefore	_	_
29-15	5789-5792	the	_	_
29-16	5793-5798	price	_	_
29-17	5799-5801	is	_	_
29-18	5802-5805	not	_	_
29-19	5806-5814	directly	_	_
29-20	5815-5825	accessible	_	_
29-21	5825-5826	.	_	_

#Text=Examples include \[`EuropeanOption`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.instruments.EuropeanOption.html), \[`LookbackOption`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.instruments.LookbackOption.html), \[`VarianceSwap`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.instruments.VarianceSwap.html), and so forth.
30-1	5827-5835	Examples	_	_
30-2	5836-5843	include	_	_
30-3	5844-5845	\[	_	_
30-4	5845-5846	`	_	_
30-5	5846-5860	EuropeanOption	_	_
30-6	5860-5861	`	_	_
30-7	5861-5862	\]	_	_
30-8	5862-5863	(	_	_
30-9	5863-5868	https	_	_
30-10	5868-5869	:	_	_
30-11	5869-5870	/	_	_
30-12	5870-5871	/	_	_
30-13	5871-5895	pfnet-research.github.io	_	_
30-14	5895-5896	/	_	_
30-15	5896-5903	pfhedge	_	_
30-16	5903-5904	/	_	_
30-17	5904-5913	generated	_	_
30-18	5913-5914	/	_	_
30-19	5914-5953	pfhedge.instruments.EuropeanOption.html	_	_
30-19	5914-5921	pfhedge	_	_
30-20	5953-5954	)	_	_
30-21	5954-5955	,	_	_
30-22	5956-5957	\[	_	_
30-23	5957-5958	`	_	_
30-24	5958-5972	LookbackOption	_	_
30-25	5972-5973	`	_	_
30-26	5973-5974	\]	_	_
30-27	5974-5975	(	_	_
30-28	5975-5980	https	_	_
30-29	5980-5981	:	_	_
30-30	5981-5982	/	_	_
30-31	5982-5983	/	_	_
30-32	5983-6007	pfnet-research.github.io	_	_
30-33	6007-6008	/	_	_
30-34	6008-6015	pfhedge	_	_
30-35	6015-6016	/	_	_
30-36	6016-6025	generated	_	_
30-37	6025-6026	/	_	_
30-38	6026-6065	pfhedge.instruments.LookbackOption.html	_	_
30-38	6026-6033	pfhedge	_	_
30-39	6065-6066	)	_	_
30-40	6066-6067	,	_	_
30-41	6068-6069	\[	_	_
30-42	6069-6070	`	_	_
30-43	6070-6082	VarianceSwap	_	_
30-44	6082-6083	`	_	_
30-45	6083-6084	\]	_	_
30-46	6084-6085	(	_	_
30-47	6085-6090	https	_	_
30-48	6090-6091	:	_	_
30-49	6091-6092	/	_	_
30-50	6092-6093	/	_	_
30-51	6093-6117	pfnet-research.github.io	_	_
30-52	6117-6118	/	_	_
30-53	6118-6125	pfhedge	_	_
30-54	6125-6126	/	_	_
30-55	6126-6135	generated	_	_
30-56	6135-6136	/	_	_
30-57	6136-6173	pfhedge.instruments.VarianceSwap.html	_	_
30-57	6136-6143	pfhedge	_	_
30-58	6173-6174	)	_	_
30-59	6174-6175	,	_	_
30-60	6176-6179	and	_	_
30-61	6180-6182	so	_	_
30-62	6183-6188	forth	_	_
30-63	6188-6189	.	_	_

#Text=We consider a \[`BrownianStock`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.instruments.BrownianStock.html), which is a stock following the \[geometric Brownian motion\](https://en.wikipedia.org/wiki/Geometric\_Brownian\_motion), and a \[`EuropeanOption`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.instruments.EuropeanOption.html) which is contingent on it.
31-1	6191-6193	We	_	_
31-2	6194-6202	consider	_	_
31-3	6203-6204	a	_	_
31-4	6205-6206	\[	_	_
31-5	6206-6207	`	_	_
31-6	6207-6220	BrownianStock	_	_
31-7	6220-6221	`	_	_
31-8	6221-6222	\]	_	_
31-9	6222-6223	(	_	_
31-10	6223-6228	https	_	_
31-11	6228-6229	:	_	_
31-12	6229-6230	/	_	_
31-13	6230-6231	/	_	_
31-14	6231-6255	pfnet-research.github.io	_	_
31-15	6255-6256	/	_	_
31-16	6256-6263	pfhedge	_	_
31-17	6263-6264	/	_	_
31-18	6264-6273	generated	_	_
31-19	6273-6274	/	_	_
31-20	6274-6312	pfhedge.instruments.BrownianStock.html	_	_
31-20	6274-6281	pfhedge	_	_
31-21	6312-6313	)	_	_
31-22	6313-6314	,	_	_
31-23	6315-6320	which	_	_
31-24	6321-6323	is	_	_
31-25	6324-6325	a	_	_
31-26	6326-6331	stock	_	_
31-27	6332-6341	following	_	_
31-28	6342-6345	the	_	_
31-29	6346-6347	\[	_	_
31-30	6347-6356	geometric	_	_
31-31	6357-6365	Brownian	_	_
31-32	6366-6372	motion	_	_
31-33	6372-6373	\]	_	_
31-34	6373-6374	(	_	_
31-35	6374-6379	https	_	_
31-36	6379-6380	:	_	_
31-37	6380-6381	/	_	_
31-38	6381-6382	/	_	_
31-39	6382-6398	en.wikipedia.org	_	_
31-40	6398-6399	/	_	_
31-41	6399-6403	wiki	_	_
31-42	6403-6404	/	_	_
31-43	6404-6429	Geometric\_Brownian\_motion	_	_
31-44	6429-6430	)	_	_
31-45	6430-6431	,	_	_
31-46	6432-6435	and	_	_
31-47	6436-6437	a	_	_
31-48	6438-6439	\[	_	_
31-49	6439-6440	`	_	_
31-50	6440-6454	EuropeanOption	_	_
31-51	6454-6455	`	_	_
31-52	6455-6456	\]	_	_
31-53	6456-6457	(	_	_
31-54	6457-6462	https	_	_
31-55	6462-6463	:	_	_
31-56	6463-6464	/	_	_
31-57	6464-6465	/	_	_
31-58	6465-6489	pfnet-research.github.io	_	_
31-59	6489-6490	/	_	_
31-60	6490-6497	pfhedge	_	_
31-61	6497-6498	/	_	_
31-62	6498-6507	generated	_	_
31-63	6507-6508	/	_	_
31-64	6508-6547	pfhedge.instruments.EuropeanOption.html	_	_
31-64	6508-6515	pfhedge	_	_
31-65	6547-6548	)	_	_
31-66	6549-6554	which	_	_
31-67	6555-6557	is	_	_
31-68	6558-6568	contingent	_	_
31-69	6569-6571	on	_	_
31-70	6572-6574	it	_	_
31-71	6574-6575	.	_	_

#Text=We assume that the stock has a transaction cost of 1 basis point.
32-1	6576-6578	We	_	_
32-2	6579-6585	assume	_	_
32-3	6586-6590	that	_	_
32-4	6591-6594	the	_	_
32-5	6595-6600	stock	_	_
32-6	6601-6604	has	_	_
32-7	6605-6606	a	_	_
32-8	6607-6618	transaction	_	_
32-9	6619-6623	cost	_	_
32-10	6624-6626	of	_	_
32-11	6627-6628	1	_	_
32-12	6629-6634	basis	_	_
32-13	6635-6640	point	_	_
32-14	6640-6641	.	_	_

#Text=```py from pfhedge.instruments import BrownianStock from pfhedge.instruments import EuropeanOption  stock = BrownianStock(cost=1e-4) derivative = EuropeanOption(stock)  derivative # EuropeanOption( #   strike=1., maturity=0.0800 #   (underlier): BrownianStock(sigma=0.2000, cost=1.0000e-04, dt=0.0040) # ) ```  ### Create Your Hedger  A \[`Hedger`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.nn.Hedger.html) in Deep Hedging is basically characterized by three elements:  \* \*\*Inputs\*\*: A hedger uses any market information as input features
33-1	6643-6644	`	_	_
33-2	6644-6645	`	_	_
33-3	6645-6646	`	_	_
33-4	6646-6648	py	_	_
33-5	6649-6653	from	_	_
33-6	6654-6673	pfhedge.instruments	_	_
33-6	6654-6661	pfhedge	_	_
33-7	6674-6680	import	_	_
33-8	6681-6694	BrownianStock	_	_
33-9	6695-6699	from	_	_
33-10	6700-6719	pfhedge.instruments	_	_
33-10	6700-6707	pfhedge	_	_
33-11	6720-6726	import	_	_
33-12	6727-6741	EuropeanOption	_	_
33-13	6743-6748	stock	_	_
33-14	6749-6750	=	_	_
33-15	6751-6764	BrownianStock	_	_
33-16	6764-6765	(	_	_
33-17	6765-6769	cost	_	_
33-18	6769-6770	=	_	_
33-19	6770-6772	1e	_	_
33-20	6772-6773	-	_	_
33-21	6773-6774	4	_	_
33-22	6774-6775	)	_	_
33-23	6776-6786	derivative	_	_
33-24	6787-6788	=	_	_
33-25	6789-6803	EuropeanOption	_	_
33-26	6803-6804	(	_	_
33-27	6804-6809	stock	_	_
33-28	6809-6810	)	_	_
33-29	6812-6822	derivative	_	_
33-30	6823-6824	#	_	_
33-31	6825-6839	EuropeanOption	_	_
33-32	6839-6840	(	_	_
33-33	6841-6842	#	_	_
33-34	6845-6851	strike	_	_
33-35	6851-6852	=	_	_
33-36	6852-6853	1	_	_
33-37	6853-6854	.	_	_
33-38	6854-6855	,	_	_
33-39	6856-6864	maturity	_	_
33-40	6864-6865	=	_	_
33-41	6865-6871	0.0800	_	_
33-42	6872-6873	#	_	_
33-43	6876-6877	(	_	_
33-44	6877-6886	underlier	_	_
33-45	6886-6887	)	_	_
33-46	6887-6888	:	_	_
33-47	6889-6902	BrownianStock	_	_
33-48	6902-6903	(	_	_
33-49	6903-6908	sigma	_	_
33-50	6908-6909	=	_	_
33-51	6909-6915	0.2000	_	_
33-52	6915-6916	,	_	_
33-53	6917-6921	cost	_	_
33-54	6921-6922	=	_	_
33-55	6922-6929	1.0000e	_	_
33-56	6929-6930	-	_	_
33-57	6930-6932	04	_	_
33-58	6932-6933	,	_	_
33-59	6934-6936	dt	_	_
33-60	6936-6937	=	_	_
33-61	6937-6943	0.0040	_	_
33-62	6943-6944	)	_	_
33-63	6945-6946	#	_	_
33-64	6947-6948	)	_	_
33-65	6949-6950	`	_	_
33-66	6950-6951	`	_	_
33-67	6951-6952	`	_	_
33-68	6954-6955	#	_	_
33-69	6955-6956	#	_	_
33-70	6956-6957	#	_	_
33-71	6958-6964	Create	_	_
33-72	6965-6969	Your	_	_
33-73	6970-6976	Hedger	_	_
33-74	6978-6979	A	_	_
33-75	6980-6981	\[	_	_
33-76	6981-6982	`	_	_
33-77	6982-6988	Hedger	_	_
33-78	6988-6989	`	_	_
33-79	6989-6990	\]	_	_
33-80	6990-6991	(	_	_
33-81	6991-6996	https	_	_
33-82	6996-6997	:	_	_
33-83	6997-6998	/	_	_
33-84	6998-6999	/	_	_
33-85	6999-7023	pfnet-research.github.io	_	_
33-86	7023-7024	/	_	_
33-87	7024-7031	pfhedge	_	_
33-88	7031-7032	/	_	_
33-89	7032-7041	generated	_	_
33-90	7041-7042	/	_	_
33-91	7042-7064	pfhedge.nn.Hedger.html	_	_
33-91	7042-7049	pfhedge	_	_
33-92	7064-7065	)	_	_
33-93	7066-7068	in	_	_
33-94	7069-7073	Deep	_	_
33-95	7074-7081	Hedging	_	_
33-96	7082-7084	is	_	_
33-97	7085-7094	basically	_	_
33-98	7095-7108	characterized	_	_
33-99	7109-7111	by	_	_
33-100	7112-7117	three	_	_
33-101	7118-7126	elements	_	_
33-102	7126-7127	:	_	_
33-103	7129-7130	\*	_	_
33-104	7131-7132	\*	_	_
33-105	7132-7133	\*	_	_
33-106	7133-7139	Inputs	_	_
33-107	7139-7140	\*	_	_
33-108	7140-7141	\*	_	_
33-109	7141-7142	:	_	_
33-110	7143-7144	A	_	_
33-111	7145-7151	hedger	_	_
33-112	7152-7156	uses	_	_
33-113	7157-7160	any	_	_
33-114	7161-7167	market	_	_
33-115	7168-7179	information	_	_
33-116	7180-7182	as	_	_
33-117	7183-7188	input	_	_
33-118	7189-7197	features	_	_

#Text=.
34-1	7197-7198	.	_	_

#Text=- `'log\_moneyness'`: \[Log-moneyness\](https://en.wikipedia.org/wiki/Moneyness) of the stock
35-1	7203-7204	-	_	_
35-2	7205-7206	`	_	_
35-3	7206-7207	'	_	_
35-4	7207-7220	log\_moneyness	_	_
35-5	7220-7221	'	_	_
35-6	7221-7222	`	_	_
35-7	7222-7223	:	_	_
35-8	7224-7225	\[	_	_
35-9	7225-7238	Log-moneyness	_	_
35-10	7238-7239	\]	_	_
35-11	7239-7240	(	_	_
35-12	7240-7245	https	_	_
35-13	7245-7246	:	_	_
35-14	7246-7247	/	_	_
35-15	7247-7248	/	_	_
35-16	7248-7264	en.wikipedia.org	_	_
35-17	7264-7265	/	_	_
35-18	7265-7269	wiki	_	_
35-19	7269-7270	/	_	_
35-20	7270-7279	Moneyness	_	_
35-21	7279-7280	)	_	_
35-22	7281-7283	of	_	_
35-23	7284-7287	the	_	_
35-24	7288-7293	stock	_	_

#Text=.
36-1	7293-7294	.	_	_

#Text=- `'expiry\_time'`: Remaining time to the \[maturity\](https://en.wikipedia.org/wiki/Maturity\_(finance)) of the option
37-1	7299-7300	-	_	_
37-2	7301-7302	`	_	_
37-3	7302-7303	'	_	_
37-4	7303-7314	expiry\_time	_	_
37-5	7314-7315	'	_	_
37-6	7315-7316	`	_	_
37-7	7316-7317	:	_	_
37-8	7318-7327	Remaining	_	_
37-9	7328-7332	time	_	_
37-10	7333-7335	to	_	_
37-11	7336-7339	the	_	_
37-12	7340-7341	\[	_	_
37-13	7341-7349	maturity	_	_
37-14	7349-7350	\]	_	_
37-15	7350-7351	(	_	_
37-16	7351-7356	https	_	_
37-17	7356-7357	:	_	_
37-18	7357-7358	/	_	_
37-19	7358-7359	/	_	_
37-20	7359-7375	en.wikipedia.org	_	_
37-21	7375-7376	/	_	_
37-22	7376-7380	wiki	_	_
37-23	7380-7381	/	_	_
37-24	7381-7389	Maturity	_	_
37-25	7389-7390	\_	_	_
37-26	7390-7391	(	_	_
37-27	7391-7398	finance	_	_
37-28	7398-7399	)	_	_
37-29	7399-7400	)	_	_
37-30	7401-7403	of	_	_
37-31	7404-7407	the	_	_
37-32	7408-7414	option	_	_

#Text=.
38-1	7414-7415	.	_	_

#Text=- `'volatility'`: \[Volatility\](https://en.wikipedia.org/wiki/Volatility\_(finance)) of the stock
39-1	7420-7421	-	_	_
39-2	7422-7423	`	_	_
39-3	7423-7424	'	_	_
39-4	7424-7434	volatility	_	_
39-5	7434-7435	'	_	_
39-6	7435-7436	`	_	_
39-7	7436-7437	:	_	_
39-8	7438-7439	\[	_	_
39-9	7439-7449	Volatility	_	_
39-10	7449-7450	\]	_	_
39-11	7450-7451	(	_	_
39-12	7451-7456	https	_	_
39-13	7456-7457	:	_	_
39-14	7457-7458	/	_	_
39-15	7458-7459	/	_	_
39-16	7459-7475	en.wikipedia.org	_	_
39-17	7475-7476	/	_	_
39-18	7476-7480	wiki	_	_
39-19	7480-7481	/	_	_
39-20	7481-7491	Volatility	_	_
39-21	7491-7492	\_	_	_
39-22	7492-7493	(	_	_
39-23	7493-7500	finance	_	_
39-24	7500-7501	)	_	_
39-25	7501-7502	)	_	_
39-26	7503-7505	of	_	_
39-27	7506-7509	the	_	_
39-28	7510-7515	stock	_	_

#Text=.
40-1	7515-7516	.	_	_

#Text=- `'prev\_hedge'`: The hedge ratio at the previous time step. \* \*\*Model\*\*: A hedger's model computes the hedge ratio at the next time step from input features
41-1	7521-7522	-	_	_
41-2	7523-7524	`	_	_
41-3	7524-7525	'	_	_
41-4	7525-7535	prev\_hedge	_	_
41-5	7535-7536	'	_	_
41-6	7536-7537	`	_	_
41-7	7537-7538	:	_	_
41-8	7539-7542	The	_	_
41-9	7543-7548	hedge	_	_
41-10	7549-7554	ratio	_	_
41-11	7555-7557	at	_	_
41-12	7558-7561	the	_	_
41-13	7562-7570	previous	_	_
41-14	7571-7575	time	_	_
41-15	7576-7580	step	_	_
41-16	7580-7581	.	_	_
41-17	7582-7583	\*	_	_
41-18	7584-7585	\*	_	_
41-19	7585-7586	\*	_	_
41-20	7586-7591	Model	_	_
41-21	7591-7592	\*	_	_
41-22	7592-7593	\*	_	_
41-23	7593-7594	:	_	_
41-24	7595-7596	A	_	_
41-25	7597-7605	hedger's	_	_
41-26	7606-7611	model	_	_
41-27	7612-7620	computes	_	_
41-28	7621-7624	the	_	_
41-29	7625-7630	hedge	_	_
41-30	7631-7636	ratio	_	_
41-31	7637-7639	at	_	_
41-32	7640-7643	the	_	_
41-33	7644-7648	next	_	_
41-34	7649-7653	time	_	_
41-35	7654-7658	step	_	_
41-36	7659-7663	from	_	_
41-37	7664-7669	input	_	_
41-38	7670-7678	features	_	_

#Text=.
42-1	7678-7679	.	_	_

#Text=- \[`MultiLayerPerceptron`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.nn.MultiLayerPerceptron.html): \[Multi-layer perceptron\](https://en.wikipedia.org/wiki/Multilayer\_perceptron)
43-1	7684-7685	-	_	_
43-2	7686-7687	\[	_	_
43-3	7687-7688	`	_	_
43-4	7688-7708	MultiLayerPerceptron	_	_
43-5	7708-7709	`	_	_
43-6	7709-7710	\]	_	_
43-7	7710-7711	(	_	_
43-8	7711-7716	https	_	_
43-9	7716-7717	:	_	_
43-10	7717-7718	/	_	_
43-11	7718-7719	/	_	_
43-12	7719-7743	pfnet-research.github.io	_	_
43-13	7743-7744	/	_	_
43-14	7744-7751	pfhedge	_	_
43-15	7751-7752	/	_	_
43-16	7752-7761	generated	_	_
43-17	7761-7762	/	_	_
43-18	7762-7798	pfhedge.nn.MultiLayerPerceptron.html	_	_
43-18	7762-7769	pfhedge	_	_
43-19	7798-7799	)	_	_
43-20	7799-7800	:	_	_
43-21	7801-7802	\[	_	_
43-22	7802-7813	Multi-layer	_	_
43-23	7814-7824	perceptron	_	_
43-24	7824-7825	\]	_	_
43-25	7825-7826	(	_	_
43-26	7826-7831	https	_	_
43-27	7831-7832	:	_	_
43-28	7832-7833	/	_	_
43-29	7833-7834	/	_	_
43-30	7834-7850	en.wikipedia.org	_	_
43-31	7850-7851	/	_	_
43-32	7851-7855	wiki	_	_
43-33	7855-7856	/	_	_
43-34	7856-7877	Multilayer\_perceptron	_	_
43-35	7877-7878	)	_	_

#Text=.
44-1	7878-7879	.	_	_

#Text=- \[`BlackScholes`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.nn.BlackScholes.html): \[Black-Scholes\](https://en.wikipedia.org/wiki/Delta\_neutral)' delta-hedging strategy
45-1	7884-7885	-	_	_
45-2	7886-7887	\[	_	_
45-3	7887-7888	`	_	_
45-4	7888-7900	BlackScholes	_	_
45-5	7900-7901	`	_	_
45-6	7901-7902	\]	_	_
45-7	7902-7903	(	_	_
45-8	7903-7908	https	_	_
45-9	7908-7909	:	_	_
45-10	7909-7910	/	_	_
45-11	7910-7911	/	_	_
45-12	7911-7935	pfnet-research.github.io	_	_
45-13	7935-7936	/	_	_
45-14	7936-7943	pfhedge	_	_
45-15	7943-7944	/	_	_
45-16	7944-7953	generated	_	_
45-17	7953-7954	/	_	_
45-18	7954-7982	pfhedge.nn.BlackScholes.html	_	_
45-18	7954-7961	pfhedge	_	_
45-19	7982-7983	)	_	_
45-20	7983-7984	:	_	_
45-21	7985-7986	\[	_	_
45-22	7986-7999	Black-Scholes	_	_
45-23	7999-8000	\]	_	_
45-24	8000-8001	(	_	_
45-25	8001-8006	https	_	_
45-26	8006-8007	:	_	_
45-27	8007-8008	/	_	_
45-28	8008-8009	/	_	_
45-29	8009-8025	en.wikipedia.org	_	_
45-30	8025-8026	/	_	_
45-31	8026-8030	wiki	_	_
45-32	8030-8031	/	_	_
45-33	8031-8044	Delta\_neutral	_	_
45-34	8044-8045	)	_	_
45-35	8045-8046	'	_	_
45-36	8047-8060	delta-hedging	_	_
45-37	8061-8069	strategy	_	_

#Text=.
46-1	8069-8070	.	_	_

#Text=- \[`WhalleyWilmott`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.nn.WhalleyWilmott.html): \[Whalley-Wilmott\]\[whalley-wilmott\]'s asymptotically optimal strategy for small costs
47-1	8075-8076	-	_	_
47-2	8077-8078	\[	_	_
47-3	8078-8079	`	_	_
47-4	8079-8093	WhalleyWilmott	_	_
47-5	8093-8094	`	_	_
47-6	8094-8095	\]	_	_
47-7	8095-8096	(	_	_
47-8	8096-8101	https	_	_
47-9	8101-8102	:	_	_
47-10	8102-8103	/	_	_
47-11	8103-8104	/	_	_
47-12	8104-8128	pfnet-research.github.io	_	_
47-13	8128-8129	/	_	_
47-14	8129-8136	pfhedge	_	_
47-15	8136-8137	/	_	_
47-16	8137-8146	generated	_	_
47-17	8146-8147	/	_	_
47-18	8147-8177	pfhedge.nn.WhalleyWilmott.html	_	_
47-18	8147-8154	pfhedge	_	_
47-19	8177-8178	)	_	_
47-20	8178-8179	:	_	_
47-21	8180-8181	\[	_	_
47-22	8181-8196	Whalley-Wilmott	_	_
47-23	8196-8197	\]	_	_
47-24	8197-8198	\[	_	_
47-25	8198-8213	whalley-wilmott	_	_
47-26	8213-8214	\]	_	_
47-27	8214-8215	'	_	_
47-28	8215-8216	s	_	_
47-29	8217-8231	asymptotically	_	_
47-30	8232-8239	optimal	_	_
47-31	8240-8248	strategy	_	_
47-32	8249-8252	for	_	_
47-33	8253-8258	small	_	_
47-34	8259-8264	costs	_	_

#Text=.
48-1	8264-8265	.	_	_

#Text=- Any PyTorch \[`Module`\](https://pytorch.org/docs/stable/generated/torch.nn.Module.html) which you build. \* \*\*Criterion\*\*: A hedger wishes to minimize their \[risk measure\](https://en.wikipedia.org/wiki/Risk\_measure)
49-1	8270-8271	-	_	_
49-2	8272-8275	Any	_	_
49-3	8276-8283	PyTorch	_	_
49-4	8284-8285	\[	_	_
49-5	8285-8286	`	_	_
49-6	8286-8292	Module	_	_
49-7	8292-8293	`	_	_
49-8	8293-8294	\]	_	_
49-9	8294-8295	(	_	_
49-10	8295-8300	https	_	_
49-11	8300-8301	:	_	_
49-12	8301-8302	/	_	_
49-13	8302-8303	/	_	_
49-14	8303-8314	pytorch.org	_	_
49-15	8314-8315	/	_	_
49-16	8315-8319	docs	_	_
49-17	8319-8320	/	_	_
49-18	8320-8326	stable	_	_
49-19	8326-8327	/	_	_
49-20	8327-8336	generated	_	_
49-21	8336-8337	/	_	_
49-22	8337-8357	torch.nn.Module.html	_	_
49-23	8357-8358	)	_	_
49-24	8359-8364	which	_	_
49-25	8365-8368	you	_	_
49-26	8369-8374	build	_	_
49-27	8374-8375	.	_	_
49-28	8376-8377	\*	_	_
49-29	8378-8379	\*	_	_
49-30	8379-8380	\*	_	_
49-31	8380-8389	Criterion	_	_
49-32	8389-8390	\*	_	_
49-33	8390-8391	\*	_	_
49-34	8391-8392	:	_	_
49-35	8393-8394	A	_	_
49-36	8395-8401	hedger	_	_
49-37	8402-8408	wishes	_	_
49-38	8409-8411	to	_	_
49-39	8412-8420	minimize	_	_
49-40	8421-8426	their	_	_
49-41	8427-8428	\[	_	_
49-42	8428-8432	risk	_	_
49-43	8433-8440	measure	_	_
49-44	8440-8441	\]	_	_
49-45	8441-8442	(	_	_
49-46	8442-8447	https	_	_
49-47	8447-8448	:	_	_
49-48	8448-8449	/	_	_
49-49	8449-8450	/	_	_
49-50	8450-8466	en.wikipedia.org	_	_
49-51	8466-8467	/	_	_
49-52	8467-8471	wiki	_	_
49-53	8471-8472	/	_	_
49-54	8472-8484	Risk\_measure	_	_
49-55	8484-8485	)	_	_

#Text=.
50-1	8485-8486	.	_	_

#Text=- \[`EntropicRiskMeasure`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.nn.EntropicRiskMeasure.html): \[Entropic Risk Measure\](https://en.wikipedia.org/wiki/Entropic\_risk\_measure), a risk measure derived from \[exponential utility\](https://en.wikipedia.org/wiki/Exponential\_utility)
51-1	8491-8492	-	_	_
51-2	8493-8494	\[	_	_
51-3	8494-8495	`	_	_
51-4	8495-8514	EntropicRiskMeasure	_	_
51-5	8514-8515	`	_	_
51-6	8515-8516	\]	_	_
51-7	8516-8517	(	_	_
51-8	8517-8522	https	_	_
51-9	8522-8523	:	_	_
51-10	8523-8524	/	_	_
51-11	8524-8525	/	_	_
51-12	8525-8549	pfnet-research.github.io	_	_
51-13	8549-8550	/	_	_
51-14	8550-8557	pfhedge	_	_
51-15	8557-8558	/	_	_
51-16	8558-8567	generated	_	_
51-17	8567-8568	/	_	_
51-18	8568-8603	pfhedge.nn.EntropicRiskMeasure.html	_	_
51-18	8568-8575	pfhedge	_	_
51-19	8603-8604	)	_	_
51-20	8604-8605	:	_	_
51-21	8606-8607	\[	_	_
51-22	8607-8615	Entropic	_	_
51-23	8616-8620	Risk	_	_
51-24	8621-8628	Measure	_	_
51-25	8628-8629	\]	_	_
51-26	8629-8630	(	_	_
51-27	8630-8635	https	_	_
51-28	8635-8636	:	_	_
51-29	8636-8637	/	_	_
51-30	8637-8638	/	_	_
51-31	8638-8654	en.wikipedia.org	_	_
51-32	8654-8655	/	_	_
51-33	8655-8659	wiki	_	_
51-34	8659-8660	/	_	_
51-35	8660-8681	Entropic\_risk\_measure	_	_
51-36	8681-8682	)	_	_
51-37	8682-8683	,	_	_
51-38	8684-8685	a	_	_
51-39	8686-8690	risk	_	_
51-40	8691-8698	measure	_	_
51-41	8699-8706	derived	_	_
51-42	8707-8711	from	_	_
51-43	8712-8713	\[	_	_
51-44	8713-8724	exponential	_	_
51-45	8725-8732	utility	_	_
51-46	8732-8733	\]	_	_
51-47	8733-8734	(	_	_
51-48	8734-8739	https	_	_
51-49	8739-8740	:	_	_
51-50	8740-8741	/	_	_
51-51	8741-8742	/	_	_
51-52	8742-8758	en.wikipedia.org	_	_
51-53	8758-8759	/	_	_
51-54	8759-8763	wiki	_	_
51-55	8763-8764	/	_	_
51-56	8764-8783	Exponential\_utility	_	_
51-57	8783-8784	)	_	_

#Text=.
52-1	8784-8785	.	_	_

#Text=- \[`ExpectedShortFall`\](https://pfnet-research.github.io/pfhedge/generated/pfhedge.nn.ExpectedShortfall.html): \[Expected Shortfall\](https://en.wikipedia.org/wiki/Expected\_shortfall) or CVaR, a common measure to assess portfolio risk.
53-1	8790-8791	-	_	_
53-2	8792-8793	\[	_	_
53-3	8793-8794	`	_	_
53-4	8794-8811	ExpectedShortFall	_	_
53-5	8811-8812	`	_	_
53-6	8812-8813	\]	_	_
53-7	8813-8814	(	_	_
53-8	8814-8819	https	_	_
53-9	8819-8820	:	_	_
53-10	8820-8821	/	_	_
53-11	8821-8822	/	_	_
53-12	8822-8846	pfnet-research.github.io	_	_
53-13	8846-8847	/	_	_
53-14	8847-8854	pfhedge	_	_
53-15	8854-8855	/	_	_
53-16	8855-8864	generated	_	_
53-17	8864-8865	/	_	_
53-18	8865-8898	pfhedge.nn.ExpectedShortfall.html	_	_
53-18	8865-8872	pfhedge	_	_
53-19	8898-8899	)	_	_
53-20	8899-8900	:	_	_
53-21	8901-8902	\[	_	_
53-22	8902-8910	Expected	_	_
53-23	8911-8920	Shortfall	_	_
53-24	8920-8921	\]	_	_
53-25	8921-8922	(	_	_
53-26	8922-8927	https	_	_
53-27	8927-8928	:	_	_
53-28	8928-8929	/	_	_
53-29	8929-8930	/	_	_
53-30	8930-8946	en.wikipedia.org	_	_
53-31	8946-8947	/	_	_
53-32	8947-8951	wiki	_	_
53-33	8951-8952	/	_	_
53-34	8952-8970	Expected\_shortfall	_	_
53-35	8970-8971	)	_	_
53-36	8972-8974	or	_	_
53-37	8975-8979	CVaR	_	_
53-38	8979-8980	,	_	_
53-39	8981-8982	a	_	_
53-40	8983-8989	common	_	_
53-41	8990-8997	measure	_	_
53-42	8998-9000	to	_	_
53-43	9001-9007	assess	_	_
53-44	9008-9017	portfolio	_	_
53-45	9018-9022	risk	_	_
53-46	9022-9023	.	_	_

#Text=We here use a multi-layer perceptron as our model.
54-1	9025-9027	We	_	_
54-2	9028-9032	here	_	_
54-3	9033-9036	use	_	_
54-4	9037-9038	a	_	_
54-5	9039-9050	multi-layer	_	_
54-6	9051-9061	perceptron	_	_
54-7	9062-9064	as	_	_
54-8	9065-9068	our	_	_
54-9	9069-9074	model	_	_
54-10	9074-9075	.	_	_

#Text=```py from pfhedge.nn import Hedger from pfhedge.nn import MultiLayerPerceptron  model = MultiLayerPerceptron() hedger = Hedger(model, inputs=\["log\_moneyness", "expiry\_time", "volatility", "prev\_hedge"\]) ```  The `hedger` is also a \[`Module`\](https://pytorch.org/docs/stable/generated/torch.nn.Module.html).
55-1	9077-9078	`	_	_
55-2	9078-9079	`	_	_
55-3	9079-9080	`	_	_
55-4	9080-9082	py	_	_
55-5	9083-9087	from	_	_
55-6	9088-9098	pfhedge.nn	_	_
55-6	9088-9095	pfhedge	_	_
55-7	9099-9105	import	_	_
55-8	9106-9112	Hedger	_	_
55-9	9113-9117	from	_	_
55-10	9118-9128	pfhedge.nn	_	_
55-10	9118-9125	pfhedge	_	_
55-11	9129-9135	import	_	_
55-12	9136-9156	MultiLayerPerceptron	_	_
55-13	9158-9163	model	_	_
55-14	9164-9165	=	_	_
55-15	9166-9186	MultiLayerPerceptron	_	_
55-16	9186-9187	(	_	_
55-17	9187-9188	)	_	_
55-18	9189-9195	hedger	_	_
55-19	9196-9197	=	_	_
55-20	9198-9204	Hedger	_	_
55-21	9204-9205	(	_	_
55-22	9205-9210	model	_	_
55-23	9210-9211	,	_	_
55-24	9212-9218	inputs	_	_
55-25	9218-9219	=	_	_
55-26	9219-9220	\[	_	_
55-27	9220-9221	"	_	_
55-28	9221-9234	log\_moneyness	_	_
55-29	9234-9235	"	_	_
55-30	9235-9236	,	_	_
55-31	9237-9238	"	_	_
55-32	9238-9249	expiry\_time	_	_
55-33	9249-9250	"	_	_
55-34	9250-9251	,	_	_
55-35	9252-9253	"	_	_
55-36	9253-9263	volatility	_	_
55-37	9263-9264	"	_	_
55-38	9264-9265	,	_	_
55-39	9266-9267	"	_	_
55-40	9267-9277	prev\_hedge	_	_
55-41	9277-9278	"	_	_
55-42	9278-9279	\]	_	_
55-43	9279-9280	)	_	_
55-44	9281-9282	`	_	_
55-45	9282-9283	`	_	_
55-46	9283-9284	`	_	_
55-47	9286-9289	The	_	_
55-48	9290-9291	`	_	_
55-49	9291-9297	hedger	_	_
55-50	9297-9298	`	_	_
55-51	9299-9301	is	_	_
55-52	9302-9306	also	_	_
55-53	9307-9308	a	_	_
55-54	9309-9310	\[	_	_
55-55	9310-9311	`	_	_
55-56	9311-9317	Module	_	_
55-57	9317-9318	`	_	_
55-58	9318-9319	\]	_	_
55-59	9319-9320	(	_	_
55-60	9320-9325	https	_	_
55-61	9325-9326	:	_	_
55-62	9326-9327	/	_	_
55-63	9327-9328	/	_	_
55-64	9328-9339	pytorch.org	_	_
55-65	9339-9340	/	_	_
55-66	9340-9344	docs	_	_
55-67	9344-9345	/	_	_
55-68	9345-9351	stable	_	_
55-69	9351-9352	/	_	_
55-70	9352-9361	generated	_	_
55-71	9361-9362	/	_	_
55-72	9362-9382	torch.nn.Module.html	_	_
55-73	9382-9383	)	_	_
55-74	9383-9384	.	_	_

#Text=```py hedger # Hedger( #   inputs=\['log\_moneyness', 'expiry\_time', 'volatility', 'prev\_hedge'\] #   (model): MultiLayerPerceptron( #     (0): LazyLinear(in\_features=0, out\_features=32, bias=True) #     (1): ReLU() #     (2): Linear(in\_features=32, out\_features=32, bias=True) #     (3): ReLU() #     (4): Linear(in\_features=32, out\_features=32, bias=True) #     (5): ReLU() #     (6): Linear(in\_features=32, out\_features=32, bias=True) #     (7): ReLU() #     (8): Linear(in\_features=32, out\_features=1, bias=True) #     (9): Identity() #   ) #   (criterion): EntropicRiskMeasure() # ) ```  ### Fit and Price  Now we train our `hedger` so that it minimizes the risk measure through hedging.
56-1	9386-9387	`	_	_
56-2	9387-9388	`	_	_
56-3	9388-9389	`	_	_
56-4	9389-9391	py	_	_
56-5	9392-9398	hedger	_	_
56-6	9399-9400	#	_	_
56-7	9401-9407	Hedger	_	_
56-8	9407-9408	(	_	_
56-9	9409-9410	#	_	_
56-10	9413-9419	inputs	_	_
56-11	9419-9420	=	_	_
56-12	9420-9421	\[	_	_
56-13	9421-9422	'	_	_
56-14	9422-9435	log\_moneyness	_	_
56-15	9435-9436	'	_	_
56-16	9436-9437	,	_	_
56-17	9438-9439	'	_	_
56-18	9439-9450	expiry\_time	_	_
56-19	9450-9451	'	_	_
56-20	9451-9452	,	_	_
56-21	9453-9454	'	_	_
56-22	9454-9464	volatility	_	_
56-23	9464-9465	'	_	_
56-24	9465-9466	,	_	_
56-25	9467-9468	'	_	_
56-26	9468-9478	prev\_hedge	_	_
56-27	9478-9479	'	_	_
56-28	9479-9480	\]	_	_
56-29	9481-9482	#	_	_
56-30	9485-9486	(	_	_
56-31	9486-9491	model	_	_
56-32	9491-9492	)	_	_
56-33	9492-9493	:	_	_
56-34	9494-9514	MultiLayerPerceptron	_	_
56-35	9514-9515	(	_	_
56-36	9516-9517	#	_	_
56-37	9522-9523	(	_	_
56-38	9523-9524	0	_	_
56-39	9524-9525	)	_	_
56-40	9525-9526	:	_	_
56-41	9527-9537	LazyLinear	_	_
56-42	9537-9538	(	_	_
56-43	9538-9549	in\_features	_	_
56-44	9549-9550	=	_	_
56-45	9550-9551	0	_	_
56-46	9551-9552	,	_	_
56-47	9553-9565	out\_features	_	_
56-48	9565-9566	=	_	_
56-49	9566-9568	32	_	_
56-50	9568-9569	,	_	_
56-51	9570-9574	bias	_	_
56-52	9574-9575	=	_	_
56-53	9575-9579	True	_	_
56-54	9579-9580	)	_	_
56-55	9581-9582	#	_	_
56-56	9587-9588	(	_	_
56-57	9588-9589	1	_	_
56-58	9589-9590	)	_	_
56-59	9590-9591	:	_	_
56-60	9592-9596	ReLU	_	_
56-61	9596-9597	(	_	_
56-62	9597-9598	)	_	_
56-63	9599-9600	#	_	_
56-64	9605-9606	(	_	_
56-65	9606-9607	2	_	_
56-66	9607-9608	)	_	_
56-67	9608-9609	:	_	_
56-68	9610-9616	Linear	_	_
56-69	9616-9617	(	_	_
56-70	9617-9628	in\_features	_	_
56-71	9628-9629	=	_	_
56-72	9629-9631	32	_	_
56-73	9631-9632	,	_	_
56-74	9633-9645	out\_features	_	_
56-75	9645-9646	=	_	_
56-76	9646-9648	32	_	_
56-77	9648-9649	,	_	_
56-78	9650-9654	bias	_	_
56-79	9654-9655	=	_	_
56-80	9655-9659	True	_	_
56-81	9659-9660	)	_	_
56-82	9661-9662	#	_	_
56-83	9667-9668	(	_	_
56-84	9668-9669	3	_	_
56-85	9669-9670	)	_	_
56-86	9670-9671	:	_	_
56-87	9672-9676	ReLU	_	_
56-88	9676-9677	(	_	_
56-89	9677-9678	)	_	_
56-90	9679-9680	#	_	_
56-91	9685-9686	(	_	_
56-92	9686-9687	4	_	_
56-93	9687-9688	)	_	_
56-94	9688-9689	:	_	_
56-95	9690-9696	Linear	_	_
56-96	9696-9697	(	_	_
56-97	9697-9708	in\_features	_	_
56-98	9708-9709	=	_	_
56-99	9709-9711	32	_	_
56-100	9711-9712	,	_	_
56-101	9713-9725	out\_features	_	_
56-102	9725-9726	=	_	_
56-103	9726-9728	32	_	_
56-104	9728-9729	,	_	_
56-105	9730-9734	bias	_	_
56-106	9734-9735	=	_	_
56-107	9735-9739	True	_	_
56-108	9739-9740	)	_	_
56-109	9741-9742	#	_	_
56-110	9747-9748	(	_	_
56-111	9748-9749	5	_	_
56-112	9749-9750	)	_	_
56-113	9750-9751	:	_	_
56-114	9752-9756	ReLU	_	_
56-115	9756-9757	(	_	_
56-116	9757-9758	)	_	_
56-117	9759-9760	#	_	_
56-118	9765-9766	(	_	_
56-119	9766-9767	6	_	_
56-120	9767-9768	)	_	_
56-121	9768-9769	:	_	_
56-122	9770-9776	Linear	_	_
56-123	9776-9777	(	_	_
56-124	9777-9788	in\_features	_	_
56-125	9788-9789	=	_	_
56-126	9789-9791	32	_	_
56-127	9791-9792	,	_	_
56-128	9793-9805	out\_features	_	_
56-129	9805-9806	=	_	_
56-130	9806-9808	32	_	_
56-131	9808-9809	,	_	_
56-132	9810-9814	bias	_	_
56-133	9814-9815	=	_	_
56-134	9815-9819	True	_	_
56-135	9819-9820	)	_	_
56-136	9821-9822	#	_	_
56-137	9827-9828	(	_	_
56-138	9828-9829	7	_	_
56-139	9829-9830	)	_	_
56-140	9830-9831	:	_	_
56-141	9832-9836	ReLU	_	_
56-142	9836-9837	(	_	_
56-143	9837-9838	)	_	_
56-144	9839-9840	#	_	_
56-145	9845-9846	(	_	_
56-146	9846-9847	8	_	_
56-147	9847-9848	)	_	_
56-148	9848-9849	:	_	_
56-149	9850-9856	Linear	_	_
56-150	9856-9857	(	_	_
56-151	9857-9868	in\_features	_	_
56-152	9868-9869	=	_	_
56-153	9869-9871	32	_	_
56-154	9871-9872	,	_	_
56-155	9873-9885	out\_features	_	_
56-156	9885-9886	=	_	_
56-157	9886-9887	1	_	_
56-158	9887-9888	,	_	_
56-159	9889-9893	bias	_	_
56-160	9893-9894	=	_	_
56-161	9894-9898	True	_	_
56-162	9898-9899	)	_	_
56-163	9900-9901	#	_	_
56-164	9906-9907	(	_	_
56-165	9907-9908	9	_	_
56-166	9908-9909	)	_	_
56-167	9909-9910	:	_	_
56-168	9911-9919	Identity	_	_
56-169	9919-9920	(	_	_
56-170	9920-9921	)	_	_
56-171	9922-9923	#	_	_
56-172	9926-9927	)	_	_
56-173	9928-9929	#	_	_
56-174	9932-9933	(	_	_
56-175	9933-9942	criterion	_	_
56-176	9942-9943	)	_	_
56-177	9943-9944	:	_	_
56-178	9945-9964	EntropicRiskMeasure	_	_
56-179	9964-9965	(	_	_
56-180	9965-9966	)	_	_
56-181	9967-9968	#	_	_
56-182	9969-9970	)	_	_
56-183	9971-9972	`	_	_
56-184	9972-9973	`	_	_
56-185	9973-9974	`	_	_
56-186	9976-9977	#	_	_
56-187	9977-9978	#	_	_
56-188	9978-9979	#	_	_
56-189	9980-9983	Fit	_	_
56-190	9984-9987	and	_	_
56-191	9988-9993	Price	_	_
56-192	9995-9998	Now	_	_
56-193	9999-10001	we	_	_
56-194	10002-10007	train	_	_
56-195	10008-10011	our	_	_
56-196	10012-10013	`	_	_
56-197	10013-10019	hedger	_	_
56-198	10019-10020	`	_	_
56-199	10021-10023	so	_	_
56-200	10024-10028	that	_	_
56-201	10029-10031	it	_	_
56-202	10032-10041	minimizes	_	_
56-203	10042-10045	the	_	_
56-204	10046-10050	risk	_	_
56-205	10051-10058	measure	_	_
56-206	10059-10066	through	_	_
56-207	10067-10074	hedging	_	_
56-208	10074-10075	.	_	_

#Text=The `hedger` is trained as follows.
57-1	10077-10080	The	_	_
57-2	10081-10082	`	_	_
57-3	10082-10088	hedger	_	_
57-4	10088-10089	`	_	_
57-5	10090-10092	is	_	_
57-6	10093-10100	trained	_	_
57-7	10101-10103	as	_	_
57-8	10104-10111	follows	_	_
57-9	10111-10112	.	_	_

#Text=In each epoch, we generate Monte Carlo paths of the asset prices and let the `hedger` hedge the derivative by trading the stock.
58-1	10113-10115	In	_	_
58-2	10116-10120	each	_	_
58-3	10121-10126	epoch	_	_
58-4	10126-10127	,	_	_
58-5	10128-10130	we	_	_
58-6	10131-10139	generate	_	_
58-7	10140-10145	Monte	_	_
58-8	10146-10151	Carlo	_	_
58-9	10152-10157	paths	_	_
58-10	10158-10160	of	_	_
58-11	10161-10164	the	_	_
58-12	10165-10170	asset	_	_
58-13	10171-10177	prices	_	_
58-14	10178-10181	and	_	_
58-15	10182-10185	let	_	_
58-16	10186-10189	the	_	_
58-17	10190-10191	`	_	_
58-18	10191-10197	hedger	_	_
58-19	10197-10198	`	_	_
58-20	10199-10204	hedge	_	_
58-21	10205-10208	the	_	_
58-22	10209-10219	derivative	_	_
58-23	10220-10222	by	_	_
58-24	10223-10230	trading	_	_
58-25	10231-10234	the	_	_
58-26	10235-10240	stock	_	_
58-27	10240-10241	.	_	_

#Text=The hedger's risk measure (`EntropicRiskMeasure()` in our case) is computed from the resulting profit and loss distribution, and the parameters in the `model` are updated.
59-1	10242-10245	The	_	_
59-2	10246-10254	hedger's	_	_
59-3	10255-10259	risk	_	_
59-4	10260-10267	measure	_	_
59-5	10268-10269	(	_	_
59-6	10269-10270	`	_	_
59-7	10270-10289	EntropicRiskMeasure	_	_
59-8	10289-10290	(	_	_
59-9	10290-10291	)	_	_
59-10	10291-10292	`	_	_
59-11	10293-10295	in	_	_
59-12	10296-10299	our	_	_
59-13	10300-10304	case	_	_
59-14	10304-10305	)	_	_
59-15	10306-10308	is	_	_
59-16	10309-10317	computed	_	_
59-17	10318-10322	from	_	_
59-18	10323-10326	the	_	_
59-19	10327-10336	resulting	_	_
59-20	10337-10343	profit	_	_
59-21	10344-10347	and	_	_
59-22	10348-10352	loss	_	_
59-23	10353-10365	distribution	_	_
59-24	10365-10366	,	_	_
59-25	10367-10370	and	_	_
59-26	10371-10374	the	_	_
59-27	10375-10385	parameters	_	_
59-28	10386-10388	in	_	_
59-29	10389-10392	the	_	_
59-30	10393-10394	`	_	_
59-31	10394-10399	model	_	_
59-32	10399-10400	`	_	_
59-33	10401-10404	are	_	_
59-34	10405-10412	updated	_	_
59-35	10412-10413	.	_	_

#Text=```py hedger.fit(derivative, n\_epochs=200) ```  Once we have trained the `hedger`, we can evaluate the derivative price as utility indifference price (For details, see \[Deep Hedging\]\[deep-hedging-arxiv\] and references therein).
60-1	10415-10416	`	_	_
60-2	10416-10417	`	_	_
60-3	10417-10418	`	_	_
60-4	10418-10420	py	_	_
60-5	10421-10431	hedger.fit	_	_
60-6	10431-10432	(	_	_
60-7	10432-10442	derivative	_	_
60-8	10442-10443	,	_	_
60-9	10444-10452	n\_epochs	_	_
60-10	10452-10453	=	_	_
60-11	10453-10456	200	_	_
60-12	10456-10457	)	_	_
60-13	10458-10459	`	_	_
60-14	10459-10460	`	_	_
60-15	10460-10461	`	_	_
60-16	10463-10467	Once	_	_
60-17	10468-10470	we	_	_
60-18	10471-10475	have	_	_
60-19	10476-10483	trained	_	_
60-20	10484-10487	the	_	_
60-21	10488-10489	`	_	_
60-22	10489-10495	hedger	_	_
60-23	10495-10496	`	_	_
60-24	10496-10497	,	_	_
60-25	10498-10500	we	_	_
60-26	10501-10504	can	_	_
60-27	10505-10513	evaluate	_	_
60-28	10514-10517	the	_	_
60-29	10518-10528	derivative	_	_
60-30	10529-10534	price	_	_
60-31	10535-10537	as	_	_
60-32	10538-10545	utility	_	_
60-33	10546-10558	indifference	_	_
60-34	10559-10564	price	_	_
60-35	10565-10566	(	_	_
60-36	10566-10569	For	_	_
60-37	10570-10577	details	_	_
60-38	10577-10578	,	_	_
60-39	10579-10582	see	_	_
60-40	10583-10584	\[	_	_
60-41	10584-10588	Deep	_	_
60-42	10589-10596	Hedging	_	_
60-43	10596-10597	\]	_	_
60-44	10597-10598	\[	_	_
60-45	10598-10616	deep-hedging-arxiv	_	_
60-46	10616-10617	\]	_	_
60-47	10618-10621	and	_	_
60-48	10622-10632	references	_	_
60-49	10633-10640	therein	_	_
60-50	10640-10641	)	_	_
60-51	10641-10642	.	_	_

#Text=```py price = hedger.price(derivative) ```  ## More Examples  ### Use GPU  To employ the desired \[`device`\](https://pytorch.org/docs/stable/tensor\_attributes.html#torch.torch.device) and/or \[`dtype`\](https://pytorch.org/docs/stable/tensor\_attributes.html#torch.torch.dtype) in fitting and pricing, use `to` method.
61-1	10644-10645	`	_	_
61-2	10645-10646	`	_	_
61-3	10646-10647	`	_	_
61-4	10647-10649	py	_	_
61-5	10650-10655	price	_	_
61-6	10656-10657	=	_	_
61-7	10658-10670	hedger.price	_	_
61-8	10670-10671	(	_	_
61-9	10671-10681	derivative	_	_
61-10	10681-10682	)	_	_
61-11	10683-10684	`	_	_
61-12	10684-10685	`	_	_
61-13	10685-10686	`	_	_
61-14	10688-10689	#	_	_
61-15	10689-10690	#	_	_
61-16	10691-10695	More	_	_
61-17	10696-10704	Examples	_	_
61-18	10706-10707	#	_	_
61-19	10707-10708	#	_	_
61-20	10708-10709	#	_	_
61-21	10710-10713	Use	_	_
61-22	10714-10717	GPU	_	_
61-23	10719-10721	To	_	_
61-24	10722-10728	employ	_	_
61-25	10729-10732	the	_	_
61-26	10733-10740	desired	_	_
61-27	10741-10742	\[	_	_
61-28	10742-10743	`	_	_
61-29	10743-10749	device	_	_
61-30	10749-10750	`	_	_
61-31	10750-10751	\]	_	_
61-32	10751-10752	(	_	_
61-33	10752-10757	https	_	_
61-34	10757-10758	:	_	_
61-35	10758-10759	/	_	_
61-36	10759-10760	/	_	_
61-37	10760-10771	pytorch.org	_	_
61-38	10771-10772	/	_	_
61-39	10772-10776	docs	_	_
61-40	10776-10777	/	_	_
61-41	10777-10783	stable	_	_
61-42	10783-10784	/	_	_
61-43	10784-10806	tensor\_attributes.html	_	_
61-44	10806-10807	#	_	_
61-45	10807-10825	torch.torch.device	_	_
61-46	10825-10826	)	_	_
61-47	10827-10830	and	_	_
61-48	10830-10831	/	_	_
61-49	10831-10833	or	_	_
61-50	10834-10835	\[	_	_
61-51	10835-10836	`	_	_
61-52	10836-10841	dtype	_	_
61-53	10841-10842	`	_	_
61-54	10842-10843	\]	_	_
61-55	10843-10844	(	_	_
61-56	10844-10849	https	_	_
61-57	10849-10850	:	_	_
61-58	10850-10851	/	_	_
61-59	10851-10852	/	_	_
61-60	10852-10863	pytorch.org	_	_
61-61	10863-10864	/	_	_
61-62	10864-10868	docs	_	_
61-63	10868-10869	/	_	_
61-64	10869-10875	stable	_	_
61-65	10875-10876	/	_	_
61-66	10876-10898	tensor\_attributes.html	_	_
61-67	10898-10899	#	_	_
61-68	10899-10916	torch.torch.dtype	_	_
61-69	10916-10917	)	_	_
61-70	10918-10920	in	_	_
61-71	10921-10928	fitting	_	_
61-72	10929-10932	and	_	_
61-73	10933-10940	pricing	_	_
61-74	10940-10941	,	_	_
61-75	10942-10945	use	_	_
61-76	10946-10947	`	_	_
61-77	10947-10949	to	_	_
61-78	10949-10950	`	_	_
61-79	10951-10957	method	_	_
61-80	10957-10958	.	_	_

#Text=```py dtype = torch.float64 device = torch.device("cuda:0")  derivative = EuropeanOption(BrownianStock()).to(dtype, device) hedger = Hedger(...).to(dtype, device) ```  ### Black-Scholes' Delta-Hedging Strategy  In this strategy, a hedger incessantly rebalances their portfolio and keeps it \[delta-neutral\](https://en.wikipedia.org/wiki/Delta\_neutral).
62-1	10960-10961	`	_	_
62-2	10961-10962	`	_	_
62-3	10962-10963	`	_	_
62-4	10963-10965	py	_	_
62-5	10966-10971	dtype	_	_
62-6	10972-10973	=	_	_
62-7	10974-10987	torch.float64	_	_
62-8	10988-10994	device	_	_
62-9	10995-10996	=	_	_
62-10	10997-11009	torch.device	_	_
62-11	11009-11010	(	_	_
62-12	11010-11011	"	_	_
62-13	11011-11015	cuda	_	_
62-14	11015-11016	:	_	_
62-15	11016-11017	0	_	_
62-16	11017-11018	"	_	_
62-17	11018-11019	)	_	_
62-18	11021-11031	derivative	_	_
62-19	11032-11033	=	_	_
62-20	11034-11048	EuropeanOption	_	_
62-21	11048-11049	(	_	_
62-22	11049-11062	BrownianStock	_	_
62-23	11062-11063	(	_	_
62-24	11063-11064	)	_	_
62-25	11064-11065	)	_	_
62-26	11065-11066	.	_	_
62-27	11066-11068	to	_	_
62-28	11068-11069	(	_	_
62-29	11069-11074	dtype	_	_
62-30	11074-11075	,	_	_
62-31	11076-11082	device	_	_
62-32	11082-11083	)	_	_
62-33	11084-11090	hedger	_	_
62-34	11091-11092	=	_	_
62-35	11093-11099	Hedger	_	_
62-36	11099-11100	(	_	_
62-37	11100-11101	.	_	_
62-38	11101-11102	.	_	_
62-39	11102-11103	.	_	_
62-40	11103-11104	)	_	_
62-41	11104-11105	.	_	_
62-42	11105-11107	to	_	_
62-43	11107-11108	(	_	_
62-44	11108-11113	dtype	_	_
62-45	11113-11114	,	_	_
62-46	11115-11121	device	_	_
62-47	11121-11122	)	_	_
62-48	11123-11124	`	_	_
62-49	11124-11125	`	_	_
62-50	11125-11126	`	_	_
62-51	11128-11129	#	_	_
62-52	11129-11130	#	_	_
62-53	11130-11131	#	_	_
62-54	11132-11145	Black-Scholes	_	_
62-55	11145-11146	'	_	_
62-56	11147-11160	Delta-Hedging	_	_
62-57	11161-11169	Strategy	_	_
62-58	11171-11173	In	_	_
62-59	11174-11178	this	_	_
62-60	11179-11187	strategy	_	_
62-61	11187-11188	,	_	_
62-62	11189-11190	a	_	_
62-63	11191-11197	hedger	_	_
62-64	11198-11209	incessantly	_	_
62-65	11210-11220	rebalances	_	_
62-66	11221-11226	their	_	_
62-67	11227-11236	portfolio	_	_
62-68	11237-11240	and	_	_
62-69	11241-11246	keeps	_	_
62-70	11247-11249	it	_	_
62-71	11250-11251	\[	_	_
62-72	11251-11264	delta-neutral	_	_
62-73	11264-11265	\]	_	_
62-74	11265-11266	(	_	_
62-75	11266-11271	https	_	_
62-76	11271-11272	:	_	_
62-77	11272-11273	/	_	_
62-78	11273-11274	/	_	_
62-79	11274-11290	en.wikipedia.org	_	_
62-80	11290-11291	/	_	_
62-81	11291-11295	wiki	_	_
62-82	11295-11296	/	_	_
62-83	11296-11309	Delta\_neutral	_	_
62-84	11309-11310	)	_	_
62-85	11310-11311	.	_	_

#Text=The hedge-ratio at each time step is given by the Black-Scholes' delta.
63-1	11312-11315	The	_	_
63-2	11316-11327	hedge-ratio	_	_
63-3	11328-11330	at	_	_
63-4	11331-11335	each	_	_
63-5	11336-11340	time	_	_
63-6	11341-11345	step	_	_
63-7	11346-11348	is	_	_
63-8	11349-11354	given	_	_
63-9	11355-11357	by	_	_
63-10	11358-11361	the	_	_
63-11	11362-11375	Black-Scholes	_	_
63-12	11375-11376	'	_	_
63-13	11377-11382	delta	_	_
63-14	11382-11383	.	_	_

#Text=This strategy is the optimal one in the absence of cost.
64-1	11385-11389	This	_	_
64-2	11390-11398	strategy	_	_
64-3	11399-11401	is	_	_
64-4	11402-11405	the	_	_
64-5	11406-11413	optimal	_	_
64-6	11414-11417	one	_	_
64-7	11418-11420	in	_	_
64-8	11421-11424	the	_	_
64-9	11425-11432	absence	_	_
64-10	11433-11435	of	_	_
64-11	11436-11440	cost	_	_
64-12	11440-11441	.	_	_

#Text=On the other hand, this strategy transacts too frequently and consumes too much transaction cost.
65-1	11442-11444	On	_	_
65-2	11445-11448	the	_	_
65-3	11449-11454	other	_	_
65-4	11455-11459	hand	_	_
65-5	11459-11460	,	_	_
65-6	11461-11465	this	_	_
65-7	11466-11474	strategy	_	_
65-8	11475-11484	transacts	_	_
65-9	11485-11488	too	_	_
65-10	11489-11499	frequently	_	_
65-11	11500-11503	and	_	_
65-12	11504-11512	consumes	_	_
65-13	11513-11516	too	_	_
65-14	11517-11521	much	_	_
65-15	11522-11533	transaction	_	_
65-16	11534-11538	cost	_	_
65-17	11538-11539	.	_	_

#Text=```py from pfhedge.nn import BlackScholes from pfhedge.nn import Hedger  derivative = EuropeanOption(BrownianStock(cost=1e-4))  model = BlackScholes(derivative) hedger = Hedger(model, inputs=model.inputs()) ```  ### Whalley-Wilmott's Asymptotically Optimal Strategy for Small Costs  This strategy is proposed by \[Whalley \*et al.\* 1997\]\[whalley-wilmott\] and is proved to be optimal for asymptotically small transaction costs.
66-1	11541-11542	`	_	_
66-2	11542-11543	`	_	_
66-3	11543-11544	`	_	_
66-4	11544-11546	py	_	_
66-5	11547-11551	from	_	_
66-6	11552-11562	pfhedge.nn	_	_
66-7	11563-11569	import	_	_
66-8	11570-11582	BlackScholes	_	_
66-9	11583-11587	from	_	_
66-10	11588-11598	pfhedge.nn	_	_
66-11	11599-11605	import	_	_
66-12	11606-11612	Hedger	_	_
66-13	11614-11624	derivative	_	_
66-14	11625-11626	=	_	_
66-15	11627-11641	EuropeanOption	_	_
66-16	11641-11642	(	_	_
66-17	11642-11655	BrownianStock	_	_
66-18	11655-11656	(	_	_
66-19	11656-11660	cost	_	_
66-20	11660-11661	=	_	_
66-21	11661-11663	1e	_	_
66-22	11663-11664	-	_	_
66-23	11664-11665	4	_	_
66-24	11665-11666	)	_	_
66-25	11666-11667	)	_	_
66-26	11669-11674	model	_	_
66-27	11675-11676	=	_	_
66-28	11677-11689	BlackScholes	_	_
66-29	11689-11690	(	_	_
66-30	11690-11700	derivative	_	_
66-31	11700-11701	)	_	_
66-32	11702-11708	hedger	_	_
66-33	11709-11710	=	_	_
66-34	11711-11717	Hedger	_	_
66-35	11717-11718	(	_	_
66-36	11718-11723	model	_	_
66-37	11723-11724	,	_	_
66-38	11725-11731	inputs	_	_
66-39	11731-11732	=	_	_
66-40	11732-11744	model.inputs	_	_
66-41	11744-11745	(	_	_
66-42	11745-11746	)	_	_
66-43	11746-11747	)	_	_
66-44	11748-11749	`	_	_
66-45	11749-11750	`	_	_
66-46	11750-11751	`	_	_
66-47	11753-11754	#	_	_
66-48	11754-11755	#	_	_
66-49	11755-11756	#	_	_
66-50	11757-11774	Whalley-Wilmott's	_	_
66-51	11775-11789	Asymptotically	_	_
66-52	11790-11797	Optimal	_	_
66-53	11798-11806	Strategy	_	_
66-54	11807-11810	for	_	_
66-55	11811-11816	Small	_	_
66-56	11817-11822	Costs	_	_
66-57	11824-11828	This	_	_
66-58	11829-11837	strategy	_	_
66-59	11838-11840	is	_	_
66-60	11841-11849	proposed	_	_
66-61	11850-11852	by	_	_
66-62	11853-11854	\[	_	_
66-63	11854-11861	Whalley	_	_
66-64	11862-11863	\*	_	_
66-65	11863-11865	et	_	_
66-66	11866-11868	al	_	_
66-67	11868-11869	.	_	_
66-68	11869-11870	\*	_	_
66-69	11871-11875	1997	_	_
66-70	11875-11876	\]	_	_
66-71	11876-11877	\[	_	_
66-72	11877-11892	whalley-wilmott	_	_
66-73	11892-11893	\]	_	_
66-74	11894-11897	and	_	_
66-75	11898-11900	is	_	_
66-76	11901-11907	proved	_	_
66-77	11908-11910	to	_	_
66-78	11911-11913	be	_	_
66-79	11914-11921	optimal	_	_
66-80	11922-11925	for	_	_
66-81	11926-11940	asymptotically	_	_
66-82	11941-11946	small	_	_
66-83	11947-11958	transaction	_	_
66-84	11959-11964	costs	_	_
66-85	11964-11965	.	_	_

#Text=In this strategy, a hedger always maintains their hedge ratio in the range (called no-transaction band) while they never transact inside this range.
67-1	11967-11969	In	_	_
67-2	11970-11974	this	_	_
67-3	11975-11983	strategy	_	_
67-4	11983-11984	,	_	_
67-5	11985-11986	a	_	_
67-6	11987-11993	hedger	_	_
67-7	11994-12000	always	_	_
67-8	12001-12010	maintains	_	_
67-9	12011-12016	their	_	_
67-10	12017-12022	hedge	_	_
67-11	12023-12028	ratio	_	_
67-12	12029-12031	in	_	_
67-13	12032-12035	the	_	_
67-14	12036-12041	range	_	_
67-15	12042-12043	(	_	_
67-16	12043-12049	called	_	_
67-17	12050-12064	no-transaction	_	_
67-18	12065-12069	band	_	_
67-19	12069-12070	)	_	_
67-20	12071-12076	while	_	_
67-21	12077-12081	they	_	_
67-22	12082-12087	never	_	_
67-23	12088-12096	transact	_	_
67-24	12097-12103	inside	_	_
67-25	12104-12108	this	_	_
67-26	12109-12114	range	_	_
67-27	12114-12115	.	_	_

#Text=This strategy is supposed to be optimal in the limit of small transaction costs, while suboptimal for large transaction costs.
68-1	12116-12120	This	_	_
68-2	12121-12129	strategy	_	_
68-3	12130-12132	is	_	_
68-4	12133-12141	supposed	_	_
68-5	12142-12144	to	_	_
68-6	12145-12147	be	_	_
68-7	12148-12155	optimal	_	_
68-8	12156-12158	in	_	_
68-9	12159-12162	the	_	_
68-10	12163-12168	limit	_	_
68-11	12169-12171	of	_	_
68-12	12172-12177	small	_	_
68-13	12178-12189	transaction	_	_
68-14	12190-12195	costs	_	_
68-15	12195-12196	,	_	_
68-16	12197-12202	while	_	_
68-17	12203-12213	suboptimal	_	_
68-18	12214-12217	for	_	_
68-19	12218-12223	large	_	_
68-20	12224-12235	transaction	_	_
68-21	12236-12241	costs	_	_
68-22	12241-12242	.	_	_

#Text=```py from pfhedge.nn import Hedger from pfhedge.nn import WhalleyWilmott  derivative = EuropeanOption(BrownianStock(cost=1e-3))  model = WhalleyWilmott(derivative) hedger = Hedger(model, inputs=model.inputs()) ```  ### Your Own Module  You can employ any \[`Module`\](https://pytorch.org/docs/stable/generated/torch.nn.Module.html) you build as a hedging model.
69-1	12244-12245	`	_	_
69-2	12245-12246	`	_	_
69-3	12246-12247	`	_	_
69-4	12247-12249	py	_	_
69-5	12250-12254	from	_	_
69-6	12255-12265	pfhedge.nn	_	_
69-7	12266-12272	import	_	_
69-8	12273-12279	Hedger	_	_
69-9	12280-12284	from	_	_
69-10	12285-12295	pfhedge.nn	_	_
69-11	12296-12302	import	_	_
69-12	12303-12317	WhalleyWilmott	_	_
69-13	12319-12329	derivative	_	_
69-14	12330-12331	=	_	_
69-15	12332-12346	EuropeanOption	_	_
69-16	12346-12347	(	_	_
69-17	12347-12360	BrownianStock	_	_
69-18	12360-12361	(	_	_
69-19	12361-12365	cost	_	_
69-20	12365-12366	=	_	_
69-21	12366-12368	1e	_	_
69-22	12368-12369	-	_	_
69-23	12369-12370	3	_	_
69-24	12370-12371	)	_	_
69-25	12371-12372	)	_	_
69-26	12374-12379	model	_	_
69-27	12380-12381	=	_	_
69-28	12382-12396	WhalleyWilmott	_	_
69-29	12396-12397	(	_	_
69-30	12397-12407	derivative	_	_
69-31	12407-12408	)	_	_
69-32	12409-12415	hedger	_	_
69-33	12416-12417	=	_	_
69-34	12418-12424	Hedger	_	_
69-35	12424-12425	(	_	_
69-36	12425-12430	model	_	_
69-37	12430-12431	,	_	_
69-38	12432-12438	inputs	_	_
69-39	12438-12439	=	_	_
69-40	12439-12451	model.inputs	_	_
69-41	12451-12452	(	_	_
69-42	12452-12453	)	_	_
69-43	12453-12454	)	_	_
69-44	12455-12456	`	_	_
69-45	12456-12457	`	_	_
69-46	12457-12458	`	_	_
69-47	12460-12461	#	_	_
69-48	12461-12462	#	_	_
69-49	12462-12463	#	_	_
69-50	12464-12468	Your	_	_
69-51	12469-12472	Own	_	_
69-52	12473-12479	Module	_	_
69-53	12481-12484	You	_	_
69-54	12485-12488	can	_	_
69-55	12489-12495	employ	_	_
69-56	12496-12499	any	_	_
69-57	12500-12501	\[	_	_
69-58	12501-12502	`	_	_
69-59	12502-12508	Module	_	_
69-60	12508-12509	`	_	_
69-61	12509-12510	\]	_	_
69-62	12510-12511	(	_	_
69-63	12511-12516	https	_	_
69-64	12516-12517	:	_	_
69-65	12517-12518	/	_	_
69-66	12518-12519	/	_	_
69-67	12519-12530	pytorch.org	_	_
69-68	12530-12531	/	_	_
69-69	12531-12535	docs	_	_
69-70	12535-12536	/	_	_
69-71	12536-12542	stable	_	_
69-72	12542-12543	/	_	_
69-73	12543-12552	generated	_	_
69-74	12552-12553	/	_	_
69-75	12553-12573	torch.nn.Module.html	_	_
69-76	12573-12574	)	_	_
69-77	12575-12578	you	_	_
69-78	12579-12584	build	_	_
69-79	12585-12587	as	_	_
69-80	12588-12589	a	_	_
69-81	12590-12597	hedging	_	_
69-82	12598-12603	model	_	_
69-83	12603-12604	.	_	_

#Text=The input/output shapes is `(N, H\_in) \-> (N, 1)`, where `N` is the number of Monte Carlo paths of assets and `H\_in` is the number of input features.
70-1	12605-12608	The	_	_
70-2	12609-12614	input	_	_
70-3	12614-12615	/	_	_
70-4	12615-12621	output	_	_
70-5	12622-12628	shapes	_	_
70-6	12629-12631	is	_	_
70-7	12632-12633	`	_	_
70-8	12633-12634	(	_	_
70-9	12634-12635	N	_	_
70-10	12635-12636	,	_	_
70-11	12637-12641	H\_in	_	_
70-12	12641-12642	)	_	_
70-13	12643-12644	-	_	_
70-14	12644-12645	>	_	_
70-15	12646-12647	(	_	_
70-16	12647-12648	N	_	_
70-17	12648-12649	,	_	_
70-18	12650-12651	1	_	_
70-19	12651-12652	)	_	_
70-20	12652-12653	`	_	_
70-21	12653-12654	,	_	_
70-22	12655-12660	where	_	_
70-23	12661-12662	`	_	_
70-24	12662-12663	N	_	_
70-25	12663-12664	`	_	_
70-26	12665-12667	is	_	_
70-27	12668-12671	the	_	_
70-28	12672-12678	number	_	_
70-29	12679-12681	of	_	_
70-30	12682-12687	Monte	_	_
70-31	12688-12693	Carlo	_	_
70-32	12694-12699	paths	_	_
70-33	12700-12702	of	_	_
70-34	12703-12709	assets	_	_
70-35	12710-12713	and	_	_
70-36	12714-12715	`	_	_
70-37	12715-12719	H\_in	_	_
70-38	12719-12720	`	_	_
70-39	12721-12723	is	_	_
70-40	12724-12727	the	_	_
70-41	12728-12734	number	_	_
70-42	12735-12737	of	_	_
70-43	12738-12743	input	_	_
70-44	12744-12752	features	_	_
70-45	12752-12753	.	_	_

#Text=Here we show an example of \*\*No-Transaction Band Network\*\*, which is proposed in \[Imaki \*et al.\* 21\]\[ntb-network-arxiv\].
71-1	12755-12759	Here	_	_
71-2	12760-12762	we	_	_
71-3	12763-12767	show	_	_
71-4	12768-12770	an	_	_
71-5	12771-12778	example	_	_
71-6	12779-12781	of	_	_
71-7	12782-12783	\*	_	_
71-8	12783-12784	\*	_	_
71-9	12784-12798	No-Transaction	_	_
71-10	12799-12803	Band	_	_
71-11	12804-12811	Network	_	_
71-12	12811-12812	\*	_	_
71-13	12812-12813	\*	_	_
71-14	12813-12814	,	_	_
71-15	12815-12820	which	_	_
71-16	12821-12823	is	_	_
71-17	12824-12832	proposed	_	_
71-18	12833-12835	in	_	_
71-19	12836-12837	\[	_	_
71-20	12837-12842	Imaki	_	_
71-21	12843-12844	\*	_	_
71-22	12844-12846	et	_	_
71-23	12847-12849	al	_	_
71-24	12849-12850	.	_	_
71-25	12850-12851	\*	_	_
71-26	12852-12854	21	_	_
71-27	12854-12855	\]	_	_
71-28	12855-12856	\[	_	_
71-29	12856-12873	ntb-network-arxiv	_	_
71-30	12873-12874	\]	_	_
71-31	12874-12875	.	_	_

#Text=```py import torch import torch.nn.functional as fn from torch import Tensor from torch.nn import Module  from pfhedge.nn import BlackScholes from pfhedge.nn import Clamp from pfhedge.nn import Hedger from pfhedge.nn import MultiLayerPerceptron   class NoTransactionBandNet(Module):     def \_\_init\_\_(self, derivative):         super().
72-1	12877-12878	`	_	_
72-2	12878-12879	`	_	_
72-3	12879-12880	`	_	_
72-4	12880-12882	py	_	_
72-5	12883-12889	import	_	_
72-6	12890-12895	torch	_	_
72-7	12896-12902	import	_	_
72-8	12903-12922	torch.nn.functional	_	_
72-8	12903-12908	torch	_	_
72-9	12923-12925	as	_	_
72-10	12926-12928	fn	_	_
72-11	12929-12933	from	_	_
72-12	12934-12939	torch	_	_
72-13	12940-12946	import	_	_
72-14	12947-12953	Tensor	_	_
72-15	12954-12958	from	_	_
72-16	12959-12967	torch.nn	_	_
72-17	12968-12974	import	_	_
72-18	12975-12981	Module	_	_
72-19	12983-12987	from	_	_
72-20	12988-12998	pfhedge.nn	_	_
72-21	12999-13005	import	_	_
72-22	13006-13018	BlackScholes	_	_
72-23	13019-13023	from	_	_
72-24	13024-13034	pfhedge.nn	_	_
72-25	13035-13041	import	_	_
72-26	13042-13047	Clamp	_	_
72-27	13048-13052	from	_	_
72-28	13053-13063	pfhedge.nn	_	_
72-29	13064-13070	import	_	_
72-30	13071-13077	Hedger	_	_
72-31	13078-13082	from	_	_
72-32	13083-13093	pfhedge.nn	_	_
72-33	13094-13100	import	_	_
72-34	13101-13121	MultiLayerPerceptron	_	_
72-35	13124-13129	class	_	_
72-36	13130-13150	NoTransactionBandNet	_	_
72-37	13150-13151	(	_	_
72-38	13151-13157	Module	_	_
72-39	13157-13158	)	_	_
72-40	13158-13159	:	_	_
72-41	13164-13167	def	_	_
72-42	13168-13169	\_	_	_
72-43	13169-13170	\_	_	_
72-44	13170-13174	init	_	_
72-45	13174-13175	\_	_	_
72-46	13175-13176	\_	_	_
72-47	13176-13177	(	_	_
72-48	13177-13181	self	_	_
72-49	13181-13182	,	_	_
72-50	13183-13193	derivative	_	_
72-51	13193-13194	)	_	_
72-52	13194-13195	:	_	_
72-53	13204-13209	super	_	_
72-54	13209-13210	(	_	_
72-55	13210-13211	)	_	_
72-56	13211-13212	.	_	_

#Text=\_\_init\_\_()          self.delta = BlackScholes(derivative)         self.mlp = MultiLayerPerceptron(out\_features=2)         self.clamp = Clamp()      def inputs(self):         return self.delta.inputs() + \["prev\_hedge"\]      def forward(self, input: Tensor) \-> Tensor:         prev\_hedge = input\[..., \[-1\]\]          delta = self.delta(input\[..., :-1\])         width = self.mlp(input\[..., :-1\])          min = delta - fn.leaky\_relu(width\[..., \[0\]\])         max = delta + fn.leaky\_relu(width\[..., \[1\]\])          return self.clamp(prev\_hedge, min=min, max=max)   model = NoTransactionBandNet(derivative) hedger = Hedger(model, inputs=model.inputs()) ```  ### Autogreek  A module \[`pfhedge.autogreek`\](https://pfnet-research.github.io/pfhedge/autogreek.html) provides functions implementing automatic evaluation of greeks using automatic differentiation.
73-1	13212-13213	\_	_	_
73-2	13213-13214	\_	_	_
73-3	13214-13218	init	_	_
73-4	13218-13219	\_	_	_
73-5	13219-13220	\_	_	_
73-6	13220-13221	(	_	_
73-7	13221-13222	)	_	_
73-8	13232-13242	self.delta	_	_
73-9	13243-13244	=	_	_
73-10	13245-13257	BlackScholes	_	_
73-11	13257-13258	(	_	_
73-12	13258-13268	derivative	_	_
73-13	13268-13269	)	_	_
73-14	13278-13286	self.mlp	_	_
73-15	13287-13288	=	_	_
73-16	13289-13309	MultiLayerPerceptron	_	_
73-17	13309-13310	(	_	_
73-18	13310-13322	out\_features	_	_
73-19	13322-13323	=	_	_
73-20	13323-13324	2	_	_
73-21	13324-13325	)	_	_
73-22	13334-13344	self.clamp	_	_
73-23	13345-13346	=	_	_
73-24	13347-13352	Clamp	_	_
73-25	13352-13353	(	_	_
73-26	13353-13354	)	_	_
73-27	13360-13363	def	_	_
73-28	13364-13370	inputs	_	_
73-29	13370-13371	(	_	_
73-30	13371-13375	self	_	_
73-31	13375-13376	)	_	_
73-32	13376-13377	:	_	_
73-33	13386-13392	return	_	_
73-34	13393-13410	self.delta.inputs	_	_
73-35	13410-13411	(	_	_
73-36	13411-13412	)	_	_
73-37	13413-13414	+	_	_
73-38	13415-13416	\[	_	_
73-39	13416-13417	"	_	_
73-40	13417-13427	prev\_hedge	_	_
73-41	13427-13428	"	_	_
73-42	13428-13429	\]	_	_
73-43	13435-13438	def	_	_
73-44	13439-13446	forward	_	_
73-45	13446-13447	(	_	_
73-46	13447-13451	self	_	_
73-47	13451-13452	,	_	_
73-48	13453-13458	input	_	_
73-49	13458-13459	:	_	_
73-50	13460-13466	Tensor	_	_
73-51	13466-13467	)	_	_
73-52	13468-13469	-	_	_
73-53	13469-13470	>	_	_
73-54	13471-13477	Tensor	_	_
73-55	13477-13478	:	_	_
73-56	13487-13497	prev\_hedge	_	_
73-57	13498-13499	=	_	_
73-58	13500-13505	input	_	_
73-59	13505-13506	\[	_	_
73-60	13506-13507	.	_	_
73-61	13507-13508	.	_	_
73-62	13508-13509	.	_	_
73-63	13509-13510	,	_	_
73-64	13511-13512	\[	_	_
73-65	13512-13513	-	_	_
73-66	13513-13514	1	_	_
73-67	13514-13515	\]	_	_
73-68	13515-13516	\]	_	_
73-69	13526-13531	delta	_	_
73-70	13532-13533	=	_	_
73-71	13534-13544	self.delta	_	_
73-72	13544-13545	(	_	_
73-73	13545-13550	input	_	_
73-74	13550-13551	\[	_	_
73-75	13551-13552	.	_	_
73-76	13552-13553	.	_	_
73-77	13553-13554	.	_	_
73-78	13554-13555	,	_	_
73-79	13556-13557	:	_	_
73-80	13557-13558	-	_	_
73-81	13558-13559	1	_	_
73-82	13559-13560	\]	_	_
73-83	13560-13561	)	_	_
73-84	13570-13575	width	_	_
73-85	13576-13577	=	_	_
73-86	13578-13586	self.mlp	_	_
73-87	13586-13587	(	_	_
73-88	13587-13592	input	_	_
73-89	13592-13593	\[	_	_
73-90	13593-13594	.	_	_
73-91	13594-13595	.	_	_
73-92	13595-13596	.	_	_
73-93	13596-13597	,	_	_
73-94	13598-13599	:	_	_
73-95	13599-13600	-	_	_
73-96	13600-13601	1	_	_
73-97	13601-13602	\]	_	_
73-98	13602-13603	)	_	_
73-99	13613-13616	min	_	_
73-100	13617-13618	=	_	_
73-101	13619-13624	delta	_	_
73-102	13625-13626	-	_	_
73-103	13627-13640	fn.leaky\_relu	_	_
73-104	13640-13641	(	_	_
73-105	13641-13646	width	_	_
73-106	13646-13647	\[	_	_
73-107	13647-13648	.	_	_
73-108	13648-13649	.	_	_
73-109	13649-13650	.	_	_
73-110	13650-13651	,	_	_
73-111	13652-13653	\[	_	_
73-112	13653-13654	0	_	_
73-113	13654-13655	\]	_	_
73-114	13655-13656	\]	_	_
73-115	13656-13657	)	_	_
73-116	13666-13669	max	_	_
73-117	13670-13671	=	_	_
73-118	13672-13677	delta	_	_
73-119	13678-13679	+	_	_
73-120	13680-13693	fn.leaky\_relu	_	_
73-121	13693-13694	(	_	_
73-122	13694-13699	width	_	_
73-123	13699-13700	\[	_	_
73-124	13700-13701	.	_	_
73-125	13701-13702	.	_	_
73-126	13702-13703	.	_	_
73-127	13703-13704	,	_	_
73-128	13705-13706	\[	_	_
73-129	13706-13707	1	_	_
73-130	13707-13708	\]	_	_
73-131	13708-13709	\]	_	_
73-132	13709-13710	)	_	_
73-133	13720-13726	return	_	_
73-134	13727-13737	self.clamp	_	_
73-135	13737-13738	(	_	_
73-136	13738-13748	prev\_hedge	_	_
73-137	13748-13749	,	_	_
73-138	13750-13753	min	_	_
73-139	13753-13754	=	_	_
73-140	13754-13757	min	_	_
73-141	13757-13758	,	_	_
73-142	13759-13762	max	_	_
73-143	13762-13763	=	_	_
73-144	13763-13766	max	_	_
73-145	13766-13767	)	_	_
73-146	13770-13775	model	_	_
73-147	13776-13777	=	_	_
73-148	13778-13798	NoTransactionBandNet	_	_
73-149	13798-13799	(	_	_
73-150	13799-13809	derivative	_	_
73-151	13809-13810	)	_	_
73-152	13811-13817	hedger	_	_
73-153	13818-13819	=	_	_
73-154	13820-13826	Hedger	_	_
73-155	13826-13827	(	_	_
73-156	13827-13832	model	_	_
73-157	13832-13833	,	_	_
73-158	13834-13840	inputs	_	_
73-159	13840-13841	=	_	_
73-160	13841-13853	model.inputs	_	_
73-161	13853-13854	(	_	_
73-162	13854-13855	)	_	_
73-163	13855-13856	)	_	_
73-164	13857-13858	`	_	_
73-165	13858-13859	`	_	_
73-166	13859-13860	`	_	_
73-167	13862-13863	#	_	_
73-168	13863-13864	#	_	_
73-169	13864-13865	#	_	_
73-170	13866-13875	Autogreek	_	_
73-171	13877-13878	A	_	_
73-172	13879-13885	module	_	_
73-173	13886-13887	\[	_	_
73-174	13887-13888	`	_	_
73-175	13888-13905	pfhedge.autogreek	_	_
73-175	13888-13895	pfhedge	_	_
73-176	13905-13906	`	_	_
73-177	13906-13907	\]	_	_
73-178	13907-13908	(	_	_
73-179	13908-13913	https	_	_
73-180	13913-13914	:	_	_
73-181	13914-13915	/	_	_
73-182	13915-13916	/	_	_
73-183	13916-13940	pfnet-research.github.io	_	_
73-184	13940-13941	/	_	_
73-185	13941-13948	pfhedge	_	_
73-186	13948-13949	/	_	_
73-187	13949-13963	autogreek.html	_	_
73-188	13963-13964	)	_	_
73-189	13965-13973	provides	_	_
73-190	13974-13983	functions	_	_
73-191	13984-13996	implementing	_	_
73-192	13997-14006	automatic	_	_
73-193	14007-14017	evaluation	_	_
73-194	14018-14020	of	_	_
73-195	14021-14027	greeks	_	_
73-196	14028-14033	using	_	_
73-197	14034-14043	automatic	_	_
73-198	14044-14059	differentiation	_	_
73-199	14059-14060	.	_	_

#Text=```py import pfhedge.autogreek as autogreek from pfhedge.instruments import BrownianStock from pfhedge.instruments import EuropeanOption from pfhedge.nn import Hedger from pfhedge.nn import WhalleyWilmott  derivative = EuropeanOption(BrownianStock(cost=1e-4))  model = WhalleyWilmott(derivative) hedger = Hedger(model, inputs=model.inputs())  def pricer(spot):     return hedger.price(derivative, init\_state=(spot,), enable\_grad=True)  delta = autogreek.delta(pricer, spot=torch.tensor(1.0)) # tensor(0.5092) gamma = autogreek.gamma(pricer, spot=torch.tensor(1.0)) # tensor(0.0885) ```  ## Contribution  Any contributions to PFHedge are more than welcome!
74-1	14062-14063	`	_	_
74-2	14063-14064	`	_	_
74-3	14064-14065	`	_	_
74-4	14065-14067	py	_	_
74-5	14068-14074	import	_	_
74-6	14075-14092	pfhedge.autogreek	_	_
74-7	14093-14095	as	_	_
74-8	14096-14105	autogreek	_	_
74-9	14106-14110	from	_	_
74-10	14111-14130	pfhedge.instruments	_	_
74-11	14131-14137	import	_	_
74-12	14138-14151	BrownianStock	_	_
74-13	14152-14156	from	_	_
74-14	14157-14176	pfhedge.instruments	_	_
74-15	14177-14183	import	_	_
74-16	14184-14198	EuropeanOption	_	_
74-17	14199-14203	from	_	_
74-18	14204-14214	pfhedge.nn	_	_
74-19	14215-14221	import	_	_
74-20	14222-14228	Hedger	_	_
74-21	14229-14233	from	_	_
74-22	14234-14244	pfhedge.nn	_	_
74-23	14245-14251	import	_	_
74-24	14252-14266	WhalleyWilmott	_	_
74-25	14268-14278	derivative	_	_
74-26	14279-14280	=	_	_
74-27	14281-14295	EuropeanOption	_	_
74-28	14295-14296	(	_	_
74-29	14296-14309	BrownianStock	_	_
74-30	14309-14310	(	_	_
74-31	14310-14314	cost	_	_
74-32	14314-14315	=	_	_
74-33	14315-14317	1e	_	_
74-34	14317-14318	-	_	_
74-35	14318-14319	4	_	_
74-36	14319-14320	)	_	_
74-37	14320-14321	)	_	_
74-38	14323-14328	model	_	_
74-39	14329-14330	=	_	_
74-40	14331-14345	WhalleyWilmott	_	_
74-41	14345-14346	(	_	_
74-42	14346-14356	derivative	_	_
74-43	14356-14357	)	_	_
74-44	14358-14364	hedger	_	_
74-45	14365-14366	=	_	_
74-46	14367-14373	Hedger	_	_
74-47	14373-14374	(	_	_
74-48	14374-14379	model	_	_
74-49	14379-14380	,	_	_
74-50	14381-14387	inputs	_	_
74-51	14387-14388	=	_	_
74-52	14388-14400	model.inputs	_	_
74-53	14400-14401	(	_	_
74-54	14401-14402	)	_	_
74-55	14402-14403	)	_	_
74-56	14405-14408	def	_	_
74-57	14409-14415	pricer	_	_
74-58	14415-14416	(	_	_
74-59	14416-14420	spot	_	_
74-60	14420-14421	)	_	_
74-61	14421-14422	:	_	_
74-62	14427-14433	return	_	_
74-63	14434-14446	hedger.price	_	_
74-64	14446-14447	(	_	_
74-65	14447-14457	derivative	_	_
74-66	14457-14458	,	_	_
74-67	14459-14469	init\_state	_	_
74-68	14469-14470	=	_	_
74-69	14470-14471	(	_	_
74-70	14471-14475	spot	_	_
74-71	14475-14476	,	_	_
74-72	14476-14477	)	_	_
74-73	14477-14478	,	_	_
74-74	14479-14490	enable\_grad	_	_
74-75	14490-14491	=	_	_
74-76	14491-14495	True	_	_
74-77	14495-14496	)	_	_
74-78	14498-14503	delta	_	_
74-79	14504-14505	=	_	_
74-80	14506-14521	autogreek.delta	_	_
74-81	14521-14522	(	_	_
74-82	14522-14528	pricer	_	_
74-83	14528-14529	,	_	_
74-84	14530-14534	spot	_	_
74-85	14534-14535	=	_	_
74-86	14535-14547	torch.tensor	_	_
74-87	14547-14548	(	_	_
74-88	14548-14551	1.0	_	_
74-89	14551-14552	)	_	_
74-90	14552-14553	)	_	_
74-91	14554-14555	#	_	_
74-92	14556-14562	tensor	_	_
74-93	14562-14563	(	_	_
74-94	14563-14569	0.5092	_	_
74-95	14569-14570	)	_	_
74-96	14571-14576	gamma	_	_
74-97	14577-14578	=	_	_
74-98	14579-14594	autogreek.gamma	_	_
74-99	14594-14595	(	_	_
74-100	14595-14601	pricer	_	_
74-101	14601-14602	,	_	_
74-102	14603-14607	spot	_	_
74-103	14607-14608	=	_	_
74-104	14608-14620	torch.tensor	_	_
74-105	14620-14621	(	_	_
74-106	14621-14624	1.0	_	_
74-107	14624-14625	)	_	_
74-108	14625-14626	)	_	_
74-109	14627-14628	#	_	_
74-110	14629-14635	tensor	_	_
74-111	14635-14636	(	_	_
74-112	14636-14642	0.0885	_	_
74-113	14642-14643	)	_	_
74-114	14644-14645	`	_	_
74-115	14645-14646	`	_	_
74-116	14646-14647	`	_	_
74-117	14649-14650	#	_	_
74-118	14650-14651	#	_	_
74-119	14652-14664	Contribution	_	_
74-120	14666-14669	Any	_	_
74-121	14670-14683	contributions	_	_
74-122	14684-14686	to	_	_
74-123	14687-14694	PFHedge	_	_
74-124	14695-14698	are	_	_
74-125	14699-14703	more	_	_
74-126	14704-14708	than	_	_
74-127	14709-14716	welcome	_	_
74-128	14716-14717	!	_	_

#Text=\* GitHub Issues: Bug reports, feature requests, and questions. \* Pull Requests: Bug-fixes, feature implementations, and documentation updates.
75-1	14719-14720	\*	_	_
75-2	14721-14727	GitHub	_	_
75-3	14728-14734	Issues	_	_
75-4	14734-14735	:	_	_
75-5	14736-14739	Bug	_	_
75-6	14740-14747	reports	_	_
75-7	14747-14748	,	_	_
75-8	14749-14756	feature	_	_
75-9	14757-14765	requests	_	_
75-10	14765-14766	,	_	_
75-11	14767-14770	and	_	_
75-12	14771-14780	questions	_	_
75-13	14780-14781	.	_	_
75-14	14782-14783	\*	_	_
75-15	14784-14788	Pull	_	_
75-16	14789-14797	Requests	_	_
75-17	14797-14798	:	_	_
75-18	14799-14808	Bug-fixes	_	_
75-19	14808-14809	,	_	_
75-20	14810-14817	feature	_	_
75-21	14818-14833	implementations	_	_
75-22	14833-14834	,	_	_
75-23	14835-14838	and	_	_
75-24	14839-14852	documentation	_	_
75-25	14853-14860	updates	_	_
75-26	14860-14861	.	_	_

#Text=Please take a look at \[CONTRIBUTING.md\](.github/CONTRIBUTING.md) before creating a pull request.
76-1	14863-14869	Please	_	_
76-2	14870-14874	take	_	_
76-3	14875-14876	a	_	_
76-4	14877-14881	look	_	_
76-5	14882-14884	at	_	_
76-6	14885-14886	\[	_	_
76-7	14886-14901	CONTRIBUTING.md	_	_
76-8	14901-14902	\]	_	_
76-9	14902-14903	(	_	_
76-10	14903-14904	.	_	_
76-11	14904-14910	github	_	_
76-12	14910-14911	/	_	_
76-13	14911-14926	CONTRIBUTING.md	_	_
76-14	14926-14927	)	_	_
76-15	14928-14934	before	_	_
76-16	14935-14943	creating	_	_
76-17	14944-14945	a	_	_
76-18	14946-14950	pull	_	_
76-19	14951-14958	request	_	_
76-20	14958-14959	.	_	_

#Text=This project is owned by \[Preferred Networks\](https://www.preferred.jp/en/) and maintained by \[Shota Imaki\](https://github.com/simaki) and \[Masanori Hirano\](https://github.com/masanorihirano).  ## References  \* Hans Bühler, Lukas Gonon, Josef Teichmann and Ben Wood, "\[Deep hedging\]\[deep-hedging-qf\]".
77-1	14961-14965	This	_	_
77-2	14966-14973	project	_	_
77-3	14974-14976	is	_	_
77-4	14977-14982	owned	_	_
77-5	14983-14985	by	_	_
77-6	14986-14987	\[	_	_
77-7	14987-14996	Preferred	_	_
77-8	14997-15005	Networks	_	_
77-9	15005-15006	\]	_	_
77-10	15006-15007	(	_	_
77-11	15007-15012	https	_	_
77-12	15012-15013	:	_	_
77-13	15013-15014	/	_	_
77-14	15014-15015	/	_	_
77-15	15015-15031	www.preferred.jp	_	_
77-16	15031-15032	/	_	_
77-17	15032-15034	en	_	_
77-18	15034-15035	/	_	_
77-19	15035-15036	)	_	_
77-20	15037-15040	and	_	_
77-21	15041-15051	maintained	_	_
77-22	15052-15054	by	_	_
77-23	15055-15056	\[	_	_
77-24	15056-15061	Shota	_	_
77-25	15062-15067	Imaki	_	_
77-26	15067-15068	\]	_	_
77-27	15068-15069	(	_	_
77-28	15069-15074	https	_	_
77-29	15074-15075	:	_	_
77-30	15075-15076	/	_	_
77-31	15076-15077	/	_	_
77-32	15077-15087	github.com	_	_
77-33	15087-15088	/	_	_
77-34	15088-15094	simaki	_	_
77-35	15094-15095	)	_	_
77-36	15096-15099	and	_	_
77-37	15100-15101	\[	_	_
77-38	15101-15109	Masanori	_	_
77-39	15110-15116	Hirano	_	_
77-40	15116-15117	\]	_	_
77-41	15117-15118	(	_	_
77-42	15118-15123	https	_	_
77-43	15123-15124	:	_	_
77-44	15124-15125	/	_	_
77-45	15125-15126	/	_	_
77-46	15126-15136	github.com	_	_
77-47	15136-15137	/	_	_
77-48	15137-15151	masanorihirano	_	_
77-49	15151-15152	)	_	_
77-50	15152-15153	.	_	_
77-51	15155-15156	#	_	_
77-52	15156-15157	#	_	_
77-53	15158-15168	References	_	_
77-54	15170-15171	\*	_	_
77-55	15172-15176	Hans	_	_
77-56	15177-15183	Bühler	_	_
77-57	15183-15184	,	_	_
77-58	15185-15190	Lukas	_	_
77-59	15191-15196	Gonon	_	_
77-60	15196-15197	,	_	_
77-61	15198-15203	Josef	_	_
77-62	15204-15213	Teichmann	_	_
77-63	15214-15217	and	_	_
77-64	15218-15221	Ben	_	_
77-65	15222-15226	Wood	_	_
77-66	15226-15227	,	_	_
77-67	15228-15229	"	_	_
77-68	15229-15230	\[	_	_
77-69	15230-15234	Deep	_	_
77-70	15235-15242	hedging	_	_
77-71	15242-15243	\]	_	_
77-72	15243-15244	\[	_	_
77-73	15244-15259	deep-hedging-qf	_	_
77-74	15259-15260	\]	_	_
77-75	15260-15261	"	_	_
77-76	15261-15262	.	_	_

#Text=Quantitative Finance, 2019, 19, 1271-1291. arXiv:\[1802.03042\]\[deep-hedging-arxiv\] \\\[q-fin.CP\\\]. \* Hans Bühler, Lukas Gonon, Josef Teichmann, Ben Wood, Baranidharan Mohan and Jonathan Kochems, \[Deep Hedging: Hedging Derivatives Under Generic Market Frictions Using Reinforcement Learning\]\[deep-hedging-wp\] (March 19, 2019).
78-1	15263-15275	Quantitative	_	_
78-2	15276-15283	Finance	_	_
78-3	15283-15284	,	_	_
78-4	15285-15289	2019	_	_
78-5	15289-15290	,	_	_
78-6	15291-15293	19	_	_
78-7	15293-15294	,	_	_
78-8	15295-15299	1271	_	_
78-9	15299-15300	-	_	_
78-10	15300-15304	1291	_	_
78-11	15304-15305	.	_	_
78-12	15306-15311	arXiv	_	_
78-13	15311-15312	:	_	_
78-14	15312-15313	\[	_	_
78-15	15313-15323	1802.03042	_	_
78-16	15323-15324	\]	_	_
78-17	15324-15325	\[	_	_
78-18	15325-15343	deep-hedging-arxiv	_	_
78-19	15343-15344	\]	_	_
78-20	15345-15346	\\	_	_
78-21	15346-15347	\[	_	_
78-22	15347-15355	q-fin.CP	_	_
78-23	15355-15356	\\	_	_
78-24	15356-15357	\]	_	_
78-25	15357-15358	.	_	_
78-26	15359-15360	\*	_	_
78-27	15361-15365	Hans	_	_
78-28	15366-15372	Bühler	_	_
78-29	15372-15373	,	_	_
78-30	15374-15379	Lukas	_	_
78-31	15380-15385	Gonon	_	_
78-32	15385-15386	,	_	_
78-33	15387-15392	Josef	_	_
78-34	15393-15402	Teichmann	_	_
78-35	15402-15403	,	_	_
78-36	15404-15407	Ben	_	_
78-37	15408-15412	Wood	_	_
78-38	15412-15413	,	_	_
78-39	15414-15426	Baranidharan	_	_
78-40	15427-15432	Mohan	_	_
78-41	15433-15436	and	_	_
78-42	15437-15445	Jonathan	_	_
78-43	15446-15453	Kochems	_	_
78-44	15453-15454	,	_	_
78-45	15455-15456	\[	_	_
78-46	15456-15460	Deep	_	_
78-47	15461-15468	Hedging	_	_
78-48	15468-15469	:	_	_
78-49	15470-15477	Hedging	_	_
78-50	15478-15489	Derivatives	_	_
78-51	15490-15495	Under	_	_
78-52	15496-15503	Generic	_	_
78-53	15504-15510	Market	_	_
78-54	15511-15520	Frictions	_	_
78-55	15521-15526	Using	_	_
78-56	15527-15540	Reinforcement	_	_
78-57	15541-15549	Learning	_	_
78-58	15549-15550	\]	_	_
78-59	15550-15551	\[	_	_
78-60	15551-15566	deep-hedging-wp	_	_
78-61	15566-15567	\]	_	_
78-62	15568-15569	(	_	_
78-63	15569-15574	March	_	_
78-64	15575-15577	19	_	_
78-65	15577-15578	,	_	_
78-66	15579-15583	2019	_	_
78-67	15583-15584	)	_	_
78-68	15584-15585	.	_	_

#Text=Swiss Finance Institute Research Paper No. 19-80. \* Shota Imaki, Kentaro Imajo, Katsuya Ito, Kentaro Minami and Kei Nakagawa, "No-Transaction Band Network: A Neural Network Architecture for Efficient Deep Hedging". arXiv:\[2103.01775\]\[ntb-network-arxiv\] \\\[q-fin.CP\\\].
79-1	15586-15591	Swiss	_	_
79-2	15592-15599	Finance	_	_
79-3	15600-15609	Institute	_	_
79-4	15610-15618	Research	_	_
79-5	15619-15624	Paper	_	_
79-6	15625-15627	No	_	_
79-7	15627-15628	.	_	_
79-8	15629-15631	19	_	_
79-9	15631-15632	-	_	_
79-10	15632-15634	80	_	_
79-11	15634-15635	.	_	_
79-12	15636-15637	\*	_	_
79-13	15638-15643	Shota	_	_
79-14	15644-15649	Imaki	_	_
79-15	15649-15650	,	_	_
79-16	15651-15658	Kentaro	_	_
79-17	15659-15664	Imajo	_	_
79-18	15664-15665	,	_	_
79-19	15666-15673	Katsuya	_	_
79-20	15674-15677	Ito	_	_
79-21	15677-15678	,	_	_
79-22	15679-15686	Kentaro	_	_
79-23	15687-15693	Minami	_	_
79-24	15694-15697	and	_	_
79-25	15698-15701	Kei	_	_
79-26	15702-15710	Nakagawa	_	_
79-27	15710-15711	,	_	_
79-28	15712-15713	"	_	_
79-29	15713-15727	No-Transaction	_	_
79-30	15728-15732	Band	_	_
79-31	15733-15740	Network	_	_
79-32	15740-15741	:	_	_
79-33	15742-15743	A	_	_
79-34	15744-15750	Neural	_	_
79-35	15751-15758	Network	_	_
79-36	15759-15771	Architecture	_	_
79-37	15772-15775	for	_	_
79-38	15776-15785	Efficient	_	_
79-39	15786-15790	Deep	_	_
79-40	15791-15798	Hedging	_	_
79-41	15798-15799	"	_	_
79-42	15799-15800	.	_	_
79-43	15801-15806	arXiv	_	_
79-44	15806-15807	:	_	_
79-45	15807-15808	\[	_	_
79-46	15808-15818	2103.01775	_	_
79-47	15818-15819	\]	_	_
79-48	15819-15820	\[	_	_
79-49	15820-15837	ntb-network-arxiv	_	_
79-50	15837-15838	\]	_	_
79-51	15839-15840	\\	_	_
79-52	15840-15841	\[	_	_
79-53	15841-15849	q-fin.CP	_	_
79-54	15849-15850	\\	_	_
79-55	15850-15851	\]	_	_
79-56	15851-15852	.	_	_

#Text=\[deep-hedging-arxiv\]: https://arxiv.org/abs/1802.03042 \[deep-hedging-qf\]: https://www.tandfonline.com/doi/abs/10.1080/14697688.2019.1571683 \[deep-hedging-wp\]: https://papers.ssrn.com/sol3/papers.cfm?
80-1	15854-15855	\[	_	_
80-2	15855-15873	deep-hedging-arxiv	_	_
80-3	15873-15874	\]	_	_
80-4	15874-15875	:	_	_
80-5	15876-15881	https	_	_
80-6	15881-15882	:	_	_
80-7	15882-15883	/	_	_
80-8	15883-15884	/	_	_
80-9	15884-15893	arxiv.org	_	_
80-10	15893-15894	/	_	_
80-11	15894-15897	abs	_	_
80-12	15897-15898	/	_	_
80-13	15898-15908	1802.03042	_	_
80-14	15909-15910	\[	_	_
80-15	15910-15925	deep-hedging-qf	_	_
80-16	15925-15926	\]	_	_
80-17	15926-15927	:	_	_
80-18	15928-15933	https	_	_
80-19	15933-15934	:	_	_
80-20	15934-15935	/	_	_
80-21	15935-15936	/	_	_
80-22	15936-15955	www.tandfonline.com	_	_
80-23	15955-15956	/	_	_
80-24	15956-15959	doi	_	_
80-25	15959-15960	/	_	_
80-26	15960-15963	abs	_	_
80-27	15963-15964	/	_	_
80-28	15964-15971	10.1080	_	_
80-29	15971-15972	/	_	_
80-30	15972-15993	14697688.2019.1571683	_	_
80-31	15994-15995	\[	_	_
80-32	15995-16010	deep-hedging-wp	_	_
80-33	16010-16011	\]	_	_
80-34	16011-16012	:	_	_
80-35	16013-16018	https	_	_
80-36	16018-16019	:	_	_
80-37	16019-16020	/	_	_
80-38	16020-16021	/	_	_
80-39	16021-16036	papers.ssrn.com	_	_
80-40	16036-16037	/	_	_
80-41	16037-16041	sol3	_	_
80-42	16041-16042	/	_	_
80-43	16042-16052	papers.cfm	_	_
80-44	16052-16053	?	_	_

#Text=abstract\_id=3355706 \[ntb-network-arxiv\]: https://arxiv.org/abs/2103.01775 \[whalley-wilmott\]: https://doi.org/10.1111/1467-9965.00034 \[NoTransactionBandNetwork\]: https://github.com/pfnet-research/NoTransactionBandNetwork \[example-readme-colab\]: https://colab.research.google.com/github/pfnet-research/pfhedge/blob/main/examples/example\_readme.ipynb
81-1	16053-16064	abstract\_id	_	_
81-2	16064-16065	=	_	_
81-3	16065-16072	3355706	_	_
81-4	16073-16074	\[	_	_
81-5	16074-16091	ntb-network-arxiv	_	_
81-6	16091-16092	\]	_	_
81-7	16092-16093	:	_	_
81-8	16094-16099	https	_	_
81-9	16099-16100	:	_	_
81-10	16100-16101	/	_	_
81-11	16101-16102	/	_	_
81-12	16102-16111	arxiv.org	_	_
81-13	16111-16112	/	_	_
81-14	16112-16115	abs	_	_
81-15	16115-16116	/	_	_
81-16	16116-16126	2103.01775	_	_
81-17	16127-16128	\[	_	_
81-18	16128-16143	whalley-wilmott	_	_
81-19	16143-16144	\]	_	_
81-20	16144-16145	:	_	_
81-21	16146-16151	https	_	_
81-22	16151-16152	:	_	_
81-23	16152-16153	/	_	_
81-24	16153-16154	/	_	_
81-25	16154-16161	doi.org	_	_
81-26	16161-16162	/	_	_
81-27	16162-16169	10.1111	_	_
81-28	16169-16170	/	_	_
81-29	16170-16174	1467	_	_
81-30	16174-16175	-	_	_
81-31	16175-16185	9965.00034	_	_
81-32	16186-16187	\[	_	_
81-33	16187-16211	NoTransactionBandNetwork	_	_
81-34	16211-16212	\]	_	_
81-35	16212-16213	:	_	_
81-36	16214-16219	https	_	_
81-37	16219-16220	:	_	_
81-38	16220-16221	/	_	_
81-39	16221-16222	/	_	_
81-40	16222-16232	github.com	_	_
81-41	16232-16233	/	_	_
81-42	16233-16247	pfnet-research	_	_
81-43	16247-16248	/	_	_
81-44	16248-16272	NoTransactionBandNetwork	_	_
81-45	16273-16274	\[	_	_
81-46	16274-16294	example-readme-colab	_	_
81-47	16294-16295	\]	_	_
81-48	16295-16296	:	_	_
81-49	16297-16302	https	_	_
81-50	16302-16303	:	_	_
81-51	16303-16304	/	_	_
81-52	16304-16305	/	_	_
81-53	16305-16330	colab.research.google.com	_	_
81-54	16330-16331	/	_	_
81-55	16331-16337	github	_	_
81-56	16337-16338	/	_	_
81-57	16338-16352	pfnet-research	_	_
81-58	16352-16353	/	_	_
81-59	16353-16360	pfhedge	_	_
81-60	16360-16361	/	_	_
81-61	16361-16365	blob	_	_
81-62	16365-16366	/	_	_
81-63	16366-16370	main	_	_
81-64	16370-16371	/	_	_
81-65	16371-16379	examples	_	_
81-66	16379-16380	/	_	_
81-67	16380-16400	example\_readme.ipynb	_	_