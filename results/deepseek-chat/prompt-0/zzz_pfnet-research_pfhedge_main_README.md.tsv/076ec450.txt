```py <SOFTWARE>hedger</SOFTWARE> # <SOFTWARE>Hedger</SOFTWARE>( #   inputs=['log_moneyness', 'expiry_time', 'volatility', 'prev_hedge'] #   (model): <SOFTWARE>MultiLayerPerceptron</SOFTWARE>( #     (0): <SOFTWARE>LazyLinear</SOFTWARE>(in_features=0, out_features=32, bias=True) #     (1): <SOFTWARE>ReLU</SOFTWARE>() #     (2): <SOFTWARE>Linear</SOFTWARE>(in_features=32, out_features=32, bias=True) #     (3): <SOFTWARE>ReLU</SOFTWARE>() #     (4): <SOFTWARE>Linear</SOFTWARE>(in_features=32, out_features=32, bias=True) #     (5): <SOFTWARE>ReLU</SOFTWARE>() #     (6): <SOFTWARE>Linear</SOFTWARE>(in_features=32, out_features=32, bias=True) #     (7): <SOFTWARE>ReLU</SOFTWARE>() #     (8): <SOFTWARE>Linear</SOFTWARE>(in_features=32, out_features=1, bias=True) #     (9): <SOFTWARE>Identity</SOFTWARE>() #   ) #   (criterion): <SOFTWARE>EntropicRiskMeasure</SOFTWARE>() # ) ```  ### Fit and Price  Now we train our `<SOFTWARE>hedger</SOFTWARE>` so that it minimizes the risk measure through hedging.
```