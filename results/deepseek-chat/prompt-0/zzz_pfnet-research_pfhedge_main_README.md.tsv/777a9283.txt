```markdown
__init__()          self.delta = <SOFTWARE>BlackScholes</SOFTWARE>(derivative)         self.mlp = <SOFTWARE>MultiLayerPerceptron</SOFTWARE>(out_features=2)         self.clamp = <SOFTWARE>Clamp</SOFTWARE>()      def inputs(self):         return self.delta.inputs() + ["prev_hedge"]      def forward(self, input: Tensor) -> Tensor:         prev_hedge = input[..., [-1]]          delta = self.delta(input[..., :-1])         width = self.mlp(input[..., :-1])          min = delta - fn.leaky_relu(width[..., [0]])         max = delta + fn.leaky_relu(width[..., [1]])          return self.clamp(prev_hedge, min=min, max=max)   model = <SOFTWARE>NoTransactionBandNet</SOFTWARE>(derivative) hedger = <SOFTWARE>Hedger</SOFTWARE>(model, inputs=model.inputs()) ```  ### Autogreek  A module [`<SOFTWARE>pfhedge.autogreek</SOFTWARE>`](https://pfnet-research.github.io/pfhedge/autogreek.html) provides functions implementing automatic evaluation of greeks using automatic differentiation.
```