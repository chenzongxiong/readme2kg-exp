#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=### Vertex-Enriched Graph Neural Network (VEGNN)
#Text=
#Text=
#Text=This is my work directory of our submission to Machine Learning Journal.
1-1	0-1	#	_	_	
1-2	1-2	#	_	_	
1-3	2-3	#	_	_	
1-4	4-19	Vertex-Enriched	_	_	
1-5	20-25	Graph	_	_	
1-6	26-32	Neural	_	_	
1-7	33-40	Network	_	_	
1-8	41-42	(	_	_	
1-9	42-47	VEGNN	_	_	
1-10	47-48	)	_	_	
1-11	51-55	This	_	_	
1-12	56-58	is	_	_	
1-13	59-61	my	_	_	
1-14	62-66	work	_	_	
1-15	67-76	directory	_	_	
1-16	77-79	of	_	_	
1-17	80-83	our	_	_	
1-18	84-94	submission	_	_	
1-19	95-97	to	_	_	
1-20	98-105	Machine	_	_	
1-21	106-114	Learning	_	_	
1-22	115-122	Journal	_	_	
1-23	122-123	.	_	_	

#Text=The work is based on the Vertex-Enrichment process of Graph Neural Networks.
2-1	124-127	The	_	_	
2-2	128-132	work	_	_	
2-3	133-135	is	_	_	
2-4	136-141	based	_	_	
2-5	142-144	on	_	_	
2-6	145-148	the	_	_	
2-7	149-166	Vertex-Enrichment	_	_	
2-8	167-174	process	_	_	
2-9	175-177	of	_	_	
2-10	178-183	Graph	_	_	
2-11	184-190	Neural	_	_	
2-12	191-199	Networks	_	_	
2-13	199-200	.	_	_	

#Text=That is: augmenting the node features with relational-features obtained by using symbolic domain-knowledge.
3-1	201-205	That	_	_	
3-2	206-208	is	_	_	
3-3	208-209	:	_	_	
3-4	210-220	augmenting	_	_	
3-5	221-224	the	_	_	
3-6	225-229	node	_	_	
3-7	230-238	features	_	_	
3-8	239-243	with	_	_	
3-9	244-263	relational-features	_	_	
3-10	264-272	obtained	_	_	
3-11	273-275	by	_	_	
3-12	276-281	using	_	_	
3-13	282-290	symbolic	_	_	
3-14	291-307	domain-knowledge	_	_	
3-15	307-308	.	_	_	

#Text=We treat these symbolic relations as hyperedges meaning any relation or a relational feature is a hyperedge.
4-1	309-311	We	_	_	
4-2	312-317	treat	_	_	
4-3	318-323	these	_	_	
4-4	324-332	symbolic	_	_	
4-5	333-342	relations	_	_	
4-6	343-345	as	_	_	
4-7	346-356	hyperedges	_	_	
4-8	357-364	meaning	_	_	
4-9	365-368	any	_	_	
4-10	369-377	relation	_	_	
4-11	378-380	or	_	_	
4-12	381-382	a	_	_	
4-13	383-393	relational	_	_	
4-14	394-401	feature	_	_	
4-15	402-404	is	_	_	
4-16	405-406	a	_	_	
4-17	407-416	hyperedge	_	_	
4-18	416-417	.	_	_	

#Text=For more information on this, please go through our paper.
5-1	418-421	For	_	_	
5-2	422-426	more	_	_	
5-3	427-438	information	_	_	
5-4	439-441	on	_	_	
5-5	442-446	this	_	_	
5-6	446-447	,	_	_	
5-7	448-454	please	_	_	
5-8	455-457	go	_	_	
5-9	458-465	through	_	_	
5-10	466-469	our	_	_	
5-11	470-475	paper	_	_	
5-12	475-476	.	_	_	

#Text=We will be updating new experiments that we have conducted (or will conduct) in some other repository.
6-1	479-481	We	_	_	
6-2	482-486	will	_	_	
6-3	487-489	be	_	_	
6-4	490-498	updating	_	_	
6-5	499-502	new	_	_	
6-6	503-514	experiments	_	_	
6-7	515-519	that	_	_	
6-8	520-522	we	_	_	
6-9	523-527	have	_	_	
6-10	528-537	conducted	_	_	
6-11	538-539	(	_	_	
6-12	539-541	or	_	_	
6-13	542-546	will	_	_	
6-14	547-554	conduct	_	_	
6-15	554-555	)	_	_	
6-16	556-558	in	_	_	
6-17	559-563	some	_	_	
6-18	564-569	other	_	_	
6-19	570-580	repository	_	_	
6-20	580-581	.	_	_	

#Text=We shall update this README accordingly.
#Text=
#Text=
#Text=#### Machine, Tools and Requirements
#Text=
#Text=Machine specification:
#Text=
#Text=  * `Machine: Dell 5810`
#Text=  * `RAM: 64GB`
#Text=  * `Processor: Intel 16-Core Xeon (3.10GHz)`
#Text=  * `GPU: NVIDIA P4000 (8GB VRAM)`
#Text=  * `OS: Ubuntu Linux 16.04.6 LTS (64bit)`
#Text=
#Text=Tools used in this work:
#Text=
#Text=  * `Editor: vi/vim`
#Text=  * `Execution: Linux-Shell`
#Text=  * `MATLAB R2018b (64bit)`
#Text=  * `Prolog compiler: YAP 6.2.2`
#Text=  * `ILP Engine: Aleph`
#Text=  * `CUDA 10.1.105`
#Text=  * `Python 3.7.6`
#Text=
#Text=Python Libraries:
#Text= 
#Text=  * `torch 1.4.0`
#Text=  * `torch_geometric 1.2.1`
#Text=  * `numpy 1.18.1`
#Text=
#Text=
#Text=#### Source Data
#Text=
#Text=There are 73 problems obtained from NCI.
7-1	582-584	We	_	_	
7-2	585-590	shall	_	_	
7-3	591-597	update	_	_	
7-4	598-602	this	_	_	
7-5	603-609	README	_	_	
7-6	610-621	accordingly	_	_	
7-7	621-622	.	_	_	
7-8	625-626	#	_	_	
7-9	626-627	#	_	_	
7-10	627-628	#	_	_	
7-11	628-629	#	_	_	
7-12	630-637	Machine	_	_	
7-13	637-638	,	_	_	
7-14	639-644	Tools	_	_	
7-15	645-648	and	_	_	
7-16	649-661	Requirements	_	_	
7-17	663-670	Machine	_	_	
7-18	671-684	specification	_	_	
7-19	684-685	:	_	_	
7-20	689-690	*	_	_	
7-21	691-692	`	_	_	
7-22	692-699	Machine	_	_	
7-23	699-700	:	_	_	
7-24	701-705	Dell	_	_	
7-25	706-710	5810	_	_	
7-26	710-711	`	_	_	
7-27	714-715	*	_	_	
7-28	716-717	`	_	_	
7-29	717-720	RAM	_	_	
7-30	720-721	:	_	_	
7-31	722-726	64GB	_	_	
7-32	726-727	`	_	_	
7-33	730-731	*	_	_	
7-34	732-733	`	_	_	
7-35	733-742	Processor	_	_	
7-36	742-743	:	_	_	
7-37	744-749	Intel	_	_	
7-38	750-752	16	_	_	
7-39	752-753	-	_	_	
7-40	753-757	Core	_	_	
7-41	758-762	Xeon	_	_	
7-42	763-764	(	_	_	
7-43	764-771	3.10GHz	_	_	
7-44	771-772	)	_	_	
7-45	772-773	`	_	_	
7-46	776-777	*	_	_	
7-47	778-779	`	_	_	
7-48	779-782	GPU	_	_	
7-49	782-783	:	_	_	
7-50	784-790	NVIDIA	_	_	
7-51	791-796	P4000	_	_	
7-52	797-798	(	_	_	
7-53	798-801	8GB	_	_	
7-54	802-806	VRAM	_	_	
7-55	806-807	)	_	_	
7-56	807-808	`	_	_	
7-57	811-812	*	_	_	
7-58	813-814	`	_	_	
7-59	814-816	OS	_	_	
7-60	816-817	:	_	_	
7-61	818-824	Ubuntu	_	_	
7-62	825-830	Linux	_	_	
7-63	831-838	16.04.6	_	_	
7-64	839-842	LTS	_	_	
7-65	843-844	(	_	_	
7-66	844-849	64bit	_	_	
7-67	849-850	)	_	_	
7-68	850-851	`	_	_	
7-69	853-858	Tools	_	_	
7-70	859-863	used	_	_	
7-71	864-866	in	_	_	
7-72	867-871	this	_	_	
7-73	872-876	work	_	_	
7-74	876-877	:	_	_	
7-75	881-882	*	_	_	
7-76	883-884	`	_	_	
7-77	884-890	Editor	_	_	
7-78	890-891	:	_	_	
7-79	892-894	vi	*[1]	SOFTWARE[1]	
7-80	894-895	/	*[1]	SOFTWARE[1]	
7-81	895-898	vim	*[1]	SOFTWARE[1]	
7-82	898-899	`	_	_	
7-83	902-903	*	_	_	
7-84	904-905	`	_	_	
7-85	905-914	Execution	_	_	
7-86	914-915	:	_	_	
7-87	916-927	Linux-Shell	*	SOFTWARE	
7-88	927-928	`	_	_	
7-89	931-932	*	_	_	
7-90	933-934	`	_	_	
7-91	934-940	MATLAB	*[2]	SOFTWARE[2]	
7-92	941-947	R2018b	*[2]	SOFTWARE[2]	
7-93	948-949	(	_	_	
7-94	949-954	64bit	_	_	
7-95	954-955	)	_	_	
7-96	955-956	`	_	_	
7-97	959-960	*	_	_	
7-98	961-962	`	_	_	
7-99	962-968	Prolog	_	_	
7-100	969-977	compiler	_	_	
7-101	977-978	:	_	_	
7-102	979-982	YAP	*[3]	SOFTWARE[3]	
7-103	983-988	6.2.2	*[3]	SOFTWARE[3]	
7-104	988-989	`	_	_	
7-105	992-993	*	_	_	
7-106	994-995	`	_	_	
7-107	995-998	ILP	_	_	
7-108	999-1005	Engine	_	_	
7-109	1005-1006	:	_	_	
7-110	1007-1012	Aleph	*	SOFTWARE	
7-111	1012-1013	`	_	_	
7-112	1016-1017	*	_	_	
7-113	1018-1019	`	_	_	
7-114	1019-1023	CUDA	*[4]	SOFTWARE[4]	
7-115	1024-1032	10.1.105	*[4]	SOFTWARE[4]	
7-116	1032-1033	`	_	_	
7-117	1036-1037	*	_	_	
7-118	1038-1039	`	_	_	
7-119	1039-1045	Python	*[5]	PROGLANG[5]	
7-120	1046-1051	3.7.6	*[5]	PROGLANG[5]	
7-121	1051-1052	`	_	_	
7-122	1054-1060	Python	*	PROGLANG	
7-123	1061-1070	Libraries	_	_	
7-124	1070-1071	:	_	_	
7-125	1076-1077	*	_	_	
7-126	1078-1079	`	_	_	
7-127	1079-1084	torch	*[6]	SOFTWARE[6]	
7-128	1085-1090	1.4.0	*[6]	SOFTWARE[6]	
7-129	1090-1091	`	_	_	
7-130	1094-1095	*	_	_	
7-131	1096-1097	`	_	_	
7-132	1097-1112	torch_geometric	*[7]	SOFTWARE[7]	
7-133	1113-1118	1.2.1	*[7]	SOFTWARE[7]	
7-134	1118-1119	`	_	_	
7-135	1122-1123	*	_	_	
7-136	1124-1125	`	_	_	
7-137	1125-1130	numpy	*[8]	SOFTWARE[8]	
7-138	1131-1137	1.18.1	*[8]	SOFTWARE[8]	
7-139	1137-1138	`	_	_	
7-140	1141-1142	#	_	_	
7-141	1142-1143	#	_	_	
7-142	1143-1144	#	_	_	
7-143	1144-1145	#	_	_	
7-144	1146-1152	Source	_	_	
7-145	1153-1157	Data	_	_	
7-146	1159-1164	There	_	_	
7-147	1165-1168	are	_	_	
7-148	1169-1171	73	_	_	
7-149	1172-1180	problems	_	_	
7-150	1181-1189	obtained	_	_	
7-151	1190-1194	from	_	_	
7-152	1195-1198	NCI	_	_	
7-153	1198-1199	.	_	_	

#Text=The data source including the extracted domain relations will be made available somewhere else (non-GitHub site) due to storage issues.
8-1	1200-1203	The	_	_	
8-2	1204-1208	data	_	_	
8-3	1209-1215	source	_	_	
8-4	1216-1225	including	_	_	
8-5	1226-1229	the	_	_	
8-6	1230-1239	extracted	_	_	
8-7	1240-1246	domain	_	_	
8-8	1247-1256	relations	_	_	
8-9	1257-1261	will	_	_	
8-10	1262-1264	be	_	_	
8-11	1265-1269	made	_	_	
8-12	1270-1279	available	_	_	
8-13	1280-1289	somewhere	_	_	
8-14	1290-1294	else	_	_	
8-15	1295-1296	(	_	_	
8-16	1296-1306	non-GitHub	_	_	
8-17	1307-1311	site	_	_	
8-18	1311-1312	)	_	_	
8-19	1313-1316	due	_	_	
8-20	1317-1319	to	_	_	
8-21	1320-1327	storage	_	_	
8-22	1328-1334	issues	_	_	
8-23	1334-1335	.	_	_	

#Text=Temporarity, this is hosted in the Google Drive: [DataForVEGNN](https://drive.google.com/file/d/1eJrq_kvD2UmWiWe6F3C3Ire0fbv6CNrm/view?
9-1	1337-1348	Temporarity	_	_	
9-2	1348-1349	,	_	_	
9-3	1350-1354	this	_	_	
9-4	1355-1357	is	_	_	
9-5	1358-1364	hosted	_	_	
9-6	1365-1367	in	_	_	
9-7	1368-1371	the	_	_	
9-8	1372-1378	Google	*[9]	SOFTWARE[9]	
9-9	1379-1384	Drive	*[9]	SOFTWARE[9]	
9-10	1384-1385	:	*[9]	SOFTWARE[9]	
9-11	1386-1387	[	_	_	
9-12	1387-1399	DataForVEGNN	_	_	
9-13	1399-1400	]	_	_	
9-14	1400-1401	(	_	_	
9-15	1401-1406	https	_	_	
9-16	1406-1407	:	_	_	
9-17	1407-1408	/	_	_	
9-18	1408-1409	/	_	_	
9-19	1409-1425	drive.google.com	_	_	
9-20	1425-1426	/	_	_	
9-21	1426-1430	file	_	_	
9-22	1430-1431	/	_	_	
9-23	1431-1432	d	_	_	
9-24	1432-1433	/	_	_	
9-25	1433-1466	1eJrq_kvD2UmWiWe6F3C3Ire0fbv6CNrm	_	_	
9-26	1466-1467	/	_	_	
9-27	1467-1471	view	_	_	
9-28	1471-1472	?	_	_	

#Text=usp=sharing).
10-1	1472-1475	usp	_	_	
10-2	1475-1476	=	_	_	
10-3	1476-1483	sharing	_	_	
10-4	1483-1484	)	_	_	
10-5	1484-1485	.	_	_	

#Text=The compressed file contains all data required for the work.
11-1	1486-1489	The	_	_	
11-2	1490-1500	compressed	_	_	
11-3	1501-1505	file	_	_	
11-4	1506-1514	contains	_	_	
11-5	1515-1518	all	_	_	
11-6	1519-1523	data	_	_	
11-7	1524-1532	required	_	_	
11-8	1533-1536	for	_	_	
11-9	1537-1540	the	_	_	
11-10	1541-1545	work	_	_	
11-11	1545-1546	.	_	_	

#Text=Soon, we should be able to host these generated datasets with some well-known Benchmark websites.
12-1	1547-1551	Soon	_	_	
12-2	1551-1552	,	_	_	
12-3	1553-1555	we	_	_	
12-4	1556-1562	should	_	_	
12-5	1563-1565	be	_	_	
12-6	1566-1570	able	_	_	
12-7	1571-1573	to	_	_	
12-8	1574-1578	host	_	_	
12-9	1579-1584	these	_	_	
12-10	1585-1594	generated	_	_	
12-11	1595-1603	datasets	_	_	
12-12	1604-1608	with	_	_	
12-13	1609-1613	some	_	_	
12-14	1614-1624	well-known	_	_	
12-15	1625-1634	Benchmark	_	_	
12-16	1635-1643	websites	_	_	
12-17	1643-1644	.	_	_	

#Text=The information will be updated in this site, when that happens.
#Text=
#Text=
#Text=#### Working Data directory
#Text=
#Text=A temporary data directory is created in `.
13-1	1645-1648	The	_	_	
13-2	1649-1660	information	_	_	
13-3	1661-1665	will	_	_	
13-4	1666-1668	be	_	_	
13-5	1669-1676	updated	_	_	
13-6	1677-1679	in	_	_	
13-7	1680-1684	this	_	_	
13-8	1685-1689	site	_	_	
13-9	1689-1690	,	_	_	
13-10	1691-1695	when	_	_	
13-11	1696-1700	that	_	_	
13-12	1701-1708	happens	_	_	
13-13	1708-1709	.	_	_	
13-14	1712-1713	#	_	_	
13-15	1713-1714	#	_	_	
13-16	1714-1715	#	_	_	
13-17	1715-1716	#	_	_	
13-18	1717-1724	Working	_	_	
13-19	1725-1729	Data	_	_	
13-20	1730-1739	directory	_	_	
13-21	1741-1742	A	_	_	
13-22	1743-1752	temporary	_	_	
13-23	1753-1757	data	_	_	
13-24	1758-1767	directory	_	_	
13-25	1768-1770	is	_	_	
13-26	1771-1778	created	_	_	
13-27	1779-1781	in	_	_	
13-28	1782-1783	`	_	_	
13-29	1783-1784	.	_	_	

#Text=/data`.
14-1	1784-1785	/	_	_	
14-2	1785-1789	data	_	_	
14-3	1789-1790	`	_	_	
14-4	1790-1791	.	_	_	

#Text=Under this there are two two directories for processing: `.
15-1	1792-1797	Under	_	_	
15-2	1798-1802	this	_	_	
15-3	1803-1808	there	_	_	
15-4	1809-1812	are	_	_	
15-5	1813-1816	two	_	_	
15-6	1817-1820	two	_	_	
15-7	1821-1832	directories	_	_	
15-8	1833-1836	for	_	_	
15-9	1837-1847	processing	_	_	
15-10	1847-1848	:	_	_	
15-11	1849-1850	`	_	_	
15-12	1850-1851	.	_	_	

#Text=/data/raw` and `.
16-1	1851-1852	/	_	_	
16-2	1852-1856	data	_	_	
16-3	1856-1857	/	_	_	
16-4	1857-1860	raw	_	_	
16-5	1860-1861	`	_	_	
16-6	1862-1865	and	_	_	
16-7	1866-1867	`	_	_	
16-8	1867-1868	.	_	_	

#Text=/data/processed`.
17-1	1868-1869	/	_	_	
17-2	1869-1873	data	_	_	
17-3	1873-1874	/	_	_	
17-4	1874-1883	processed	_	_	
17-5	1883-1884	`	_	_	
17-6	1884-1885	.	_	_	

#Text=Purposefully, the files are kept empty for uploading to GitHub.
18-1	1886-1898	Purposefully	_	_	
18-2	1898-1899	,	_	_	
18-3	1900-1903	the	_	_	
18-4	1904-1909	files	_	_	
18-5	1910-1913	are	_	_	
18-6	1914-1918	kept	_	_	
18-7	1919-1924	empty	_	_	
18-8	1925-1928	for	_	_	
18-9	1929-1938	uploading	_	_	
18-10	1939-1941	to	_	_	
18-11	1942-1948	GitHub	_	_	
18-12	1948-1949	.	_	_	

#Text=The split information gets copied to `.
19-1	1950-1953	The	_	_	
19-2	1954-1959	split	_	_	
19-3	1960-1971	information	_	_	
19-4	1972-1976	gets	_	_	
19-5	1977-1983	copied	_	_	
19-6	1984-1986	to	_	_	
19-7	1987-1988	`	_	_	
19-8	1988-1989	.	_	_	

#Text=/data/train_split` and `.
20-1	1989-1990	/	_	_	
20-2	1990-1994	data	_	_	
20-3	1994-1995	/	_	_	
20-4	1995-2006	train_split	_	_	
20-5	2006-2007	`	_	_	
20-6	2008-2011	and	_	_	
20-7	2012-2013	`	_	_	
20-8	2013-2014	.	_	_	

#Text=/data/test_split`.
#Text=
#Text=
#Text=#### Shell scripts
#Text=
#Text=The script "run.bash" is one-shot execution of all methods
21-1	2014-2015	/	_	_	
21-2	2015-2019	data	_	_	
21-3	2019-2020	/	_	_	
21-4	2020-2030	test_split	_	_	
21-5	2030-2031	`	_	_	
21-6	2031-2032	.	_	_	
21-7	2035-2036	#	_	_	
21-8	2036-2037	#	_	_	
21-9	2037-2038	#	_	_	
21-10	2038-2039	#	_	_	
21-11	2040-2045	Shell	*	PROGLANG	
21-12	2046-2053	scripts	_	_	
21-13	2055-2058	The	_	_	
21-14	2059-2065	script	_	_	
21-15	2066-2067	"	_	_	
21-16	2067-2075	run.bash	_	_	
21-17	2075-2076	"	_	_	
21-18	2077-2079	is	_	_	
21-19	2080-2088	one-shot	_	_	
21-20	2089-2098	execution	_	_	
21-21	2099-2101	of	_	_	
21-22	2102-2105	all	_	_	
21-23	2106-2113	methods	_	_	

#Text=.
22-1	2113-2114	.	_	_	

#Text=`
#Text=bash run.bash
#Text=`
#Text=
#Text=The script "resultsummary.bash" summarises the results for each dataset.
23-1	2117-2118	`	_	_	
23-2	2119-2123	bash	*	SOFTWARE	
23-3	2124-2132	run.bash	_	_	
23-4	2133-2134	`	_	_	
23-5	2136-2139	The	_	_	
23-6	2140-2146	script	_	_	
23-7	2147-2148	"	_	_	
23-8	2148-2166	resultsummary.bash	_	_	
23-9	2166-2167	"	_	_	
23-10	2168-2178	summarises	_	_	
23-11	2179-2182	the	_	_	
23-12	2183-2190	results	_	_	
23-13	2191-2194	for	_	_	
23-14	2195-2199	each	_	_	
23-15	2200-2207	dataset	_	_	
23-16	2207-2208	.	_	_	

#Text=For this, one needs to supply the result directory as an argument.
24-1	2209-2212	For	_	_	
24-2	2213-2217	this	_	_	
24-3	2217-2218	,	_	_	
24-4	2219-2222	one	_	_	
24-5	2223-2228	needs	_	_	
24-6	2229-2231	to	_	_	
24-7	2232-2238	supply	_	_	
24-8	2239-2242	the	_	_	
24-9	2243-2249	result	_	_	
24-10	2250-2259	directory	_	_	
24-11	2260-2262	as	_	_	
24-12	2263-2265	an	_	_	
24-13	2266-2274	argument	_	_	
24-14	2274-2275	.	_	_	

#Text=For example:
#Text=
#Text=`
#Text=bash resultsummary.bash Result_dir_name
#Text=`
#Text=
#Text=To store the results in a file:
#Text=
#Text=`
#Text=bash resultsummary.bash Result_dir_name > Result_file_name.txt
#Text=`
#Text=
#Text=To store only dataset and accuracy, one can *gawk* out the columns and then redirect to some file.
25-1	2276-2279	For	_	_	
25-2	2280-2287	example	_	_	
25-3	2287-2288	:	_	_	
25-4	2290-2291	`	_	_	
25-5	2292-2296	bash	*	SOFTWARE	
25-6	2297-2315	resultsummary.bash	_	_	
25-7	2316-2331	Result_dir_name	_	_	
25-8	2332-2333	`	_	_	
25-9	2335-2337	To	_	_	
25-10	2338-2343	store	_	_	
25-11	2344-2347	the	_	_	
25-12	2348-2355	results	_	_	
25-13	2356-2358	in	_	_	
25-14	2359-2360	a	_	_	
25-15	2361-2365	file	_	_	
25-16	2365-2366	:	_	_	
25-17	2368-2369	`	_	_	
25-18	2370-2374	bash	*	SOFTWARE	
25-19	2375-2393	resultsummary.bash	_	_	
25-20	2394-2409	Result_dir_name	_	_	
25-21	2410-2411	>	_	_	
25-22	2412-2432	Result_file_name.txt	_	_	
25-23	2433-2434	`	_	_	
25-24	2436-2438	To	_	_	
25-25	2439-2444	store	_	_	
25-26	2445-2449	only	_	_	
25-27	2450-2457	dataset	_	_	
25-28	2458-2461	and	_	_	
25-29	2462-2470	accuracy	_	_	
25-30	2470-2471	,	_	_	
25-31	2472-2475	one	_	_	
25-32	2476-2479	can	_	_	
25-33	2480-2481	*	_	_	
25-34	2481-2485	gawk	_	_	
25-35	2485-2486	*	_	_	
25-36	2487-2490	out	_	_	
25-37	2491-2494	the	_	_	
25-38	2495-2502	columns	_	_	
25-39	2503-2506	and	_	_	
25-40	2507-2511	then	_	_	
25-41	2512-2520	redirect	_	_	
25-42	2521-2523	to	_	_	
25-43	2524-2528	some	_	_	
25-44	2529-2533	file	_	_	
25-45	2533-2534	.	_	_	

#Text=**added 1:** One can now create a full summary with regard to all the datasets and features for any particular method.
26-1	2537-2538	*	_	_	
26-2	2538-2539	*	_	_	
26-3	2539-2544	added	_	_	
26-4	2545-2546	1	_	_	
26-5	2546-2547	:	_	_	
26-6	2547-2548	*	_	_	
26-7	2548-2549	*	_	_	
26-8	2550-2553	One	_	_	
26-9	2554-2557	can	_	_	
26-10	2558-2561	now	_	_	
26-11	2562-2568	create	_	_	
26-12	2569-2570	a	_	_	
26-13	2571-2575	full	_	_	
26-14	2576-2583	summary	_	_	
26-15	2584-2588	with	_	_	
26-16	2589-2595	regard	_	_	
26-17	2596-2598	to	_	_	
26-18	2599-2602	all	_	_	
26-19	2603-2606	the	_	_	
26-20	2607-2615	datasets	_	_	
26-21	2616-2619	and	_	_	
26-22	2620-2628	features	_	_	
26-23	2629-2632	for	_	_	
26-24	2633-2636	any	_	_	
26-25	2637-2647	particular	_	_	
26-26	2648-2654	method	_	_	
26-27	2654-2655	.	_	_	

#Text=See the following for help about the new summarising script
27-1	2656-2659	See	_	_	
27-2	2660-2663	the	_	_	
27-3	2664-2673	following	_	_	
27-4	2674-2677	for	_	_	
27-5	2678-2682	help	_	_	
27-6	2683-2688	about	_	_	
27-7	2689-2692	the	_	_	
27-8	2693-2696	new	_	_	
27-9	2697-2708	summarising	_	_	
27-10	2709-2715	script	_	_	

#Text=.
28-1	2715-2716	.	_	_	

#Text=`
#Text=bash createressum.bash --help
#Text=`
#Text=
#Text=
#Text=**added 2:** Added a Python script to load a (trained) saved model and print the structure
#Text=
#Text=`
#Text=python modelsummary.py
#Text=`
#Text=
#Text=**added 3:** Code to load the saved models for deployment.
29-1	2718-2719	`	_	_	
29-2	2720-2724	bash	*	SOFTWARE	
29-3	2725-2742	createressum.bash	_	_	
29-4	2743-2744	-	_	_	
29-5	2744-2745	-	_	_	
29-6	2745-2749	help	_	_	
29-7	2750-2751	`	_	_	
29-8	2754-2755	*	_	_	
29-9	2755-2756	*	_	_	
29-10	2756-2761	added	_	_	
29-11	2762-2763	2	_	_	
29-12	2763-2764	:	_	_	
29-13	2764-2765	*	_	_	
29-14	2765-2766	*	_	_	
29-15	2767-2772	Added	_	_	
29-16	2773-2774	a	_	_	
29-17	2775-2781	Python	*	PROGLANG	
29-18	2782-2788	script	_	_	
29-19	2789-2791	to	_	_	
29-20	2792-2796	load	_	_	
29-21	2797-2798	a	_	_	
29-22	2799-2800	(	_	_	
29-23	2800-2807	trained	_	_	
29-24	2807-2808	)	_	_	
29-25	2809-2814	saved	_	_	
29-26	2815-2820	model	_	_	
29-27	2821-2824	and	_	_	
29-28	2825-2830	print	_	_	
29-29	2831-2834	the	_	_	
29-30	2835-2844	structure	_	_	
29-31	2846-2847	`	_	_	
29-32	2848-2854	python	*	SOFTWARE	
29-33	2855-2870	modelsummary.py	_	_	
29-34	2871-2872	`	_	_	
29-35	2874-2875	*	_	_	
29-36	2875-2876	*	_	_	
29-37	2876-2881	added	_	_	
29-38	2882-2883	3	_	_	
29-39	2883-2884	:	_	_	
29-40	2884-2885	*	_	_	
29-41	2885-2886	*	_	_	
29-42	2887-2891	Code	_	_	
29-43	2892-2894	to	_	_	
29-44	2895-2899	load	_	_	
29-45	2900-2903	the	_	_	
29-46	2904-2909	saved	_	_	
29-47	2910-2916	models	_	_	
29-48	2917-2920	for	_	_	
29-49	2921-2931	deployment	_	_	
29-50	2931-2932	.	_	_	

#Text=Deployment refers to testing the trained model on unseen data.
30-1	2933-2943	Deployment	_	_	
30-2	2944-2950	refers	_	_	
30-3	2951-2953	to	_	_	
30-4	2954-2961	testing	_	_	
30-5	2962-2965	the	_	_	
30-6	2966-2973	trained	_	_	
30-7	2974-2979	model	_	_	
30-8	2980-2982	on	_	_	
30-9	2983-2989	unseen	_	_	
30-10	2990-2994	data	_	_	
30-11	2994-2995	.	_	_	

#Text=For us this is: test data.
31-1	2996-2999	For	_	_	
31-2	3000-3002	us	_	_	
31-3	3003-3007	this	_	_	
31-4	3008-3010	is	_	_	
31-5	3010-3011	:	_	_	
31-6	3012-3016	test	_	_	
31-7	3017-3021	data	_	_	
31-8	3021-3022	.	_	_	

#Text=Added also the printing model code in this.
32-1	3023-3028	Added	_	_	
32-2	3029-3033	also	_	_	
32-3	3034-3037	the	_	_	
32-4	3038-3046	printing	_	_	
32-5	3047-3052	model	_	_	
32-6	3053-3057	code	_	_	
32-7	3058-3060	in	_	_	
32-8	3061-3065	this	_	_	
32-9	3065-3066	.	_	_	

#Text=So, no need to explicitly use the modelsummary.py code given in "added 2"
33-1	3067-3069	So	_	_	
33-2	3069-3070	,	_	_	
33-3	3071-3073	no	_	_	
33-4	3074-3078	need	_	_	
33-5	3079-3081	to	_	_	
33-6	3082-3092	explicitly	_	_	
33-7	3093-3096	use	_	_	
33-8	3097-3100	the	_	_	
33-9	3101-3116	modelsummary.py	_	_	
33-10	3117-3121	code	_	_	
33-11	3122-3127	given	_	_	
33-12	3128-3130	in	_	_	
33-13	3131-3132	"	_	_	
33-14	3132-3137	added	_	_	
33-15	3138-3139	2	_	_	
33-16	3139-3140	"	_	_	

#Text=.
34-1	3140-3141	.	_	_	

#Text=`
#Text=bash test.bash
#Text=`
#Text=
#Text=Some results from this are saved in the file `testedsavedmodels.out`.
35-1	3143-3144	`	_	_	
35-2	3145-3149	bash	*	SOFTWARE	
35-3	3150-3159	test.bash	_	_	
35-4	3160-3161	`	_	_	
35-5	3163-3167	Some	_	_	
35-6	3168-3175	results	_	_	
35-7	3176-3180	from	_	_	
35-8	3181-3185	this	_	_	
35-9	3186-3189	are	_	_	
35-10	3190-3195	saved	_	_	
35-11	3196-3198	in	_	_	
35-12	3199-3202	the	_	_	
35-13	3203-3207	file	_	_	
35-14	3208-3209	`	_	_	
35-15	3209-3230	testedsavedmodels.out	_	_	
35-16	3230-3231	`	_	_	
35-17	3231-3232	.	_	_	

#Text=**added 4:** The `createressum_*.bash` files summarise the results
36-1	3236-3237	*	_	_	
36-2	3237-3238	*	_	_	
36-3	3238-3243	added	_	_	
36-4	3244-3245	4	_	_	
36-5	3245-3246	:	_	_	
36-6	3246-3247	*	_	_	
36-7	3247-3248	*	_	_	
36-8	3249-3252	The	_	_	
36-9	3253-3254	`	_	_	
36-10	3254-3266	createressum	_	_	
36-11	3266-3267	_	_	_	
36-12	3267-3268	*	_	_	
36-13	3268-3269	.	_	_	
36-14	3269-3273	bash	_	_	
36-15	3273-3274	`	_	_	
36-16	3275-3280	files	_	_	
36-17	3281-3290	summarise	_	_	
36-18	3291-3294	the	_	_	
36-19	3295-3302	results	_	_	

#Text=.
37-1	3302-3303	.	_	_	

#Text=`
#Text=bash createressum_[enter].bash --help
#Text=`
#Text=
#Text=
#Text=#### Note on Reproducibility
#Text=
#Text=
#Text=The implementations have been carried out using [PyTorch](https://pytorch.org/docs/stable/index.html).
38-1	3305-3306	`	_	_	
38-2	3307-3311	bash	*	SOFTWARE	
38-3	3312-3324	createressum	_	_	
38-4	3324-3325	_	_	_	
38-5	3325-3326	[	_	_	
38-6	3326-3331	enter	_	_	
38-7	3331-3332	]	_	_	
38-8	3332-3333	.	_	_	
38-9	3333-3337	bash	_	_	
38-10	3338-3339	-	_	_	
38-11	3339-3340	-	_	_	
38-12	3340-3344	help	_	_	
38-13	3345-3346	`	_	_	
38-14	3349-3350	#	_	_	
38-15	3350-3351	#	_	_	
38-16	3351-3352	#	_	_	
38-17	3352-3353	#	_	_	
38-18	3354-3358	Note	_	_	
38-19	3359-3361	on	_	_	
38-20	3362-3377	Reproducibility	_	_	
38-21	3380-3383	The	_	_	
38-22	3384-3399	implementations	_	_	
38-23	3400-3404	have	_	_	
38-24	3405-3409	been	_	_	
38-25	3410-3417	carried	_	_	
38-26	3418-3421	out	_	_	
38-27	3422-3427	using	_	_	
38-28	3428-3429	[	_	_	
38-29	3429-3436	PyTorch	*	SOFTWARE	
38-30	3436-3437	]	_	_	
38-31	3437-3438	(	_	_	
38-32	3438-3443	https	_	_	
38-33	3443-3444	:	_	_	
38-34	3444-3445	/	_	_	
38-35	3445-3446	/	_	_	
38-36	3446-3457	pytorch.org	_	_	
38-36.1	3446-3453	pytorch	*	SOFTWARE	
38-37	3457-3458	/	_	_	
38-38	3458-3462	docs	_	_	
38-39	3462-3463	/	_	_	
38-40	3463-3469	stable	_	_	
38-41	3469-3470	/	_	_	
38-42	3470-3480	index.html	_	_	
38-43	3480-3481	)	_	_	
38-44	3481-3482	.	_	_	

#Text=All the experiments are conducted by setting a fixed seed for the Random Number Generator (RNG).
39-1	3483-3486	All	_	_	
39-2	3487-3490	the	_	_	
39-3	3491-3502	experiments	_	_	
39-4	3503-3506	are	_	_	
39-5	3507-3516	conducted	_	_	
39-6	3517-3519	by	_	_	
39-7	3520-3527	setting	_	_	
39-8	3528-3529	a	_	_	
39-9	3530-3535	fixed	_	_	
39-10	3536-3540	seed	_	_	
39-11	3541-3544	for	_	_	
39-12	3545-3548	the	_	_	
39-13	3549-3555	Random	_	_	
39-14	3556-3562	Number	_	_	
39-15	3563-3572	Generator	_	_	
39-16	3573-3574	(	_	_	
39-17	3574-3577	RNG	_	_	
39-18	3577-3578	)	_	_	
39-19	3578-3579	.	_	_	

#Text=Although we believe that this should be sufficient to reproduce all the experiments; we note the [official statement](https://pytorch.org/docs/stable/notes/randomness.html) from PyTorch on reproducibility: "Completely reproducible results are not guaranteed across PyTorch releases, individual commits or different platforms.
40-1	3580-3588	Although	_	_	
40-2	3589-3591	we	_	_	
40-3	3592-3599	believe	_	_	
40-4	3600-3604	that	_	_	
40-5	3605-3609	this	_	_	
40-6	3610-3616	should	_	_	
40-7	3617-3619	be	_	_	
40-8	3620-3630	sufficient	_	_	
40-9	3631-3633	to	_	_	
40-10	3634-3643	reproduce	_	_	
40-11	3644-3647	all	_	_	
40-12	3648-3651	the	_	_	
40-13	3652-3663	experiments	_	_	
40-14	3663-3664	;	_	_	
40-15	3665-3667	we	_	_	
40-16	3668-3672	note	_	_	
40-17	3673-3676	the	_	_	
40-18	3677-3678	[	_	_	
40-19	3678-3686	official	_	_	
40-20	3687-3696	statement	_	_	
40-21	3696-3697	]	_	_	
40-22	3697-3698	(	_	_	
40-23	3698-3703	https	_	_	
40-24	3703-3704	:	_	_	
40-25	3704-3705	/	_	_	
40-26	3705-3706	/	_	_	
40-27	3706-3717	pytorch.org	_	_	
40-27.1	3706-3713	pytorch	*	SOFTWARE	
40-28	3717-3718	/	_	_	
40-29	3718-3722	docs	_	_	
40-30	3722-3723	/	_	_	
40-31	3723-3729	stable	_	_	
40-32	3729-3730	/	_	_	
40-33	3730-3735	notes	_	_	
40-34	3735-3736	/	_	_	
40-35	3736-3751	randomness.html	_	_	
40-36	3751-3752	)	_	_	
40-37	3753-3757	from	_	_	
40-38	3758-3765	PyTorch	*	SOFTWARE	
40-39	3766-3768	on	_	_	
40-40	3769-3784	reproducibility	_	_	
40-41	3784-3785	:	_	_	
40-42	3786-3787	"	_	_	
40-43	3787-3797	Completely	_	_	
40-44	3798-3810	reproducible	_	_	
40-45	3811-3818	results	_	_	
40-46	3819-3822	are	_	_	
40-47	3823-3826	not	_	_	
40-48	3827-3837	guaranteed	_	_	
40-49	3838-3844	across	_	_	
40-50	3845-3852	PyTorch	*	SOFTWARE	
40-51	3853-3861	releases	_	_	
40-52	3861-3862	,	_	_	
40-53	3863-3873	individual	_	_	
40-54	3874-3881	commits	_	_	
40-55	3882-3884	or	_	_	
40-56	3885-3894	different	_	_	
40-57	3895-3904	platforms	_	_	
40-58	3904-3905	.	_	_	

#Text=Furthermore, results need not be reproducible between CPU and GPU executions, even when using identical seeds."
#Text=
#Text=
#Text=#### Cite
#Text=
#Text=[New] This work is now accepted at Springer Machine Learning Journal (Feb 19, 2021)
#Text=
#Text=[Preprint] The manuscript is available as a [pre-print](https://arxiv.org/abs/2010.13900).
41-1	3906-3917	Furthermore	_	_	
41-2	3917-3918	,	_	_	
41-3	3919-3926	results	_	_	
41-4	3927-3931	need	_	_	
41-5	3932-3935	not	_	_	
41-6	3936-3938	be	_	_	
41-7	3939-3951	reproducible	_	_	
41-8	3952-3959	between	_	_	
41-9	3960-3963	CPU	_	_	
41-10	3964-3967	and	_	_	
41-11	3968-3971	GPU	_	_	
41-12	3972-3982	executions	_	_	
41-13	3982-3983	,	_	_	
41-14	3984-3988	even	_	_	
41-15	3989-3993	when	_	_	
41-16	3994-3999	using	_	_	
41-17	4000-4009	identical	_	_	
41-18	4010-4015	seeds	_	_	
41-19	4015-4016	.	_	_	
41-20	4016-4017	"	_	_	
41-21	4020-4021	#	_	_	
41-22	4021-4022	#	_	_	
41-23	4022-4023	#	_	_	
41-24	4023-4024	#	_	_	
41-25	4025-4029	Cite	_	_	
41-26	4031-4032	[	_	_	
41-27	4032-4035	New	_	_	
41-28	4035-4036	]	_	_	
41-29	4037-4041	This	_	_	
41-30	4042-4046	work	_	_	
41-31	4047-4049	is	_	_	
41-32	4050-4053	now	_	_	
41-33	4054-4062	accepted	_	_	
41-34	4063-4065	at	_	_	
41-35	4066-4074	Springer	_	_	
41-36	4075-4082	Machine	_	_	
41-37	4083-4091	Learning	_	_	
41-38	4092-4099	Journal	_	_	
41-39	4100-4101	(	_	_	
41-40	4101-4104	Feb	_	_	
41-41	4105-4107	19	_	_	
41-42	4107-4108	,	_	_	
41-43	4109-4113	2021	_	_	
41-44	4113-4114	)	_	_	
41-45	4116-4117	[	_	_	
41-46	4117-4125	Preprint	_	_	
41-47	4125-4126	]	_	_	
41-48	4127-4130	The	_	_	
41-49	4131-4141	manuscript	_	_	
41-50	4142-4144	is	_	_	
41-51	4145-4154	available	_	_	
41-52	4155-4157	as	_	_	
41-53	4158-4159	a	_	_	
41-54	4160-4161	[	_	_	
41-55	4161-4170	pre-print	_	_	
41-56	4170-4171	]	_	_	
41-57	4171-4172	(	_	_	
41-58	4172-4177	https	_	_	
41-59	4177-4178	:	_	_	
41-60	4178-4179	/	_	_	
41-61	4179-4180	/	_	_	
41-62	4180-4189	arxiv.org	_	_	
41-63	4189-4190	/	_	_	
41-64	4190-4193	abs	_	_	
41-65	4193-4194	/	_	_	
41-66	4194-4204	2010.13900	_	_	
41-67	4204-4205	)	_	_	
41-68	4205-4206	.	_	_	

#Text=Cite as:
#Text=
#Text=<pre>
#Text=@article{DBLP:journals/corr/abs-2010-13900,
#Text=  author    = {Tirtharaj Dash and
#Text=               Ashwin Srinivasan and
#Text=               Lovekesh Vig},
#Text=  title     = {Incorporating Symbolic Domain Knowledge into Graph Neural Networks},
#Text=  journal   = {CoRR},
#Text=  volume    = {abs/2010.13900},
#Text=  year      = {2020},
#Text=  url       = {https://arxiv.org/abs/2010.13900},
#Text=  archivePrefix = {arXiv},
#Text=  eprint    = {2010.13900},
#Text=  timestamp = {Mon, 02 Nov 2020 18:17:09 +0100},
#Text=  biburl    = {https://dblp.org/rec/journals/corr/abs-2010-13900.bib},
#Text=  bibsource = {dblp computer science bibliography, https://dblp.org}
#Text=}
#Text=</pre>
#Text=
#Text=[Old] This work is under review at Springer Machine Learning Journal.
42-1	4207-4211	Cite	_	_	
42-2	4212-4214	as	_	_	
42-3	4214-4215	:	_	_	
42-4	4217-4218	<	_	_	
42-5	4218-4221	pre	_	_	
42-6	4221-4222	>	_	_	
42-7	4223-4224	@	_	_	
42-8	4224-4231	article	_	_	
42-9	4231-4232	{	_	_	
42-10	4232-4236	DBLP	_	_	
42-11	4236-4237	:	_	_	
42-12	4237-4245	journals	_	_	
42-13	4245-4246	/	_	_	
42-14	4246-4250	corr	_	_	
42-15	4250-4251	/	_	_	
42-16	4251-4254	abs	_	_	
42-17	4254-4255	-	_	_	
42-18	4255-4259	2010	_	_	
42-19	4259-4260	-	_	_	
42-20	4260-4265	13900	_	_	
42-21	4265-4266	,	_	_	
42-22	4269-4275	author	_	_	
42-23	4279-4280	=	_	_	
42-24	4281-4282	{	_	_	
42-25	4282-4291	Tirtharaj	_	_	
42-26	4292-4296	Dash	_	_	
42-27	4297-4300	and	_	_	
42-28	4316-4322	Ashwin	_	_	
42-29	4323-4333	Srinivasan	_	_	
42-30	4334-4337	and	_	_	
42-31	4353-4361	Lovekesh	_	_	
42-32	4362-4365	Vig	_	_	
42-33	4365-4366	}	_	_	
42-34	4366-4367	,	_	_	
42-35	4370-4375	title	_	_	
42-36	4380-4381	=	_	_	
42-37	4382-4383	{	_	_	
42-38	4383-4396	Incorporating	*[10]	PUBLICATION[10]	
42-39	4397-4405	Symbolic	*[10]	PUBLICATION[10]	
42-40	4406-4412	Domain	*[10]	PUBLICATION[10]	
42-41	4413-4422	Knowledge	*[10]	PUBLICATION[10]	
42-42	4423-4427	into	*[10]	PUBLICATION[10]	
42-43	4428-4433	Graph	*[10]	PUBLICATION[10]	
42-44	4434-4440	Neural	*[10]	PUBLICATION[10]	
42-45	4441-4449	Networks	*[10]	PUBLICATION[10]	
42-46	4449-4450	}	_	_	
42-47	4450-4451	,	_	_	
42-48	4454-4461	journal	_	_	
42-49	4464-4465	=	_	_	
42-50	4466-4467	{	_	_	
42-51	4467-4471	CoRR	_	_	
42-52	4471-4472	}	_	_	
42-53	4472-4473	,	_	_	
42-54	4476-4482	volume	_	_	
42-55	4486-4487	=	_	_	
42-56	4488-4489	{	_	_	
42-57	4489-4492	abs	_	_	
42-58	4492-4493	/	_	_	
42-59	4493-4503	2010.13900	_	_	
42-60	4503-4504	}	_	_	
42-61	4504-4505	,	_	_	
42-62	4508-4512	year	_	_	
42-63	4518-4519	=	_	_	
42-64	4520-4521	{	_	_	
42-65	4521-4525	2020	_	_	
42-66	4525-4526	}	_	_	
42-67	4526-4527	,	_	_	
42-68	4530-4533	url	_	_	
42-69	4540-4541	=	_	_	
42-70	4542-4543	{	_	_	
42-71	4543-4548	https	_	_	
42-72	4548-4549	:	_	_	
42-73	4549-4550	/	_	_	
42-74	4550-4551	/	_	_	
42-75	4551-4560	arxiv.org	_	_	
42-76	4560-4561	/	_	_	
42-77	4561-4564	abs	_	_	
42-78	4564-4565	/	_	_	
42-79	4565-4575	2010.13900	_	_	
42-80	4575-4576	}	_	_	
42-81	4576-4577	,	_	_	
42-82	4580-4593	archivePrefix	_	_	
42-83	4594-4595	=	_	_	
42-84	4596-4597	{	_	_	
42-85	4597-4602	arXiv	_	_	
42-86	4602-4603	}	_	_	
42-87	4603-4604	,	_	_	
42-88	4607-4613	eprint	_	_	
42-89	4617-4618	=	_	_	
42-90	4619-4620	{	_	_	
42-91	4620-4630	2010.13900	_	_	
42-92	4630-4631	}	_	_	
42-93	4631-4632	,	_	_	
42-94	4635-4644	timestamp	_	_	
42-95	4645-4646	=	_	_	
42-96	4647-4648	{	_	_	
42-97	4648-4651	Mon	_	_	
42-98	4651-4652	,	_	_	
42-99	4653-4655	02	_	_	
42-100	4656-4659	Nov	_	_	
42-101	4660-4664	2020	_	_	
42-102	4665-4667	18	_	_	
42-103	4667-4668	:	_	_	
42-104	4668-4670	17	_	_	
42-105	4670-4671	:	_	_	
42-106	4671-4673	09	_	_	
42-107	4674-4675	+	_	_	
42-108	4675-4679	0100	_	_	
42-109	4679-4680	}	_	_	
42-110	4680-4681	,	_	_	
42-111	4684-4690	biburl	_	_	
42-112	4694-4695	=	_	_	
42-113	4696-4697	{	_	_	
42-114	4697-4702	https	_	_	
42-115	4702-4703	:	_	_	
42-116	4703-4704	/	_	_	
42-117	4704-4705	/	_	_	
42-118	4705-4713	dblp.org	_	_	
42-119	4713-4714	/	_	_	
42-120	4714-4717	rec	_	_	
42-121	4717-4718	/	_	_	
42-122	4718-4726	journals	_	_	
42-123	4726-4727	/	_	_	
42-124	4727-4731	corr	_	_	
42-125	4731-4732	/	_	_	
42-126	4732-4735	abs	_	_	
42-127	4735-4736	-	_	_	
42-128	4736-4740	2010	_	_	
42-129	4740-4741	-	_	_	
42-130	4741-4746	13900	_	_	
42-131	4746-4747	.	_	_	
42-132	4747-4750	bib	_	_	
42-133	4750-4751	}	_	_	
42-134	4751-4752	,	_	_	
42-135	4755-4764	bibsource	_	_	
42-136	4765-4766	=	_	_	
42-137	4767-4768	{	_	_	
42-138	4768-4772	dblp	_	_	
42-139	4773-4781	computer	_	_	
42-140	4782-4789	science	_	_	
42-141	4790-4802	bibliography	_	_	
42-142	4802-4803	,	_	_	
42-143	4804-4809	https	_	_	
42-144	4809-4810	:	_	_	
42-145	4810-4811	/	_	_	
42-146	4811-4812	/	_	_	
42-147	4812-4820	dblp.org	_	_	
42-148	4820-4821	}	_	_	
42-149	4822-4823	}	_	_	
42-150	4824-4825	<	_	_	
42-151	4825-4826	/	_	_	
42-152	4826-4829	pre	_	_	
42-153	4829-4830	>	_	_	
42-154	4832-4833	[	_	_	
42-155	4833-4836	Old	_	_	
42-156	4836-4837	]	_	_	
42-157	4838-4842	This	_	_	
42-158	4843-4847	work	_	_	
42-159	4848-4850	is	_	_	
42-160	4851-4856	under	_	_	
42-161	4857-4863	review	_	_	
42-162	4864-4866	at	_	_	
42-163	4867-4875	Springer	_	_	
42-164	4876-4883	Machine	_	_	
42-165	4884-4892	Learning	_	_	
42-166	4893-4900	Journal	_	_	
42-167	4900-4901	.	_	_	

#Text=Additional citation details will be updated after acceptance of the article.
43-1	4902-4912	Additional	_	_	
43-2	4913-4921	citation	_	_	
43-3	4922-4929	details	_	_	
43-4	4930-4934	will	_	_	
43-5	4935-4937	be	_	_	
43-6	4938-4945	updated	_	_	
43-7	4946-4951	after	_	_	
43-8	4952-4962	acceptance	_	_	
43-9	4963-4965	of	_	_	
43-10	4966-4969	the	_	_	
43-11	4970-4977	article	_	_	
43-12	4977-4978	.	_	_	
