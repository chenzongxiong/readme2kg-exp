#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# KV Cache Compression, But What Must We Give in Return?
1-1	0-1	#	_	_	
1-2	2-4	KV	*[1]	PUBLICATION[1]	
1-3	5-10	Cache	*[1]	PUBLICATION[1]	
1-4	11-22	Compression	*[1]	PUBLICATION[1]	
1-5	22-23	,	*[1]	PUBLICATION[1]	
1-6	24-27	But	*[1]	PUBLICATION[1]	
1-7	28-32	What	*[1]	PUBLICATION[1]	
1-8	33-37	Must	*[1]	PUBLICATION[1]	
1-9	38-40	We	*[1]	PUBLICATION[1]	
1-10	41-45	Give	*[1]	PUBLICATION[1]	
1-11	46-48	in	*[1]	PUBLICATION[1]	
1-12	49-55	Return	*[1]	PUBLICATION[1]	
1-13	55-56	?	*[1]	PUBLICATION[1]	

#Text=A Comprehensive Benchmark of Long Context Capable Approaches
#Text=
#Text=[!
2-1	57-58	A	*[1]	PUBLICATION[1]	
2-2	59-72	Comprehensive	*[1]	PUBLICATION[1]	
2-3	73-82	Benchmark	*[1]	PUBLICATION[1]	
2-4	83-85	of	*[1]	PUBLICATION[1]	
2-5	86-90	Long	*[1]	PUBLICATION[1]	
2-6	91-98	Context	*[1]	PUBLICATION[1]	
2-7	99-106	Capable	*[1]	PUBLICATION[1]	
2-8	107-117	Approaches	*[1]	PUBLICATION[1]	
2-9	119-120	[	_	_	
2-10	120-121	!	_	_	

#Text=[Gul'dan_everything](https://github.com/henryzhongsc/longctx_bench/blob/main/visualization/plotted/Gul'dan_everything.png)](https://www.youtube.com/watch?
3-1	121-122	[	_	_	
3-2	122-140	Gul'dan_everything	_	_	
3-3	140-141	]	_	_	
3-4	141-142	(	_	_	
3-5	142-147	https	_	_	
3-6	147-148	:	_	_	
3-7	148-149	/	_	_	
3-8	149-150	/	_	_	
3-9	150-160	github.com	_	_	
3-10	160-161	/	_	_	
3-11	161-173	henryzhongsc	_	_	
3-12	173-174	/	_	_	
3-13	174-187	longctx_bench	_	_	
3-14	187-188	/	_	_	
3-15	188-192	blob	_	_	
3-16	192-193	/	_	_	
3-17	193-197	main	_	_	
3-18	197-198	/	_	_	
3-19	198-211	visualization	_	_	
3-20	211-212	/	_	_	
3-21	212-219	plotted	_	_	
3-22	219-220	/	_	_	
3-23	220-242	Gul'dan_everything.png	_	_	
3-24	242-243	)	_	_	
3-25	243-244	]	_	_	
3-26	244-245	(	_	_	
3-27	245-250	https	_	_	
3-28	250-251	:	_	_	
3-29	251-252	/	_	_	
3-30	252-253	/	_	_	
3-31	253-268	www.youtube.com	_	_	
3-32	268-269	/	_	_	
3-33	269-274	watch	_	_	
3-34	274-275	?	_	_	

#Text=v=TLzhlsEFcVQ&t=55s)
#Text=
#Text=Jiayi Yuan\\*, Hongyi Liu\\*, Shaochen (Henry) Zhong\\*, Yu-Neng Chuang, Songchen Li, Guanchu Wang, Duy Le, Hongye Jin, Vipin Chaudhary, Zhaozhuo Xu, Zirui Liu, Xia Hu
#Text=
#Text=> This is the official implementation of our above-mentioned KV cache compression benchmark paper ([arXiv](https://arxiv.org/abs/2407.01527)).
4-1	275-276	v	_	_	
4-2	276-277	=	_	_	
4-3	277-288	TLzhlsEFcVQ	_	_	
4-4	288-289	&	_	_	
4-5	289-290	t	_	_	
4-6	290-291	=	_	_	
4-7	291-294	55s	_	_	
4-8	294-295	)	_	_	
4-9	297-302	Jiayi	_	_	
4-10	303-307	Yuan	_	_	
4-11	307-308	\	_	_	
4-12	308-309	*	_	_	
4-13	309-310	,	_	_	
4-14	311-317	Hongyi	_	_	
4-15	318-321	Liu	_	_	
4-16	321-322	\	_	_	
4-17	322-323	*	_	_	
4-18	323-324	,	_	_	
4-19	325-333	Shaochen	_	_	
4-20	334-335	(	_	_	
4-21	335-340	Henry	_	_	
4-22	340-341	)	_	_	
4-23	342-347	Zhong	_	_	
4-24	347-348	\	_	_	
4-25	348-349	*	_	_	
4-26	349-350	,	_	_	
4-27	351-358	Yu-Neng	_	_	
4-28	359-365	Chuang	_	_	
4-29	365-366	,	_	_	
4-30	367-375	Songchen	_	_	
4-31	376-378	Li	_	_	
4-32	378-379	,	_	_	
4-33	380-387	Guanchu	_	_	
4-34	388-392	Wang	_	_	
4-35	392-393	,	_	_	
4-36	394-397	Duy	_	_	
4-37	398-400	Le	_	_	
4-38	400-401	,	_	_	
4-39	402-408	Hongye	_	_	
4-40	409-412	Jin	_	_	
4-41	412-413	,	_	_	
4-42	414-419	Vipin	_	_	
4-43	420-429	Chaudhary	_	_	
4-44	429-430	,	_	_	
4-45	431-439	Zhaozhuo	_	_	
4-46	440-442	Xu	_	_	
4-47	442-443	,	_	_	
4-48	444-449	Zirui	_	_	
4-49	450-453	Liu	_	_	
4-50	453-454	,	_	_	
4-51	455-458	Xia	_	_	
4-52	459-461	Hu	_	_	
4-53	463-464	>	_	_	
4-54	465-469	This	_	_	
4-55	470-472	is	_	_	
4-56	473-476	the	_	_	
4-57	477-485	official	_	_	
4-58	486-500	implementation	_	_	
4-59	501-503	of	_	_	
4-60	504-507	our	_	_	
4-61	508-523	above-mentioned	_	_	
4-62	524-526	KV	_	_	
4-63	527-532	cache	_	_	
4-64	533-544	compression	_	_	
4-65	545-554	benchmark	_	_	
4-66	555-560	paper	_	_	
4-67	561-562	(	_	_	
4-68	562-563	[	_	_	
4-69	563-568	arXiv	_	_	
4-70	568-569	]	_	_	
4-71	569-570	(	_	_	
4-72	570-575	https	_	_	
4-73	575-576	:	_	_	
4-74	576-577	/	_	_	
4-75	577-578	/	_	_	
4-76	578-587	arxiv.org	_	_	
4-77	587-588	/	_	_	
4-78	588-591	abs	_	_	
4-79	591-592	/	_	_	
4-80	592-602	2407.01527	_	_	
4-81	602-603	)	_	_	
4-82	603-604	)	_	_	
4-83	604-605	.	_	_	

#Text=Work corresponds to Shaochen (Henry) Zhong and Zirui Liu.
#Text=
#Text=---
#Text=## Changelog and To-do
#Text=
#Text=* `2024/10/16`: All experiment logs, filtered, and raw results shared at [Google Drive link](https://drive.google.com/drive/folders/1PBB5bkR88QbaA1-dBTwP5xKLq8iEBcBb?
5-1	606-610	Work	_	_	
5-2	611-622	corresponds	_	_	
5-3	623-625	to	_	_	
5-4	626-634	Shaochen	_	_	
5-5	635-636	(	_	_	
5-6	636-641	Henry	_	_	
5-7	641-642	)	_	_	
5-8	643-648	Zhong	_	_	
5-9	649-652	and	_	_	
5-10	653-658	Zirui	_	_	
5-11	659-662	Liu	_	_	
5-12	662-663	.	_	_	
5-13	665-666	-	_	_	
5-14	666-667	-	_	_	
5-15	667-668	-	_	_	
5-16	669-670	#	_	_	
5-17	670-671	#	_	_	
5-18	672-681	Changelog	_	_	
5-19	682-685	and	_	_	
5-20	686-691	To-do	_	_	
5-21	693-694	*	_	_	
5-22	695-696	`	_	_	
5-23	696-700	2024	_	_	
5-24	700-701	/	_	_	
5-25	701-703	10	_	_	
5-26	703-704	/	_	_	
5-27	704-706	16	_	_	
5-28	706-707	`	_	_	
5-29	707-708	:	_	_	
5-30	709-712	All	_	_	
5-31	713-723	experiment	_	_	
5-32	724-728	logs	_	_	
5-33	728-729	,	_	_	
5-34	730-738	filtered	_	_	
5-35	738-739	,	_	_	
5-36	740-743	and	_	_	
5-37	744-747	raw	_	_	
5-38	748-755	results	_	_	
5-39	756-762	shared	_	_	
5-40	763-765	at	_	_	
5-41	766-767	[	_	_	
5-42	767-773	Google	_	_	
5-43	774-779	Drive	_	_	
5-44	780-784	link	_	_	
5-45	784-785	]	_	_	
5-46	785-786	(	_	_	
5-47	786-791	https	_	_	
5-48	791-792	:	_	_	
5-49	792-793	/	_	_	
5-50	793-794	/	_	_	
5-51	794-810	drive.google.com	_	_	
5-52	810-811	/	_	_	
5-53	811-816	drive	_	_	
5-54	816-817	/	_	_	
5-55	817-824	folders	_	_	
5-56	824-825	/	_	_	
5-57	825-840	1PBB5bkR88QbaA1	_	_	
5-58	840-841	-	_	_	
5-59	841-858	dBTwP5xKLq8iEBcBb	_	_	
5-60	858-859	?	_	_	

#Text=usp=share_link).
#Text=* `2024/10/08`: v2 arXiv-ed
6-1	859-862	usp	_	_	
6-2	862-863	=	_	_	
6-3	863-873	share_link	_	_	
6-4	873-874	)	_	_	
6-5	874-875	.	_	_	
6-6	876-877	*	_	_	
6-7	878-879	`	_	_	
6-8	879-883	2024	_	_	
6-9	883-884	/	_	_	
6-10	884-886	10	_	_	
6-11	886-887	/	_	_	
6-12	887-889	08	_	_	
6-13	889-890	`	_	_	
6-14	890-891	:	_	_	
6-15	892-894	v2	_	_	
6-16	895-903	arXiv-ed	_	_	

#Text=.
7-1	903-904	.	_	_	

#Text=* [x] Update v2 to capture new experiment results under the current implementations
8-1	907-908	*	_	_	
8-2	909-910	[	_	_	
8-3	910-911	x	_	_	
8-4	911-912	]	_	_	
8-5	913-919	Update	_	_	
8-6	920-922	v2	_	_	
8-7	923-925	to	_	_	
8-8	926-933	capture	_	_	
8-9	934-937	new	_	_	
8-10	938-948	experiment	_	_	
8-11	949-956	results	_	_	
8-12	957-962	under	_	_	
8-13	963-966	the	_	_	
8-14	967-974	current	_	_	
8-15	975-990	implementations	_	_	

#Text=.
9-1	990-991	.	_	_	

#Text=* [x] Add coverage of Mamba-2.
#Text=* `2024/09/19`: Accepted at EMNLP 2024 Findings (with a 4/5 meta!).
10-1	994-995	*	_	_	
10-2	996-997	[	_	_	
10-3	997-998	x	_	_	
10-4	998-999	]	_	_	
10-5	1000-1003	Add	_	_	
10-6	1004-1012	coverage	_	_	
10-7	1013-1015	of	_	_	
10-8	1016-1021	Mamba	_	_	
10-9	1021-1022	-	_	_	
10-10	1022-1023	2	_	_	
10-11	1023-1024	.	_	_	
10-12	1025-1026	*	_	_	
10-13	1027-1028	`	_	_	
10-14	1028-1032	2024	_	_	
10-15	1032-1033	/	_	_	
10-16	1033-1035	09	_	_	
10-17	1035-1036	/	_	_	
10-18	1036-1038	19	_	_	
10-19	1038-1039	`	_	_	
10-20	1039-1040	:	_	_	
10-21	1041-1049	Accepted	_	_	
10-22	1050-1052	at	_	_	
10-23	1053-1058	EMNLP	*[2]	CONFERENCE[2]	
10-24	1059-1063	2024	*[2]	CONFERENCE[2]	
10-25	1064-1072	Findings	_	_	
10-26	1073-1074	(	_	_	
10-27	1074-1078	with	_	_	
10-28	1079-1080	a	_	_	
10-29	1081-1082	4	_	_	
10-30	1082-1083	/	_	_	
10-31	1083-1084	5	_	_	
10-32	1085-1089	meta	_	_	
10-33	1089-1090	!	_	_	
10-34	1090-1091	)	_	_	
10-35	1091-1092	.	_	_	

#Text=* `2024/07/01`: v1 arXiv-ed.
#Text=* `2024/06/15`: Initial submission to June ARR 2024.
#Text=
#Text=
#Text=
#Text=---
#Text=
#Text=## Overview
#Text=
#Text=Token evictions, KV cache quantizations, hard prompt compression, RNNs, RNN-Transformer hybrids — plenty of efficiency approaches claim they are long context capable, but which can stand up to comprehensive scrutiny, and what are the trade-offs?
11-1	1093-1094	*	_	_	
11-2	1095-1096	`	_	_	
11-3	1096-1100	2024	_	_	
11-4	1100-1101	/	_	_	
11-5	1101-1103	07	_	_	
11-6	1103-1104	/	_	_	
11-7	1104-1106	01	_	_	
11-8	1106-1107	`	_	_	
11-9	1107-1108	:	_	_	
11-10	1109-1111	v1	_	_	
11-11	1112-1120	arXiv-ed	_	_	
11-12	1120-1121	.	_	_	
11-13	1122-1123	*	_	_	
11-14	1124-1125	`	_	_	
11-15	1125-1129	2024	_	_	
11-16	1129-1130	/	_	_	
11-17	1130-1132	06	_	_	
11-18	1132-1133	/	_	_	
11-19	1133-1135	15	_	_	
11-20	1135-1136	`	_	_	
11-21	1136-1137	:	_	_	
11-22	1138-1145	Initial	_	_	
11-23	1146-1156	submission	_	_	
11-24	1157-1159	to	_	_	
11-25	1160-1164	June	_	_	
11-26	1165-1168	ARR	_	_	
11-27	1169-1173	2024	_	_	
11-28	1173-1174	.	_	_	
11-29	1178-1179	-	_	_	
11-30	1179-1180	-	_	_	
11-31	1180-1181	-	_	_	
11-32	1183-1184	#	_	_	
11-33	1184-1185	#	_	_	
11-34	1186-1194	Overview	_	_	
11-35	1196-1201	Token	_	_	
11-36	1202-1211	evictions	_	_	
11-37	1211-1212	,	_	_	
11-38	1213-1215	KV	_	_	
11-39	1216-1221	cache	_	_	
11-40	1222-1235	quantizations	_	_	
11-41	1235-1236	,	_	_	
11-42	1237-1241	hard	_	_	
11-43	1242-1248	prompt	_	_	
11-44	1249-1260	compression	_	_	
11-45	1260-1261	,	_	_	
11-46	1262-1266	RNNs	_	_	
11-47	1266-1267	,	_	_	
11-48	1268-1283	RNN-Transformer	_	_	
11-49	1284-1291	hybrids	_	_	
11-50	1292-1293	—	_	_	
11-51	1294-1300	plenty	_	_	
11-52	1301-1303	of	_	_	
11-53	1304-1314	efficiency	_	_	
11-54	1315-1325	approaches	_	_	
11-55	1326-1331	claim	_	_	
11-56	1332-1336	they	_	_	
11-57	1337-1340	are	_	_	
11-58	1341-1345	long	_	_	
11-59	1346-1353	context	_	_	
11-60	1354-1361	capable	_	_	
11-61	1361-1362	,	_	_	
11-62	1363-1366	but	_	_	
11-63	1367-1372	which	_	_	
11-64	1373-1376	can	_	_	
11-65	1377-1382	stand	_	_	
11-66	1383-1385	up	_	_	
11-67	1386-1388	to	_	_	
11-68	1389-1402	comprehensive	_	_	
11-69	1403-1411	scrutiny	_	_	
11-70	1411-1412	,	_	_	
11-71	1413-1416	and	_	_	
11-72	1417-1421	what	_	_	
11-73	1422-1425	are	_	_	
11-74	1426-1429	the	_	_	
11-75	1430-1440	trade-offs	_	_	
11-76	1440-1441	?	_	_	

#Text=Our benchmark paper attempts to answer such questions by evaluating many exemplar methods among the above schools against various long context tasks.
#Text=
#Text=!
12-1	1442-1445	Our	_	_	
12-2	1446-1455	benchmark	_	_	
12-3	1456-1461	paper	_	_	
12-4	1462-1470	attempts	_	_	
12-5	1471-1473	to	_	_	
12-6	1474-1480	answer	_	_	
12-7	1481-1485	such	_	_	
12-8	1486-1495	questions	_	_	
12-9	1496-1498	by	_	_	
12-10	1499-1509	evaluating	_	_	
12-11	1510-1514	many	_	_	
12-12	1515-1523	exemplar	_	_	
12-13	1524-1531	methods	_	_	
12-14	1532-1537	among	_	_	
12-15	1538-1541	the	_	_	
12-16	1542-1547	above	_	_	
12-17	1548-1555	schools	_	_	
12-18	1556-1563	against	_	_	
12-19	1564-1571	various	_	_	
12-20	1572-1576	long	_	_	
12-21	1577-1584	context	_	_	
12-22	1585-1590	tasks	_	_	
12-23	1590-1591	.	_	_	
12-24	1593-1594	!	_	_	

#Text=[cover_vis](https://github.com/henryzhongsc/longctx_bench/blob/main/visualization/plotted/cover_vis.png)
#Text=
#Text=In this repo, we provide the implementation of all featured methods and evaluations.
13-1	1594-1595	[	_	_	
13-2	1595-1604	cover_vis	_	_	
13-3	1604-1605	]	_	_	
13-4	1605-1606	(	_	_	
13-5	1606-1611	https	_	_	
13-6	1611-1612	:	_	_	
13-7	1612-1613	/	_	_	
13-8	1613-1614	/	_	_	
13-9	1614-1624	github.com	_	_	
13-10	1624-1625	/	_	_	
13-11	1625-1637	henryzhongsc	_	_	
13-12	1637-1638	/	_	_	
13-13	1638-1651	longctx_bench	_	_	
13-14	1651-1652	/	_	_	
13-15	1652-1656	blob	_	_	
13-16	1656-1657	/	_	_	
13-17	1657-1661	main	_	_	
13-18	1661-1662	/	_	_	
13-19	1662-1675	visualization	_	_	
13-20	1675-1676	/	_	_	
13-21	1676-1683	plotted	_	_	
13-22	1683-1684	/	_	_	
13-23	1684-1697	cover_vis.png	_	_	
13-24	1697-1698	)	_	_	
13-25	1700-1702	In	_	_	
13-26	1703-1707	this	_	_	
13-27	1708-1712	repo	_	_	
13-28	1712-1713	,	_	_	
13-29	1714-1716	we	_	_	
13-30	1717-1724	provide	_	_	
13-31	1725-1728	the	_	_	
13-32	1729-1743	implementation	_	_	
13-33	1744-1746	of	_	_	
13-34	1747-1750	all	_	_	
13-35	1751-1759	featured	_	_	
13-36	1760-1767	methods	_	_	
13-37	1768-1771	and	_	_	
13-38	1772-1783	evaluations	_	_	
13-39	1783-1784	.	_	_	

#Text=We intentionally make our codebase minimalistic for easier hacking and reproducing needs, yet we keep it extensible to include alternative or future-coming approaches that are not under our benchmark coverage.
14-1	1785-1787	We	_	_	
14-2	1788-1801	intentionally	_	_	
14-3	1802-1806	make	_	_	
14-4	1807-1810	our	_	_	
14-5	1811-1819	codebase	_	_	
14-6	1820-1832	minimalistic	_	_	
14-7	1833-1836	for	_	_	
14-8	1837-1843	easier	_	_	
14-9	1844-1851	hacking	_	_	
14-10	1852-1855	and	_	_	
14-11	1856-1867	reproducing	_	_	
14-12	1868-1873	needs	_	_	
14-13	1873-1874	,	_	_	
14-14	1875-1878	yet	_	_	
14-15	1879-1881	we	_	_	
14-16	1882-1886	keep	_	_	
14-17	1887-1889	it	_	_	
14-18	1890-1900	extensible	_	_	
14-19	1901-1903	to	_	_	
14-20	1904-1911	include	_	_	
14-21	1912-1923	alternative	_	_	
14-22	1924-1926	or	_	_	
14-23	1927-1940	future-coming	_	_	
14-24	1941-1951	approaches	_	_	
14-25	1952-1956	that	_	_	
14-26	1957-1960	are	_	_	
14-27	1961-1964	not	_	_	
14-28	1965-1970	under	_	_	
14-29	1971-1974	our	_	_	
14-30	1975-1984	benchmark	_	_	
14-31	1985-1993	coverage	_	_	
14-32	1993-1994	.	_	_	

#Text=We plan to gradually incorporate more interesting methods and datasets into this repo.
#Text=
#Text=---
#Text=
#Text=## Environment Setup
#Text=
#Text=We provide the minimum environment requirements to support the running of our project.
15-1	1995-1997	We	_	_	
15-2	1998-2002	plan	_	_	
15-3	2003-2005	to	_	_	
15-4	2006-2015	gradually	_	_	
15-5	2016-2027	incorporate	_	_	
15-6	2028-2032	more	_	_	
15-7	2033-2044	interesting	_	_	
15-8	2045-2052	methods	_	_	
15-9	2053-2056	and	_	_	
15-10	2057-2065	datasets	_	_	
15-11	2066-2070	into	_	_	
15-12	2071-2075	this	_	_	
15-13	2076-2080	repo	_	_	
15-14	2080-2081	.	_	_	
15-15	2083-2084	-	_	_	
15-16	2084-2085	-	_	_	
15-17	2085-2086	-	_	_	
15-18	2088-2089	#	_	_	
15-19	2089-2090	#	_	_	
15-20	2091-2102	Environment	_	_	
15-21	2103-2108	Setup	_	_	
15-22	2110-2112	We	_	_	
15-23	2113-2120	provide	_	_	
15-24	2121-2124	the	_	_	
15-25	2125-2132	minimum	_	_	
15-26	2133-2144	environment	_	_	
15-27	2145-2157	requirements	_	_	
15-28	2158-2160	to	_	_	
15-29	2161-2168	support	_	_	
15-30	2169-2172	the	_	_	
15-31	2173-2180	running	_	_	
15-32	2181-2183	of	_	_	
15-33	2184-2187	our	_	_	
15-34	2188-2195	project	_	_	
15-35	2195-2196	.	_	_	

#Text=This means there can be a slight difference depending on the actual automatic dependency-solving result of different systems.
16-1	2197-2201	This	_	_	
16-2	2202-2207	means	_	_	
16-3	2208-2213	there	_	_	
16-4	2214-2217	can	_	_	
16-5	2218-2220	be	_	_	
16-6	2221-2222	a	_	_	
16-7	2223-2229	slight	_	_	
16-8	2230-2240	difference	_	_	
16-9	2241-2250	depending	_	_	
16-10	2251-2253	on	_	_	
16-11	2254-2257	the	_	_	
16-12	2258-2264	actual	_	_	
16-13	2265-2274	automatic	_	_	
16-14	2275-2293	dependency-solving	_	_	
16-15	2294-2300	result	_	_	
16-16	2301-2303	of	_	_	
16-17	2304-2313	different	_	_	
16-18	2314-2321	systems	_	_	
16-19	2321-2322	.	_	_	

#Text=Given the efficiency focus of our benchmark, some of the featured methods require conflicting environments, causing us unable to provide a single unified environment for all featured methods.
17-1	2323-2328	Given	_	_	
17-2	2329-2332	the	_	_	
17-3	2333-2343	efficiency	_	_	
17-4	2344-2349	focus	_	_	
17-5	2350-2352	of	_	_	
17-6	2353-2356	our	_	_	
17-7	2357-2366	benchmark	_	_	
17-8	2366-2367	,	_	_	
17-9	2368-2372	some	_	_	
17-10	2373-2375	of	_	_	
17-11	2376-2379	the	_	_	
17-12	2380-2388	featured	_	_	
17-13	2389-2396	methods	_	_	
17-14	2397-2404	require	_	_	
17-15	2405-2416	conflicting	_	_	
17-16	2417-2429	environments	_	_	
17-17	2429-2430	,	_	_	
17-18	2431-2438	causing	_	_	
17-19	2439-2441	us	_	_	
17-20	2442-2448	unable	_	_	
17-21	2449-2451	to	_	_	
17-22	2452-2459	provide	_	_	
17-23	2460-2461	a	_	_	
17-24	2462-2468	single	_	_	
17-25	2469-2476	unified	_	_	
17-26	2477-2488	environment	_	_	
17-27	2489-2492	for	_	_	
17-28	2493-2496	all	_	_	
17-29	2497-2505	featured	_	_	
17-30	2506-2513	methods	_	_	
17-31	2513-2514	.	_	_	

#Text=Thus, we try to control the version of some of the major packages (`torch`, `transformers`, etc.) and provide two sets of requirements
18-1	2515-2519	Thus	_	_	
18-2	2519-2520	,	_	_	
18-3	2521-2523	we	_	_	
18-4	2524-2527	try	_	_	
18-5	2528-2530	to	_	_	
18-6	2531-2538	control	_	_	
18-7	2539-2542	the	_	_	
18-8	2543-2550	version	_	_	
18-9	2551-2553	of	_	_	
18-10	2554-2558	some	_	_	
18-11	2559-2561	of	_	_	
18-12	2562-2565	the	_	_	
18-13	2566-2571	major	_	_	
18-14	2572-2580	packages	_	_	
18-15	2581-2582	(	_	_	
18-16	2582-2583	`	_	_	
18-17	2583-2588	torch	*	SOFTWARE	
18-18	2588-2589	`	_	_	
18-19	2589-2590	,	_	_	
18-20	2591-2592	`	_	_	
18-21	2592-2604	transformers	*	SOFTWARE	
18-22	2604-2605	`	_	_	
18-23	2605-2606	,	_	_	
18-24	2607-2610	etc	_	_	
18-25	2610-2611	.	_	_	
18-26	2611-2612	)	_	_	
18-27	2613-2616	and	_	_	
18-28	2617-2624	provide	_	_	
18-29	2625-2628	two	_	_	
18-30	2629-2633	sets	_	_	
18-31	2634-2636	of	_	_	
18-32	2637-2649	requirements	_	_	

#Text=.
19-1	2649-2650	.	_	_	

#Text=* [`requirements/tf_4.40.txt`](https://github.com/henryzhongsc/longctx_bench/blob/main/requirements/tf_4.40.txt) supports the three transformers-based LLM baseline (`meta-llama/Meta-Llama-3-8B-Instruct`/`mistralai/Mistral-7B-Instruct-v0.2`/`lmsys/longchat-7b-v1.5-32k`), [Mamba](https://arxiv.org/abs/2312.00752), [Mamba-Chat](https://huggingface.co/havenhq/mamba-chat), [RecurrantGemma](https://storage.googleapis.com/deepmind-media/gemma/recurrentgemma-report.pdf), [RWKV-5-World](https://pypi.org/project/rwkv/), [FlexGen](https://arxiv.org/abs/2303.06865), [StreamingLLM](https://arxiv.org/abs/2309.17453), [InfLLM](https://arxiv.org/abs/2402.04617), [H2O](https://arxiv.org/abs/2306.14048), and [LLMLingua2](https://arxiv.org/abs/2403.12968).
#Text=* [`requirements/tf_4.36.txt`](https://github.com/henryzhongsc/longctx_bench/blob/main/requirements/tf_4.36.txt) supports [KIVI](https://arxiv.org/abs/2402.02750) (it does also run LLM baselines, FlexGen, StreamingLLM, and InfLLM; but we opt to conduct such experiments in the above environment for maximum possible consistency).
#Text=* [`requirements/tf_4.45.txt`](https://github.com/henryzhongsc/longctx_bench/blob/main/requirements/tf_4.45.txt) supports [Mamba 2](https://arxiv.org/abs/2405.21060).
20-1	2652-2653	*	_	_	
20-2	2654-2655	[	_	_	
20-3	2655-2656	`	_	_	
20-4	2656-2668	requirements	_	_	
20-5	2668-2669	/	_	_	
20-6	2669-2671	tf	_	_	
20-7	2671-2672	_	_	_	
20-8	2672-2676	4.40	_	_	
20-9	2676-2677	.	_	_	
20-10	2677-2680	txt	_	_	
20-11	2680-2681	`	_	_	
20-12	2681-2682	]	_	_	
20-13	2682-2683	(	_	_	
20-14	2683-2688	https	_	_	
20-15	2688-2689	:	_	_	
20-16	2689-2690	/	_	_	
20-17	2690-2691	/	_	_	
20-18	2691-2701	github.com	_	_	
20-19	2701-2702	/	_	_	
20-20	2702-2714	henryzhongsc	_	_	
20-21	2714-2715	/	_	_	
20-22	2715-2728	longctx_bench	_	_	
20-23	2728-2729	/	_	_	
20-24	2729-2733	blob	_	_	
20-25	2733-2734	/	_	_	
20-26	2734-2738	main	_	_	
20-27	2738-2739	/	_	_	
20-28	2739-2751	requirements	_	_	
20-29	2751-2752	/	_	_	
20-30	2752-2754	tf	_	_	
20-31	2754-2755	_	_	_	
20-32	2755-2759	4.40	_	_	
20-33	2759-2760	.	_	_	
20-34	2760-2763	txt	_	_	
20-35	2763-2764	)	_	_	
20-36	2765-2773	supports	_	_	
20-37	2774-2777	the	_	_	
20-38	2778-2783	three	_	_	
20-39	2784-2802	transformers-based	_	_	
20-40	2803-2806	LLM	_	_	
20-41	2807-2815	baseline	_	_	
20-42	2816-2817	(	_	_	
20-43	2817-2818	`	_	_	
20-44	2818-2828	meta-llama	*[3]	SOFTWARE[3]	
20-45	2828-2829	/	*[3]	SOFTWARE[3]	
20-46	2829-2839	Meta-Llama	*[3]	SOFTWARE[3]	
20-47	2839-2840	-	*[3]	SOFTWARE[3]	
20-48	2840-2841	3	*[3]	SOFTWARE[3]	
20-49	2841-2842	-	*[3]	SOFTWARE[3]	
20-50	2842-2853	8B-Instruct	*[3]	SOFTWARE[3]	
20-51	2853-2854	`	_	_	
20-52	2854-2855	/	_	_	
20-53	2855-2856	`	_	_	
20-54	2856-2865	mistralai	*[4]	SOFTWARE[4]	
20-55	2865-2866	/	*[4]	SOFTWARE[4]	
20-56	2866-2873	Mistral	*[4]	SOFTWARE[4]	
20-57	2873-2874	-	*[4]	SOFTWARE[4]	
20-58	2874-2890	7B-Instruct-v0.2	*[4]	SOFTWARE[4]	
20-59	2890-2891	`	_	_	
20-60	2891-2892	/	_	_	
20-61	2892-2893	`	_	_	
20-62	2893-2898	lmsys	*[5]	SOFTWARE[5]	
20-63	2898-2899	/	*[5]	SOFTWARE[5]	
20-64	2899-2907	longchat	*[5]	SOFTWARE[5]	
20-65	2907-2908	-	*[5]	SOFTWARE[5]	
20-66	2908-2915	7b-v1.5	*[5]	SOFTWARE[5]	
20-67	2915-2916	-	*[5]	SOFTWARE[5]	
20-68	2916-2919	32k	*[5]	SOFTWARE[5]	
20-69	2919-2920	`	_	_	
20-70	2920-2921	)	_	_	
20-71	2921-2922	,	_	_	
20-72	2923-2924	[	_	_	
20-73	2924-2929	Mamba	*	SOFTWARE	
20-74	2929-2930	]	_	_	
20-75	2930-2931	(	_	_	
20-76	2931-2936	https	_	_	
20-77	2936-2937	:	_	_	
20-78	2937-2938	/	_	_	
20-79	2938-2939	/	_	_	
20-80	2939-2948	arxiv.org	_	_	
20-81	2948-2949	/	_	_	
20-82	2949-2952	abs	_	_	
20-83	2952-2953	/	_	_	
20-84	2953-2963	2312.00752	_	_	
20-85	2963-2964	)	_	_	
20-86	2964-2965	,	_	_	
20-87	2966-2967	[	_	_	
20-88	2967-2977	Mamba-Chat	*	SOFTWARE	
20-89	2977-2978	]	_	_	
20-90	2978-2979	(	_	_	
20-91	2979-2984	https	_	_	
20-92	2984-2985	:	_	_	
20-93	2985-2986	/	_	_	
20-94	2986-2987	/	_	_	
20-95	2987-3001	huggingface.co	_	_	
20-96	3001-3002	/	_	_	
20-97	3002-3009	havenhq	*[6]	SOFTWARE[6]	
20-98	3009-3010	/	*[6]	SOFTWARE[6]	
20-99	3010-3020	mamba-chat	*[6]	SOFTWARE[6]	
20-100	3020-3021	)	_	_	
20-101	3021-3022	,	_	_	
20-102	3023-3024	[	_	_	
20-103	3024-3038	RecurrantGemma	*	SOFTWARE	
20-104	3038-3039	]	_	_	
20-105	3039-3040	(	_	_	
20-106	3040-3045	https	_	_	
20-107	3045-3046	:	_	_	
20-108	3046-3047	/	_	_	
20-109	3047-3048	/	_	_	
20-110	3048-3070	storage.googleapis.com	_	_	
20-111	3070-3071	/	_	_	
20-112	3071-3085	deepmind-media	_	_	
20-113	3085-3086	/	_	_	
20-114	3086-3091	gemma	_	_	
20-115	3091-3092	/	_	_	
20-116	3092-3117	recurrentgemma-report.pdf	_	_	
20-116.1	3092-3106	recurrentgemma	*	SOFTWARE	
20-117	3117-3118	)	_	_	
20-118	3118-3119	,	_	_	
20-119	3120-3121	[	_	_	
20-120	3121-3125	RWKV	*[7]	SOFTWARE[7]	
20-121	3125-3126	-	*[7]	SOFTWARE[7]	
20-122	3126-3127	5	*[7]	SOFTWARE[7]	
20-123	3127-3128	-	*[7]	SOFTWARE[7]	
20-124	3128-3133	World	*[7]	SOFTWARE[7]	
20-125	3133-3134	]	_	_	
20-126	3134-3135	(	_	_	
20-127	3135-3140	https	_	_	
20-128	3140-3141	:	_	_	
20-129	3141-3142	/	_	_	
20-130	3142-3143	/	_	_	
20-131	3143-3151	pypi.org	_	_	
20-132	3151-3152	/	_	_	
20-133	3152-3159	project	_	_	
20-134	3159-3160	/	_	_	
20-135	3160-3164	rwkv	_	_	
20-136	3164-3165	/	_	_	
20-137	3165-3166	)	_	_	
20-138	3166-3167	,	_	_	
20-139	3168-3169	[	_	_	
20-140	3169-3176	FlexGen	*	SOFTWARE	
20-141	3176-3177	]	_	_	
20-142	3177-3178	(	_	_	
20-143	3178-3183	https	_	_	
20-144	3183-3184	:	_	_	
20-145	3184-3185	/	_	_	
20-146	3185-3186	/	_	_	
20-147	3186-3195	arxiv.org	_	_	
20-148	3195-3196	/	_	_	
20-149	3196-3199	abs	_	_	
20-150	3199-3200	/	_	_	
20-151	3200-3210	2303.06865	_	_	
20-152	3210-3211	)	_	_	
20-153	3211-3212	,	_	_	
20-154	3213-3214	[	_	_	
20-155	3214-3226	StreamingLLM	*	SOFTWARE	
20-156	3226-3227	]	_	_	
20-157	3227-3228	(	_	_	
20-158	3228-3233	https	_	_	
20-159	3233-3234	:	_	_	
20-160	3234-3235	/	_	_	
20-161	3235-3236	/	_	_	
20-162	3236-3245	arxiv.org	_	_	
20-163	3245-3246	/	_	_	
20-164	3246-3249	abs	_	_	
20-165	3249-3250	/	_	_	
20-166	3250-3260	2309.17453	_	_	
20-167	3260-3261	)	_	_	
20-168	3261-3262	,	_	_	
20-169	3263-3264	[	_	_	
20-170	3264-3270	InfLLM	*	SOFTWARE	
20-171	3270-3271	]	_	_	
20-172	3271-3272	(	_	_	
20-173	3272-3277	https	_	_	
20-174	3277-3278	:	_	_	
20-175	3278-3279	/	_	_	
20-176	3279-3280	/	_	_	
20-177	3280-3289	arxiv.org	_	_	
20-178	3289-3290	/	_	_	
20-179	3290-3293	abs	_	_	
20-180	3293-3294	/	_	_	
20-181	3294-3304	2402.04617	_	_	
20-182	3304-3305	)	_	_	
20-183	3305-3306	,	_	_	
20-184	3307-3308	[	_	_	
20-185	3308-3311	H2O	*	SOFTWARE	
20-186	3311-3312	]	_	_	
20-187	3312-3313	(	_	_	
20-188	3313-3318	https	_	_	
20-189	3318-3319	:	_	_	
20-190	3319-3320	/	_	_	
20-191	3320-3321	/	_	_	
20-192	3321-3330	arxiv.org	_	_	
20-193	3330-3331	/	_	_	
20-194	3331-3334	abs	_	_	
20-195	3334-3335	/	_	_	
20-196	3335-3345	2306.14048	_	_	
20-197	3345-3346	)	_	_	
20-198	3346-3347	,	_	_	
20-199	3348-3351	and	_	_	
20-200	3352-3353	[	_	_	
20-201	3353-3363	LLMLingua2	*	SOFTWARE	
20-202	3363-3364	]	_	_	
20-203	3364-3365	(	_	_	
20-204	3365-3370	https	_	_	
20-205	3370-3371	:	_	_	
20-206	3371-3372	/	_	_	
20-207	3372-3373	/	_	_	
20-208	3373-3382	arxiv.org	_	_	
20-209	3382-3383	/	_	_	
20-210	3383-3386	abs	_	_	
20-211	3386-3387	/	_	_	
20-212	3387-3397	2403.12968	_	_	
20-213	3397-3398	)	_	_	
20-214	3398-3399	.	_	_	
20-215	3400-3401	*	_	_	
20-216	3402-3403	[	_	_	
20-217	3403-3404	`	_	_	
20-218	3404-3416	requirements	_	_	
20-219	3416-3417	/	_	_	
20-220	3417-3419	tf	_	_	
20-221	3419-3420	_	_	_	
20-222	3420-3424	4.36	_	_	
20-223	3424-3425	.	_	_	
20-224	3425-3428	txt	_	_	
20-225	3428-3429	`	_	_	
20-226	3429-3430	]	_	_	
20-227	3430-3431	(	_	_	
20-228	3431-3436	https	_	_	
20-229	3436-3437	:	_	_	
20-230	3437-3438	/	_	_	
20-231	3438-3439	/	_	_	
20-232	3439-3449	github.com	_	_	
20-233	3449-3450	/	_	_	
20-234	3450-3462	henryzhongsc	_	_	
20-235	3462-3463	/	_	_	
20-236	3463-3476	longctx_bench	_	_	
20-237	3476-3477	/	_	_	
20-238	3477-3481	blob	_	_	
20-239	3481-3482	/	_	_	
20-240	3482-3486	main	_	_	
20-241	3486-3487	/	_	_	
20-242	3487-3499	requirements	_	_	
20-243	3499-3500	/	_	_	
20-244	3500-3502	tf	_	_	
20-245	3502-3503	_	_	_	
20-246	3503-3507	4.36	_	_	
20-247	3507-3508	.	_	_	
20-248	3508-3511	txt	_	_	
20-249	3511-3512	)	_	_	
20-250	3513-3521	supports	_	_	
20-251	3522-3523	[	_	_	
20-252	3523-3527	KIVI	*	SOFTWARE	
20-253	3527-3528	]	_	_	
20-254	3528-3529	(	_	_	
20-255	3529-3534	https	_	_	
20-256	3534-3535	:	_	_	
20-257	3535-3536	/	_	_	
20-258	3536-3537	/	_	_	
20-259	3537-3546	arxiv.org	_	_	
20-260	3546-3547	/	_	_	
20-261	3547-3550	abs	_	_	
20-262	3550-3551	/	_	_	
20-263	3551-3561	2402.02750	_	_	
20-264	3561-3562	)	_	_	
20-265	3563-3564	(	_	_	
20-266	3564-3566	it	_	_	
20-267	3567-3571	does	_	_	
20-268	3572-3576	also	_	_	
20-269	3577-3580	run	_	_	
20-270	3581-3584	LLM	*[8]	SOFTWARE[8]	
20-271	3585-3594	baselines	*[8]	SOFTWARE[8]	
20-272	3594-3595	,	_	_	
20-273	3596-3603	FlexGen	*	SOFTWARE	
20-274	3603-3604	,	_	_	
20-275	3605-3617	StreamingLLM	*	SOFTWARE	
20-276	3617-3618	,	_	_	
20-277	3619-3622	and	_	_	
20-278	3623-3629	InfLLM	*	SOFTWARE	
20-279	3629-3630	;	_	_	
20-280	3631-3634	but	_	_	
20-281	3635-3637	we	_	_	
20-282	3638-3641	opt	_	_	
20-283	3642-3644	to	_	_	
20-284	3645-3652	conduct	_	_	
20-285	3653-3657	such	_	_	
20-286	3658-3669	experiments	_	_	
20-287	3670-3672	in	_	_	
20-288	3673-3676	the	_	_	
20-289	3677-3682	above	_	_	
20-290	3683-3694	environment	_	_	
20-291	3695-3698	for	_	_	
20-292	3699-3706	maximum	_	_	
20-293	3707-3715	possible	_	_	
20-294	3716-3727	consistency	_	_	
20-295	3727-3728	)	_	_	
20-296	3728-3729	.	_	_	
20-297	3730-3731	*	_	_	
20-298	3732-3733	[	_	_	
20-299	3733-3734	`	_	_	
20-300	3734-3746	requirements	_	_	
20-301	3746-3747	/	_	_	
20-302	3747-3749	tf	_	_	
20-303	3749-3750	_	_	_	
20-304	3750-3754	4.45	_	_	
20-305	3754-3755	.	_	_	
20-306	3755-3758	txt	_	_	
20-307	3758-3759	`	_	_	
20-308	3759-3760	]	_	_	
20-309	3760-3761	(	_	_	
20-310	3761-3766	https	_	_	
20-311	3766-3767	:	_	_	
20-312	3767-3768	/	_	_	
20-313	3768-3769	/	_	_	
20-314	3769-3779	github.com	_	_	
20-315	3779-3780	/	_	_	
20-316	3780-3792	henryzhongsc	_	_	
20-317	3792-3793	/	_	_	
20-318	3793-3806	longctx_bench	_	_	
20-319	3806-3807	/	_	_	
20-320	3807-3811	blob	_	_	
20-321	3811-3812	/	_	_	
20-322	3812-3816	main	_	_	
20-323	3816-3817	/	_	_	
20-324	3817-3829	requirements	_	_	
20-325	3829-3830	/	_	_	
20-326	3830-3832	tf	_	_	
20-327	3832-3833	_	_	_	
20-328	3833-3837	4.45	_	_	
20-329	3837-3838	.	_	_	
20-330	3838-3841	txt	_	_	
20-331	3841-3842	)	_	_	
20-332	3843-3851	supports	_	_	
20-333	3852-3853	[	_	_	
20-334	3853-3858	Mamba	*[9]	SOFTWARE[9]	
20-335	3859-3860	2	*[9]	SOFTWARE[9]	
20-336	3860-3861	]	_	_	
20-337	3861-3862	(	_	_	
20-338	3862-3867	https	_	_	
20-339	3867-3868	:	_	_	
20-340	3868-3869	/	_	_	
20-341	3869-3870	/	_	_	
20-342	3870-3879	arxiv.org	_	_	
20-343	3879-3880	/	_	_	
20-344	3880-3883	abs	_	_	
20-345	3883-3884	/	_	_	
20-346	3884-3894	2405.21060	_	_	
20-347	3894-3895	)	_	_	
20-348	3895-3896	.	_	_	

#Text=We note that with `Transfofmers v4.42+` there is [a bugfix](https://github.com/huggingface/transformers/pull/30536) regarding KV cache duplication thanks to [@Cyrilvallez](https://www.linkedin.com/posts/cyril-vallez-070a53220_today-is-my-first-day-at-hugging-face-i-activity-7241439500936036352-_aYL?
21-1	3897-3899	We	_	_	
21-2	3900-3904	note	_	_	
21-3	3905-3909	that	_	_	
21-4	3910-3914	with	_	_	
21-5	3915-3916	`	_	_	
21-6	3916-3928	Transfofmers	_	_	
21-7	3929-3934	v4.42	_	_	
21-8	3934-3935	+	_	_	
21-9	3935-3936	`	_	_	
21-10	3937-3942	there	_	_	
21-11	3943-3945	is	_	_	
21-12	3946-3947	[	_	_	
21-13	3947-3948	a	_	_	
21-14	3949-3955	bugfix	_	_	
21-15	3955-3956	]	_	_	
21-16	3956-3957	(	_	_	
21-17	3957-3962	https	_	_	
21-18	3962-3963	:	_	_	
21-19	3963-3964	/	_	_	
21-20	3964-3965	/	_	_	
21-21	3965-3975	github.com	_	_	
21-22	3975-3976	/	_	_	
21-23	3976-3987	huggingface	_	_	
21-24	3987-3988	/	_	_	
21-25	3988-4000	transformers	_	_	
21-26	4000-4001	/	_	_	
21-27	4001-4005	pull	_	_	
21-28	4005-4006	/	_	_	
21-29	4006-4011	30536	_	_	
21-30	4011-4012	)	_	_	
21-31	4013-4022	regarding	_	_	
21-32	4023-4025	KV	_	_	
21-33	4026-4031	cache	_	_	
21-34	4032-4043	duplication	_	_	
21-35	4044-4050	thanks	_	_	
21-36	4051-4053	to	_	_	
21-37	4054-4055	[	_	_	
21-38	4055-4056	@	_	_	
21-39	4056-4067	Cyrilvallez	_	_	
21-40	4067-4068	]	_	_	
21-41	4068-4069	(	_	_	
21-42	4069-4074	https	_	_	
21-43	4074-4075	:	_	_	
21-44	4075-4076	/	_	_	
21-45	4076-4077	/	_	_	
21-46	4077-4093	www.linkedin.com	_	_	
21-47	4093-4094	/	_	_	
21-48	4094-4099	posts	_	_	
21-49	4099-4100	/	_	_	
21-50	4100-4112	cyril-vallez	_	_	
21-51	4112-4113	-	_	_	
21-52	4113-4122	070a53220	_	_	
21-53	4122-4123	_	_	_	
21-54	4123-4171	today-is-my-first-day-at-hugging-face-i-activity	_	_	
21-55	4171-4172	-	_	_	
21-56	4172-4191	7241439500936036352	_	_	
21-57	4191-4192	-	_	_	
21-58	4192-4193	_	_	_	
21-59	4193-4196	aYL	_	_	
21-60	4196-4197	?	_	_	

#Text=utm_source=share&utm_medium=member_desktop), so please be vigilant when comparing memory measurements across different environments.
22-1	4197-4207	utm_source	_	_	
22-2	4207-4208	=	_	_	
22-3	4208-4213	share	_	_	
22-4	4213-4214	&	_	_	
22-5	4214-4224	utm_medium	_	_	
22-6	4224-4225	=	_	_	
22-7	4225-4239	member_desktop	_	_	
22-8	4239-4240	)	_	_	
22-9	4240-4241	,	_	_	
22-10	4242-4244	so	_	_	
22-11	4245-4251	please	_	_	
22-12	4252-4254	be	_	_	
22-13	4255-4263	vigilant	_	_	
22-14	4264-4268	when	_	_	
22-15	4269-4278	comparing	_	_	
22-16	4279-4285	memory	_	_	
22-17	4286-4298	measurements	_	_	
22-18	4299-4305	across	_	_	
22-19	4306-4315	different	_	_	
22-20	4316-4328	environments	_	_	
22-21	4328-4329	.	_	_	

#Text=Should one be interested in reproducing a certain method, please look up the corresponding requirement file and install listed packages accordingly.
#Text=
#Text=```
#Text=cd longctx_bench
#Text=pip install --upgrade pip
#Text=pip install -r requirements/<requirment_file_name>
#Text=```
#Text=
#Text=We note that some packages often require installation later than other packages (e.g., `flash-attn` or custom kernel supports).
23-1	4331-4337	Should	_	_	
23-2	4338-4341	one	_	_	
23-3	4342-4344	be	_	_	
23-4	4345-4355	interested	_	_	
23-5	4356-4358	in	_	_	
23-6	4359-4370	reproducing	_	_	
23-7	4371-4372	a	_	_	
23-8	4373-4380	certain	_	_	
23-9	4381-4387	method	_	_	
23-10	4387-4388	,	_	_	
23-11	4389-4395	please	_	_	
23-12	4396-4400	look	_	_	
23-13	4401-4403	up	_	_	
23-14	4404-4407	the	_	_	
23-15	4408-4421	corresponding	_	_	
23-16	4422-4433	requirement	_	_	
23-17	4434-4438	file	_	_	
23-18	4439-4442	and	_	_	
23-19	4443-4450	install	_	_	
23-20	4451-4457	listed	_	_	
23-21	4458-4466	packages	_	_	
23-22	4467-4478	accordingly	_	_	
23-23	4478-4479	.	_	_	
23-24	4481-4482	`	_	_	
23-25	4482-4483	`	_	_	
23-26	4483-4484	`	_	_	
23-27	4485-4487	cd	_	_	
23-28	4488-4501	longctx_bench	_	_	
23-29	4502-4505	pip	_	_	
23-30	4506-4513	install	_	_	
23-31	4514-4515	-	_	_	
23-32	4515-4516	-	_	_	
23-33	4516-4523	upgrade	_	_	
23-34	4524-4527	pip	_	_	
23-35	4528-4531	pip	_	_	
23-36	4532-4539	install	_	_	
23-37	4540-4541	-	_	_	
23-38	4541-4542	r	_	_	
23-39	4543-4555	requirements	_	_	
23-40	4555-4556	/	_	_	
23-41	4556-4557	<	_	_	
23-42	4557-4577	requirment_file_name	_	_	
23-43	4577-4578	>	_	_	
23-44	4579-4580	`	_	_	
23-45	4580-4581	`	_	_	
23-46	4581-4582	`	_	_	
23-47	4584-4586	We	_	_	
23-48	4587-4591	note	_	_	
23-49	4592-4596	that	_	_	
23-50	4597-4601	some	_	_	
23-51	4602-4610	packages	_	_	
23-52	4611-4616	often	_	_	
23-53	4617-4624	require	_	_	
23-54	4625-4637	installation	_	_	
23-55	4638-4643	later	_	_	
23-56	4644-4648	than	_	_	
23-57	4649-4654	other	_	_	
23-58	4655-4663	packages	_	_	
23-59	4664-4665	(	_	_	
23-60	4665-4668	e.g	_	_	
23-61	4668-4669	.	_	_	
23-62	4669-4670	,	_	_	
23-63	4671-4672	`	_	_	
23-64	4672-4682	flash-attn	_	_	
23-65	4682-4683	`	_	_	
23-66	4684-4686	or	_	_	
23-67	4687-4693	custom	_	_	
23-68	4694-4700	kernel	_	_	
23-69	4701-4709	supports	_	_	
23-70	4709-4710	)	_	_	
23-71	4710-4711	.	_	_	

#Text=In such cases, we commented out such "follow-up" packages in their requirement files so that users could manually install them later.
24-1	4712-4714	In	_	_	
24-2	4715-4719	such	_	_	
24-3	4720-4725	cases	_	_	
24-4	4725-4726	,	_	_	
24-5	4727-4729	we	_	_	
24-6	4730-4739	commented	_	_	
24-7	4740-4743	out	_	_	
24-8	4744-4748	such	_	_	
24-9	4749-4750	"	_	_	
24-10	4750-4759	follow-up	_	_	
24-11	4759-4760	"	_	_	
24-12	4761-4769	packages	_	_	
24-13	4770-4772	in	_	_	
24-14	4773-4778	their	_	_	
24-15	4779-4790	requirement	_	_	
24-16	4791-4796	files	_	_	
24-17	4797-4799	so	_	_	
24-18	4800-4804	that	_	_	
24-19	4805-4810	users	_	_	
24-20	4811-4816	could	_	_	
24-21	4817-4825	manually	_	_	
24-22	4826-4833	install	_	_	
24-23	4834-4838	them	_	_	
24-24	4839-4844	later	_	_	
24-25	4844-4845	.	_	_	

#Text=Please carefully inspect the full requirement file and ensure all necessary packages are installed.
25-1	4846-4852	Please	_	_	
25-2	4853-4862	carefully	_	_	
25-3	4863-4870	inspect	_	_	
25-4	4871-4874	the	_	_	
25-5	4875-4879	full	_	_	
25-6	4880-4891	requirement	_	_	
25-7	4892-4896	file	_	_	
25-8	4897-4900	and	_	_	
25-9	4901-4907	ensure	_	_	
25-10	4908-4911	all	_	_	
25-11	4912-4921	necessary	_	_	
25-12	4922-4930	packages	_	_	
25-13	4931-4934	are	_	_	
25-14	4935-4944	installed	_	_	
25-15	4944-4945	.	_	_	

#Text=As an example, suppose one wants to try out KIVI under our codebase; one should:
#Text=
#Text=```
#Text=cd longctx_bench
#Text=pip install -r requirements/tf_4.36.txt
#Text=pip install flash-attn==2.6.3
#Text=cd pipeline/kivi/quant & pip install -e .
#Text=```
#Text=
#Text=---
#Text=
#Text=## Dataset and Access Preparation
#Text=
#Text=Currently, our benchmark features 15 datasets (NarrativeQA, Qasper, MultiFieldQA, HotpotQA, 2WikiMQA, Musique, GovReport, QMSum, MultiNews, TREC, TriviaQA, SAMSum, PassageRetrieval, LCC, RepoBench-P) from [**LongBench**](https://github.com/THUDM/LongBench) and a [**Needle-in-a-Haystack/PaulGraham Passkey**](https://github.com/gkamradt/LLMTest_NeedleInAHaystack) test with [Paul Graham essays](https://paulgraham.com/articles.html) as background and [passkey retrieval](https://arxiv.org/abs/2305.16300) as needle, following the spirit of [Arize-ai](https://github.com/Arize-ai/LLMTest_NeedleInAHaystack2)'s NIAH implementation utilized in Google DeepMind's [Gemini 1.5 report](https://arxiv.org/pdf/2403.05530).
26-1	4946-4948	As	_	_	
26-2	4949-4951	an	_	_	
26-3	4952-4959	example	_	_	
26-4	4959-4960	,	_	_	
26-5	4961-4968	suppose	_	_	
26-6	4969-4972	one	_	_	
26-7	4973-4978	wants	_	_	
26-8	4979-4981	to	_	_	
26-9	4982-4985	try	_	_	
26-10	4986-4989	out	_	_	
26-11	4990-4994	KIVI	*	SOFTWARE	
26-12	4995-5000	under	_	_	
26-13	5001-5004	our	_	_	
26-14	5005-5013	codebase	_	_	
26-15	5013-5014	;	_	_	
26-16	5015-5018	one	_	_	
26-17	5019-5025	should	_	_	
26-18	5025-5026	:	_	_	
26-19	5028-5029	`	_	_	
26-20	5029-5030	`	_	_	
26-21	5030-5031	`	_	_	
26-22	5032-5034	cd	_	_	
26-23	5035-5048	longctx_bench	_	_	
26-24	5049-5052	pip	*	SOFTWARE	
26-25	5053-5060	install	_	_	
26-26	5061-5062	-	_	_	
26-27	5062-5063	r	_	_	
26-28	5064-5076	requirements	_	_	
26-29	5076-5077	/	_	_	
26-30	5077-5079	tf	_	_	
26-31	5079-5080	_	_	_	
26-32	5080-5084	4.36	_	_	
26-33	5084-5085	.	_	_	
26-34	5085-5088	txt	_	_	
26-35	5089-5092	pip	*	SOFTWARE	
26-36	5093-5100	install	_	_	
26-37	5101-5111	flash-attn	*[10]	SOFTWARE[10]	
26-38	5111-5112	=	*[10]	SOFTWARE[10]	
26-39	5112-5113	=	*[10]	SOFTWARE[10]	
26-40	5113-5118	2.6.3	*[10]	SOFTWARE[10]	
26-41	5119-5121	cd	_	_	
26-42	5122-5130	pipeline	_	_	
26-43	5130-5131	/	_	_	
26-44	5131-5135	kivi	_	_	
26-45	5135-5136	/	_	_	
26-46	5136-5141	quant	_	_	
26-47	5142-5143	&	_	_	
26-48	5144-5147	pip	*	SOFTWARE	
26-49	5148-5155	install	_	_	
26-50	5156-5157	-	_	_	
26-51	5157-5158	e	_	_	
26-52	5159-5160	.	_	_	
26-53	5161-5162	`	_	_	
26-54	5162-5163	`	_	_	
26-55	5163-5164	`	_	_	
26-56	5166-5167	-	_	_	
26-57	5167-5168	-	_	_	
26-58	5168-5169	-	_	_	
26-59	5171-5172	#	_	_	
26-60	5172-5173	#	_	_	
26-61	5174-5181	Dataset	_	_	
26-62	5182-5185	and	_	_	
26-63	5186-5192	Access	_	_	
26-64	5193-5204	Preparation	_	_	
26-65	5206-5215	Currently	_	_	
26-66	5215-5216	,	_	_	
26-67	5217-5220	our	_	_	
26-68	5221-5230	benchmark	_	_	
26-69	5231-5239	features	_	_	
26-70	5240-5242	15	_	_	
26-71	5243-5251	datasets	_	_	
26-72	5252-5253	(	_	_	
26-73	5253-5264	NarrativeQA	*	DATASET	
26-74	5264-5265	,	_	_	
26-75	5266-5272	Qasper	*	DATASET	
26-76	5272-5273	,	_	_	
26-77	5274-5286	MultiFieldQA	*	DATASET	
26-78	5286-5287	,	_	_	
26-79	5288-5296	HotpotQA	*	DATASET	
26-80	5296-5297	,	_	_	
26-81	5298-5306	2WikiMQA	*	DATASET	
26-82	5306-5307	,	_	_	
26-83	5308-5315	Musique	*	DATASET	
26-84	5315-5316	,	_	_	
26-85	5317-5326	GovReport	*	DATASET	
26-86	5326-5327	,	_	_	
26-87	5328-5333	QMSum	*	DATASET	
26-88	5333-5334	,	_	_	
26-89	5335-5344	MultiNews	*	DATASET	
26-90	5344-5345	,	_	_	
26-91	5346-5350	TREC	*	DATASET	
26-92	5350-5351	,	_	_	
26-93	5352-5360	TriviaQA	*	DATASET	
26-94	5360-5361	,	_	_	
26-95	5362-5368	SAMSum	*	DATASET	
26-96	5368-5369	,	_	_	
26-97	5370-5386	PassageRetrieval	*	DATASET	
26-98	5386-5387	,	_	_	
26-99	5388-5391	LCC	*	DATASET	
26-100	5391-5392	,	_	_	
26-101	5393-5404	RepoBench-P	*	DATASET	
26-102	5404-5405	)	_	_	
26-103	5406-5410	from	_	_	
26-104	5411-5412	[	_	_	
26-105	5412-5413	*	_	_	
26-106	5413-5414	*	_	_	
26-107	5414-5423	LongBench	*	SOFTWARE	
26-108	5423-5424	*	_	_	
26-109	5424-5425	*	_	_	
26-110	5425-5426	]	_	_	
26-111	5426-5427	(	_	_	
26-112	5427-5432	https	_	_	
26-113	5432-5433	:	_	_	
26-114	5433-5434	/	_	_	
26-115	5434-5435	/	_	_	
26-116	5435-5445	github.com	_	_	
26-117	5445-5446	/	_	_	
26-118	5446-5451	THUDM	_	_	
26-119	5451-5452	/	_	_	
26-120	5452-5461	LongBench	*	PROJECT	
26-121	5461-5462	)	_	_	
26-122	5463-5466	and	_	_	
26-123	5467-5468	a	_	_	
26-124	5469-5470	[	_	_	
26-125	5470-5471	*	_	_	
26-126	5471-5472	*	_	_	
26-127	5472-5492	Needle-in-a-Haystack	_	_	
26-128	5492-5493	/	_	_	
26-129	5493-5503	PaulGraham	_	_	
26-130	5504-5511	Passkey	_	_	
26-131	5511-5512	*	_	_	
26-132	5512-5513	*	_	_	
26-133	5513-5514	]	_	_	
26-134	5514-5515	(	_	_	
26-135	5515-5520	https	_	_	
26-136	5520-5521	:	_	_	
26-137	5521-5522	/	_	_	
26-138	5522-5523	/	_	_	
26-139	5523-5533	github.com	_	_	
26-140	5533-5534	/	_	_	
26-141	5534-5542	gkamradt	_	_	
26-142	5542-5543	/	_	_	
26-143	5543-5568	LLMTest_NeedleInAHaystack	_	_	
26-144	5568-5569	)	_	_	
26-145	5570-5574	test	_	_	
26-146	5575-5579	with	_	_	
26-147	5580-5581	[	_	_	
26-148	5581-5585	Paul	_	_	
26-149	5586-5592	Graham	_	_	
26-150	5593-5599	essays	_	_	
26-151	5599-5600	]	_	_	
26-152	5600-5601	(	_	_	
26-153	5601-5606	https	_	_	
26-154	5606-5607	:	_	_	
26-155	5607-5608	/	_	_	
26-156	5608-5609	/	_	_	
26-157	5609-5623	paulgraham.com	_	_	
26-158	5623-5624	/	_	_	
26-159	5624-5637	articles.html	_	_	
26-160	5637-5638	)	_	_	
26-161	5639-5641	as	_	_	
26-162	5642-5652	background	_	_	
26-163	5653-5656	and	_	_	
26-164	5657-5658	[	_	_	
26-165	5658-5665	passkey	_	_	
26-166	5666-5675	retrieval	_	_	
26-167	5675-5676	]	_	_	
26-168	5676-5677	(	_	_	
26-169	5677-5682	https	_	_	
26-170	5682-5683	:	_	_	
26-171	5683-5684	/	_	_	
26-172	5684-5685	/	_	_	
26-173	5685-5694	arxiv.org	_	_	
26-174	5694-5695	/	_	_	
26-175	5695-5698	abs	_	_	
26-176	5698-5699	/	_	_	
26-177	5699-5709	2305.16300	_	_	
26-178	5709-5710	)	_	_	
26-179	5711-5713	as	_	_	
26-180	5714-5720	needle	_	_	
26-181	5720-5721	,	_	_	
26-182	5722-5731	following	_	_	
26-183	5732-5735	the	_	_	
26-184	5736-5742	spirit	_	_	
26-185	5743-5745	of	_	_	
26-186	5746-5747	[	_	_	
26-187	5747-5755	Arize-ai	_	_	
26-188	5755-5756	]	_	_	
26-189	5756-5757	(	_	_	
26-190	5757-5762	https	_	_	
26-191	5762-5763	:	_	_	
26-192	5763-5764	/	_	_	
26-193	5764-5765	/	_	_	
26-194	5765-5775	github.com	_	_	
26-195	5775-5776	/	_	_	
26-196	5776-5784	Arize-ai	_	_	
26-197	5784-5785	/	_	_	
26-198	5785-5811	LLMTest_NeedleInAHaystack2	_	_	
26-199	5811-5812	)	_	_	
26-200	5812-5813	'	_	_	
26-201	5813-5814	s	_	_	
26-202	5815-5819	NIAH	_	_	
26-203	5820-5834	implementation	_	_	
26-204	5835-5843	utilized	_	_	
26-205	5844-5846	in	_	_	
26-206	5847-5853	Google	_	_	
26-207	5854-5864	DeepMind's	_	_	
26-208	5865-5866	[	_	_	
26-209	5866-5872	Gemini	*[11]	SOFTWARE[11]	
26-210	5873-5876	1.5	*[11]	SOFTWARE[11]	
26-211	5877-5883	report	_	_	
26-212	5883-5884	]	_	_	
26-213	5884-5885	(	_	_	
26-214	5885-5890	https	_	_	
26-215	5890-5891	:	_	_	
26-216	5891-5892	/	_	_	
26-217	5892-5893	/	_	_	
26-218	5893-5902	arxiv.org	_	_	
26-219	5902-5903	/	_	_	
26-220	5903-5906	pdf	_	_	
26-221	5906-5907	/	_	_	
26-222	5907-5917	2403.05530	_	_	
26-223	5917-5918	)	_	_	
26-224	5918-5919	.	_	_	

#Text=The needle test's dataset are constructed on the fly, where all necessary material is already supplied in this repo.
27-1	5921-5924	The	_	_	
27-2	5925-5931	needle	_	_	
27-3	5932-5938	test's	_	_	
27-4	5939-5946	dataset	_	_	
27-5	5947-5950	are	_	_	
27-6	5951-5962	constructed	_	_	
27-7	5963-5965	on	_	_	
27-8	5966-5969	the	_	_	
27-9	5970-5973	fly	_	_	
27-10	5973-5974	,	_	_	
27-11	5975-5980	where	_	_	
27-12	5981-5984	all	_	_	
27-13	5985-5994	necessary	_	_	
27-14	5995-6003	material	_	_	
27-15	6004-6006	is	_	_	
27-16	6007-6014	already	_	_	
27-17	6015-6023	supplied	_	_	
27-18	6024-6026	in	_	_	
27-19	6027-6031	this	_	_	
27-20	6032-6036	repo	_	_	
27-21	6036-6037	.	_	_	

#Text=However, the LongBench datasets would require some extra preparations.
28-1	6038-6045	However	_	_	
28-2	6045-6046	,	_	_	
28-3	6047-6050	the	_	_	
28-4	6051-6060	LongBench	*	DATASET	
28-5	6061-6069	datasets	_	_	
28-6	6070-6075	would	_	_	
28-7	6076-6083	require	_	_	
28-8	6084-6088	some	_	_	
28-9	6089-6094	extra	_	_	
28-10	6095-6107	preparations	_	_	
28-11	6107-6108	.	_	_	

#Text=We supply the following script to process LongBench:
#Text=
#Text=```
#Text=python scripts/dataset_prep/download_longbench.py
#Text=```
#Text=
#Text=Our paper features some models that are gated (e.g., `meta-llama/Meta-Llama-3-8B-Instruct`).
29-1	6109-6111	We	_	_	
29-2	6112-6118	supply	_	_	
29-3	6119-6122	the	_	_	
29-4	6123-6132	following	_	_	
29-5	6133-6139	script	_	_	
29-6	6140-6142	to	_	_	
29-7	6143-6150	process	_	_	
29-8	6151-6160	LongBench	_	_	
29-9	6160-6161	:	_	_	
29-10	6163-6164	`	_	_	
29-11	6164-6165	`	_	_	
29-12	6165-6166	`	_	_	
29-13	6167-6173	python	*	SOFTWARE	
29-14	6174-6181	scripts	_	_	
29-15	6181-6182	/	_	_	
29-16	6182-6194	dataset_prep	_	_	
29-17	6194-6195	/	_	_	
29-18	6195-6216	download_longbench.py	_	_	
29-19	6217-6218	`	_	_	
29-20	6218-6219	`	_	_	
29-21	6219-6220	`	_	_	
29-22	6222-6225	Our	_	_	
29-23	6226-6231	paper	_	_	
29-24	6232-6240	features	_	_	
29-25	6241-6245	some	_	_	
29-26	6246-6252	models	_	_	
29-27	6253-6257	that	_	_	
29-28	6258-6261	are	_	_	
29-29	6262-6267	gated	_	_	
29-30	6268-6269	(	_	_	
29-31	6269-6272	e.g	_	_	
29-32	6272-6273	.	_	_	
29-33	6273-6274	,	_	_	
29-34	6275-6276	`	_	_	
29-35	6276-6286	meta-llama	*[12]	SOFTWARE[12]	
29-36	6286-6287	/	*[12]	SOFTWARE[12]	
29-37	6287-6297	Meta-Llama	*[12]	SOFTWARE[12]	
29-38	6297-6298	-	*[12]	SOFTWARE[12]	
29-39	6298-6299	3	*[12]	SOFTWARE[12]	
29-40	6299-6300	-	*[12]	SOFTWARE[12]	
29-41	6300-6311	8B-Instruct	*[12]	SOFTWARE[12]	
29-42	6311-6312	`	_	_	
29-43	6312-6313	)	_	_	
29-44	6313-6314	.	_	_	

#Text=So please supply your HuggingFace access token under [`config/access_tokens.py`](https://github.com/henryzhongsc/longctx_bench/blob/main/config/access_tokens.py).
30-1	6315-6317	So	_	_	
30-2	6318-6324	please	_	_	
30-3	6325-6331	supply	_	_	
30-4	6332-6336	your	_	_	
30-5	6337-6348	HuggingFace	_	_	
30-6	6349-6355	access	_	_	
30-7	6356-6361	token	_	_	
30-8	6362-6367	under	_	_	
30-9	6368-6369	[	_	_	
30-10	6369-6370	`	_	_	
30-11	6370-6376	config	_	_	
30-12	6376-6377	/	_	_	
30-13	6377-6393	access_tokens.py	_	_	
30-14	6393-6394	`	_	_	
30-15	6394-6395	]	_	_	
30-16	6395-6396	(	_	_	
30-17	6396-6401	https	_	_	
30-18	6401-6402	:	_	_	
30-19	6402-6403	/	_	_	
30-20	6403-6404	/	_	_	
30-21	6404-6414	github.com	_	_	
30-22	6414-6415	/	_	_	
30-23	6415-6427	henryzhongsc	_	_	
30-24	6427-6428	/	_	_	
30-25	6428-6441	longctx_bench	_	_	
30-26	6441-6442	/	_	_	
30-27	6442-6446	blob	_	_	
30-28	6446-6447	/	_	_	
30-29	6447-6451	main	_	_	
30-30	6451-6452	/	_	_	
30-31	6452-6458	config	_	_	
30-32	6458-6459	/	_	_	
30-33	6459-6475	access_tokens.py	_	_	
30-34	6475-6476	)	_	_	
30-35	6476-6477	.	_	_	

#Text=You may consider setting `git update-index --skip-worktree config/access_tokens.py` so that Git will no longer track this file to avoid your locally stored token accidentally get synced to upstream.
#Text=
#Text=---
#Text=## Experiment Reproduction
#Text=
#Text=We supply all scripts in the [`scripts`](https://github.com/henryzhongsc/longctx_bench/blob/main/scripts) folder, with a folder structure that clearly indicate which script is for which experiment.
31-1	6478-6481	You	_	_	
31-2	6482-6485	may	_	_	
31-3	6486-6494	consider	_	_	
31-4	6495-6502	setting	_	_	
31-5	6503-6504	`	_	_	
31-6	6504-6507	git	*	SOFTWARE	
31-7	6508-6520	update-index	_	_	
31-8	6521-6522	-	_	_	
31-9	6522-6523	-	_	_	
31-10	6523-6536	skip-worktree	_	_	
31-11	6537-6543	config	_	_	
31-12	6543-6544	/	_	_	
31-13	6544-6560	access_tokens.py	_	_	
31-14	6560-6561	`	_	_	
31-15	6562-6564	so	_	_	
31-16	6565-6569	that	_	_	
31-17	6570-6573	Git	*	SOFTWARE	
31-18	6574-6578	will	_	_	
31-19	6579-6581	no	_	_	
31-20	6582-6588	longer	_	_	
31-21	6589-6594	track	_	_	
31-22	6595-6599	this	_	_	
31-23	6600-6604	file	_	_	
31-24	6605-6607	to	_	_	
31-25	6608-6613	avoid	_	_	
31-26	6614-6618	your	_	_	
31-27	6619-6626	locally	_	_	
31-28	6627-6633	stored	_	_	
31-29	6634-6639	token	_	_	
31-30	6640-6652	accidentally	_	_	
31-31	6653-6656	get	_	_	
31-32	6657-6663	synced	_	_	
31-33	6664-6666	to	_	_	
31-34	6667-6675	upstream	_	_	
31-35	6675-6676	.	_	_	
31-36	6678-6679	-	_	_	
31-37	6679-6680	-	_	_	
31-38	6680-6681	-	_	_	
31-39	6682-6683	#	_	_	
31-40	6683-6684	#	_	_	
31-41	6685-6695	Experiment	_	_	
31-42	6696-6708	Reproduction	_	_	
31-43	6710-6712	We	_	_	
31-44	6713-6719	supply	_	_	
31-45	6720-6723	all	_	_	
31-46	6724-6731	scripts	_	_	
31-47	6732-6734	in	_	_	
31-48	6735-6738	the	_	_	
31-49	6739-6740	[	_	_	
31-50	6740-6741	`	_	_	
31-51	6741-6748	scripts	_	_	
31-52	6748-6749	`	_	_	
31-53	6749-6750	]	_	_	
31-54	6750-6751	(	_	_	
31-55	6751-6756	https	_	_	
31-56	6756-6757	:	_	_	
31-57	6757-6758	/	_	_	
31-58	6758-6759	/	_	_	
31-59	6759-6769	github.com	_	_	
31-60	6769-6770	/	_	_	
31-61	6770-6782	henryzhongsc	_	_	
31-62	6782-6783	/	_	_	
31-63	6783-6796	longctx_bench	_	_	
31-64	6796-6797	/	_	_	
31-65	6797-6801	blob	_	_	
31-66	6801-6802	/	_	_	
31-67	6802-6806	main	_	_	
31-68	6806-6807	/	_	_	
31-69	6807-6814	scripts	_	_	
31-70	6814-6815	)	_	_	
31-71	6816-6822	folder	_	_	
31-72	6822-6823	,	_	_	
31-73	6824-6828	with	_	_	
31-74	6829-6830	a	_	_	
31-75	6831-6837	folder	_	_	
31-76	6838-6847	structure	_	_	
31-77	6848-6852	that	_	_	
31-78	6853-6860	clearly	_	_	
31-79	6861-6869	indicate	_	_	
31-80	6870-6875	which	_	_	
31-81	6876-6882	script	_	_	
31-82	6883-6885	is	_	_	
31-83	6886-6889	for	_	_	
31-84	6890-6895	which	_	_	
31-85	6896-6906	experiment	_	_	
31-86	6906-6907	.	_	_	

#Text=E.g., should one want to verify the needle results of `mistral-7b-instruct-v0.2` model without any compression applied, one may do so via:
#Text=
#Text=```
#Text=bash scripts/paulgraham_passkey/20480words_10x10x3_7digits/baseline/mistral-7b-instruct-v0.2.sh <output_dir_root>
#Text=```
#Text=
#Text=Similarly, should one expect the LongBench results of `llama3-8b-instruct` model with KIVI-powered compression in 2bit, one may achieve such via:
#Text=
#Text=```
#Text=bash scripts/longbench/kivi/2bit/llama3-8b-instruct.sh <output_dir_root>
#Text=```
#Text=
#Text=
#Text=> Given the long context tasks are often time-consuming to evaluate, we additionally supply a set of scripts in the [`scripts/quick_start`](https://github.com/henryzhongsc/longctx_bench/blob/main/scripts/quick_start) folder, which are quick to conclude (just Qasper for LongBench and just two of the longest needle inputs for PaulGraham Passkey).
32-1	6908-6911	E.g	_	_	
32-2	6911-6912	.	_	_	
32-3	6912-6913	,	_	_	
32-4	6914-6920	should	_	_	
32-5	6921-6924	one	_	_	
32-6	6925-6929	want	_	_	
32-7	6930-6932	to	_	_	
32-8	6933-6939	verify	_	_	
32-9	6940-6943	the	_	_	
32-10	6944-6950	needle	_	_	
32-11	6951-6958	results	_	_	
32-12	6959-6961	of	_	_	
32-13	6962-6963	`	_	_	
32-14	6963-6970	mistral	_	_	
32-15	6970-6971	-	_	_	
32-16	6971-6987	7b-instruct-v0.2	_	_	
32-17	6987-6988	`	_	_	
32-18	6989-6994	model	_	_	
32-19	6995-7002	without	_	_	
32-20	7003-7006	any	_	_	
32-21	7007-7018	compression	_	_	
32-22	7019-7026	applied	_	_	
32-23	7026-7027	,	_	_	
32-24	7028-7031	one	_	_	
32-25	7032-7035	may	_	_	
32-26	7036-7038	do	_	_	
32-27	7039-7041	so	_	_	
32-28	7042-7045	via	_	_	
32-29	7045-7046	:	_	_	
32-30	7048-7049	`	_	_	
32-31	7049-7050	`	_	_	
32-32	7050-7051	`	_	_	
32-33	7052-7056	bash	_	_	
32-34	7057-7064	scripts	_	_	
32-35	7064-7065	/	_	_	
32-36	7065-7083	paulgraham_passkey	_	_	
32-37	7083-7084	/	_	_	
32-38	7084-7094	20480words	_	_	
32-39	7094-7095	_	_	_	
32-40	7095-7102	10x10x3	_	_	
32-41	7102-7103	_	_	_	
32-42	7103-7110	7digits	_	_	
32-43	7110-7111	/	_	_	
32-44	7111-7119	baseline	_	_	
32-45	7119-7120	/	_	_	
32-46	7120-7127	mistral	_	_	
32-47	7127-7128	-	_	_	
32-48	7128-7144	7b-instruct-v0.2	_	_	
32-49	7144-7145	.	_	_	
32-50	7145-7147	sh	_	_	
32-51	7148-7149	<	_	_	
32-52	7149-7164	output_dir_root	_	_	
32-53	7164-7165	>	_	_	
32-54	7166-7167	`	_	_	
32-55	7167-7168	`	_	_	
32-56	7168-7169	`	_	_	
32-57	7171-7180	Similarly	_	_	
32-58	7180-7181	,	_	_	
32-59	7182-7188	should	_	_	
32-60	7189-7192	one	_	_	
32-61	7193-7199	expect	_	_	
32-62	7200-7203	the	_	_	
32-63	7204-7213	LongBench	_	_	
32-64	7214-7221	results	_	_	
32-65	7222-7224	of	_	_	
32-66	7225-7226	`	_	_	
32-67	7226-7232	llama3	_	_	
32-68	7232-7233	-	_	_	
32-69	7233-7244	8b-instruct	_	_	
32-70	7244-7245	`	_	_	
32-71	7246-7251	model	_	_	
32-72	7252-7256	with	_	_	
32-73	7257-7269	KIVI-powered	_	_	
32-74	7270-7281	compression	_	_	
32-75	7282-7284	in	_	_	
32-76	7285-7289	2bit	_	_	
32-77	7289-7290	,	_	_	
32-78	7291-7294	one	_	_	
32-79	7295-7298	may	_	_	
32-80	7299-7306	achieve	_	_	
32-81	7307-7311	such	_	_	
32-82	7312-7315	via	_	_	
32-83	7315-7316	:	_	_	
32-84	7318-7319	`	_	_	
32-85	7319-7320	`	_	_	
32-86	7320-7321	`	_	_	
32-87	7322-7326	bash	_	_	
32-88	7327-7334	scripts	_	_	
32-89	7334-7335	/	_	_	
32-90	7335-7344	longbench	_	_	
32-91	7344-7345	/	_	_	
32-92	7345-7349	kivi	_	_	
32-93	7349-7350	/	_	_	
32-94	7350-7354	2bit	_	_	
32-95	7354-7355	/	_	_	
32-96	7355-7361	llama3	_	_	
32-97	7361-7362	-	_	_	
32-98	7362-7376	8b-instruct.sh	_	_	
32-99	7377-7378	<	_	_	
32-100	7378-7393	output_dir_root	_	_	
32-101	7393-7394	>	_	_	
32-102	7395-7396	`	_	_	
32-103	7396-7397	`	_	_	
32-104	7397-7398	`	_	_	
32-105	7401-7402	>	_	_	
32-106	7403-7408	Given	_	_	
32-107	7409-7412	the	_	_	
32-108	7413-7417	long	_	_	
32-109	7418-7425	context	_	_	
32-110	7426-7431	tasks	_	_	
32-111	7432-7435	are	_	_	
32-112	7436-7441	often	_	_	
32-113	7442-7456	time-consuming	_	_	
32-114	7457-7459	to	_	_	
32-115	7460-7468	evaluate	_	_	
32-116	7468-7469	,	_	_	
32-117	7470-7472	we	_	_	
32-118	7473-7485	additionally	_	_	
32-119	7486-7492	supply	_	_	
32-120	7493-7494	a	_	_	
32-121	7495-7498	set	_	_	
32-122	7499-7501	of	_	_	
32-123	7502-7509	scripts	_	_	
32-124	7510-7512	in	_	_	
32-125	7513-7516	the	_	_	
32-126	7517-7518	[	_	_	
32-127	7518-7519	`	_	_	
32-128	7519-7526	scripts	_	_	
32-129	7526-7527	/	_	_	
32-130	7527-7538	quick_start	_	_	
32-131	7538-7539	`	_	_	
32-132	7539-7540	]	_	_	
32-133	7540-7541	(	_	_	
32-134	7541-7546	https	_	_	
32-135	7546-7547	:	_	_	
32-136	7547-7548	/	_	_	
32-137	7548-7549	/	_	_	
32-138	7549-7559	github.com	_	_	
32-139	7559-7560	/	_	_	
32-140	7560-7572	henryzhongsc	_	_	
32-141	7572-7573	/	_	_	
32-142	7573-7586	longctx_bench	_	_	
32-143	7586-7587	/	_	_	
32-144	7587-7591	blob	_	_	
32-145	7591-7592	/	_	_	
32-146	7592-7596	main	_	_	
32-147	7596-7597	/	_	_	
32-148	7597-7604	scripts	_	_	
32-149	7604-7605	/	_	_	
32-150	7605-7616	quick_start	_	_	
32-151	7616-7617	)	_	_	
32-152	7618-7624	folder	_	_	
32-153	7624-7625	,	_	_	
32-154	7626-7631	which	_	_	
32-155	7632-7635	are	_	_	
32-156	7636-7641	quick	_	_	
32-157	7642-7644	to	_	_	
32-158	7645-7653	conclude	_	_	
32-159	7654-7655	(	_	_	
32-160	7655-7659	just	_	_	
32-161	7660-7666	Qasper	_	_	
32-162	7667-7670	for	_	_	
32-163	7671-7680	LongBench	_	_	
32-164	7681-7684	and	_	_	
32-165	7685-7689	just	_	_	
32-166	7690-7693	two	_	_	
32-167	7694-7696	of	_	_	
32-168	7697-7700	the	_	_	
32-169	7701-7708	longest	_	_	
32-170	7709-7715	needle	_	_	
32-171	7716-7722	inputs	_	_	
32-172	7723-7726	for	_	_	
32-173	7727-7737	PaulGraham	_	_	
32-174	7738-7745	Passkey	_	_	
32-175	7745-7746	)	_	_	
32-176	7746-7747	.	_	_	

#Text=They are solely here as proxies to confirm the code and environment are (likely) running fine before committing to longer evaluations.
33-1	7748-7752	They	_	_	
33-2	7753-7756	are	_	_	
33-3	7757-7763	solely	_	_	
33-4	7764-7768	here	_	_	
33-5	7769-7771	as	_	_	
33-6	7772-7779	proxies	_	_	
33-7	7780-7782	to	_	_	
33-8	7783-7790	confirm	_	_	
33-9	7791-7794	the	_	_	
33-10	7795-7799	code	_	_	
33-11	7800-7803	and	_	_	
33-12	7804-7815	environment	_	_	
33-13	7816-7819	are	_	_	
33-14	7820-7821	(	_	_	
33-15	7821-7827	likely	_	_	
33-16	7827-7828	)	_	_	
33-17	7829-7836	running	_	_	
33-18	7837-7841	fine	_	_	
33-19	7842-7848	before	_	_	
33-20	7849-7859	committing	_	_	
33-21	7860-7862	to	_	_	
33-22	7863-7869	longer	_	_	
33-23	7870-7881	evaluations	_	_	
33-24	7881-7882	.	_	_	

#Text=We recommend trying these scripts first.
34-1	7883-7885	We	_	_	
34-2	7886-7895	recommend	_	_	
34-3	7896-7902	trying	_	_	
34-4	7903-7908	these	_	_	
34-5	7909-7916	scripts	_	_	
34-6	7917-7922	first	_	_	
34-7	7922-7923	.	_	_	

#Text=For viewer's convenience of comparison and potential table/plot construction needs, we share all experiment logs, filtered, and raw results at [Google Drive link](https://drive.google.com/drive/folders/1PBB5bkR88QbaA1-dBTwP5xKLq8iEBcBb?
35-1	7925-7928	For	_	_	
35-2	7929-7937	viewer's	_	_	
35-3	7938-7949	convenience	_	_	
35-4	7950-7952	of	_	_	
35-5	7953-7963	comparison	_	_	
35-6	7964-7967	and	_	_	
35-7	7968-7977	potential	_	_	
35-8	7978-7983	table	_	_	
35-9	7983-7984	/	_	_	
35-10	7984-7988	plot	_	_	
35-11	7989-8001	construction	_	_	
35-12	8002-8007	needs	_	_	
35-13	8007-8008	,	_	_	
35-14	8009-8011	we	_	_	
35-15	8012-8017	share	_	_	
35-16	8018-8021	all	_	_	
35-17	8022-8032	experiment	_	_	
35-18	8033-8037	logs	_	_	
35-19	8037-8038	,	_	_	
35-20	8039-8047	filtered	_	_	
35-21	8047-8048	,	_	_	
35-22	8049-8052	and	_	_	
35-23	8053-8056	raw	_	_	
35-24	8057-8064	results	_	_	
35-25	8065-8067	at	_	_	
35-26	8068-8069	[	_	_	
35-27	8069-8075	Google	*[13]	SOFTWARE[13]	
35-28	8076-8081	Drive	*[13]	SOFTWARE[13]	
35-29	8082-8086	link	_	_	
35-30	8086-8087	]	_	_	
35-31	8087-8088	(	_	_	
35-32	8088-8093	https	_	_	
35-33	8093-8094	:	_	_	
35-34	8094-8095	/	_	_	
35-35	8095-8096	/	_	_	
35-36	8096-8112	drive.google.com	_	_	
35-37	8112-8113	/	_	_	
35-38	8113-8118	drive	_	_	
35-39	8118-8119	/	_	_	
35-40	8119-8126	folders	_	_	
35-41	8126-8127	/	_	_	
35-42	8127-8142	1PBB5bkR88QbaA1	_	_	
35-43	8142-8143	-	_	_	
35-44	8143-8160	dBTwP5xKLq8iEBcBb	_	_	
35-45	8160-8161	?	_	_	

#Text=usp=share_link).
36-1	8161-8164	usp	_	_	
36-2	8164-8165	=	_	_	
36-3	8165-8175	share_link	_	_	
36-4	8175-8176	)	_	_	
36-5	8176-8177	.	_	_	

#Text=The exact experiment results we reported can be find under the `result_only` folder, which are calculated base on the raw results shared under `full_output`.
37-1	8178-8181	The	_	_	
37-2	8182-8187	exact	_	_	
37-3	8188-8198	experiment	_	_	
37-4	8199-8206	results	_	_	
37-5	8207-8209	we	_	_	
37-6	8210-8218	reported	_	_	
37-7	8219-8222	can	_	_	
37-8	8223-8225	be	_	_	
37-9	8226-8230	find	_	_	
37-10	8231-8236	under	_	_	
37-11	8237-8240	the	_	_	
37-12	8241-8242	`	_	_	
37-13	8242-8253	result_only	_	_	
37-14	8253-8254	`	_	_	
37-15	8255-8261	folder	_	_	
37-16	8261-8262	,	_	_	
37-17	8263-8268	which	_	_	
37-18	8269-8272	are	_	_	
37-19	8273-8283	calculated	_	_	
37-20	8284-8288	base	_	_	
37-21	8289-8291	on	_	_	
37-22	8292-8295	the	_	_	
37-23	8296-8299	raw	_	_	
37-24	8300-8307	results	_	_	
37-25	8308-8314	shared	_	_	
37-26	8315-8320	under	_	_	
37-27	8321-8322	`	_	_	
37-28	8322-8333	full_output	_	_	
37-29	8333-8334	`	_	_	
37-30	8334-8335	.	_	_	

#Text=All experiments are done with respect to [commit 3e9d810](https://github.com/henryzhongsc/longctx_bench/commit/3e9d810f93cfdecc87d4538e1721d08047d66010).
#Text=
#Text=
#Text=---
#Text=## Result Digestion
#Text=
#Text=Once an experiment is running, one may monitor real-time printouts in the terminal as well as the `exp.log` file under `<output_folder_dir>`.
38-1	8336-8339	All	_	_	
38-2	8340-8351	experiments	_	_	
38-3	8352-8355	are	_	_	
38-4	8356-8360	done	_	_	
38-5	8361-8365	with	_	_	
38-6	8366-8373	respect	_	_	
38-7	8374-8376	to	_	_	
38-8	8377-8378	[	_	_	
38-9	8378-8384	commit	_	_	
38-10	8385-8392	3e9d810	_	_	
38-11	8392-8393	]	_	_	
38-12	8393-8394	(	_	_	
38-13	8394-8399	https	_	_	
38-14	8399-8400	:	_	_	
38-15	8400-8401	/	_	_	
38-16	8401-8402	/	_	_	
38-17	8402-8412	github.com	_	_	
38-18	8412-8413	/	_	_	
38-19	8413-8425	henryzhongsc	_	_	
38-20	8425-8426	/	_	_	
38-21	8426-8439	longctx_bench	_	_	
38-22	8439-8440	/	_	_	
38-23	8440-8446	commit	_	_	
38-24	8446-8447	/	_	_	
38-25	8447-8487	3e9d810f93cfdecc87d4538e1721d08047d66010	_	_	
38-26	8487-8488	)	_	_	
38-27	8488-8489	.	_	_	
38-28	8492-8493	-	_	_	
38-29	8493-8494	-	_	_	
38-30	8494-8495	-	_	_	
38-31	8496-8497	#	_	_	
38-32	8497-8498	#	_	_	
38-33	8499-8505	Result	_	_	
38-34	8506-8515	Digestion	_	_	
38-35	8517-8521	Once	_	_	
38-36	8522-8524	an	_	_	
38-37	8525-8535	experiment	_	_	
38-38	8536-8538	is	_	_	
38-39	8539-8546	running	_	_	
38-40	8546-8547	,	_	_	
38-41	8548-8551	one	_	_	
38-42	8552-8555	may	_	_	
38-43	8556-8563	monitor	_	_	
38-44	8564-8573	real-time	_	_	
38-45	8574-8583	printouts	_	_	
38-46	8584-8586	in	_	_	
38-47	8587-8590	the	_	_	
38-48	8591-8599	terminal	_	_	
38-49	8600-8602	as	_	_	
38-50	8603-8607	well	_	_	
38-51	8608-8610	as	_	_	
38-52	8611-8614	the	_	_	
38-53	8615-8616	`	_	_	
38-54	8616-8623	exp.log	_	_	
38-55	8623-8624	`	_	_	
38-56	8625-8629	file	_	_	
38-57	8630-8635	under	_	_	
38-58	8636-8637	`	_	_	
38-59	8637-8638	<	_	_	
38-60	8638-8655	output_folder_dir	_	_	
38-61	8655-8656	>	_	_	
38-62	8656-8657	`	_	_	
38-63	8657-8658	.	_	_	

#Text=Once an experiment is concluded, the **final results can be find in a subfolder under `<output_dir_root>`.** The exact subfolder location varies depending on what experiment is being executed since our provided script would make a subfolder structure that is legible and makes sense for each method.
39-1	8659-8663	Once	_	_	
39-2	8664-8666	an	_	_	
39-3	8667-8677	experiment	_	_	
39-4	8678-8680	is	_	_	
39-5	8681-8690	concluded	_	_	
39-6	8690-8691	,	_	_	
39-7	8692-8695	the	_	_	
39-8	8696-8697	*	_	_	
39-9	8697-8698	*	_	_	
39-10	8698-8703	final	_	_	
39-11	8704-8711	results	_	_	
39-12	8712-8715	can	_	_	
39-13	8716-8718	be	_	_	
39-14	8719-8723	find	_	_	
39-15	8724-8726	in	_	_	
39-16	8727-8728	a	_	_	
39-17	8729-8738	subfolder	_	_	
39-18	8739-8744	under	_	_	
39-19	8745-8746	`	_	_	
39-20	8746-8747	<	_	_	
39-21	8747-8762	output_dir_root	_	_	
39-22	8762-8763	>	_	_	
39-23	8763-8764	`	_	_	
39-24	8764-8765	.	_	_	
39-25	8765-8766	*	_	_	
39-26	8766-8767	*	_	_	
39-27	8768-8771	The	_	_	
39-28	8772-8777	exact	_	_	
39-29	8778-8787	subfolder	_	_	
39-30	8788-8796	location	_	_	
39-31	8797-8803	varies	_	_	
39-32	8804-8813	depending	_	_	
39-33	8814-8816	on	_	_	
39-34	8817-8821	what	_	_	
39-35	8822-8832	experiment	_	_	
39-36	8833-8835	is	_	_	
39-37	8836-8841	being	_	_	
39-38	8842-8850	executed	_	_	
39-39	8851-8856	since	_	_	
39-40	8857-8860	our	_	_	
39-41	8861-8869	provided	_	_	
39-42	8870-8876	script	_	_	
39-43	8877-8882	would	_	_	
39-44	8883-8887	make	_	_	
39-45	8888-8889	a	_	_	
39-46	8890-8899	subfolder	_	_	
39-47	8900-8909	structure	_	_	
39-48	8910-8914	that	_	_	
39-49	8915-8917	is	_	_	
39-50	8918-8925	legible	_	_	
39-51	8926-8929	and	_	_	
39-52	8930-8935	makes	_	_	
39-53	8936-8941	sense	_	_	
39-54	8942-8945	for	_	_	
39-55	8946-8950	each	_	_	
39-56	8951-8957	method	_	_	
39-57	8957-8958	.	_	_	

#Text=Here is an example for InfLLM on PaulGraham Passkey; the results can be found under `<output_folder_dir>`.
#Text=
#Text=```
#Text=compress_ratio=$1 # 2x, 4x, 6x, 8x
#Text=output_dir_root=$2
#Text=
#Text=task="paulgraham_passkey"
#Text=dataset="20480words_10x10x3_7digits"
#Text=model="mistral-7b-instruct-v0.2_infinity_model_len"
#Text=method="infllm"
#Text=
#Text=python pipeline/inf_stream_llm/main.py \\
#Text=--exp_desc ${task}_${dataset}_${model}_${method}_${compress_ratio} \\ # this argument is purely cosmetic.
40-1	8959-8963	Here	_	_	
40-2	8964-8966	is	_	_	
40-3	8967-8969	an	_	_	
40-4	8970-8977	example	_	_	
40-5	8978-8981	for	_	_	
40-6	8982-8988	InfLLM	*	SOFTWARE	
40-7	8989-8991	on	_	_	
40-8	8992-9002	PaulGraham	_	_	
40-9	9003-9010	Passkey	_	_	
40-10	9010-9011	;	_	_	
40-11	9012-9015	the	_	_	
40-12	9016-9023	results	_	_	
40-13	9024-9027	can	_	_	
40-14	9028-9030	be	_	_	
40-15	9031-9036	found	_	_	
40-16	9037-9042	under	_	_	
40-17	9043-9044	`	_	_	
40-18	9044-9045	<	_	_	
40-19	9045-9062	output_folder_dir	_	_	
40-20	9062-9063	>	_	_	
40-21	9063-9064	`	_	_	
40-22	9064-9065	.	_	_	
40-23	9067-9068	`	_	_	
40-24	9068-9069	`	_	_	
40-25	9069-9070	`	_	_	
40-26	9071-9085	compress_ratio	_	_	
40-27	9085-9086	=	_	_	
40-28	9086-9088	$1	_	_	
40-29	9089-9090	#	_	_	
40-30	9091-9093	2x	_	_	
40-31	9093-9094	,	_	_	
40-32	9095-9097	4x	_	_	
40-33	9097-9098	,	_	_	
40-34	9099-9101	6x	_	_	
40-35	9101-9102	,	_	_	
40-36	9103-9105	8x	_	_	
40-37	9106-9121	output_dir_root	_	_	
40-38	9121-9122	=	_	_	
40-39	9122-9124	$2	_	_	
40-40	9126-9130	task	_	_	
40-41	9130-9131	=	_	_	
40-42	9131-9132	"	_	_	
40-43	9132-9150	paulgraham_passkey	_	_	
40-44	9150-9151	"	_	_	
40-45	9152-9159	dataset	_	_	
40-46	9159-9160	=	_	_	
40-47	9160-9161	"	_	_	
40-48	9161-9171	20480words	*[14]	DATASET[14]	
40-49	9171-9172	_	*[14]	DATASET[14]	
40-50	9172-9179	10x10x3	*[14]	DATASET[14]	
40-51	9179-9180	_	*[14]	DATASET[14]	
40-52	9180-9187	7digits	*[14]	DATASET[14]	
40-53	9187-9188	"	_	_	
40-54	9189-9194	model	_	_	
40-55	9194-9195	=	_	_	
40-56	9195-9196	"	_	_	
40-57	9196-9203	mistral	*[15]	SOFTWARE[15]	
40-58	9203-9204	-	*[15]	SOFTWARE[15]	
40-59	9204-9220	7b-instruct-v0.2	*[15]	SOFTWARE[15]	
40-60	9220-9221	_	*[15]	SOFTWARE[15]	
40-61	9221-9239	infinity_model_len	*[15]	SOFTWARE[15]	
40-62	9239-9240	"	_	_	
40-63	9241-9247	method	_	_	
40-64	9247-9248	=	_	_	
40-65	9248-9249	"	_	_	
40-66	9249-9255	infllm	*	SOFTWARE	
40-67	9255-9256	"	_	_	
40-68	9258-9264	python	*	SOFTWARE	
40-69	9265-9273	pipeline	_	_	
40-70	9273-9274	/	_	_	
40-71	9274-9288	inf_stream_llm	_	_	
40-72	9288-9289	/	_	_	
40-73	9289-9296	main.py	_	_	
40-74	9297-9298	\	_	_	
40-75	9299-9300	-	_	_	
40-76	9300-9301	-	_	_	
40-77	9301-9309	exp_desc	_	_	
40-78	9310-9311	$	_	_	
40-79	9311-9312	{	_	_	
40-80	9312-9316	task	_	_	
40-81	9316-9317	}	_	_	
40-82	9317-9318	_	_	_	
40-83	9318-9319	$	_	_	
40-84	9319-9320	{	_	_	
40-85	9320-9327	dataset	_	_	
40-86	9327-9328	}	_	_	
40-87	9328-9329	_	_	_	
40-88	9329-9330	$	_	_	
40-89	9330-9331	{	_	_	
40-90	9331-9336	model	_	_	
40-91	9336-9337	}	_	_	
40-92	9337-9338	_	_	_	
40-93	9338-9339	$	_	_	
40-94	9339-9340	{	_	_	
40-95	9340-9346	method	_	_	
40-96	9346-9347	}	_	_	
40-97	9347-9348	_	_	_	
40-98	9348-9349	$	_	_	
40-99	9349-9350	{	_	_	
40-100	9350-9364	compress_ratio	_	_	
40-101	9364-9365	}	_	_	
40-102	9366-9367	\	_	_	
40-103	9368-9369	#	_	_	
40-104	9370-9374	this	_	_	
40-105	9375-9383	argument	_	_	
40-106	9384-9386	is	_	_	
40-107	9387-9393	purely	_	_	
40-108	9394-9402	cosmetic	_	_	
40-109	9402-9403	.	_	_	

#Text=--pipeline_config_dir config/pipeline_config/${method}/${task}/${model}/${compress_ratio}.json \\
#Text=--eval_config_dir config/eval_config/${task}/${dataset}.json \\
#Text=--output_folder_dir ${output_dir_root}/${task}/${dataset}/${method}/${model}/${compress_ratio}/
#Text=```
#Text=
#Text=Under this `<output_folder_dir>` folder, one may expect the following components
41-1	9404-9405	-	_	_	
41-2	9405-9406	-	_	_	
41-3	9406-9425	pipeline_config_dir	_	_	
41-4	9426-9432	config	_	_	
41-5	9432-9433	/	_	_	
41-6	9433-9448	pipeline_config	_	_	
41-7	9448-9449	/	_	_	
41-8	9449-9450	$	_	_	
41-9	9450-9451	{	_	_	
41-10	9451-9457	method	_	_	
41-11	9457-9458	}	_	_	
41-12	9458-9459	/	_	_	
41-13	9459-9460	$	_	_	
41-14	9460-9461	{	_	_	
41-15	9461-9465	task	_	_	
41-16	9465-9466	}	_	_	
41-17	9466-9467	/	_	_	
41-18	9467-9468	$	_	_	
41-19	9468-9469	{	_	_	
41-20	9469-9474	model	_	_	
41-21	9474-9475	}	_	_	
41-22	9475-9476	/	_	_	
41-23	9476-9477	$	_	_	
41-24	9477-9478	{	_	_	
41-25	9478-9492	compress_ratio	_	_	
41-26	9492-9493	}	_	_	
41-27	9493-9494	.	_	_	
41-28	9494-9498	json	_	_	
41-29	9499-9500	\	_	_	
41-30	9501-9502	-	_	_	
41-31	9502-9503	-	_	_	
41-32	9503-9518	eval_config_dir	_	_	
41-33	9519-9525	config	_	_	
41-34	9525-9526	/	_	_	
41-35	9526-9537	eval_config	_	_	
41-36	9537-9538	/	_	_	
41-37	9538-9539	$	_	_	
41-38	9539-9540	{	_	_	
41-39	9540-9544	task	_	_	
41-40	9544-9545	}	_	_	
41-41	9545-9546	/	_	_	
41-42	9546-9547	$	_	_	
41-43	9547-9548	{	_	_	
41-44	9548-9555	dataset	_	_	
41-45	9555-9556	}	_	_	
41-46	9556-9557	.	_	_	
41-47	9557-9561	json	_	_	
41-48	9562-9563	\	_	_	
41-49	9564-9565	-	_	_	
41-50	9565-9566	-	_	_	
41-51	9566-9583	output_folder_dir	_	_	
41-52	9584-9585	$	_	_	
41-53	9585-9586	{	_	_	
41-54	9586-9601	output_dir_root	_	_	
41-55	9601-9602	}	_	_	
41-56	9602-9603	/	_	_	
41-57	9603-9604	$	_	_	
41-58	9604-9605	{	_	_	
41-59	9605-9609	task	_	_	
41-60	9609-9610	}	_	_	
41-61	9610-9611	/	_	_	
41-62	9611-9612	$	_	_	
41-63	9612-9613	{	_	_	
41-64	9613-9620	dataset	_	_	
41-65	9620-9621	}	_	_	
41-66	9621-9622	/	_	_	
41-67	9622-9623	$	_	_	
41-68	9623-9624	{	_	_	
41-69	9624-9630	method	_	_	
41-70	9630-9631	}	_	_	
41-71	9631-9632	/	_	_	
41-72	9632-9633	$	_	_	
41-73	9633-9634	{	_	_	
41-74	9634-9639	model	_	_	
41-75	9639-9640	}	_	_	
41-76	9640-9641	/	_	_	
41-77	9641-9642	$	_	_	
41-78	9642-9643	{	_	_	
41-79	9643-9657	compress_ratio	_	_	
41-80	9657-9658	}	_	_	
41-81	9658-9659	/	_	_	
41-82	9660-9661	`	_	_	
41-83	9661-9662	`	_	_	
41-84	9662-9663	`	_	_	
41-85	9665-9670	Under	_	_	
41-86	9671-9675	this	_	_	
41-87	9676-9677	`	_	_	
41-88	9677-9678	<	_	_	
41-89	9678-9695	output_folder_dir	_	_	
41-90	9695-9696	>	_	_	
41-91	9696-9697	`	_	_	
41-92	9698-9704	folder	_	_	
41-93	9704-9705	,	_	_	
41-94	9706-9709	one	_	_	
41-95	9710-9713	may	_	_	
41-96	9714-9720	expect	_	_	
41-97	9721-9724	the	_	_	
41-98	9725-9734	following	_	_	
41-99	9735-9745	components	_	_	

#Text=.
42-1	9745-9746	.	_	_	

#Text=* `input_config` folder: This folder contains an `input_pipeline_config.json` and an`input_eval_config.json`.
43-1	9748-9749	*	_	_	
43-2	9750-9751	`	_	_	
43-3	9751-9763	input_config	_	_	
43-4	9763-9764	`	_	_	
43-5	9765-9771	folder	_	_	
43-6	9771-9772	:	_	_	
43-7	9773-9777	This	_	_	
43-8	9778-9784	folder	_	_	
43-9	9785-9793	contains	_	_	
43-10	9794-9796	an	_	_	
43-11	9797-9798	`	_	_	
43-12	9798-9824	input_pipeline_config.json	_	_	
43-13	9824-9825	`	_	_	
43-14	9826-9829	and	_	_	
43-15	9830-9832	an	_	_	
43-16	9832-9833	`	_	_	
43-17	9833-9855	input_eval_config.json	_	_	
43-18	9855-9856	`	_	_	
43-19	9856-9857	.	_	_	

#Text=These are the carbon copy of the configs supplied to the `pipeline_config_dir` and `eval_config_dir` arguments of the script.
44-1	9858-9863	These	_	_	
44-2	9864-9867	are	_	_	
44-3	9868-9871	the	_	_	
44-4	9872-9878	carbon	_	_	
44-5	9879-9883	copy	_	_	
44-6	9884-9886	of	_	_	
44-7	9887-9890	the	_	_	
44-8	9891-9898	configs	_	_	
44-9	9899-9907	supplied	_	_	
44-10	9908-9910	to	_	_	
44-11	9911-9914	the	_	_	
44-12	9915-9916	`	_	_	
44-13	9916-9935	pipeline_config_dir	_	_	
44-14	9935-9936	`	_	_	
44-15	9937-9940	and	_	_	
44-16	9941-9942	`	_	_	
44-17	9942-9957	eval_config_dir	_	_	
44-18	9957-9958	`	_	_	
44-19	9959-9968	arguments	_	_	
44-20	9969-9971	of	_	_	
44-21	9972-9975	the	_	_	
44-22	9976-9982	script	_	_	
44-23	9982-9983	.	_	_	

#Text=Such configs are copied here for easy replication purposes as these two configs basically define an experiment.
#Text=* `output_config.json`: This file provides a fuse of the above two input configs and some management information (e.g., start/end time of a job).
45-1	9984-9988	Such	_	_	
45-2	9989-9996	configs	_	_	
45-3	9997-10000	are	_	_	
45-4	10001-10007	copied	_	_	
45-5	10008-10012	here	_	_	
45-6	10013-10016	for	_	_	
45-7	10017-10021	easy	_	_	
45-8	10022-10033	replication	_	_	
45-9	10034-10042	purposes	_	_	
45-10	10043-10045	as	_	_	
45-11	10046-10051	these	_	_	
45-12	10052-10055	two	_	_	
45-13	10056-10063	configs	_	_	
45-14	10064-10073	basically	_	_	
45-15	10074-10080	define	_	_	
45-16	10081-10083	an	_	_	
45-17	10084-10094	experiment	_	_	
45-18	10094-10095	.	_	_	
45-19	10096-10097	*	_	_	
45-20	10098-10099	`	_	_	
45-21	10099-10117	output_config.json	_	_	
45-22	10117-10118	`	_	_	
45-23	10118-10119	:	_	_	
45-24	10120-10124	This	_	_	
45-25	10125-10129	file	_	_	
45-26	10130-10138	provides	_	_	
45-27	10139-10140	a	_	_	
45-28	10141-10145	fuse	_	_	
45-29	10146-10148	of	_	_	
45-30	10149-10152	the	_	_	
45-31	10153-10158	above	_	_	
45-32	10159-10162	two	_	_	
45-33	10163-10168	input	_	_	
45-34	10169-10176	configs	_	_	
45-35	10177-10180	and	_	_	
45-36	10181-10185	some	_	_	
45-37	10186-10196	management	_	_	
45-38	10197-10208	information	_	_	
45-39	10209-10210	(	_	_	
45-40	10210-10213	e.g	_	_	
45-41	10213-10214	.	_	_	
45-42	10214-10215	,	_	_	
45-43	10216-10221	start	_	_	
45-44	10221-10222	/	_	_	
45-45	10222-10225	end	_	_	
45-46	10226-10230	time	_	_	
45-47	10231-10233	of	_	_	
45-48	10234-10235	a	_	_	
45-49	10236-10239	job	_	_	
45-50	10239-10240	)	_	_	
45-51	10240-10241	.	_	_	

#Text=**Most importantly, it highlights the main reported metrics under the key `eval_results`.**
#Text=    * In the case of PaulGraham Passkey, it includes the accuracy of each depth-length combination, the average accuracy at each length (`background_len_wise_results`), and the overall accuracy (`overall_results`) in both exact and partial match fashion
46-1	10242-10243	*	_	_	
46-2	10243-10244	*	_	_	
46-3	10244-10248	Most	_	_	
46-4	10249-10260	importantly	_	_	
46-5	10260-10261	,	_	_	
46-6	10262-10264	it	_	_	
46-7	10265-10275	highlights	_	_	
46-8	10276-10279	the	_	_	
46-9	10280-10284	main	_	_	
46-10	10285-10293	reported	_	_	
46-11	10294-10301	metrics	_	_	
46-12	10302-10307	under	_	_	
46-13	10308-10311	the	_	_	
46-14	10312-10315	key	_	_	
46-15	10316-10317	`	_	_	
46-16	10317-10329	eval_results	_	_	
46-17	10329-10330	`	_	_	
46-18	10330-10331	.	_	_	
46-19	10331-10332	*	_	_	
46-20	10332-10333	*	_	_	
46-21	10338-10339	*	_	_	
46-22	10340-10342	In	_	_	
46-23	10343-10346	the	_	_	
46-24	10347-10351	case	_	_	
46-25	10352-10354	of	_	_	
46-26	10355-10365	PaulGraham	_	_	
46-27	10366-10373	Passkey	_	_	
46-28	10373-10374	,	_	_	
46-29	10375-10377	it	_	_	
46-30	10378-10386	includes	_	_	
46-31	10387-10390	the	_	_	
46-32	10391-10399	accuracy	_	_	
46-33	10400-10402	of	_	_	
46-34	10403-10407	each	_	_	
46-35	10408-10420	depth-length	_	_	
46-36	10421-10432	combination	_	_	
46-37	10432-10433	,	_	_	
46-38	10434-10437	the	_	_	
46-39	10438-10445	average	_	_	
46-40	10446-10454	accuracy	_	_	
46-41	10455-10457	at	_	_	
46-42	10458-10462	each	_	_	
46-43	10463-10469	length	_	_	
46-44	10470-10471	(	_	_	
46-45	10471-10472	`	_	_	
46-46	10472-10499	background_len_wise_results	_	_	
46-47	10499-10500	`	_	_	
46-48	10500-10501	)	_	_	
46-49	10501-10502	,	_	_	
46-50	10503-10506	and	_	_	
46-51	10507-10510	the	_	_	
46-52	10511-10518	overall	_	_	
46-53	10519-10527	accuracy	*	EVALMETRIC	
46-54	10528-10529	(	_	_	
46-55	10529-10530	`	_	_	
46-56	10530-10545	overall_results	_	_	
46-57	10545-10546	`	_	_	
46-58	10546-10547	)	_	_	
46-59	10548-10550	in	_	_	
46-60	10551-10555	both	_	_	
46-61	10556-10561	exact	_	_	
46-62	10562-10565	and	_	_	
46-63	10566-10573	partial	_	_	
46-64	10574-10579	match	_	_	
46-65	10580-10587	fashion	_	_	

#Text=.
47-1	10587-10588	.	_	_	

#Text=* **If you are only interested in comparing metrics reported in the main tables of our paper, this is the only place you need to check out.** We put such results alongside the two input configs so there is no chance of attributing the results to a wrong setting.
#Text=* `raw_results.json`: This file registers the fine-grain results of the concluded experiment, even if they are not reported in our paper (e.g., individual scoring of each output).
48-1	10593-10594	*	_	_	
48-2	10595-10596	*	_	_	
48-3	10596-10597	*	_	_	
48-4	10597-10599	If	_	_	
48-5	10600-10603	you	_	_	
48-6	10604-10607	are	_	_	
48-7	10608-10612	only	_	_	
48-8	10613-10623	interested	_	_	
48-9	10624-10626	in	_	_	
48-10	10627-10636	comparing	_	_	
48-11	10637-10644	metrics	_	_	
48-12	10645-10653	reported	_	_	
48-13	10654-10656	in	_	_	
48-14	10657-10660	the	_	_	
48-15	10661-10665	main	_	_	
48-16	10666-10672	tables	_	_	
48-17	10673-10675	of	_	_	
48-18	10676-10679	our	_	_	
48-19	10680-10685	paper	_	_	
48-20	10685-10686	,	_	_	
48-21	10687-10691	this	_	_	
48-22	10692-10694	is	_	_	
48-23	10695-10698	the	_	_	
48-24	10699-10703	only	_	_	
48-25	10704-10709	place	_	_	
48-26	10710-10713	you	_	_	
48-27	10714-10718	need	_	_	
48-28	10719-10721	to	_	_	
48-29	10722-10727	check	_	_	
48-30	10728-10731	out	_	_	
48-31	10731-10732	.	_	_	
48-32	10732-10733	*	_	_	
48-33	10733-10734	*	_	_	
48-34	10735-10737	We	_	_	
48-35	10738-10741	put	_	_	
48-36	10742-10746	such	_	_	
48-37	10747-10754	results	_	_	
48-38	10755-10764	alongside	_	_	
48-39	10765-10768	the	_	_	
48-40	10769-10772	two	_	_	
48-41	10773-10778	input	_	_	
48-42	10779-10786	configs	_	_	
48-43	10787-10789	so	_	_	
48-44	10790-10795	there	_	_	
48-45	10796-10798	is	_	_	
48-46	10799-10801	no	_	_	
48-47	10802-10808	chance	_	_	
48-48	10809-10811	of	_	_	
48-49	10812-10823	attributing	_	_	
48-50	10824-10827	the	_	_	
48-51	10828-10835	results	_	_	
48-52	10836-10838	to	_	_	
48-53	10839-10840	a	_	_	
48-54	10841-10846	wrong	_	_	
48-55	10847-10854	setting	_	_	
48-56	10854-10855	.	_	_	
48-57	10856-10857	*	_	_	
48-58	10858-10859	`	_	_	
48-59	10859-10875	raw_results.json	_	_	
48-60	10875-10876	`	_	_	
48-61	10876-10877	:	_	_	
48-62	10878-10882	This	_	_	
48-63	10883-10887	file	_	_	
48-64	10888-10897	registers	_	_	
48-65	10898-10901	the	_	_	
48-66	10902-10912	fine-grain	_	_	
48-67	10913-10920	results	_	_	
48-68	10921-10923	of	_	_	
48-69	10924-10927	the	_	_	
48-70	10928-10937	concluded	_	_	
48-71	10938-10948	experiment	_	_	
48-72	10948-10949	,	_	_	
48-73	10950-10954	even	_	_	
48-74	10955-10957	if	_	_	
48-75	10958-10962	they	_	_	
48-76	10963-10966	are	_	_	
48-77	10967-10970	not	_	_	
48-78	10971-10979	reported	_	_	
48-79	10980-10982	in	_	_	
48-80	10983-10986	our	_	_	
48-81	10987-10992	paper	_	_	
48-82	10993-10994	(	_	_	
48-83	10994-10997	e.g	_	_	
48-84	10997-10998	.	_	_	
48-85	10998-10999	,	_	_	
48-86	11000-11010	individual	_	_	
48-87	11011-11018	scoring	_	_	
48-88	11019-11021	of	_	_	
48-89	11022-11026	each	_	_	
48-90	11027-11033	output	_	_	
48-91	11033-11034	)	_	_	
48-92	11034-11035	.	_	_	

#Text=It also registers all newly generated tokens upon each input for monitoring/debugging purposes.
#Text=* `exp.log`: This is a carbon copy of the real-time printouts to the terminal
49-1	11036-11038	It	_	_	
49-2	11039-11043	also	_	_	
49-3	11044-11053	registers	_	_	
49-4	11054-11057	all	_	_	
49-5	11058-11063	newly	_	_	
49-6	11064-11073	generated	_	_	
49-7	11074-11080	tokens	_	_	
49-8	11081-11085	upon	_	_	
49-9	11086-11090	each	_	_	
49-10	11091-11096	input	_	_	
49-11	11097-11100	for	_	_	
49-12	11101-11111	monitoring	_	_	
49-13	11111-11112	/	_	_	
49-14	11112-11121	debugging	_	_	
49-15	11122-11130	purposes	_	_	
49-16	11130-11131	.	_	_	
49-17	11132-11133	*	_	_	
49-18	11134-11135	`	_	_	
49-19	11135-11142	exp.log	_	_	
49-20	11142-11143	`	_	_	
49-21	11143-11144	:	_	_	
49-22	11145-11149	This	_	_	
49-23	11150-11152	is	_	_	
49-24	11153-11154	a	_	_	
49-25	11155-11161	carbon	_	_	
49-26	11162-11166	copy	_	_	
49-27	11167-11169	of	_	_	
49-28	11170-11173	the	_	_	
49-29	11174-11183	real-time	_	_	
49-30	11184-11193	printouts	_	_	
49-31	11194-11196	to	_	_	
49-32	11197-11200	the	_	_	
49-33	11201-11209	terminal	_	_	

#Text=.
50-1	11209-11210	.	_	_	

#Text=> For LongBench, we treat each of its subdatasets as an individual eval and loop them over, as demoed [here](https://github.com/henryzhongsc/longctx_bench/blob/main/scripts/longbench/baseline/llama3-8b-instruct.sh).
51-1	11212-11213	>	_	_	
51-2	11214-11217	For	_	_	
51-3	11218-11227	LongBench	_	_	
51-4	11227-11228	,	_	_	
51-5	11229-11231	we	_	_	
51-6	11232-11237	treat	_	_	
51-7	11238-11242	each	_	_	
51-8	11243-11245	of	_	_	
51-9	11246-11249	its	_	_	
51-10	11250-11261	subdatasets	_	_	
51-11	11262-11264	as	_	_	
51-12	11265-11267	an	_	_	
51-13	11268-11278	individual	_	_	
51-14	11279-11283	eval	_	_	
51-15	11284-11287	and	_	_	
51-16	11288-11292	loop	_	_	
51-17	11293-11297	them	_	_	
51-18	11298-11302	over	_	_	
51-19	11302-11303	,	_	_	
51-20	11304-11306	as	_	_	
51-21	11307-11313	demoed	_	_	
51-22	11314-11315	[	_	_	
51-23	11315-11319	here	_	_	
51-24	11319-11320	]	_	_	
51-25	11320-11321	(	_	_	
51-26	11321-11326	https	_	_	
51-27	11326-11327	:	_	_	
51-28	11327-11328	/	_	_	
51-29	11328-11329	/	_	_	
51-30	11329-11339	github.com	_	_	
51-31	11339-11340	/	_	_	
51-32	11340-11352	henryzhongsc	_	_	
51-33	11352-11353	/	_	_	
51-34	11353-11366	longctx_bench	_	_	
51-35	11366-11367	/	_	_	
51-36	11367-11371	blob	_	_	
51-37	11371-11372	/	_	_	
51-38	11372-11376	main	_	_	
51-39	11376-11377	/	_	_	
51-40	11377-11384	scripts	_	_	
51-41	11384-11385	/	_	_	
51-42	11385-11394	longbench	_	_	
51-43	11394-11395	/	_	_	
51-44	11395-11403	baseline	_	_	
51-45	11403-11404	/	_	_	
51-46	11404-11410	llama3	_	_	
51-47	11410-11411	-	_	_	
51-48	11411-11425	8b-instruct.sh	_	_	
51-49	11425-11426	)	_	_	
51-50	11426-11427	.	_	_	

#Text=In this case, we additionally channel the [LongBench summarization scripts](https://github.com/henryzhongsc/longctx_bench/blob/main/visualization/longbench_results_summary) to summarize all results corresponding to a full LongBench run into one json file at the subdataset level.
#Text=
#Text=---
#Text=## Codebase Design and Contribution
#Text=
#Text=Our codebase mainly revolves around the two configs — [`pipeline_config`](https://github.com/henryzhongsc/longctx_bench/blob/main/config/pipeline_config) and [`eval_config`](https://github.com/henryzhongsc/longctx_bench/blob/main/config/eval_config) — where the former one defines a method, and the latter one defines an evaluation scheme.
52-1	11428-11430	In	_	_	
52-2	11431-11435	this	_	_	
52-3	11436-11440	case	_	_	
52-4	11440-11441	,	_	_	
52-5	11442-11444	we	_	_	
52-6	11445-11457	additionally	_	_	
52-7	11458-11465	channel	_	_	
52-8	11466-11469	the	_	_	
52-9	11470-11471	[	_	_	
52-10	11471-11480	LongBench	_	_	
52-11	11481-11494	summarization	_	_	
52-12	11495-11502	scripts	_	_	
52-13	11502-11503	]	_	_	
52-14	11503-11504	(	_	_	
52-15	11504-11509	https	_	_	
52-16	11509-11510	:	_	_	
52-17	11510-11511	/	_	_	
52-18	11511-11512	/	_	_	
52-19	11512-11522	github.com	_	_	
52-20	11522-11523	/	_	_	
52-21	11523-11535	henryzhongsc	_	_	
52-22	11535-11536	/	_	_	
52-23	11536-11549	longctx_bench	_	_	
52-24	11549-11550	/	_	_	
52-25	11550-11554	blob	_	_	
52-26	11554-11555	/	_	_	
52-27	11555-11559	main	_	_	
52-28	11559-11560	/	_	_	
52-29	11560-11573	visualization	_	_	
52-30	11573-11574	/	_	_	
52-31	11574-11599	longbench_results_summary	_	_	
52-32	11599-11600	)	_	_	
52-33	11601-11603	to	_	_	
52-34	11604-11613	summarize	_	_	
52-35	11614-11617	all	_	_	
52-36	11618-11625	results	_	_	
52-37	11626-11639	corresponding	_	_	
52-38	11640-11642	to	_	_	
52-39	11643-11644	a	_	_	
52-40	11645-11649	full	_	_	
52-41	11650-11659	LongBench	_	_	
52-42	11660-11663	run	_	_	
52-43	11664-11668	into	_	_	
52-44	11669-11672	one	_	_	
52-45	11673-11677	json	_	_	
52-46	11678-11682	file	_	_	
52-47	11683-11685	at	_	_	
52-48	11686-11689	the	_	_	
52-49	11690-11700	subdataset	_	_	
52-50	11701-11706	level	_	_	
52-51	11706-11707	.	_	_	
52-52	11709-11710	-	_	_	
52-53	11710-11711	-	_	_	
52-54	11711-11712	-	_	_	
52-55	11713-11714	#	_	_	
52-56	11714-11715	#	_	_	
52-57	11716-11724	Codebase	_	_	
52-58	11725-11731	Design	_	_	
52-59	11732-11735	and	_	_	
52-60	11736-11748	Contribution	_	_	
52-61	11750-11753	Our	_	_	
52-62	11754-11762	codebase	_	_	
52-63	11763-11769	mainly	_	_	
52-64	11770-11778	revolves	_	_	
52-65	11779-11785	around	_	_	
52-66	11786-11789	the	_	_	
52-67	11790-11793	two	_	_	
52-68	11794-11801	configs	_	_	
52-69	11802-11803	—	_	_	
52-70	11804-11805	[	_	_	
52-71	11805-11806	`	_	_	
52-72	11806-11821	pipeline_config	_	_	
52-73	11821-11822	`	_	_	
52-74	11822-11823	]	_	_	
52-75	11823-11824	(	_	_	
52-76	11824-11829	https	_	_	
52-77	11829-11830	:	_	_	
52-78	11830-11831	/	_	_	
52-79	11831-11832	/	_	_	
52-80	11832-11842	github.com	_	_	
52-81	11842-11843	/	_	_	
52-82	11843-11855	henryzhongsc	_	_	
52-83	11855-11856	/	_	_	
52-84	11856-11869	longctx_bench	_	_	
52-85	11869-11870	/	_	_	
52-86	11870-11874	blob	_	_	
52-87	11874-11875	/	_	_	
52-88	11875-11879	main	_	_	
52-89	11879-11880	/	_	_	
52-90	11880-11886	config	_	_	
52-91	11886-11887	/	_	_	
52-92	11887-11902	pipeline_config	_	_	
52-93	11902-11903	)	_	_	
52-94	11904-11907	and	_	_	
52-95	11908-11909	[	_	_	
52-96	11909-11910	`	_	_	
52-97	11910-11921	eval_config	_	_	
52-98	11921-11922	`	_	_	
52-99	11922-11923	]	_	_	
52-100	11923-11924	(	_	_	
52-101	11924-11929	https	_	_	
52-102	11929-11930	:	_	_	
52-103	11930-11931	/	_	_	
52-104	11931-11932	/	_	_	
52-105	11932-11942	github.com	_	_	
52-106	11942-11943	/	_	_	
52-107	11943-11955	henryzhongsc	_	_	
52-108	11955-11956	/	_	_	
52-109	11956-11969	longctx_bench	_	_	
52-110	11969-11970	/	_	_	
52-111	11970-11974	blob	_	_	
52-112	11974-11975	/	_	_	
52-113	11975-11979	main	_	_	
52-114	11979-11980	/	_	_	
52-115	11980-11986	config	_	_	
52-116	11986-11987	/	_	_	
52-117	11987-11998	eval_config	_	_	
52-118	11998-11999	)	_	_	
52-119	12000-12001	—	_	_	
52-120	12002-12007	where	_	_	
52-121	12008-12011	the	_	_	
52-122	12012-12018	former	_	_	
52-123	12019-12022	one	_	_	
52-124	12023-12030	defines	_	_	
52-125	12031-12032	a	_	_	
52-126	12033-12039	method	_	_	
52-127	12039-12040	,	_	_	
52-128	12041-12044	and	_	_	
52-129	12045-12048	the	_	_	
52-130	12049-12055	latter	_	_	
52-131	12056-12059	one	_	_	
52-132	12060-12067	defines	_	_	
52-133	12068-12070	an	_	_	
52-134	12071-12081	evaluation	_	_	
52-135	12082-12088	scheme	_	_	
52-136	12088-12089	.	_	_	

#Text=Their code implementations can be respectively found under the [`pipeline`](https://github.com/henryzhongsc/longctx_bench/blob/main/pipeline) and [`eval`](https://github.com/henryzhongsc/longctx_bench/blob/main/eval) folders.
53-1	12090-12095	Their	_	_	
53-2	12096-12100	code	_	_	
53-3	12101-12116	implementations	_	_	
53-4	12117-12120	can	_	_	
53-5	12121-12123	be	_	_	
53-6	12124-12136	respectively	_	_	
53-7	12137-12142	found	_	_	
53-8	12143-12148	under	_	_	
53-9	12149-12152	the	_	_	
53-10	12153-12154	[	_	_	
53-11	12154-12155	`	_	_	
53-12	12155-12163	pipeline	_	_	
53-13	12163-12164	`	_	_	
53-14	12164-12165	]	_	_	
53-15	12165-12166	(	_	_	
53-16	12166-12171	https	_	_	
53-17	12171-12172	:	_	_	
53-18	12172-12173	/	_	_	
53-19	12173-12174	/	_	_	
53-20	12174-12184	github.com	_	_	
53-21	12184-12185	/	_	_	
53-22	12185-12197	henryzhongsc	_	_	
53-23	12197-12198	/	_	_	
53-24	12198-12211	longctx_bench	_	_	
53-25	12211-12212	/	_	_	
53-26	12212-12216	blob	_	_	
53-27	12216-12217	/	_	_	
53-28	12217-12221	main	_	_	
53-29	12221-12222	/	_	_	
53-30	12222-12230	pipeline	_	_	
53-31	12230-12231	)	_	_	
53-32	12232-12235	and	_	_	
53-33	12236-12237	[	_	_	
53-34	12237-12238	`	_	_	
53-35	12238-12242	eval	_	_	
53-36	12242-12243	`	_	_	
53-37	12243-12244	]	_	_	
53-38	12244-12245	(	_	_	
53-39	12245-12250	https	_	_	
53-40	12250-12251	:	_	_	
53-41	12251-12252	/	_	_	
53-42	12252-12253	/	_	_	
53-43	12253-12263	github.com	_	_	
53-44	12263-12264	/	_	_	
53-45	12264-12276	henryzhongsc	_	_	
53-46	12276-12277	/	_	_	
53-47	12277-12290	longctx_bench	_	_	
53-48	12290-12291	/	_	_	
53-49	12291-12295	blob	_	_	
53-50	12295-12296	/	_	_	
53-51	12296-12300	main	_	_	
53-52	12300-12301	/	_	_	
53-53	12301-12305	eval	_	_	
53-54	12305-12306	)	_	_	
53-55	12307-12314	folders	_	_	
53-56	12314-12315	.	_	_	

#Text=We keep the eval implementations "singleton" for each dataset to ensure they are fairly tested among different pipelines.
54-1	12316-12318	We	_	_	
54-2	12319-12323	keep	_	_	
54-3	12324-12327	the	_	_	
54-4	12328-12332	eval	_	_	
54-5	12333-12348	implementations	_	_	
54-6	12349-12350	"	_	_	
54-7	12350-12359	singleton	_	_	
54-8	12359-12360	"	_	_	
54-9	12361-12364	for	_	_	
54-10	12365-12369	each	_	_	
54-11	12370-12377	dataset	_	_	
54-12	12378-12380	to	_	_	
54-13	12381-12387	ensure	_	_	
54-14	12388-12392	they	_	_	
54-15	12393-12396	are	_	_	
54-16	12397-12403	fairly	_	_	
54-17	12404-12410	tested	_	_	
54-18	12411-12416	among	_	_	
54-19	12417-12426	different	_	_	
54-20	12427-12436	pipelines	_	_	
54-21	12436-12437	.	_	_	

#Text=Yet, for pipeline implementation, we intentionally repeat some code components (e.g., the `pipeline/<method>/eval_longbench.py` and `eval_passkey_retrieval.py` files are largely the same under different methods) as we want to keep each pipeline/method folder relatively self-contained for better readability; and to make everything loosely coupled to support intervention requests coming at different angles.
55-1	12438-12441	Yet	_	_	
55-2	12441-12442	,	_	_	
55-3	12443-12446	for	_	_	
55-4	12447-12455	pipeline	_	_	
55-5	12456-12470	implementation	_	_	
55-6	12470-12471	,	_	_	
55-7	12472-12474	we	_	_	
55-8	12475-12488	intentionally	_	_	
55-9	12489-12495	repeat	_	_	
55-10	12496-12500	some	_	_	
55-11	12501-12505	code	_	_	
55-12	12506-12516	components	_	_	
55-13	12517-12518	(	_	_	
55-14	12518-12521	e.g	_	_	
55-15	12521-12522	.	_	_	
55-16	12522-12523	,	_	_	
55-17	12524-12527	the	_	_	
55-18	12528-12529	`	_	_	
55-19	12529-12537	pipeline	_	_	
55-20	12537-12538	/	_	_	
55-21	12538-12539	<	_	_	
55-22	12539-12545	method	_	_	
55-23	12545-12546	>	_	_	
55-24	12546-12547	/	_	_	
55-25	12547-12564	eval_longbench.py	_	_	
55-26	12564-12565	`	_	_	
55-27	12566-12569	and	_	_	
55-28	12570-12571	`	_	_	
55-29	12571-12596	eval_passkey_retrieval.py	_	_	
55-30	12596-12597	`	_	_	
55-31	12598-12603	files	_	_	
55-32	12604-12607	are	_	_	
55-33	12608-12615	largely	_	_	
55-34	12616-12619	the	_	_	
55-35	12620-12624	same	_	_	
55-36	12625-12630	under	_	_	
55-37	12631-12640	different	_	_	
55-38	12641-12648	methods	_	_	
55-39	12648-12649	)	_	_	
55-40	12650-12652	as	_	_	
55-41	12653-12655	we	_	_	
55-42	12656-12660	want	_	_	
55-43	12661-12663	to	_	_	
55-44	12664-12668	keep	_	_	
55-45	12669-12673	each	_	_	
55-46	12674-12682	pipeline	_	_	
55-47	12682-12683	/	_	_	
55-48	12683-12689	method	_	_	
55-49	12690-12696	folder	_	_	
55-50	12697-12707	relatively	_	_	
55-51	12708-12722	self-contained	_	_	
55-52	12723-12726	for	_	_	
55-53	12727-12733	better	_	_	
55-54	12734-12745	readability	_	_	
55-55	12745-12746	;	_	_	
55-56	12747-12750	and	_	_	
55-57	12751-12753	to	_	_	
55-58	12754-12758	make	_	_	
55-59	12759-12769	everything	_	_	
55-60	12770-12777	loosely	_	_	
55-61	12778-12785	coupled	_	_	
55-62	12786-12788	to	_	_	
55-63	12789-12796	support	_	_	
55-64	12797-12809	intervention	_	_	
55-65	12810-12818	requests	_	_	
55-66	12819-12825	coming	_	_	
55-67	12826-12828	at	_	_	
55-68	12829-12838	different	_	_	
55-69	12839-12845	angles	_	_	
55-70	12845-12846	.	_	_	

#Text=Should you want to add a new evaluation, you may consider adding an `eval/<new_eval_utils>` folder for its eval utilities, and supply corresponding `eval_<new_eval>.py` files under all `pipeline/<method>` folders you'd care to evaluate.
56-1	12848-12854	Should	_	_	
56-2	12855-12858	you	_	_	
56-3	12859-12863	want	_	_	
56-4	12864-12866	to	_	_	
56-5	12867-12870	add	_	_	
56-6	12871-12872	a	_	_	
56-7	12873-12876	new	_	_	
56-8	12877-12887	evaluation	_	_	
56-9	12887-12888	,	_	_	
56-10	12889-12892	you	_	_	
56-11	12893-12896	may	_	_	
56-12	12897-12905	consider	_	_	
56-13	12906-12912	adding	_	_	
56-14	12913-12915	an	_	_	
56-15	12916-12917	`	_	_	
56-16	12917-12921	eval	_	_	
56-17	12921-12922	/	_	_	
56-18	12922-12923	<	_	_	
56-19	12923-12937	new_eval_utils	_	_	
56-20	12937-12938	>	_	_	
56-21	12938-12939	`	_	_	
56-22	12940-12946	folder	_	_	
56-23	12947-12950	for	_	_	
56-24	12951-12954	its	_	_	
56-25	12955-12959	eval	_	_	
56-26	12960-12969	utilities	_	_	
56-27	12969-12970	,	_	_	
56-28	12971-12974	and	_	_	
56-29	12975-12981	supply	_	_	
56-30	12982-12995	corresponding	_	_	
56-31	12996-12997	`	_	_	
56-32	12997-13001	eval	_	_	
56-33	13001-13002	_	_	_	
56-34	13002-13003	<	_	_	
56-35	13003-13011	new_eval	_	_	
56-36	13011-13012	>	_	_	
56-37	13012-13013	.	_	_	
56-38	13013-13015	py	_	_	
56-39	13015-13016	`	_	_	
56-40	13017-13022	files	_	_	
56-41	13023-13028	under	_	_	
56-42	13029-13032	all	_	_	
56-43	13033-13034	`	_	_	
56-44	13034-13042	pipeline	_	_	
56-45	13042-13043	/	_	_	
56-46	13043-13044	<	_	_	
56-47	13044-13050	method	_	_	
56-48	13050-13051	>	_	_	
56-49	13051-13052	`	_	_	
56-50	13053-13060	folders	_	_	
56-51	13061-13066	you'd	_	_	
56-52	13067-13071	care	_	_	
56-53	13072-13074	to	_	_	
56-54	13075-13083	evaluate	_	_	
56-55	13083-13084	.	_	_	

#Text=Should you want to add a new method to our codebase, please consider adding a `pipeline/<method>` folder and couple with the evaluations you'd care to conduct with necessary `eval_<a_certain_eval>.py` files.
#Text=
#Text=---
#Text=
#Text=
#Text=Should you need to refer to this work or find our codebase useful, please consider citing our work as:
#Text=
#Text=
#Text=```
#Text=@inproceedings{yuan_liu_zhong_2024_kvcache_comp_benchmnark,
#Text=    title={KV Cache Compression, But What Must We Give in Return?
57-1	13085-13091	Should	_	_	
57-2	13092-13095	you	_	_	
57-3	13096-13100	want	_	_	
57-4	13101-13103	to	_	_	
57-5	13104-13107	add	_	_	
57-6	13108-13109	a	_	_	
57-7	13110-13113	new	_	_	
57-8	13114-13120	method	_	_	
57-9	13121-13123	to	_	_	
57-10	13124-13127	our	_	_	
57-11	13128-13136	codebase	_	_	
57-12	13136-13137	,	_	_	
57-13	13138-13144	please	_	_	
57-14	13145-13153	consider	_	_	
57-15	13154-13160	adding	_	_	
57-16	13161-13162	a	_	_	
57-17	13163-13164	`	_	_	
57-18	13164-13172	pipeline	_	_	
57-19	13172-13173	/	_	_	
57-20	13173-13174	<	_	_	
57-21	13174-13180	method	_	_	
57-22	13180-13181	>	_	_	
57-23	13181-13182	`	_	_	
57-24	13183-13189	folder	_	_	
57-25	13190-13193	and	_	_	
57-26	13194-13200	couple	_	_	
57-27	13201-13205	with	_	_	
57-28	13206-13209	the	_	_	
57-29	13210-13221	evaluations	_	_	
57-30	13222-13227	you'd	_	_	
57-31	13228-13232	care	_	_	
57-32	13233-13235	to	_	_	
57-33	13236-13243	conduct	_	_	
57-34	13244-13248	with	_	_	
57-35	13249-13258	necessary	_	_	
57-36	13259-13260	`	_	_	
57-37	13260-13264	eval	_	_	
57-38	13264-13265	_	_	_	
57-39	13265-13266	<	_	_	
57-40	13266-13280	a_certain_eval	_	_	
57-41	13280-13281	>	_	_	
57-42	13281-13282	.	_	_	
57-43	13282-13284	py	_	_	
57-44	13284-13285	`	_	_	
57-45	13286-13291	files	_	_	
57-46	13291-13292	.	_	_	
57-47	13294-13295	-	_	_	
57-48	13295-13296	-	_	_	
57-49	13296-13297	-	_	_	
57-50	13300-13306	Should	_	_	
57-51	13307-13310	you	_	_	
57-52	13311-13315	need	_	_	
57-53	13316-13318	to	_	_	
57-54	13319-13324	refer	_	_	
57-55	13325-13327	to	_	_	
57-56	13328-13332	this	_	_	
57-57	13333-13337	work	_	_	
57-58	13338-13340	or	_	_	
57-59	13341-13345	find	_	_	
57-60	13346-13349	our	_	_	
57-61	13350-13358	codebase	_	_	
57-62	13359-13365	useful	_	_	
57-63	13365-13366	,	_	_	
57-64	13367-13373	please	_	_	
57-65	13374-13382	consider	_	_	
57-66	13383-13389	citing	_	_	
57-67	13390-13393	our	_	_	
57-68	13394-13398	work	_	_	
57-69	13399-13401	as	_	_	
57-70	13401-13402	:	_	_	
57-71	13405-13406	`	_	_	
57-72	13406-13407	`	_	_	
57-73	13407-13408	`	_	_	
57-74	13409-13410	@	_	_	
57-75	13410-13423	inproceedings	_	_	
57-76	13423-13424	{	_	_	
57-77	13424-13438	yuan_liu_zhong	_	_	
57-78	13438-13439	_	_	_	
57-79	13439-13443	2024	_	_	
57-80	13443-13444	_	_	_	
57-81	13444-13467	kvcache_comp_benchmnark	_	_	
57-82	13467-13468	,	_	_	
57-83	13473-13478	title	_	_	
57-84	13478-13479	=	_	_	
57-85	13479-13480	{	_	_	
57-86	13480-13482	KV	*[16]	PUBLICATION[16]	
57-87	13483-13488	Cache	*[16]	PUBLICATION[16]	
57-88	13489-13500	Compression	*[16]	PUBLICATION[16]	
57-89	13500-13501	,	*[16]	PUBLICATION[16]	
57-90	13502-13505	But	*[16]	PUBLICATION[16]	
57-91	13506-13510	What	*[16]	PUBLICATION[16]	
57-92	13511-13515	Must	*[16]	PUBLICATION[16]	
57-93	13516-13518	We	*[16]	PUBLICATION[16]	
57-94	13519-13523	Give	*[16]	PUBLICATION[16]	
57-95	13524-13526	in	*[16]	PUBLICATION[16]	
57-96	13527-13533	Return	*[16]	PUBLICATION[16]	
57-97	13533-13534	?	*[16]	PUBLICATION[16]	

#Text=A Comprehensive Benchmark of Long Context Capable Approaches},
#Text=    author={Jiayi Yuan and Hongyi Liu and Shaochen Zhong and Yu-Neng Chuang and Songchen Li and Guanchu Wang and Duy Le and Hongye Jin and Vipin Chaudhary and Zhaozhuo Xu and Zirui Liu and Xia Hu},
#Text=    booktitle={The 2024 Conference on Empirical Methods in Natural Language Processing},
#Text=    year={2024},
#Text=}
#Text=```
58-1	13535-13536	A	*[16]	PUBLICATION[16]	
58-2	13537-13550	Comprehensive	*[16]	PUBLICATION[16]	
58-3	13551-13560	Benchmark	*[16]	PUBLICATION[16]	
58-4	13561-13563	of	*[16]	PUBLICATION[16]	
58-5	13564-13568	Long	*[16]	PUBLICATION[16]	
58-6	13569-13576	Context	*[16]	PUBLICATION[16]	
58-7	13577-13584	Capable	*[16]	PUBLICATION[16]	
58-8	13585-13595	Approaches	*[16]	PUBLICATION[16]	
58-9	13595-13596	}	_	_	
58-10	13596-13597	,	_	_	
58-11	13602-13608	author	_	_	
58-12	13608-13609	=	_	_	
58-13	13609-13610	{	_	_	
58-14	13610-13615	Jiayi	_	_	
58-15	13616-13620	Yuan	_	_	
58-16	13621-13624	and	_	_	
58-17	13625-13631	Hongyi	_	_	
58-18	13632-13635	Liu	_	_	
58-19	13636-13639	and	_	_	
58-20	13640-13648	Shaochen	_	_	
58-21	13649-13654	Zhong	_	_	
58-22	13655-13658	and	_	_	
58-23	13659-13666	Yu-Neng	_	_	
58-24	13667-13673	Chuang	_	_	
58-25	13674-13677	and	_	_	
58-26	13678-13686	Songchen	_	_	
58-27	13687-13689	Li	_	_	
58-28	13690-13693	and	_	_	
58-29	13694-13701	Guanchu	_	_	
58-30	13702-13706	Wang	_	_	
58-31	13707-13710	and	_	_	
58-32	13711-13714	Duy	_	_	
58-33	13715-13717	Le	_	_	
58-34	13718-13721	and	_	_	
58-35	13722-13728	Hongye	_	_	
58-36	13729-13732	Jin	_	_	
58-37	13733-13736	and	_	_	
58-38	13737-13742	Vipin	_	_	
58-39	13743-13752	Chaudhary	_	_	
58-40	13753-13756	and	_	_	
58-41	13757-13765	Zhaozhuo	_	_	
58-42	13766-13768	Xu	_	_	
58-43	13769-13772	and	_	_	
58-44	13773-13778	Zirui	_	_	
58-45	13779-13782	Liu	_	_	
58-46	13783-13786	and	_	_	
58-47	13787-13790	Xia	_	_	
58-48	13791-13793	Hu	_	_	
58-49	13793-13794	}	_	_	
58-50	13794-13795	,	_	_	
58-51	13800-13809	booktitle	_	_	
58-52	13809-13810	=	_	_	
58-53	13810-13811	{	_	_	
58-54	13811-13814	The	*[17]	PUBLICATION[17]	
58-55	13815-13819	2024	*[17]	PUBLICATION[17]	
58-56	13820-13830	Conference	*[17]	PUBLICATION[17]	
58-57	13831-13833	on	*[17]	PUBLICATION[17]	
58-58	13834-13843	Empirical	*[17]	PUBLICATION[17]	
58-59	13844-13851	Methods	*[17]	PUBLICATION[17]	
58-60	13852-13854	in	*[17]	PUBLICATION[17]	
58-61	13855-13862	Natural	*[17]	PUBLICATION[17]	
58-62	13863-13871	Language	*[17]	PUBLICATION[17]	
58-63	13872-13882	Processing	*[17]	PUBLICATION[17]	
58-64	13882-13883	}	_	_	
58-65	13883-13884	,	_	_	
58-66	13889-13893	year	_	_	
58-67	13893-13894	=	_	_	
58-68	13894-13895	{	_	_	
58-69	13895-13899	2024	_	_	
58-70	13899-13900	}	_	_	
58-71	13900-13901	,	_	_	
58-72	13902-13903	}	_	_	
58-73	13904-13905	`	_	_	
58-74	13905-13906	`	_	_	
58-75	13906-13907	`	_	_	
