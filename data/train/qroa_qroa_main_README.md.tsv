#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# üõ†Ô∏è QROA: A Black-Box Query-Response Optimization Attack on LLMs
#Text=
#Text=QROA, or Query-Response Optimization Attack, is an innovative and robust strategy designed to explore and exploit vulnerabilities in Large Language Models (LLMs) through black-box interactions.
1-1	0-1	#	_	_	
1-2	2-5	üõ†Ô∏è	_	_	
1-3	6-10	QROA	*[1]	PUBLICATION[1]	
1-4	10-11	:	*[1]	PUBLICATION[1]	
1-5	12-13	A	*[1]	PUBLICATION[1]	
1-6	14-23	Black-Box	*[1]	PUBLICATION[1]	
1-7	24-38	Query-Response	*[1]	PUBLICATION[1]	
1-8	39-51	Optimization	*[1]	PUBLICATION[1]	
1-9	52-58	Attack	*[1]	PUBLICATION[1]	
1-10	59-61	on	*[1]	PUBLICATION[1]	
1-11	62-66	LLMs	*[1]	PUBLICATION[1]	
1-12	68-72	QROA	_	_	
1-13	72-73	,	_	_	
1-14	74-76	or	_	_	
1-15	77-91	Query-Response	_	_	
1-16	92-104	Optimization	_	_	
1-17	105-111	Attack	_	_	
1-18	111-112	,	_	_	
1-19	113-115	is	_	_	
1-20	116-118	an	_	_	
1-21	119-129	innovative	_	_	
1-22	130-133	and	_	_	
1-23	134-140	robust	_	_	
1-24	141-149	strategy	_	_	
1-25	150-158	designed	_	_	
1-26	159-161	to	_	_	
1-27	162-169	explore	_	_	
1-28	170-173	and	_	_	
1-29	174-181	exploit	_	_	
1-30	182-197	vulnerabilities	_	_	
1-31	198-200	in	_	_	
1-32	201-206	Large	_	_	
1-33	207-215	Language	_	_	
1-34	216-222	Models	_	_	
1-35	223-224	(	_	_	
1-36	224-228	LLMs	_	_	
1-37	228-229	)	_	_	
1-38	230-237	through	_	_	
1-39	238-247	black-box	_	_	
1-40	248-260	interactions	_	_	
1-41	260-261	.	_	_	

#Text=This method leverages optimized triggers embedded within benign-looking instructions to manipulate LLMs into generating harmful content.
2-1	262-266	This	_	_	
2-2	267-273	method	_	_	
2-3	274-283	leverages	_	_	
2-4	284-293	optimized	_	_	
2-5	294-302	triggers	_	_	
2-6	303-311	embedded	_	_	
2-7	312-318	within	_	_	
2-8	319-333	benign-looking	_	_	
2-9	334-346	instructions	_	_	
2-10	347-349	to	_	_	
2-11	350-360	manipulate	_	_	
2-12	361-365	LLMs	_	_	
2-13	366-370	into	_	_	
2-14	371-381	generating	_	_	
2-15	382-389	harmful	_	_	
2-16	390-397	content	_	_	
2-17	397-398	.	_	_	

#Text=Developed without the need for direct model access or internal data insights, QROA operates solely via the standard input-output interface provided by LLMs.
3-1	399-408	Developed	_	_	
3-2	409-416	without	_	_	
3-3	417-420	the	_	_	
3-4	421-425	need	_	_	
3-5	426-429	for	_	_	
3-6	430-436	direct	_	_	
3-7	437-442	model	_	_	
3-8	443-449	access	_	_	
3-9	450-452	or	_	_	
3-10	453-461	internal	_	_	
3-11	462-466	data	_	_	
3-12	467-475	insights	_	_	
3-13	475-476	,	_	_	
3-14	477-481	QROA	_	_	
3-15	482-490	operates	_	_	
3-16	491-497	solely	_	_	
3-17	498-501	via	_	_	
3-18	502-505	the	_	_	
3-19	506-514	standard	_	_	
3-20	515-527	input-output	_	_	
3-21	528-537	interface	_	_	
3-22	538-546	provided	_	_	
3-23	547-549	by	_	_	
3-24	550-554	LLMs	_	_	
3-25	554-555	.	_	_	

#Text=The attack's underlying techniques are inspired by advances in deep Q-learning, allowing dynamic token adjustments to maximize a reward function that aligns with the attacker's goals.
4-1	556-559	The	_	_	
4-2	560-568	attack's	_	_	
4-3	569-579	underlying	_	_	
4-4	580-590	techniques	_	_	
4-5	591-594	are	_	_	
4-6	595-603	inspired	_	_	
4-7	604-606	by	_	_	
4-8	607-615	advances	_	_	
4-9	616-618	in	_	_	
4-10	619-623	deep	_	_	
4-11	624-634	Q-learning	_	_	
4-12	634-635	,	_	_	
4-13	636-644	allowing	_	_	
4-14	645-652	dynamic	_	_	
4-15	653-658	token	_	_	
4-16	659-670	adjustments	_	_	
4-17	671-673	to	_	_	
4-18	674-682	maximize	_	_	
4-19	683-684	a	_	_	
4-20	685-691	reward	_	_	
4-21	692-700	function	_	_	
4-22	701-705	that	_	_	
4-23	706-712	aligns	_	_	
4-24	713-717	with	_	_	
4-25	718-721	the	_	_	
4-26	722-732	attacker's	_	_	
4-27	733-738	goals	_	_	
4-28	738-739	.	_	_	

#Text=This Script is the official implementation of the article "*QROA: A Black-Box Query-Response Optimization Attack on LLMs*"
#Text=
#Text=Paper: https://arxiv.org/abs/2406.02044
#Text=
#Text=## üìÑ Citation
#Text=```
#Text=@article{jawad2024qroa,
#Text=  title={QROA: A Black-Box Query-Response Optimization Attack on LLMs},
#Text=  author={Jawad, Hussein and BRUNEL, Nicolas J-B},
#Text=  journal={arXiv preprint arXiv:2406.02044},
#Text=  year={2024}
#Text=}
#Text=```
#Text=
#Text=## üìú Abstract
#Text=
#Text=Large Language Models (LLMs) have recently gained popularity, but they also raise concerns due to their potential to create harmful content if misused.
5-1	741-745	This	_	_	
5-2	746-752	Script	_	_	
5-3	753-755	is	_	_	
5-4	756-759	the	_	_	
5-5	760-768	official	_	_	
5-6	769-783	implementation	_	_	
5-7	784-786	of	_	_	
5-8	787-790	the	_	_	
5-9	791-798	article	_	_	
5-10	799-800	"	_	_	
5-11	800-801	*	_	_	
5-12	801-805	QROA	*[2]	PUBLICATION[2]	
5-13	805-806	:	*[2]	PUBLICATION[2]	
5-14	807-808	A	*[2]	PUBLICATION[2]	
5-15	809-818	Black-Box	*[2]	PUBLICATION[2]	
5-16	819-833	Query-Response	*[2]	PUBLICATION[2]	
5-17	834-846	Optimization	*[2]	PUBLICATION[2]	
5-18	847-853	Attack	*[2]	PUBLICATION[2]	
5-19	854-856	on	*[2]	PUBLICATION[2]	
5-20	857-861	LLMs	*[2]	PUBLICATION[2]	
5-21	861-862	*	_	_	
5-22	862-863	"	_	_	
5-23	865-870	Paper	_	_	
5-24	870-871	:	_	_	
5-25	872-877	https	_	_	
5-26	877-878	:	_	_	
5-27	878-879	/	_	_	
5-28	879-880	/	_	_	
5-29	880-889	arxiv.org	_	_	
5-30	889-890	/	_	_	
5-31	890-893	abs	_	_	
5-32	893-894	/	_	_	
5-33	894-904	2406.02044	_	_	
5-34	906-907	#	_	_	
5-35	907-908	#	_	_	
5-36	909-911	üìÑ	_	_	
5-37	912-920	Citation	_	_	
5-38	921-922	`	_	_	
5-39	922-923	`	_	_	
5-40	923-924	`	_	_	
5-41	925-926	@	_	_	
5-42	926-933	article	_	_	
5-43	933-934	{	_	_	
5-44	934-947	jawad2024qroa	_	_	
5-45	947-948	,	_	_	
5-46	951-956	title	_	_	
5-47	956-957	=	_	_	
5-48	957-958	{	_	_	
5-49	958-962	QROA	*[3]	PUBLICATION[3]	
5-50	962-963	:	*[3]	PUBLICATION[3]	
5-51	964-965	A	*[3]	PUBLICATION[3]	
5-52	966-975	Black-Box	*[3]	PUBLICATION[3]	
5-53	976-990	Query-Response	*[3]	PUBLICATION[3]	
5-54	991-1003	Optimization	*[3]	PUBLICATION[3]	
5-55	1004-1010	Attack	*[3]	PUBLICATION[3]	
5-56	1011-1013	on	*[3]	PUBLICATION[3]	
5-57	1014-1018	LLMs	*[3]	PUBLICATION[3]	
5-58	1018-1019	}	_	_	
5-59	1019-1020	,	_	_	
5-60	1023-1029	author	_	_	
5-61	1029-1030	=	_	_	
5-62	1030-1031	{	_	_	
5-63	1031-1036	Jawad	_	_	
5-64	1036-1037	,	_	_	
5-65	1038-1045	Hussein	_	_	
5-66	1046-1049	and	_	_	
5-67	1050-1056	BRUNEL	_	_	
5-68	1056-1057	,	_	_	
5-69	1058-1065	Nicolas	_	_	
5-70	1066-1069	J-B	_	_	
5-71	1069-1070	}	_	_	
5-72	1070-1071	,	_	_	
5-73	1074-1081	journal	_	_	
5-74	1081-1082	=	_	_	
5-75	1082-1083	{	_	_	
5-76	1083-1088	arXiv	_	_	
5-77	1089-1097	preprint	_	_	
5-78	1098-1103	arXiv	_	_	
5-79	1103-1104	:	_	_	
5-80	1104-1114	2406.02044	_	_	
5-81	1114-1115	}	_	_	
5-82	1115-1116	,	_	_	
5-83	1119-1123	year	_	_	
5-84	1123-1124	=	_	_	
5-85	1124-1125	{	_	_	
5-86	1125-1129	2024	_	_	
5-87	1129-1130	}	_	_	
5-88	1131-1132	}	_	_	
5-89	1133-1134	`	_	_	
5-90	1134-1135	`	_	_	
5-91	1135-1136	`	_	_	
5-92	1138-1139	#	_	_	
5-93	1139-1140	#	_	_	
5-94	1141-1143	üìú	_	_	
5-95	1144-1152	Abstract	_	_	
5-96	1154-1159	Large	_	_	
5-97	1160-1168	Language	_	_	
5-98	1169-1175	Models	_	_	
5-99	1176-1177	(	_	_	
5-100	1177-1181	LLMs	_	_	
5-101	1181-1182	)	_	_	
5-102	1183-1187	have	_	_	
5-103	1188-1196	recently	_	_	
5-104	1197-1203	gained	_	_	
5-105	1204-1214	popularity	_	_	
5-106	1214-1215	,	_	_	
5-107	1216-1219	but	_	_	
5-108	1220-1224	they	_	_	
5-109	1225-1229	also	_	_	
5-110	1230-1235	raise	_	_	
5-111	1236-1244	concerns	_	_	
5-112	1245-1248	due	_	_	
5-113	1249-1251	to	_	_	
5-114	1252-1257	their	_	_	
5-115	1258-1267	potential	_	_	
5-116	1268-1270	to	_	_	
5-117	1271-1277	create	_	_	
5-118	1278-1285	harmful	_	_	
5-119	1286-1293	content	_	_	
5-120	1294-1296	if	_	_	
5-121	1297-1304	misused	_	_	
5-122	1304-1305	.	_	_	

#Text=This study in- troduces the Query-Response Optimization Attack (QROA), an optimization-based strategy designed to exploit LLMs through a black-box, query-only interaction.
6-1	1306-1310	This	_	_	
6-2	1311-1316	study	_	_	
6-3	1317-1319	in	_	_	
6-4	1319-1320	-	_	_	
6-5	1321-1329	troduces	_	_	
6-6	1330-1333	the	_	_	
6-7	1334-1348	Query-Response	_	_	
6-8	1349-1361	Optimization	_	_	
6-9	1362-1368	Attack	_	_	
6-10	1369-1370	(	_	_	
6-11	1370-1374	QROA	_	_	
6-12	1374-1375	)	_	_	
6-13	1375-1376	,	_	_	
6-14	1377-1379	an	_	_	
6-15	1380-1398	optimization-based	_	_	
6-16	1399-1407	strategy	_	_	
6-17	1408-1416	designed	_	_	
6-18	1417-1419	to	_	_	
6-19	1420-1427	exploit	_	_	
6-20	1428-1432	LLMs	_	_	
6-21	1433-1440	through	_	_	
6-22	1441-1442	a	_	_	
6-23	1443-1452	black-box	_	_	
6-24	1452-1453	,	_	_	
6-25	1454-1464	query-only	_	_	
6-26	1465-1476	interaction	_	_	
6-27	1476-1477	.	_	_	

#Text=QROA adds an optimized trigger to a malicious instruction to compel the LLM to generate harmful content.
7-1	1478-1482	QROA	_	_	
7-2	1483-1487	adds	_	_	
7-3	1488-1490	an	_	_	
7-4	1491-1500	optimized	_	_	
7-5	1501-1508	trigger	_	_	
7-6	1509-1511	to	_	_	
7-7	1512-1513	a	_	_	
7-8	1514-1523	malicious	_	_	
7-9	1524-1535	instruction	_	_	
7-10	1536-1538	to	_	_	
7-11	1539-1545	compel	_	_	
7-12	1546-1549	the	_	_	
7-13	1550-1553	LLM	_	_	
7-14	1554-1556	to	_	_	
7-15	1557-1565	generate	_	_	
7-16	1566-1573	harmful	_	_	
7-17	1574-1581	content	_	_	
7-18	1581-1582	.	_	_	

#Text=Unlike previous approaches, QROA does not require access to the model‚Äôs logit information or any other internal data and operates solely through the standard query-response interface of LLMs.
8-1	1583-1589	Unlike	_	_	
8-2	1590-1598	previous	_	_	
8-3	1599-1609	approaches	_	_	
8-4	1609-1610	,	_	_	
8-5	1611-1615	QROA	_	_	
8-6	1616-1620	does	_	_	
8-7	1621-1624	not	_	_	
8-8	1625-1632	require	_	_	
8-9	1633-1639	access	_	_	
8-10	1640-1642	to	_	_	
8-11	1643-1646	the	_	_	
8-12	1647-1652	model	_	_	
8-13	1652-1653	‚Äô	_	_	
8-14	1653-1654	s	_	_	
8-15	1655-1660	logit	_	_	
8-16	1661-1672	information	_	_	
8-17	1673-1675	or	_	_	
8-18	1676-1679	any	_	_	
8-19	1680-1685	other	_	_	
8-20	1686-1694	internal	_	_	
8-21	1695-1699	data	_	_	
8-22	1700-1703	and	_	_	
8-23	1704-1712	operates	_	_	
8-24	1713-1719	solely	_	_	
8-25	1720-1727	through	_	_	
8-26	1728-1731	the	_	_	
8-27	1732-1740	standard	_	_	
8-28	1741-1755	query-response	_	_	
8-29	1756-1765	interface	_	_	
8-30	1766-1768	of	_	_	
8-31	1769-1773	LLMs	_	_	
8-32	1773-1774	.	_	_	

#Text=Inspired by deep Q-learning and Greedy coordinate descent, the method iteratively updates tokens to maximize a designed reward function.
9-1	1775-1783	Inspired	_	_	
9-2	1784-1786	by	_	_	
9-3	1787-1791	deep	_	_	
9-4	1792-1802	Q-learning	_	_	
9-5	1803-1806	and	_	_	
9-6	1807-1813	Greedy	_	_	
9-7	1814-1824	coordinate	_	_	
9-8	1825-1832	descent	_	_	
9-9	1832-1833	,	_	_	
9-10	1834-1837	the	_	_	
9-11	1838-1844	method	_	_	
9-12	1845-1856	iteratively	_	_	
9-13	1857-1864	updates	_	_	
9-14	1865-1871	tokens	_	_	
9-15	1872-1874	to	_	_	
9-16	1875-1883	maximize	_	_	
9-17	1884-1885	a	_	_	
9-18	1886-1894	designed	_	_	
9-19	1895-1901	reward	_	_	
9-20	1902-1910	function	_	_	
9-21	1910-1911	.	_	_	

#Text=We tested our method on various LLMs such as Vicuna, Falcon, and Mistral, achieving an Attack Success Rate (ASR) over 80%.
10-1	1912-1914	We	_	_	
10-2	1915-1921	tested	_	_	
10-3	1922-1925	our	_	_	
10-4	1926-1932	method	_	_	
10-5	1933-1935	on	_	_	
10-6	1936-1943	various	_	_	
10-7	1944-1948	LLMs	_	_	
10-8	1949-1953	such	_	_	
10-9	1954-1956	as	_	_	
10-10	1957-1963	Vicuna	*	SOFTWARE	
10-11	1963-1964	,	_	_	
10-12	1965-1971	Falcon	*	SOFTWARE	
10-13	1971-1972	,	_	_	
10-14	1973-1976	and	_	_	
10-15	1977-1984	Mistral	*	SOFTWARE	
10-16	1984-1985	,	_	_	
10-17	1986-1995	achieving	_	_	
10-18	1996-1998	an	_	_	
10-19	1999-2005	Attack	*[4]	EVALMETRIC[4]	
10-20	2006-2013	Success	*[4]	EVALMETRIC[4]	
10-21	2014-2018	Rate	*[4]	EVALMETRIC[4]	
10-22	2019-2020	(	_	_	
10-23	2020-2023	ASR	*	EVALMETRIC	
10-24	2023-2024	)	_	_	
10-25	2025-2029	over	_	_	
10-26	2030-2033	80%	_	_	
10-27	2033-2034	.	_	_	

#Text=We also tested the model against Llama2-chat, the fine-tuned version of Llama2 designed to resist Jailbreak attacks, achieving good ASR with a suboptimal initial trigger seed.
11-1	2035-2037	We	_	_	
11-2	2038-2042	also	_	_	
11-3	2043-2049	tested	_	_	
11-4	2050-2053	the	_	_	
11-5	2054-2059	model	_	_	
11-6	2060-2067	against	_	_	
11-7	2068-2074	Llama2	*[5]	SOFTWARE[5]	
11-8	2074-2075	-	*[5]	SOFTWARE[5]	
11-9	2075-2079	chat	*[5]	SOFTWARE[5]	
11-10	2079-2080	,	_	_	
11-11	2081-2084	the	_	_	
11-12	2085-2095	fine-tuned	_	_	
11-13	2096-2103	version	_	_	
11-14	2104-2106	of	_	_	
11-15	2107-2113	Llama2	*	SOFTWARE	
11-16	2114-2122	designed	_	_	
11-17	2123-2125	to	_	_	
11-18	2126-2132	resist	_	_	
11-19	2133-2142	Jailbreak	_	_	
11-20	2143-2150	attacks	_	_	
11-21	2150-2151	,	_	_	
11-22	2152-2161	achieving	_	_	
11-23	2162-2166	good	_	_	
11-24	2167-2170	ASR	*	EVALMETRIC	
11-25	2171-2175	with	_	_	
11-26	2176-2177	a	_	_	
11-27	2178-2188	suboptimal	_	_	
11-28	2189-2196	initial	_	_	
11-29	2197-2204	trigger	_	_	
11-30	2205-2209	seed	_	_	
11-31	2209-2210	.	_	_	

#Text=This study demonstrates the feasibility of generating jailbreak attacks against deployed LLMs in the public domain using black-box optimization methods, enabling more comprehensive safety testing of LLMs
#Text=
#Text=
#Text=!
12-1	2211-2215	This	_	_	
12-2	2216-2221	study	_	_	
12-3	2222-2234	demonstrates	_	_	
12-4	2235-2238	the	_	_	
12-5	2239-2250	feasibility	_	_	
12-6	2251-2253	of	_	_	
12-7	2254-2264	generating	_	_	
12-8	2265-2274	jailbreak	_	_	
12-9	2275-2282	attacks	_	_	
12-10	2283-2290	against	_	_	
12-11	2291-2299	deployed	_	_	
12-12	2300-2304	LLMs	_	_	
12-13	2305-2307	in	_	_	
12-14	2308-2311	the	_	_	
12-15	2312-2318	public	_	_	
12-16	2319-2325	domain	_	_	
12-17	2326-2331	using	_	_	
12-18	2332-2341	black-box	_	_	
12-19	2342-2354	optimization	_	_	
12-20	2355-2362	methods	_	_	
12-21	2362-2363	,	_	_	
12-22	2364-2372	enabling	_	_	
12-23	2373-2377	more	_	_	
12-24	2378-2391	comprehensive	_	_	
12-25	2392-2398	safety	_	_	
12-26	2399-2406	testing	_	_	
12-27	2407-2409	of	_	_	
12-28	2410-2414	LLMs	_	_	
12-29	2417-2418	!	_	_	

#Text=[QROA](img/qroa.png)
#Text=
#Text=## ‚öôÔ∏è Installation
#Text=
#Text=1.
13-1	2418-2419	[	_	_	
13-2	2419-2423	QROA	_	_	
13-3	2423-2424	]	_	_	
13-4	2424-2425	(	_	_	
13-5	2425-2428	img	_	_	
13-6	2428-2429	/	_	_	
13-7	2429-2437	qroa.png	_	_	
13-8	2437-2438	)	_	_	
13-9	2440-2441	#	_	_	
13-10	2441-2442	#	_	_	
13-11	2443-2445	‚öôÔ∏è	_	_	
13-12	2446-2458	Installation	_	_	
13-13	2460-2461	1	_	_	
13-14	2461-2462	.	_	_	

#Text=Clone the repository:
#Text=
#Text=    ```bash
#Text=    git clone https://github.com/qroa/qroa.git
#Text=    cd qroa
#Text=    ```
#Text=
#Text=2.
14-1	2463-2468	Clone	_	_	
14-2	2469-2472	the	_	_	
14-3	2473-2483	repository	_	_	
14-4	2483-2484	:	_	_	
14-5	2490-2491	`	_	_	
14-6	2491-2492	`	_	_	
14-7	2492-2493	`	_	_	
14-8	2493-2497	bash	*	PROGLANG	
14-9	2502-2505	git	*	SOFTWARE	
14-10	2506-2511	clone	_	_	
14-11	2512-2517	https	_	_	
14-12	2517-2518	:	_	_	
14-13	2518-2519	/	_	_	
14-14	2519-2520	/	_	_	
14-15	2520-2530	github.com	_	_	
14-16	2530-2531	/	_	_	
14-17	2531-2535	qroa	_	_	
14-18	2535-2536	/	_	_	
14-19	2536-2544	qroa.git	_	_	
14-20	2549-2551	cd	_	_	
14-21	2552-2556	qroa	_	_	
14-22	2561-2562	`	_	_	
14-23	2562-2563	`	_	_	
14-24	2563-2564	`	_	_	
14-25	2566-2567	2	_	_	
14-26	2567-2568	.	_	_	

#Text=Install the required packages:
#Text=
#Text=    ```bash
#Text=    pip install -r requirements.txt
#Text=    ```
#Text=
#Text=## üöÄ Usage
#Text=
#Text=
#Text=### ‚öîÔ∏è Running the Attack
#Text=
#Text=To run the script, you need to provide the path to the input file containing the instructions.
15-1	2569-2576	Install	_	_	
15-2	2577-2580	the	_	_	
15-3	2581-2589	required	_	_	
15-4	2590-2598	packages	_	_	
15-5	2598-2599	:	_	_	
15-6	2605-2606	`	_	_	
15-7	2606-2607	`	_	_	
15-8	2607-2608	`	_	_	
15-9	2608-2612	bash	*	PROGLANG	
15-10	2617-2620	pip	*	SOFTWARE	
15-11	2621-2628	install	_	_	
15-12	2629-2630	-	_	_	
15-13	2630-2631	r	_	_	
15-14	2632-2648	requirements.txt	_	_	
15-15	2653-2654	`	_	_	
15-16	2654-2655	`	_	_	
15-17	2655-2656	`	_	_	
15-18	2658-2659	#	_	_	
15-19	2659-2660	#	_	_	
15-20	2661-2663	üöÄ	_	_	
15-21	2664-2669	Usage	_	_	
15-22	2672-2673	#	_	_	
15-23	2673-2674	#	_	_	
15-24	2674-2675	#	_	_	
15-25	2676-2678	‚öîÔ∏è	_	_	
15-26	2679-2686	Running	_	_	
15-27	2687-2690	the	_	_	
15-28	2691-2697	Attack	_	_	
15-29	2699-2701	To	_	_	
15-30	2702-2705	run	_	_	
15-31	2706-2709	the	_	_	
15-32	2710-2716	script	_	_	
15-33	2716-2717	,	_	_	
15-34	2718-2721	you	_	_	
15-35	2722-2726	need	_	_	
15-36	2727-2729	to	_	_	
15-37	2730-2737	provide	_	_	
15-38	2738-2741	the	_	_	
15-39	2742-2746	path	_	_	
15-40	2747-2749	to	_	_	
15-41	2750-2753	the	_	_	
15-42	2754-2759	input	_	_	
15-43	2760-2764	file	_	_	
15-44	2765-2775	containing	_	_	
15-45	2776-2779	the	_	_	
15-46	2780-2792	instructions	_	_	
15-47	2792-2793	.	_	_	

#Text=The input file should be in CSV format.
16-1	2794-2797	The	_	_	
16-2	2798-2803	input	_	_	
16-3	2804-2808	file	_	_	
16-4	2809-2815	should	_	_	
16-5	2816-2818	be	_	_	
16-6	2819-2821	in	_	_	
16-7	2822-2825	CSV	_	_	
16-8	2826-2832	format	_	_	
16-9	2832-2833	.	_	_	

#Text=Run the script from the command line by specifying the path to the instruction file and the authentication token:
#Text=
#Text=```bash
#Text=python main.py data/instructions.csv [API_AUTH_TOKEN]
#Text=```
#Text=
#Text=Replace `instructions.csv` with the path to your text file containing the instructions, and `API_AUTH_TOKEN` with the actual authentication token.
#Text=
#Text=### üß† Supported Models
#Text=
#Text=You can test the following models with QROA:
#Text=
#Text=- **Llama2-chat** (`llama2_chat_hf`)
#Text=- **Llama2** (`llama2_hf`)
#Text=- **Vicuna** (`vicuna_hf`)
#Text=- **Mistral** (`mistral_hf`)
#Text=- **Falcon** (`falcon_hf`)
#Text=- **OpenAI GPT** (`openai-0613`)
#Text=- **Mistral Next** (`mistral`)
#Text=
#Text=Simply change the `model` parameter in the `main` function to the desired model.
#Text=
#Text=### üß™ Demo and Testing Model Generation
#Text=- **Notebook Demo:** Run `demo.ipynb` to see a demonstration of the process.
#Text=- **Notebook Analysis Experiement:** Run `analysis.ipynb` to analyse results and calculate metrics value (ASR).
#Text=- **Testing Model:** Generation: Execute `generate.py` to test the generation process on custom instructions and triggers.
17-1	2834-2837	Run	_	_	
17-2	2838-2841	the	_	_	
17-3	2842-2848	script	_	_	
17-4	2849-2853	from	_	_	
17-5	2854-2857	the	_	_	
17-6	2858-2865	command	_	_	
17-7	2866-2870	line	_	_	
17-8	2871-2873	by	_	_	
17-9	2874-2884	specifying	_	_	
17-10	2885-2888	the	_	_	
17-11	2889-2893	path	_	_	
17-12	2894-2896	to	_	_	
17-13	2897-2900	the	_	_	
17-14	2901-2912	instruction	_	_	
17-15	2913-2917	file	_	_	
17-16	2918-2921	and	_	_	
17-17	2922-2925	the	_	_	
17-18	2926-2940	authentication	_	_	
17-19	2941-2946	token	_	_	
17-20	2946-2947	:	_	_	
17-21	2949-2950	`	_	_	
17-22	2950-2951	`	_	_	
17-23	2951-2952	`	_	_	
17-24	2952-2956	bash	*	PROGLANG	
17-25	2957-2963	python	*	SOFTWARE	
17-26	2964-2971	main.py	_	_	
17-27	2972-2976	data	_	_	
17-28	2976-2977	/	_	_	
17-29	2977-2993	instructions.csv	_	_	
17-30	2994-2995	[	_	_	
17-31	2995-3009	API_AUTH_TOKEN	_	_	
17-32	3009-3010	]	_	_	
17-33	3011-3012	`	_	_	
17-34	3012-3013	`	_	_	
17-35	3013-3014	`	_	_	
17-36	3016-3023	Replace	_	_	
17-37	3024-3025	`	_	_	
17-38	3025-3041	instructions.csv	_	_	
17-39	3041-3042	`	_	_	
17-40	3043-3047	with	_	_	
17-41	3048-3051	the	_	_	
17-42	3052-3056	path	_	_	
17-43	3057-3059	to	_	_	
17-44	3060-3064	your	_	_	
17-45	3065-3069	text	_	_	
17-46	3070-3074	file	_	_	
17-47	3075-3085	containing	_	_	
17-48	3086-3089	the	_	_	
17-49	3090-3102	instructions	_	_	
17-50	3102-3103	,	_	_	
17-51	3104-3107	and	_	_	
17-52	3108-3109	`	_	_	
17-53	3109-3123	API_AUTH_TOKEN	_	_	
17-54	3123-3124	`	_	_	
17-55	3125-3129	with	_	_	
17-56	3130-3133	the	_	_	
17-57	3134-3140	actual	_	_	
17-58	3141-3155	authentication	_	_	
17-59	3156-3161	token	_	_	
17-60	3161-3162	.	_	_	
17-61	3164-3165	#	_	_	
17-62	3165-3166	#	_	_	
17-63	3166-3167	#	_	_	
17-64	3168-3170	üß†	_	_	
17-65	3171-3180	Supported	_	_	
17-66	3181-3187	Models	_	_	
17-67	3189-3192	You	_	_	
17-68	3193-3196	can	_	_	
17-69	3197-3201	test	_	_	
17-70	3202-3205	the	_	_	
17-71	3206-3215	following	_	_	
17-72	3216-3222	models	_	_	
17-73	3223-3227	with	_	_	
17-74	3228-3232	QROA	_	_	
17-75	3232-3233	:	_	_	
17-76	3235-3236	-	_	_	
17-77	3237-3238	*	_	_	
17-78	3238-3239	*	_	_	
17-79	3239-3245	Llama2	*[6]	SOFTWARE[6]	
17-80	3245-3246	-	*[6]	SOFTWARE[6]	
17-81	3246-3250	chat	*[6]	SOFTWARE[6]	
17-82	3250-3251	*	_	_	
17-83	3251-3252	*	_	_	
17-84	3253-3254	(	_	_	
17-85	3254-3255	`	_	_	
17-86	3255-3261	llama2	_	_	
17-87	3261-3262	_	_	_	
17-88	3262-3269	chat_hf	_	_	
17-89	3269-3270	`	_	_	
17-90	3270-3271	)	_	_	
17-91	3272-3273	-	_	_	
17-92	3274-3275	*	_	_	
17-93	3275-3276	*	_	_	
17-94	3276-3282	Llama2	*	SOFTWARE	
17-95	3282-3283	*	_	_	
17-96	3283-3284	*	_	_	
17-97	3285-3286	(	_	_	
17-98	3286-3287	`	_	_	
17-99	3287-3293	llama2	_	_	
17-100	3293-3294	_	_	_	
17-101	3294-3296	hf	_	_	
17-102	3296-3297	`	_	_	
17-103	3297-3298	)	_	_	
17-104	3299-3300	-	_	_	
17-105	3301-3302	*	_	_	
17-106	3302-3303	*	_	_	
17-107	3303-3309	Vicuna	*	SOFTWARE	
17-108	3309-3310	*	_	_	
17-109	3310-3311	*	_	_	
17-110	3312-3313	(	_	_	
17-111	3313-3314	`	_	_	
17-112	3314-3323	vicuna_hf	_	_	
17-113	3323-3324	`	_	_	
17-114	3324-3325	)	_	_	
17-115	3326-3327	-	_	_	
17-116	3328-3329	*	_	_	
17-117	3329-3330	*	_	_	
17-118	3330-3337	Mistral	*	SOFTWARE	
17-119	3337-3338	*	_	_	
17-120	3338-3339	*	_	_	
17-121	3340-3341	(	_	_	
17-122	3341-3342	`	_	_	
17-123	3342-3352	mistral_hf	_	_	
17-124	3352-3353	`	_	_	
17-125	3353-3354	)	_	_	
17-126	3355-3356	-	_	_	
17-127	3357-3358	*	_	_	
17-128	3358-3359	*	_	_	
17-129	3359-3365	Falcon	*	SOFTWARE	
17-130	3365-3366	*	_	_	
17-131	3366-3367	*	_	_	
17-132	3368-3369	(	_	_	
17-133	3369-3370	`	_	_	
17-134	3370-3379	falcon_hf	_	_	
17-135	3379-3380	`	_	_	
17-136	3380-3381	)	_	_	
17-137	3382-3383	-	_	_	
17-138	3384-3385	*	_	_	
17-139	3385-3386	*	_	_	
17-140	3386-3392	OpenAI	*[7]	SOFTWARE[7]	
17-141	3393-3396	GPT	*[7]	SOFTWARE[7]	
17-142	3396-3397	*	_	_	
17-143	3397-3398	*	_	_	
17-144	3399-3400	(	_	_	
17-145	3400-3401	`	_	_	
17-146	3401-3407	openai	_	_	
17-147	3407-3408	-	_	_	
17-148	3408-3412	0613	_	_	
17-149	3412-3413	`	_	_	
17-150	3413-3414	)	_	_	
17-151	3415-3416	-	_	_	
17-152	3417-3418	*	_	_	
17-153	3418-3419	*	_	_	
17-154	3419-3426	Mistral	_	_	
17-155	3427-3431	Next	_	_	
17-156	3431-3432	*	_	_	
17-157	3432-3433	*	_	_	
17-158	3434-3435	(	_	_	
17-159	3435-3436	`	_	_	
17-160	3436-3443	mistral	_	_	
17-161	3443-3444	`	_	_	
17-162	3444-3445	)	_	_	
17-163	3447-3453	Simply	_	_	
17-164	3454-3460	change	_	_	
17-165	3461-3464	the	_	_	
17-166	3465-3466	`	_	_	
17-167	3466-3471	model	_	_	
17-168	3471-3472	`	_	_	
17-169	3473-3482	parameter	_	_	
17-170	3483-3485	in	_	_	
17-171	3486-3489	the	_	_	
17-172	3490-3491	`	_	_	
17-173	3491-3495	main	_	_	
17-174	3495-3496	`	_	_	
17-175	3497-3505	function	_	_	
17-176	3506-3508	to	_	_	
17-177	3509-3512	the	_	_	
17-178	3513-3520	desired	_	_	
17-179	3521-3526	model	_	_	
17-180	3526-3527	.	_	_	
17-181	3529-3530	#	_	_	
17-182	3530-3531	#	_	_	
17-183	3531-3532	#	_	_	
17-184	3533-3535	üß™	_	_	
17-185	3536-3540	Demo	_	_	
17-186	3541-3544	and	_	_	
17-187	3545-3552	Testing	_	_	
17-188	3553-3558	Model	_	_	
17-189	3559-3569	Generation	_	_	
17-190	3570-3571	-	_	_	
17-191	3572-3573	*	_	_	
17-192	3573-3574	*	_	_	
17-193	3574-3582	Notebook	_	_	
17-194	3583-3587	Demo	_	_	
17-195	3587-3588	:	_	_	
17-196	3588-3589	*	_	_	
17-197	3589-3590	*	_	_	
17-198	3591-3594	Run	_	_	
17-199	3595-3596	`	_	_	
17-200	3596-3606	demo.ipynb	_	_	
17-201	3606-3607	`	_	_	
17-202	3608-3610	to	_	_	
17-203	3611-3614	see	_	_	
17-204	3615-3616	a	_	_	
17-205	3617-3630	demonstration	_	_	
17-206	3631-3633	of	_	_	
17-207	3634-3637	the	_	_	
17-208	3638-3645	process	_	_	
17-209	3645-3646	.	_	_	
17-210	3647-3648	-	_	_	
17-211	3649-3650	*	_	_	
17-212	3650-3651	*	_	_	
17-213	3651-3659	Notebook	_	_	
17-214	3660-3668	Analysis	_	_	
17-215	3669-3680	Experiement	_	_	
17-216	3680-3681	:	_	_	
17-217	3681-3682	*	_	_	
17-218	3682-3683	*	_	_	
17-219	3684-3687	Run	_	_	
17-220	3688-3689	`	_	_	
17-221	3689-3703	analysis.ipynb	_	_	
17-222	3703-3704	`	_	_	
17-223	3705-3707	to	_	_	
17-224	3708-3715	analyse	_	_	
17-225	3716-3723	results	_	_	
17-226	3724-3727	and	_	_	
17-227	3728-3737	calculate	_	_	
17-228	3738-3745	metrics	_	_	
17-229	3746-3751	value	_	_	
17-230	3752-3753	(	_	_	
17-231	3753-3756	ASR	*	EVALMETRIC	
17-232	3756-3757	)	_	_	
17-233	3757-3758	.	_	_	
17-234	3759-3760	-	_	_	
17-235	3761-3762	*	_	_	
17-236	3762-3763	*	_	_	
17-237	3763-3770	Testing	_	_	
17-238	3771-3776	Model	_	_	
17-239	3776-3777	:	_	_	
17-240	3777-3778	*	_	_	
17-241	3778-3779	*	_	_	
17-242	3780-3790	Generation	_	_	
17-243	3790-3791	:	_	_	
17-244	3792-3799	Execute	_	_	
17-245	3800-3801	`	_	_	
17-246	3801-3812	generate.py	_	_	
17-247	3812-3813	`	_	_	
17-248	3814-3816	to	_	_	
17-249	3817-3821	test	_	_	
17-250	3822-3825	the	_	_	
17-251	3826-3836	generation	_	_	
17-252	3837-3844	process	_	_	
17-253	3845-3847	on	_	_	
17-254	3848-3854	custom	_	_	
17-255	3855-3867	instructions	_	_	
17-256	3868-3871	and	_	_	
17-257	3872-3880	triggers	_	_	
17-258	3880-3881	.	_	_	

#Text=This script can be run from the command line as follows:
#Text=
#Text=```bash
#Text=python generate.py -auth_token [API_AUTH_TOKEN] -instruction [THE INSTRUCTION HERE] -suffix [THE SUFFIX HERE]
#Text=```
#Text=
#Text=Where: 
#Text=
#Text=- **auth_token:** Authentication token required for accessing the model.
#Text=- **instruction:** The specific instruction you want the model to follow.
#Text=- **suffix:** The adversarial trigger that, when appended to the instruction, causes the LLM to obey the instruction.
#Text=
#Text=### üìÅ Output Files
#Text=The following output files are generated during the execution of the script:
#Text=
#Text=Generated and validated triggers are saved in JSON format:
#Text=
#Text=- **Generated Triggers:** `.
18-1	3883-3887	This	_	_	
18-2	3888-3894	script	_	_	
18-3	3895-3898	can	_	_	
18-4	3899-3901	be	_	_	
18-5	3902-3905	run	_	_	
18-6	3906-3910	from	_	_	
18-7	3911-3914	the	_	_	
18-8	3915-3922	command	_	_	
18-9	3923-3927	line	_	_	
18-10	3928-3930	as	_	_	
18-11	3931-3938	follows	_	_	
18-12	3938-3939	:	_	_	
18-13	3941-3942	`	_	_	
18-14	3942-3943	`	_	_	
18-15	3943-3944	`	_	_	
18-16	3944-3948	bash	*	PROGLANG	
18-17	3949-3955	python	*	SOFTWARE	
18-18	3956-3967	generate.py	_	_	
18-19	3968-3969	-	_	_	
18-20	3969-3979	auth_token	_	_	
18-21	3980-3981	[	_	_	
18-22	3981-3995	API_AUTH_TOKEN	_	_	
18-23	3995-3996	]	_	_	
18-24	3997-3998	-	_	_	
18-25	3998-4009	instruction	_	_	
18-26	4010-4011	[	_	_	
18-27	4011-4014	THE	_	_	
18-28	4015-4026	INSTRUCTION	_	_	
18-29	4027-4031	HERE	_	_	
18-30	4031-4032	]	_	_	
18-31	4033-4034	-	_	_	
18-32	4034-4040	suffix	_	_	
18-33	4041-4042	[	_	_	
18-34	4042-4045	THE	_	_	
18-35	4046-4052	SUFFIX	_	_	
18-36	4053-4057	HERE	_	_	
18-37	4057-4058	]	_	_	
18-38	4059-4060	`	_	_	
18-39	4060-4061	`	_	_	
18-40	4061-4062	`	_	_	
18-41	4064-4069	Where	_	_	
18-42	4069-4070	:	_	_	
18-43	4073-4074	-	_	_	
18-44	4075-4076	*	_	_	
18-45	4076-4077	*	_	_	
18-46	4077-4087	auth_token	_	_	
18-47	4087-4088	:	_	_	
18-48	4088-4089	*	_	_	
18-49	4089-4090	*	_	_	
18-50	4091-4105	Authentication	_	_	
18-51	4106-4111	token	_	_	
18-52	4112-4120	required	_	_	
18-53	4121-4124	for	_	_	
18-54	4125-4134	accessing	_	_	
18-55	4135-4138	the	_	_	
18-56	4139-4144	model	_	_	
18-57	4144-4145	.	_	_	
18-58	4146-4147	-	_	_	
18-59	4148-4149	*	_	_	
18-60	4149-4150	*	_	_	
18-61	4150-4161	instruction	_	_	
18-62	4161-4162	:	_	_	
18-63	4162-4163	*	_	_	
18-64	4163-4164	*	_	_	
18-65	4165-4168	The	_	_	
18-66	4169-4177	specific	_	_	
18-67	4178-4189	instruction	_	_	
18-68	4190-4193	you	_	_	
18-69	4194-4198	want	_	_	
18-70	4199-4202	the	_	_	
18-71	4203-4208	model	_	_	
18-72	4209-4211	to	_	_	
18-73	4212-4218	follow	_	_	
18-74	4218-4219	.	_	_	
18-75	4220-4221	-	_	_	
18-76	4222-4223	*	_	_	
18-77	4223-4224	*	_	_	
18-78	4224-4230	suffix	_	_	
18-79	4230-4231	:	_	_	
18-80	4231-4232	*	_	_	
18-81	4232-4233	*	_	_	
18-82	4234-4237	The	_	_	
18-83	4238-4249	adversarial	_	_	
18-84	4250-4257	trigger	_	_	
18-85	4258-4262	that	_	_	
18-86	4262-4263	,	_	_	
18-87	4264-4268	when	_	_	
18-88	4269-4277	appended	_	_	
18-89	4278-4280	to	_	_	
18-90	4281-4284	the	_	_	
18-91	4285-4296	instruction	_	_	
18-92	4296-4297	,	_	_	
18-93	4298-4304	causes	_	_	
18-94	4305-4308	the	_	_	
18-95	4309-4312	LLM	_	_	
18-96	4313-4315	to	_	_	
18-97	4316-4320	obey	_	_	
18-98	4321-4324	the	_	_	
18-99	4325-4336	instruction	_	_	
18-100	4336-4337	.	_	_	
18-101	4339-4340	#	_	_	
18-102	4340-4341	#	_	_	
18-103	4341-4342	#	_	_	
18-104	4343-4345	üìÅ	_	_	
18-105	4346-4352	Output	_	_	
18-106	4353-4358	Files	_	_	
18-107	4359-4362	The	_	_	
18-108	4363-4372	following	_	_	
18-109	4373-4379	output	_	_	
18-110	4380-4385	files	_	_	
18-111	4386-4389	are	_	_	
18-112	4390-4399	generated	_	_	
18-113	4400-4406	during	_	_	
18-114	4407-4410	the	_	_	
18-115	4411-4420	execution	_	_	
18-116	4421-4423	of	_	_	
18-117	4424-4427	the	_	_	
18-118	4428-4434	script	_	_	
18-119	4434-4435	:	_	_	
18-120	4437-4446	Generated	_	_	
18-121	4447-4450	and	_	_	
18-122	4451-4460	validated	_	_	
18-123	4461-4469	triggers	_	_	
18-124	4470-4473	are	_	_	
18-125	4474-4479	saved	_	_	
18-126	4480-4482	in	_	_	
18-127	4483-4487	JSON	_	_	
18-128	4488-4494	format	_	_	
18-129	4494-4495	:	_	_	
18-130	4497-4498	-	_	_	
18-131	4499-4500	*	_	_	
18-132	4500-4501	*	_	_	
18-133	4501-4510	Generated	_	_	
18-134	4511-4519	Triggers	_	_	
18-135	4519-4520	:	_	_	
18-136	4520-4521	*	_	_	
18-137	4521-4522	*	_	_	
18-138	4523-4524	`	_	_	
18-139	4524-4525	.	_	_	

#Text=/results/[MODEL_NAME]/triggers.json`  : Contains the triggers generated by the model.
#Text=- **Validated Triggers:** `.
19-1	4525-4526	/	_	_	
19-2	4526-4533	results	_	_	
19-3	4533-4534	/	_	_	
19-4	4534-4535	[	_	_	
19-5	4535-4545	MODEL_NAME	_	_	
19-6	4545-4546	]	_	_	
19-7	4546-4547	/	_	_	
19-8	4547-4560	triggers.json	_	_	
19-9	4560-4561	`	_	_	
19-10	4563-4564	:	_	_	
19-11	4565-4573	Contains	_	_	
19-12	4574-4577	the	_	_	
19-13	4578-4586	triggers	_	_	
19-14	4587-4596	generated	_	_	
19-15	4597-4599	by	_	_	
19-16	4600-4603	the	_	_	
19-17	4604-4609	model	_	_	
19-18	4609-4610	.	_	_	
19-19	4611-4612	-	_	_	
19-20	4613-4614	*	_	_	
19-21	4614-4615	*	_	_	
19-22	4615-4624	Validated	_	_	
19-23	4625-4633	Triggers	_	_	
19-24	4633-4634	:	_	_	
19-25	4634-4635	*	_	_	
19-26	4635-4636	*	_	_	
19-27	4637-4638	`	_	_	
19-28	4638-4639	.	_	_	

#Text=/results/[MODEL_NAME]/triggers_validate.json` : Contains the triggers validated after applying the z test.
20-1	4639-4640	/	_	_	
20-2	4640-4647	results	_	_	
20-3	4647-4648	/	_	_	
20-4	4648-4649	[	_	_	
20-5	4649-4659	MODEL_NAME	_	_	
20-6	4659-4660	]	_	_	
20-7	4660-4661	/	_	_	
20-8	4661-4683	triggers_validate.json	_	_	
20-9	4683-4684	`	_	_	
20-10	4685-4686	:	_	_	
20-11	4687-4695	Contains	_	_	
20-12	4696-4699	the	_	_	
20-13	4700-4708	triggers	_	_	
20-14	4709-4718	validated	_	_	
20-15	4719-4724	after	_	_	
20-16	4725-4733	applying	_	_	
20-17	4734-4737	the	_	_	
20-18	4738-4739	z	_	_	
20-19	4740-4744	test	_	_	
20-20	4744-4745	.	_	_	

#Text=Logs for generation and validation processes are also available:
#Text=
#Text=- **Trigger Generation Logs:** `.
21-1	4747-4751	Logs	_	_	
21-2	4752-4755	for	_	_	
21-3	4756-4766	generation	_	_	
21-4	4767-4770	and	_	_	
21-5	4771-4781	validation	_	_	
21-6	4782-4791	processes	_	_	
21-7	4792-4795	are	_	_	
21-8	4796-4800	also	_	_	
21-9	4801-4810	available	_	_	
21-10	4810-4811	:	_	_	
21-11	4813-4814	-	_	_	
21-12	4815-4816	*	_	_	
21-13	4816-4817	*	_	_	
21-14	4817-4824	Trigger	_	_	
21-15	4825-4835	Generation	_	_	
21-16	4836-4840	Logs	_	_	
21-17	4840-4841	:	_	_	
21-18	4841-4842	*	_	_	
21-19	4842-4843	*	_	_	
21-20	4844-4845	`	_	_	
21-21	4845-4846	.	_	_	

#Text=/logs/[MODEL_NAME]/logging_generator.csv` : Logs the process of trigger generation.
#Text=- **Trigger Validation Logs:** `.
22-1	4846-4847	/	_	_	
22-2	4847-4851	logs	_	_	
22-3	4851-4852	/	_	_	
22-4	4852-4853	[	_	_	
22-5	4853-4863	MODEL_NAME	_	_	
22-6	4863-4864	]	_	_	
22-7	4864-4865	/	_	_	
22-8	4865-4886	logging_generator.csv	_	_	
22-9	4886-4887	`	_	_	
22-10	4888-4889	:	_	_	
22-11	4890-4894	Logs	_	_	
22-12	4895-4898	the	_	_	
22-13	4899-4906	process	_	_	
22-14	4907-4909	of	_	_	
22-15	4910-4917	trigger	_	_	
22-16	4918-4928	generation	_	_	
22-17	4928-4929	.	_	_	
22-18	4930-4931	-	_	_	
22-19	4932-4933	*	_	_	
22-20	4933-4934	*	_	_	
22-21	4934-4941	Trigger	_	_	
22-22	4942-4952	Validation	_	_	
22-23	4953-4957	Logs	_	_	
22-24	4957-4958	:	_	_	
22-25	4958-4959	*	_	_	
22-26	4959-4960	*	_	_	
22-27	4961-4962	`	_	_	
22-28	4962-4963	.	_	_	

#Text=/logs/[MODEL_NAME]/logging_validator.csv` : Logs the process of validating the triggers with the z test.
#Text=
#Text=## üîß Configuration Settings
#Text=
#Text=The following table outlines the configuration settings for the JailBreak process.
23-1	4963-4964	/	_	_	
23-2	4964-4968	logs	_	_	
23-3	4968-4969	/	_	_	
23-4	4969-4970	[	_	_	
23-5	4970-4980	MODEL_NAME	_	_	
23-6	4980-4981	]	_	_	
23-7	4981-4982	/	_	_	
23-8	4982-5003	logging_validator.csv	_	_	
23-9	5003-5004	`	_	_	
23-10	5005-5006	:	_	_	
23-11	5007-5011	Logs	_	_	
23-12	5012-5015	the	_	_	
23-13	5016-5023	process	_	_	
23-14	5024-5026	of	_	_	
23-15	5027-5037	validating	_	_	
23-16	5038-5041	the	_	_	
23-17	5042-5050	triggers	_	_	
23-18	5051-5055	with	_	_	
23-19	5056-5059	the	_	_	
23-20	5060-5061	z	_	_	
23-21	5062-5066	test	_	_	
23-22	5066-5067	.	_	_	
23-23	5069-5070	#	_	_	
23-24	5070-5071	#	_	_	
23-25	5072-5074	üîß	_	_	
23-26	5075-5088	Configuration	_	_	
23-27	5089-5097	Settings	_	_	
23-28	5099-5102	The	_	_	
23-29	5103-5112	following	_	_	
23-30	5113-5118	table	_	_	
23-31	5119-5127	outlines	_	_	
23-32	5128-5131	the	_	_	
23-33	5132-5145	configuration	_	_	
23-34	5146-5154	settings	_	_	
23-35	5155-5158	for	_	_	
23-36	5159-5162	the	_	_	
23-37	5163-5172	JailBreak	_	_	
23-38	5173-5180	process	_	_	
23-39	5180-5181	.	_	_	

#Text=Each parameter plays a role in the setup and execution of the process:
#Text=
#Text=| Parameter              | Description |
#Text=|------------------------|-------------|
#Text=| `model`                | Specifies the Large Language Model (LLM) to be used for the attack, such as 'vicuna_hf', 'falcon_hf', etc.|
#Text=| `apply_defense_methods`| A boolean parameter that determines whether defense methods are activated to protect the model during the JailBreak process.|
#Text=| `auth_token`           | Authentication token required for accessing the model.
24-1	5182-5186	Each	_	_	
24-2	5187-5196	parameter	_	_	
24-3	5197-5202	plays	_	_	
24-4	5203-5204	a	_	_	
24-5	5205-5209	role	_	_	
24-6	5210-5212	in	_	_	
24-7	5213-5216	the	_	_	
24-8	5217-5222	setup	_	_	
24-9	5223-5226	and	_	_	
24-10	5227-5236	execution	_	_	
24-11	5237-5239	of	_	_	
24-12	5240-5243	the	_	_	
24-13	5244-5251	process	_	_	
24-14	5251-5252	:	_	_	
24-15	5254-5255	|	_	_	
24-16	5256-5265	Parameter	_	_	
24-17	5279-5280	|	_	_	
24-18	5281-5292	Description	_	_	
24-19	5293-5294	|	_	_	
24-20	5295-5296	|	_	_	
24-21	5296-5297	-	_	_	
24-22	5297-5298	-	_	_	
24-23	5298-5299	-	_	_	
24-24	5299-5300	-	_	_	
24-25	5300-5301	-	_	_	
24-26	5301-5302	-	_	_	
24-27	5302-5303	-	_	_	
24-28	5303-5304	-	_	_	
24-29	5304-5305	-	_	_	
24-30	5305-5306	-	_	_	
24-31	5306-5307	-	_	_	
24-32	5307-5308	-	_	_	
24-33	5308-5309	-	_	_	
24-34	5309-5310	-	_	_	
24-35	5310-5311	-	_	_	
24-36	5311-5312	-	_	_	
24-37	5312-5313	-	_	_	
24-38	5313-5314	-	_	_	
24-39	5314-5315	-	_	_	
24-40	5315-5316	-	_	_	
24-41	5316-5317	-	_	_	
24-42	5317-5318	-	_	_	
24-43	5318-5319	-	_	_	
24-44	5319-5320	-	_	_	
24-45	5320-5321	|	_	_	
24-46	5321-5322	-	_	_	
24-47	5322-5323	-	_	_	
24-48	5323-5324	-	_	_	
24-49	5324-5325	-	_	_	
24-50	5325-5326	-	_	_	
24-51	5326-5327	-	_	_	
24-52	5327-5328	-	_	_	
24-53	5328-5329	-	_	_	
24-54	5329-5330	-	_	_	
24-55	5330-5331	-	_	_	
24-56	5331-5332	-	_	_	
24-57	5332-5333	-	_	_	
24-58	5333-5334	-	_	_	
24-59	5334-5335	|	_	_	
24-60	5336-5337	|	_	_	
24-61	5338-5339	`	_	_	
24-62	5339-5344	model	_	_	
24-63	5344-5345	`	_	_	
24-64	5361-5362	|	_	_	
24-65	5363-5372	Specifies	_	_	
24-66	5373-5376	the	_	_	
24-67	5377-5382	Large	_	_	
24-68	5383-5391	Language	_	_	
24-69	5392-5397	Model	_	_	
24-70	5398-5399	(	_	_	
24-71	5399-5402	LLM	_	_	
24-72	5402-5403	)	_	_	
24-73	5404-5406	to	_	_	
24-74	5407-5409	be	_	_	
24-75	5410-5414	used	_	_	
24-76	5415-5418	for	_	_	
24-77	5419-5422	the	_	_	
24-78	5423-5429	attack	_	_	
24-79	5429-5430	,	_	_	
24-80	5431-5435	such	_	_	
24-81	5436-5438	as	_	_	
24-82	5439-5440	'	_	_	
24-83	5440-5449	vicuna_hf	*	SOFTWARE	
24-84	5449-5450	'	_	_	
24-85	5450-5451	,	_	_	
24-86	5452-5453	'	_	_	
24-87	5453-5462	falcon_hf	*	SOFTWARE	
24-88	5462-5463	'	_	_	
24-89	5463-5464	,	_	_	
24-90	5465-5468	etc	_	_	
24-91	5468-5469	.	_	_	
24-92	5469-5470	|	_	_	
24-93	5471-5472	|	_	_	
24-94	5473-5474	`	_	_	
24-95	5474-5495	apply_defense_methods	_	_	
24-96	5495-5496	`	_	_	
24-97	5496-5497	|	_	_	
24-98	5498-5499	A	_	_	
24-99	5500-5507	boolean	_	_	
24-100	5508-5517	parameter	_	_	
24-101	5518-5522	that	_	_	
24-102	5523-5533	determines	_	_	
24-103	5534-5541	whether	_	_	
24-104	5542-5549	defense	_	_	
24-105	5550-5557	methods	_	_	
24-106	5558-5561	are	_	_	
24-107	5562-5571	activated	_	_	
24-108	5572-5574	to	_	_	
24-109	5575-5582	protect	_	_	
24-110	5583-5586	the	_	_	
24-111	5587-5592	model	_	_	
24-112	5593-5599	during	_	_	
24-113	5600-5603	the	_	_	
24-114	5604-5613	JailBreak	_	_	
24-115	5614-5621	process	_	_	
24-116	5621-5622	.	_	_	
24-117	5622-5623	|	_	_	
24-118	5624-5625	|	_	_	
24-119	5626-5627	`	_	_	
24-120	5627-5637	auth_token	_	_	
24-121	5637-5638	`	_	_	
24-122	5649-5650	|	_	_	
24-123	5651-5665	Authentication	_	_	
24-124	5666-5671	token	_	_	
24-125	5672-5680	required	_	_	
24-126	5681-5684	for	_	_	
24-127	5685-5694	accessing	_	_	
24-128	5695-5698	the	_	_	
24-129	5699-5704	model	_	_	
24-130	5704-5705	.	_	_	

#Text=This token could be from Hugging Face for accessing their models or other providers like OpenAI for closed source models. |
#Text=| `system_prompt`        | The initial message or command that initiates interaction with the LLM. |
#Text=| `embedding_model_path` | Path to the surrogate model's embedding layer. |
#Text=| `len_coordinates`      | Specifies the number of tokens in the generated trigger, defining the length of the attack vector. |
#Text=| `learning_rate`        | Learning rate for the optimizer. |
#Text=| `weight_decay`         | Weight decay (L2 penalty) for the optimizer. |
#Text=| `nb_epochs`            | The total number of training cycles through the dataset where the model learns by adjusting internal parameters. |
#Text=| `batch_size`           | Number of training examples used to calculate gradient and update internal model parameters per iteration. |
#Text=| `scoring_type`         | Method used to evaluate the effectiveness of triggers.
25-1	5706-5710	This	_	_	
25-2	5711-5716	token	_	_	
25-3	5717-5722	could	_	_	
25-4	5723-5725	be	_	_	
25-5	5726-5730	from	_	_	
25-6	5731-5738	Hugging	_	_	
25-7	5739-5743	Face	_	_	
25-8	5744-5747	for	_	_	
25-9	5748-5757	accessing	_	_	
25-10	5758-5763	their	_	_	
25-11	5764-5770	models	_	_	
25-12	5771-5773	or	_	_	
25-13	5774-5779	other	_	_	
25-14	5780-5789	providers	_	_	
25-15	5790-5794	like	_	_	
25-16	5795-5801	OpenAI	_	_	
25-17	5802-5805	for	_	_	
25-18	5806-5812	closed	_	_	
25-19	5813-5819	source	_	_	
25-20	5820-5826	models	_	_	
25-21	5826-5827	.	_	_	
25-22	5828-5829	|	_	_	
25-23	5830-5831	|	_	_	
25-24	5832-5833	`	_	_	
25-25	5833-5846	system_prompt	_	_	
25-26	5846-5847	`	_	_	
25-27	5855-5856	|	_	_	
25-28	5857-5860	The	_	_	
25-29	5861-5868	initial	_	_	
25-30	5869-5876	message	_	_	
25-31	5877-5879	or	_	_	
25-32	5880-5887	command	_	_	
25-33	5888-5892	that	_	_	
25-34	5893-5902	initiates	_	_	
25-35	5903-5914	interaction	_	_	
25-36	5915-5919	with	_	_	
25-37	5920-5923	the	_	_	
25-38	5924-5927	LLM	_	_	
25-39	5927-5928	.	_	_	
25-40	5929-5930	|	_	_	
25-41	5931-5932	|	_	_	
25-42	5933-5934	`	_	_	
25-43	5934-5954	embedding_model_path	_	_	
25-44	5954-5955	`	_	_	
25-45	5956-5957	|	_	_	
25-46	5958-5962	Path	_	_	
25-47	5963-5965	to	_	_	
25-48	5966-5969	the	_	_	
25-49	5970-5979	surrogate	_	_	
25-50	5980-5987	model's	_	_	
25-51	5988-5997	embedding	_	_	
25-52	5998-6003	layer	_	_	
25-53	6003-6004	.	_	_	
25-54	6005-6006	|	_	_	
25-55	6007-6008	|	_	_	
25-56	6009-6010	`	_	_	
25-57	6010-6025	len_coordinates	_	_	
25-58	6025-6026	`	_	_	
25-59	6032-6033	|	_	_	
25-60	6034-6043	Specifies	_	_	
25-61	6044-6047	the	_	_	
25-62	6048-6054	number	_	_	
25-63	6055-6057	of	_	_	
25-64	6058-6064	tokens	_	_	
25-65	6065-6067	in	_	_	
25-66	6068-6071	the	_	_	
25-67	6072-6081	generated	_	_	
25-68	6082-6089	trigger	_	_	
25-69	6089-6090	,	_	_	
25-70	6091-6099	defining	_	_	
25-71	6100-6103	the	_	_	
25-72	6104-6110	length	_	_	
25-73	6111-6113	of	_	_	
25-74	6114-6117	the	_	_	
25-75	6118-6124	attack	_	_	
25-76	6125-6131	vector	_	_	
25-77	6131-6132	.	_	_	
25-78	6133-6134	|	_	_	
25-79	6135-6136	|	_	_	
25-80	6137-6138	`	_	_	
25-81	6138-6151	learning_rate	_	_	
25-82	6151-6152	`	_	_	
25-83	6160-6161	|	_	_	
25-84	6162-6170	Learning	_	_	
25-85	6171-6175	rate	_	_	
25-86	6176-6179	for	_	_	
25-87	6180-6183	the	_	_	
25-88	6184-6193	optimizer	_	_	
25-89	6193-6194	.	_	_	
25-90	6195-6196	|	_	_	
25-91	6197-6198	|	_	_	
25-92	6199-6200	`	_	_	
25-93	6200-6212	weight_decay	_	_	
25-94	6212-6213	`	_	_	
25-95	6222-6223	|	_	_	
25-96	6224-6230	Weight	_	_	
25-97	6231-6236	decay	_	_	
25-98	6237-6238	(	_	_	
25-99	6238-6240	L2	_	_	
25-100	6241-6248	penalty	_	_	
25-101	6248-6249	)	_	_	
25-102	6250-6253	for	_	_	
25-103	6254-6257	the	_	_	
25-104	6258-6267	optimizer	_	_	
25-105	6267-6268	.	_	_	
25-106	6269-6270	|	_	_	
25-107	6271-6272	|	_	_	
25-108	6273-6274	`	_	_	
25-109	6274-6283	nb_epochs	_	_	
25-110	6283-6284	`	_	_	
25-111	6296-6297	|	_	_	
25-112	6298-6301	The	_	_	
25-113	6302-6307	total	_	_	
25-114	6308-6314	number	_	_	
25-115	6315-6317	of	_	_	
25-116	6318-6326	training	_	_	
25-117	6327-6333	cycles	_	_	
25-118	6334-6341	through	_	_	
25-119	6342-6345	the	_	_	
25-120	6346-6353	dataset	_	_	
25-121	6354-6359	where	_	_	
25-122	6360-6363	the	_	_	
25-123	6364-6369	model	_	_	
25-124	6370-6376	learns	_	_	
25-125	6377-6379	by	_	_	
25-126	6380-6389	adjusting	_	_	
25-127	6390-6398	internal	_	_	
25-128	6399-6409	parameters	_	_	
25-129	6409-6410	.	_	_	
25-130	6411-6412	|	_	_	
25-131	6413-6414	|	_	_	
25-132	6415-6416	`	_	_	
25-133	6416-6426	batch_size	_	_	
25-134	6426-6427	`	_	_	
25-135	6438-6439	|	_	_	
25-136	6440-6446	Number	_	_	
25-137	6447-6449	of	_	_	
25-138	6450-6458	training	_	_	
25-139	6459-6467	examples	_	_	
25-140	6468-6472	used	_	_	
25-141	6473-6475	to	_	_	
25-142	6476-6485	calculate	_	_	
25-143	6486-6494	gradient	_	_	
25-144	6495-6498	and	_	_	
25-145	6499-6505	update	_	_	
25-146	6506-6514	internal	_	_	
25-147	6515-6520	model	_	_	
25-148	6521-6531	parameters	_	_	
25-149	6532-6535	per	_	_	
25-150	6536-6545	iteration	_	_	
25-151	6545-6546	.	_	_	
25-152	6547-6548	|	_	_	
25-153	6549-6550	|	_	_	
25-154	6551-6552	`	_	_	
25-155	6552-6564	scoring_type	_	_	
25-156	6564-6565	`	_	_	
25-157	6574-6575	|	_	_	
25-158	6576-6582	Method	_	_	
25-159	6583-6587	used	_	_	
25-160	6588-6590	to	_	_	
25-161	6591-6599	evaluate	_	_	
25-162	6600-6603	the	_	_	
25-163	6604-6617	effectiveness	_	_	
25-164	6618-6620	of	_	_	
25-165	6621-6629	triggers	_	_	
25-166	6629-6630	.	_	_	

#Text=For example, 'hm' could refer to a scoring model that uses a fine-tuned RoBERTa model for detecting harmful content. |
#Text=| `max_generations_tokens` | Maximum number of tokens that the LLM is allowed to generate in response to a query during the attack. |
#Text=| `topk`                 | The top K value triggers identified in each epoch, equivalent to the number of queries sent to the target LLM. |
#Text=| `max_d`                | The maximum size of the memory buffer. |
#Text=| `ucb_c`                | The exploration-exploitation parameter for the Upper Confidence Bound (UCB) algorithm.
26-1	6631-6634	For	_	_	
26-2	6635-6642	example	_	_	
26-3	6642-6643	,	_	_	
26-4	6644-6645	'	_	_	
26-5	6645-6647	hm	_	_	
26-6	6647-6648	'	_	_	
26-7	6649-6654	could	_	_	
26-8	6655-6660	refer	_	_	
26-9	6661-6663	to	_	_	
26-10	6664-6665	a	_	_	
26-11	6666-6673	scoring	_	_	
26-12	6674-6679	model	_	_	
26-13	6680-6684	that	_	_	
26-14	6685-6689	uses	_	_	
26-15	6690-6691	a	_	_	
26-16	6692-6702	fine-tuned	_	_	
26-17	6703-6710	RoBERTa	_	_	
26-18	6711-6716	model	_	_	
26-19	6717-6720	for	_	_	
26-20	6721-6730	detecting	_	_	
26-21	6731-6738	harmful	_	_	
26-22	6739-6746	content	_	_	
26-23	6746-6747	.	_	_	
26-24	6748-6749	|	_	_	
26-25	6750-6751	|	_	_	
26-26	6752-6753	`	_	_	
26-27	6753-6775	max_generations_tokens	_	_	
26-28	6775-6776	`	_	_	
26-29	6777-6778	|	_	_	
26-30	6779-6786	Maximum	_	_	
26-31	6787-6793	number	_	_	
26-32	6794-6796	of	_	_	
26-33	6797-6803	tokens	_	_	
26-34	6804-6808	that	_	_	
26-35	6809-6812	the	_	_	
26-36	6813-6816	LLM	_	_	
26-37	6817-6819	is	_	_	
26-38	6820-6827	allowed	_	_	
26-39	6828-6830	to	_	_	
26-40	6831-6839	generate	_	_	
26-41	6840-6842	in	_	_	
26-42	6843-6851	response	_	_	
26-43	6852-6854	to	_	_	
26-44	6855-6856	a	_	_	
26-45	6857-6862	query	_	_	
26-46	6863-6869	during	_	_	
26-47	6870-6873	the	_	_	
26-48	6874-6880	attack	_	_	
26-49	6880-6881	.	_	_	
26-50	6882-6883	|	_	_	
26-51	6884-6885	|	_	_	
26-52	6886-6887	`	_	_	
26-53	6887-6891	topk	_	_	
26-54	6891-6892	`	_	_	
26-55	6909-6910	|	_	_	
26-56	6911-6914	The	_	_	
26-57	6915-6918	top	_	_	
26-58	6919-6920	K	_	_	
26-59	6921-6926	value	_	_	
26-60	6927-6935	triggers	_	_	
26-61	6936-6946	identified	_	_	
26-62	6947-6949	in	_	_	
26-63	6950-6954	each	_	_	
26-64	6955-6960	epoch	_	_	
26-65	6960-6961	,	_	_	
26-66	6962-6972	equivalent	_	_	
26-67	6973-6975	to	_	_	
26-68	6976-6979	the	_	_	
26-69	6980-6986	number	_	_	
26-70	6987-6989	of	_	_	
26-71	6990-6997	queries	_	_	
26-72	6998-7002	sent	_	_	
26-73	7003-7005	to	_	_	
26-74	7006-7009	the	_	_	
26-75	7010-7016	target	_	_	
26-76	7017-7020	LLM	_	_	
26-77	7020-7021	.	_	_	
26-78	7022-7023	|	_	_	
26-79	7024-7025	|	_	_	
26-80	7026-7027	`	_	_	
26-81	7027-7032	max_d	_	_	
26-82	7032-7033	`	_	_	
26-83	7049-7050	|	_	_	
26-84	7051-7054	The	_	_	
26-85	7055-7062	maximum	_	_	
26-86	7063-7067	size	_	_	
26-87	7068-7070	of	_	_	
26-88	7071-7074	the	_	_	
26-89	7075-7081	memory	_	_	
26-90	7082-7088	buffer	_	_	
26-91	7088-7089	.	_	_	
26-92	7090-7091	|	_	_	
26-93	7092-7093	|	_	_	
26-94	7094-7095	`	_	_	
26-95	7095-7100	ucb_c	_	_	
26-96	7100-7101	`	_	_	
26-97	7117-7118	|	_	_	
26-98	7119-7122	The	_	_	
26-99	7123-7147	exploration-exploitation	_	_	
26-100	7148-7157	parameter	_	_	
26-101	7158-7161	for	_	_	
26-102	7162-7165	the	_	_	
26-103	7166-7171	Upper	_	_	
26-104	7172-7182	Confidence	_	_	
26-105	7183-7188	Bound	_	_	
26-106	7189-7190	(	_	_	
26-107	7190-7193	UCB	_	_	
26-108	7193-7194	)	_	_	
26-109	7195-7204	algorithm	_	_	
26-110	7204-7205	.	_	_	

#Text=A higher value encourages exploration of less certain actions. |
#Text=| `triggers_init`        | Initial triggers used as a starting point for the algorithm; these triggers are used to pre-fill the memory buffer to avoid starting from scratch. |
#Text=| `threshold`            | The statistical significance threshold used when validating triggers. |
#Text=| `nb_samples_per_trigger` | Number of samples per trigger for statistically validating the efficiency of the trigger. |
#Text=| `logging_path`         | Path to the logging directory. |
#Text=| `results_path`         | Path to the results directory. |
#Text=| `temperature`          | Sampling temperature used by the LLM. |
#Text=| `top_p`                | Top P value for nucleus sampling used by the LLM. |
#Text=| `p_value`              | P-value for statistical testing
27-1	7206-7207	A	_	_	
27-2	7208-7214	higher	_	_	
27-3	7215-7220	value	_	_	
27-4	7221-7231	encourages	_	_	
27-5	7232-7243	exploration	_	_	
27-6	7244-7246	of	_	_	
27-7	7247-7251	less	_	_	
27-8	7252-7259	certain	_	_	
27-9	7260-7267	actions	_	_	
27-10	7267-7268	.	_	_	
27-11	7269-7270	|	_	_	
27-12	7271-7272	|	_	_	
27-13	7273-7274	`	_	_	
27-14	7274-7287	triggers_init	_	_	
27-15	7287-7288	`	_	_	
27-16	7296-7297	|	_	_	
27-17	7298-7305	Initial	_	_	
27-18	7306-7314	triggers	_	_	
27-19	7315-7319	used	_	_	
27-20	7320-7322	as	_	_	
27-21	7323-7324	a	_	_	
27-22	7325-7333	starting	_	_	
27-23	7334-7339	point	_	_	
27-24	7340-7343	for	_	_	
27-25	7344-7347	the	_	_	
27-26	7348-7357	algorithm	_	_	
27-27	7357-7358	;	_	_	
27-28	7359-7364	these	_	_	
27-29	7365-7373	triggers	_	_	
27-30	7374-7377	are	_	_	
27-31	7378-7382	used	_	_	
27-32	7383-7385	to	_	_	
27-33	7386-7394	pre-fill	_	_	
27-34	7395-7398	the	_	_	
27-35	7399-7405	memory	_	_	
27-36	7406-7412	buffer	_	_	
27-37	7413-7415	to	_	_	
27-38	7416-7421	avoid	_	_	
27-39	7422-7430	starting	_	_	
27-40	7431-7435	from	_	_	
27-41	7436-7443	scratch	_	_	
27-42	7443-7444	.	_	_	
27-43	7445-7446	|	_	_	
27-44	7447-7448	|	_	_	
27-45	7449-7450	`	_	_	
27-46	7450-7459	threshold	_	_	
27-47	7459-7460	`	_	_	
27-48	7472-7473	|	_	_	
27-49	7474-7477	The	_	_	
27-50	7478-7489	statistical	_	_	
27-51	7490-7502	significance	_	_	
27-52	7503-7512	threshold	_	_	
27-53	7513-7517	used	_	_	
27-54	7518-7522	when	_	_	
27-55	7523-7533	validating	_	_	
27-56	7534-7542	triggers	_	_	
27-57	7542-7543	.	_	_	
27-58	7544-7545	|	_	_	
27-59	7546-7547	|	_	_	
27-60	7548-7549	`	_	_	
27-61	7549-7571	nb_samples_per_trigger	_	_	
27-62	7571-7572	`	_	_	
27-63	7573-7574	|	_	_	
27-64	7575-7581	Number	_	_	
27-65	7582-7584	of	_	_	
27-66	7585-7592	samples	_	_	
27-67	7593-7596	per	_	_	
27-68	7597-7604	trigger	_	_	
27-69	7605-7608	for	_	_	
27-70	7609-7622	statistically	_	_	
27-71	7623-7633	validating	_	_	
27-72	7634-7637	the	_	_	
27-73	7638-7648	efficiency	_	_	
27-74	7649-7651	of	_	_	
27-75	7652-7655	the	_	_	
27-76	7656-7663	trigger	_	_	
27-77	7663-7664	.	_	_	
27-78	7665-7666	|	_	_	
27-79	7667-7668	|	_	_	
27-80	7669-7670	`	_	_	
27-81	7670-7682	logging_path	_	_	
27-82	7682-7683	`	_	_	
27-83	7692-7693	|	_	_	
27-84	7694-7698	Path	_	_	
27-85	7699-7701	to	_	_	
27-86	7702-7705	the	_	_	
27-87	7706-7713	logging	_	_	
27-88	7714-7723	directory	_	_	
27-89	7723-7724	.	_	_	
27-90	7725-7726	|	_	_	
27-91	7727-7728	|	_	_	
27-92	7729-7730	`	_	_	
27-93	7730-7742	results_path	_	_	
27-94	7742-7743	`	_	_	
27-95	7752-7753	|	_	_	
27-96	7754-7758	Path	_	_	
27-97	7759-7761	to	_	_	
27-98	7762-7765	the	_	_	
27-99	7766-7773	results	_	_	
27-100	7774-7783	directory	_	_	
27-101	7783-7784	.	_	_	
27-102	7785-7786	|	_	_	
27-103	7787-7788	|	_	_	
27-104	7789-7790	`	_	_	
27-105	7790-7801	temperature	_	_	
27-106	7801-7802	`	_	_	
27-107	7812-7813	|	_	_	
27-108	7814-7822	Sampling	_	_	
27-109	7823-7834	temperature	_	_	
27-110	7835-7839	used	_	_	
27-111	7840-7842	by	_	_	
27-112	7843-7846	the	_	_	
27-113	7847-7850	LLM	_	_	
27-114	7850-7851	.	_	_	
27-115	7852-7853	|	_	_	
27-116	7854-7855	|	_	_	
27-117	7856-7857	`	_	_	
27-118	7857-7862	top_p	_	_	
27-119	7862-7863	`	_	_	
27-120	7879-7880	|	_	_	
27-121	7881-7884	Top	_	_	
27-122	7885-7886	P	_	_	
27-123	7887-7892	value	_	_	
27-124	7893-7896	for	_	_	
27-125	7897-7904	nucleus	_	_	
27-126	7905-7913	sampling	_	_	
27-127	7914-7918	used	_	_	
27-128	7919-7921	by	_	_	
27-129	7922-7925	the	_	_	
27-130	7926-7929	LLM	_	_	
27-131	7929-7930	.	_	_	
27-132	7931-7932	|	_	_	
27-133	7933-7934	|	_	_	
27-134	7935-7936	`	_	_	
27-135	7936-7943	p_value	_	_	
27-136	7943-7944	`	_	_	
27-137	7958-7959	|	_	_	
27-138	7960-7967	P-value	_	_	
27-139	7968-7971	for	_	_	
27-140	7972-7983	statistical	_	_	
27-141	7984-7991	testing	_	_	

#Text=.
28-1	7991-7992	.	_	_	

#Text=|
29-1	7993-7994	|	_	_	
