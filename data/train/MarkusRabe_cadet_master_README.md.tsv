#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=[!
1-1	0-1	[	_	_	
1-2	1-2	!	_	_	

#Text=[Codacy Badge](https://api.codacy.com/project/badge/Grade/bfd02d3e1f7540d0ac920e4812bef953)](https://www.codacy.com/app/MarkusRabe/cadet?
2-1	2-3	[	_	_	
2-2	3-9	Codacy	_	_	
2-3	10-15	Badge	_	_	
2-4	15-16	]	_	_	
2-5	16-17	(	_	_	
2-6	17-22	https	_	_	
2-7	22-23	:	_	_	
2-8	23-24	/	_	_	
2-9	24-25	/	_	_	
2-10	25-39	api.codacy.com	_	_	
2-11	39-40	/	_	_	
2-12	40-47	project	_	_	
2-13	47-48	/	_	_	
2-14	48-53	badge	_	_	
2-15	53-54	/	_	_	
2-16	54-59	Grade	_	_	
2-17	59-60	/	_	_	
2-18	60-92	bfd02d3e1f7540d0ac920e4812bef953	_	_	
2-19	92-93	)	_	_	
2-20	93-94	]	_	_	
2-21	94-95	(	_	_	
2-22	95-100	https	_	_	
2-23	100-101	:	_	_	
2-24	101-102	/	_	_	
2-25	102-103	/	_	_	
2-26	103-117	www.codacy.com	_	_	
2-27	117-118	/	_	_	
2-28	118-121	app	_	_	
2-29	121-122	/	_	_	
2-30	122-132	MarkusRabe	_	_	
2-31	132-133	/	_	_	
2-32	133-138	cadet	_	_	
2-33	138-139	?	_	_	

#Text=utm_source=github.com&utm_medium=referral&utm_content=MarkusRabe/cadet&utm_campaign=badger)
#Text=[!
3-1	139-149	utm_source	_	_	
3-2	149-150	=	_	_	
3-3	150-160	github.com	_	_	
3-4	160-161	&	_	_	
3-5	161-171	utm_medium	_	_	
3-6	171-172	=	_	_	
3-7	172-180	referral	_	_	
3-8	180-181	&	_	_	
3-9	181-192	utm_content	_	_	
3-10	192-193	=	_	_	
3-11	193-203	MarkusRabe	_	_	
3-12	203-204	/	_	_	
3-13	204-209	cadet	_	_	
3-14	209-210	&	_	_	
3-15	210-222	utm_campaign	_	_	
3-16	222-223	=	_	_	
3-17	223-229	badger	_	_	
3-18	229-230	)	_	_	
3-19	231-232	[	_	_	
3-20	232-233	!	_	_	

#Text=[Build Status](https://travis-ci.org/MarkusRabe/cadet.svg?
4-1	233-234	[	_	_	
4-2	234-239	Build	_	_	
4-3	240-246	Status	_	_	
4-4	246-247	]	_	_	
4-5	247-248	(	_	_	
4-6	248-253	https	_	_	
4-7	253-254	:	_	_	
4-8	254-255	/	_	_	
4-9	255-256	/	_	_	
4-10	256-269	travis-ci.org	_	_	
4-11	269-270	/	_	_	
4-12	270-280	MarkusRabe	_	_	
4-13	280-281	/	_	_	
4-14	281-290	cadet.svg	_	_	
4-15	290-291	?	_	_	

#Text=branch=master)](https://travis-ci.org/MarkusRabe/cadet)
#Text=
#Text=# CADET
#Text=
#Text=CADET is a solver for _quantified Boolean formulas_ with a forall-exists quantifier alternation (2QBF).
5-1	291-297	branch	_	_	
5-2	297-298	=	_	_	
5-3	298-304	master	_	_	
5-4	304-305	)	_	_	
5-5	305-306	]	_	_	
5-6	306-307	(	_	_	
5-7	307-312	https	_	_	
5-8	312-313	:	_	_	
5-9	313-314	/	_	_	
5-10	314-315	/	_	_	
5-11	315-328	travis-ci.org	_	_	
5-12	328-329	/	_	_	
5-13	329-339	MarkusRabe	_	_	
5-14	339-340	/	_	_	
5-15	340-345	cadet	_	_	
5-16	345-346	)	_	_	
5-17	348-349	#	_	_	
5-18	350-355	CADET	*	SOFTWARE	
5-19	357-362	CADET	*	SOFTWARE	
5-20	363-365	is	_	_	
5-21	366-367	a	_	_	
5-22	368-374	solver	_	_	
5-23	375-378	for	_	_	
5-24	379-380	_	_	_	
5-25	380-390	quantified	_	_	
5-26	391-398	Boolean	_	_	
5-27	399-407	formulas	_	_	
5-28	407-408	_	_	_	
5-29	409-413	with	_	_	
5-30	414-415	a	_	_	
5-31	416-429	forall-exists	_	_	
5-32	430-440	quantifier	_	_	
5-33	441-452	alternation	_	_	
5-34	453-454	(	_	_	
5-35	454-458	2QBF	_	_	
5-36	458-459	)	_	_	
5-37	459-460	.	_	_	

#Text=The solver is based on the _Incremental Determinization_ algorithm published in SAT 2016 was written by [Markus N.
6-1	461-464	The	_	_	
6-2	465-471	solver	_	_	
6-3	472-474	is	_	_	
6-4	475-480	based	_	_	
6-5	481-483	on	_	_	
6-6	484-487	the	_	_	
6-7	488-489	_	_	_	
6-8	489-500	Incremental	_	_	
6-9	501-516	Determinization	_	_	
6-10	516-517	_	_	_	
6-11	518-527	algorithm	_	_	
6-12	528-537	published	_	_	
6-13	538-540	in	_	_	
6-14	541-544	SAT	_	_	
6-15	545-549	2016	_	_	
6-16	550-553	was	_	_	
6-17	554-561	written	_	_	
6-18	562-564	by	_	_	
6-19	565-566	[	_	_	
6-20	566-572	Markus	_	_	
6-21	573-574	N	_	_	
6-22	574-575	.	_	_	

#Text=Rabe](https://people.eecs.berkeley.edu/~rabe/).
7-1	576-580	Rabe	_	_	
7-2	580-581	]	_	_	
7-3	581-582	(	_	_	
7-4	582-587	https	_	_	
7-5	587-588	:	_	_	
7-6	588-589	/	_	_	
7-7	589-590	/	_	_	
7-8	590-614	people.eecs.berkeley.edu	_	_	
7-9	614-615	/	_	_	
7-10	615-616	~	_	_	
7-11	616-620	rabe	_	_	
7-12	620-621	/	_	_	
7-13	621-622	)	_	_	
7-14	622-623	.	_	_	

#Text=As of 2018, CADET is one of the fastest and most reliable solvers for 2QBF formulas.
8-1	624-626	As	_	_	
8-2	627-629	of	_	_	
8-3	630-634	2018	_	_	
8-4	634-635	,	_	_	
8-5	636-641	CADET	*	SOFTWARE	
8-6	642-644	is	_	_	
8-7	645-648	one	_	_	
8-8	649-651	of	_	_	
8-9	652-655	the	_	_	
8-10	656-663	fastest	_	_	
8-11	664-667	and	_	_	
8-12	668-672	most	_	_	
8-13	673-681	reliable	_	_	
8-14	682-689	solvers	_	_	
8-15	690-693	for	_	_	
8-16	694-698	2QBF	_	_	
8-17	699-707	formulas	_	_	
8-18	707-708	.	_	_	

#Text=It won second price in the 2QBF track of [QBFEval](http://www.qbflib.org/qbfeval17.php) and can also _prove_ its results little overhead, which is unique in the current landscape of QBF solvers. 
#Text=
#Text=## Example
#Text=
#Text=Here we discuss how to encode the formula ∀ x1 x2:  ∃ y:  y = (x1 & x2) and how to interpret CADET's results.
9-1	709-711	It	_	_	
9-2	712-715	won	_	_	
9-3	716-722	second	_	_	
9-4	723-728	price	_	_	
9-5	729-731	in	_	_	
9-6	732-735	the	_	_	
9-7	736-740	2QBF	_	_	
9-8	741-746	track	_	_	
9-9	747-749	of	_	_	
9-10	750-751	[	_	_	
9-11	751-758	QBFEval	_	_	
9-12	758-759	]	_	_	
9-13	759-760	(	_	_	
9-14	760-764	http	_	_	
9-15	764-765	:	_	_	
9-16	765-766	/	_	_	
9-17	766-767	/	_	_	
9-18	767-781	www.qbflib.org	_	_	
9-19	781-782	/	_	_	
9-20	782-791	qbfeval17	_	_	
9-21	791-792	.	_	_	
9-22	792-795	php	_	_	
9-23	795-796	)	_	_	
9-24	797-800	and	_	_	
9-25	801-804	can	_	_	
9-26	805-809	also	_	_	
9-27	810-811	_	_	_	
9-28	811-816	prove	_	_	
9-29	816-817	_	_	_	
9-30	818-821	its	_	_	
9-31	822-829	results	_	_	
9-32	830-836	little	_	_	
9-33	837-845	overhead	_	_	
9-34	845-846	,	_	_	
9-35	847-852	which	_	_	
9-36	853-855	is	_	_	
9-37	856-862	unique	_	_	
9-38	863-865	in	_	_	
9-39	866-869	the	_	_	
9-40	870-877	current	_	_	
9-41	878-887	landscape	_	_	
9-42	888-890	of	_	_	
9-43	891-894	QBF	_	_	
9-44	895-902	solvers	_	_	
9-45	902-903	.	_	_	
9-46	906-907	#	_	_	
9-47	907-908	#	_	_	
9-48	909-916	Example	_	_	
9-49	918-922	Here	_	_	
9-50	923-925	we	_	_	
9-51	926-933	discuss	_	_	
9-52	934-937	how	_	_	
9-53	938-940	to	_	_	
9-54	941-947	encode	_	_	
9-55	948-951	the	_	_	
9-56	952-959	formula	_	_	
9-57	960-961	∀	_	_	
9-58	962-964	x1	_	_	
9-59	965-967	x2	_	_	
9-60	967-968	:	_	_	
9-61	970-971	∃	_	_	
9-62	972-973	y	_	_	
9-63	973-974	:	_	_	
9-64	976-977	y	_	_	
9-65	978-979	=	_	_	
9-66	980-981	(	_	_	
9-67	981-983	x1	_	_	
9-68	984-985	&	_	_	
9-69	986-988	x2	_	_	
9-70	988-989	)	_	_	
9-71	990-993	and	_	_	
9-72	994-997	how	_	_	
9-73	998-1000	to	_	_	
9-74	1001-1010	interpret	_	_	
9-75	1011-1018	CADET's	_	_	
9-75.1	1011-1016	CADET	*	SOFTWARE	
9-76	1019-1026	results	_	_	
9-77	1026-1027	.	_	_	

#Text=Natively, CADET reads the [QDIMACS](http://www.qbflib.org/qdimacs.html) format (and will soon also support [QAIGER](https://github.com/ltentrup/QAIGER)).
10-1	1029-1037	Natively	_	_	
10-2	1037-1038	,	_	_	
10-3	1039-1044	CADET	*	SOFTWARE	
10-4	1045-1050	reads	_	_	
10-5	1051-1054	the	_	_	
10-6	1055-1056	[	_	_	
10-7	1056-1063	QDIMACS	*	SOFTWARE	
10-8	1063-1064	]	_	_	
10-9	1064-1065	(	_	_	
10-10	1065-1069	http	_	_	
10-11	1069-1070	:	_	_	
10-12	1070-1071	/	_	_	
10-13	1071-1072	/	_	_	
10-14	1072-1086	www.qbflib.org	_	_	
10-15	1086-1087	/	_	_	
10-16	1087-1099	qdimacs.html	_	_	
10-16.1	1087-1094	qdimacs	*	SOFTWARE	
10-17	1099-1100	)	_	_	
10-18	1101-1107	format	_	_	
10-19	1108-1109	(	_	_	
10-20	1109-1112	and	_	_	
10-21	1113-1117	will	_	_	
10-22	1118-1122	soon	_	_	
10-23	1123-1127	also	_	_	
10-24	1128-1135	support	_	_	
10-25	1136-1137	[	_	_	
10-26	1137-1143	QAIGER	*	SOFTWARE	
10-27	1143-1144	]	_	_	
10-28	1144-1145	(	_	_	
10-29	1145-1150	https	_	_	
10-30	1150-1151	:	_	_	
10-31	1151-1152	/	_	_	
10-32	1152-1153	/	_	_	
10-33	1153-1163	github.com	_	_	
10-34	1163-1164	/	_	_	
10-35	1164-1172	ltentrup	_	_	
10-36	1172-1173	/	_	_	
10-37	1173-1179	QAIGER	*	SOFTWARE	
10-38	1179-1180	)	_	_	
10-39	1180-1181	)	_	_	
10-40	1181-1182	.	_	_	

#Text=The example formula looks as follows in QDIMACS:
#Text=
#Text=```qdimacs
#Text=c This QDIMACS file encodes the formula     
#Text=c forall x1, x2 exists y. y <-> x1 & x2.
#Text=c x1 is represented by number 1
#Text=c x2 is represented by number 2
#Text=c y  is represented by number 3
#Text=p cnf 3 3                                   
#Text=a 1 2 0                                     
#Text=e 3 0                                       
#Text=1 -3 0                                      
#Text=2 -3 0                                      
#Text=-1 -2 3 0                                   
#Text=```
#Text=
#Text=Lines starting with `c` are comments.
11-1	1183-1186	The	_	_	
11-2	1187-1194	example	_	_	
11-3	1195-1202	formula	_	_	
11-4	1203-1208	looks	_	_	
11-5	1209-1211	as	_	_	
11-6	1212-1219	follows	_	_	
11-7	1220-1222	in	_	_	
11-8	1223-1230	QDIMACS	*	SOFTWARE	
11-9	1230-1231	:	_	_	
11-10	1233-1234	`	_	_	
11-11	1234-1235	`	_	_	
11-12	1235-1236	`	_	_	
11-13	1236-1243	qdimacs	*	SOFTWARE	
11-14	1244-1245	c	_	_	
11-15	1246-1250	This	_	_	
11-16	1251-1258	QDIMACS	*	SOFTWARE	
11-17	1259-1263	file	_	_	
11-18	1264-1271	encodes	_	_	
11-19	1272-1275	the	_	_	
11-20	1276-1283	formula	_	_	
11-21	1289-1290	c	_	_	
11-22	1291-1297	forall	_	_	
11-23	1298-1300	x1	_	_	
11-24	1300-1301	,	_	_	
11-25	1302-1304	x2	_	_	
11-26	1305-1311	exists	_	_	
11-27	1312-1313	y	_	_	
11-28	1313-1314	.	_	_	
11-29	1315-1316	y	_	_	
11-30	1317-1318	<	_	_	
11-31	1318-1319	-	_	_	
11-32	1319-1320	>	_	_	
11-33	1321-1323	x1	_	_	
11-34	1324-1325	&	_	_	
11-35	1326-1328	x2	_	_	
11-36	1328-1329	.	_	_	
11-37	1330-1331	c	_	_	
11-38	1332-1334	x1	_	_	
11-39	1335-1337	is	_	_	
11-40	1338-1349	represented	_	_	
11-41	1350-1352	by	_	_	
11-42	1353-1359	number	_	_	
11-43	1360-1361	1	_	_	
11-44	1362-1363	c	_	_	
11-45	1364-1366	x2	_	_	
11-46	1367-1369	is	_	_	
11-47	1370-1381	represented	_	_	
11-48	1382-1384	by	_	_	
11-49	1385-1391	number	_	_	
11-50	1392-1393	2	_	_	
11-51	1394-1395	c	_	_	
11-52	1396-1397	y	_	_	
11-53	1399-1401	is	_	_	
11-54	1402-1413	represented	_	_	
11-55	1414-1416	by	_	_	
11-56	1417-1423	number	_	_	
11-57	1424-1425	3	_	_	
11-58	1426-1427	p	_	_	
11-59	1428-1431	cnf	_	_	
11-60	1432-1433	3	_	_	
11-61	1434-1435	3	_	_	
11-62	1471-1472	a	_	_	
11-63	1473-1474	1	_	_	
11-64	1475-1476	2	_	_	
11-65	1477-1478	0	_	_	
11-66	1516-1517	e	_	_	
11-67	1518-1519	3	_	_	
11-68	1520-1521	0	_	_	
11-69	1561-1562	1	_	_	
11-70	1563-1564	-	_	_	
11-71	1564-1565	3	_	_	
11-72	1566-1567	0	_	_	
11-73	1606-1607	2	_	_	
11-74	1608-1609	-	_	_	
11-75	1609-1610	3	_	_	
11-76	1611-1612	0	_	_	
11-77	1651-1652	-	_	_	
11-78	1652-1653	1	_	_	
11-79	1654-1655	-	_	_	
11-80	1655-1656	2	_	_	
11-81	1657-1658	3	_	_	
11-82	1659-1660	0	_	_	
11-83	1696-1697	`	_	_	
11-84	1697-1698	`	_	_	
11-85	1698-1699	`	_	_	
11-86	1701-1706	Lines	_	_	
11-87	1707-1715	starting	_	_	
11-88	1716-1720	with	_	_	
11-89	1721-1722	`	_	_	
11-90	1722-1723	c	_	_	
11-91	1723-1724	`	_	_	
11-92	1725-1728	are	_	_	
11-93	1729-1737	comments	_	_	
11-94	1737-1738	.	_	_	

#Text=The _header_ is the line starting with `p cnf` followed by two numbers indicating the number of variables and the number of clauses.
12-1	1739-1742	The	_	_	
12-2	1743-1744	_	_	_	
12-3	1744-1750	header	_	_	
12-4	1750-1751	_	_	_	
12-5	1752-1754	is	_	_	
12-6	1755-1758	the	_	_	
12-7	1759-1763	line	_	_	
12-8	1764-1772	starting	_	_	
12-9	1773-1777	with	_	_	
12-10	1778-1779	`	_	_	
12-11	1779-1780	p	_	_	
12-12	1781-1784	cnf	_	_	
12-13	1784-1785	`	_	_	
12-14	1786-1794	followed	_	_	
12-15	1795-1797	by	_	_	
12-16	1798-1801	two	_	_	
12-17	1802-1809	numbers	_	_	
12-18	1810-1820	indicating	_	_	
12-19	1821-1824	the	_	_	
12-20	1825-1831	number	_	_	
12-21	1832-1834	of	_	_	
12-22	1835-1844	variables	_	_	
12-23	1845-1848	and	_	_	
12-24	1849-1852	the	_	_	
12-25	1853-1859	number	_	_	
12-26	1860-1862	of	_	_	
12-27	1863-1870	clauses	_	_	
12-28	1870-1871	.	_	_	

#Text=The lines starting with `a` and `e` are quantifiers introducing universally quantified variables 1 and 2, and the existentially quantified variable 3.
13-1	1872-1875	The	_	_	
13-2	1876-1881	lines	_	_	
13-3	1882-1890	starting	_	_	
13-4	1891-1895	with	_	_	
13-5	1896-1897	`	_	_	
13-6	1897-1898	a	_	_	
13-7	1898-1899	`	_	_	
13-8	1900-1903	and	_	_	
13-9	1904-1905	`	_	_	
13-10	1905-1906	e	_	_	
13-11	1906-1907	`	_	_	
13-12	1908-1911	are	_	_	
13-13	1912-1923	quantifiers	_	_	
13-14	1924-1935	introducing	_	_	
13-15	1936-1947	universally	_	_	
13-16	1948-1958	quantified	_	_	
13-17	1959-1968	variables	_	_	
13-18	1969-1970	1	_	_	
13-19	1971-1974	and	_	_	
13-20	1975-1976	2	_	_	
13-21	1976-1977	,	_	_	
13-22	1978-1981	and	_	_	
13-23	1982-1985	the	_	_	
13-24	1986-1999	existentially	_	_	
13-25	2000-2010	quantified	_	_	
13-26	2011-2019	variable	_	_	
13-27	2020-2021	3	_	_	
13-28	2021-2022	.	_	_	

#Text=The remaining three lines each state one constraint (a clause).
14-1	2023-2026	The	_	_	
14-2	2027-2036	remaining	_	_	
14-3	2037-2042	three	_	_	
14-4	2043-2048	lines	_	_	
14-5	2049-2053	each	_	_	
14-6	2054-2059	state	_	_	
14-7	2060-2063	one	_	_	
14-8	2064-2074	constraint	_	_	
14-9	2075-2076	(	_	_	
14-10	2076-2077	a	_	_	
14-11	2078-2084	clause	_	_	
14-12	2084-2085	)	_	_	
14-13	2085-2086	.	_	_	

#Text=The last line, for example states that 1 must be false or 2 must be false or 3 must be true.
15-1	2087-2090	The	_	_	
15-2	2091-2095	last	_	_	
15-3	2096-2100	line	_	_	
15-4	2100-2101	,	_	_	
15-5	2102-2105	for	_	_	
15-6	2106-2113	example	_	_	
15-7	2114-2120	states	_	_	
15-8	2121-2125	that	_	_	
15-9	2126-2127	1	_	_	
15-10	2128-2132	must	_	_	
15-11	2133-2135	be	_	_	
15-12	2136-2141	false	_	_	
15-13	2142-2144	or	_	_	
15-14	2145-2146	2	_	_	
15-15	2147-2151	must	_	_	
15-16	2152-2154	be	_	_	
15-17	2155-2160	false	_	_	
15-18	2161-2163	or	_	_	
15-19	2164-2165	3	_	_	
15-20	2166-2170	must	_	_	
15-21	2171-2173	be	_	_	
15-22	2174-2178	true	_	_	
15-23	2178-2179	.	_	_	

#Text=It is easy to check that the three constraints (clauses) together require y to be the conjunction of x1 and x2: Simply interpret the clauses as implications -x1 -> -y, -x2 -> -y, and (x1 & x2) -> y.
16-1	2180-2182	It	_	_	
16-2	2183-2185	is	_	_	
16-3	2186-2190	easy	_	_	
16-4	2191-2193	to	_	_	
16-5	2194-2199	check	_	_	
16-6	2200-2204	that	_	_	
16-7	2205-2208	the	_	_	
16-8	2209-2214	three	_	_	
16-9	2215-2226	constraints	_	_	
16-10	2227-2228	(	_	_	
16-11	2228-2235	clauses	_	_	
16-12	2235-2236	)	_	_	
16-13	2237-2245	together	_	_	
16-14	2246-2253	require	_	_	
16-15	2254-2255	y	_	_	
16-16	2256-2258	to	_	_	
16-17	2259-2261	be	_	_	
16-18	2262-2265	the	_	_	
16-19	2266-2277	conjunction	_	_	
16-20	2278-2280	of	_	_	
16-21	2281-2283	x1	_	_	
16-22	2284-2287	and	_	_	
16-23	2288-2290	x2	_	_	
16-24	2290-2291	:	_	_	
16-25	2292-2298	Simply	_	_	
16-26	2299-2308	interpret	_	_	
16-27	2309-2312	the	_	_	
16-28	2313-2320	clauses	_	_	
16-29	2321-2323	as	_	_	
16-30	2324-2336	implications	_	_	
16-31	2337-2338	-	_	_	
16-32	2338-2340	x1	_	_	
16-33	2341-2342	-	_	_	
16-34	2342-2343	>	_	_	
16-35	2344-2345	-	_	_	
16-36	2345-2346	y	_	_	
16-37	2346-2347	,	_	_	
16-38	2348-2349	-	_	_	
16-39	2349-2351	x2	_	_	
16-40	2352-2353	-	_	_	
16-41	2353-2354	>	_	_	
16-42	2355-2356	-	_	_	
16-43	2356-2357	y	_	_	
16-44	2357-2358	,	_	_	
16-45	2359-2362	and	_	_	
16-46	2363-2364	(	_	_	
16-47	2364-2366	x1	_	_	
16-48	2367-2368	&	_	_	
16-49	2369-2371	x2	_	_	
16-50	2371-2372	)	_	_	
16-51	2373-2374	-	_	_	
16-52	2374-2375	>	_	_	
16-53	2376-2377	y	_	_	
16-54	2377-2378	.	_	_	

#Text=CADET will solve this file easily:
#Text=
#Text=```bash
#Text=$ .
17-1	2380-2385	CADET	*	SOFTWARE	
17-2	2386-2390	will	_	_	
17-3	2391-2396	solve	_	_	
17-4	2397-2401	this	_	_	
17-5	2402-2406	file	_	_	
17-6	2407-2413	easily	_	_	
17-7	2413-2414	:	_	_	
17-8	2416-2417	`	_	_	
17-9	2417-2418	`	_	_	
17-10	2418-2419	`	_	_	
17-11	2419-2423	bash	*	PROGLANG	
17-12	2424-2425	$	_	_	
17-13	2426-2427	.	_	_	

#Text=/cadet formula.qdimacs
#Text=```
#Text=
#Text=Output:
#Text=```
#Text=Processing file "formula.qdimacs".
18-1	2427-2428	/	_	_	
18-2	2428-2433	cadet	*	SOFTWARE	
18-3	2434-2449	formula.qdimacs	_	_	
18-3.1	2442-2449	qdimacs	*	SOFTWARE	
18-4	2450-2451	`	_	_	
18-5	2451-2452	`	_	_	
18-6	2452-2453	`	_	_	
18-7	2455-2461	Output	_	_	
18-8	2461-2462	:	_	_	
18-9	2463-2464	`	_	_	
18-10	2464-2465	`	_	_	
18-11	2465-2466	`	_	_	
18-12	2467-2477	Processing	_	_	
18-13	2478-2482	file	_	_	
18-14	2483-2484	"	_	_	
18-15	2484-2499	formula.qdimacs	_	_	
18-15.1	2492-2499	qdimacs	*	SOFTWARE	
18-16	2499-2500	"	_	_	
18-17	2500-2501	.	_	_	

#Text=CADET v2.3
#Text=SAT
#Text=```
#Text=
#Text=This indicates that the formula is satsifiable (i.e. true, as we consider only closed formulas).
19-1	2502-2507	CADET	*[1]	SOFTWARE[1]	
19-2	2508-2512	v2.3	*[1]	SOFTWARE[1]	
19-3	2513-2516	SAT	_	_	
19-4	2517-2518	`	_	_	
19-5	2518-2519	`	_	_	
19-6	2519-2520	`	_	_	
19-7	2522-2526	This	_	_	
19-8	2527-2536	indicates	_	_	
19-9	2537-2541	that	_	_	
19-10	2542-2545	the	_	_	
19-11	2546-2553	formula	_	_	
19-12	2554-2556	is	_	_	
19-13	2557-2568	satsifiable	_	_	
19-14	2569-2570	(	_	_	
19-15	2570-2573	i.e	_	_	
19-16	2573-2574	.	_	_	
19-17	2575-2579	true	_	_	
19-18	2579-2580	,	_	_	
19-19	2581-2583	as	_	_	
19-20	2584-2586	we	_	_	
19-21	2587-2595	consider	_	_	
19-22	2596-2600	only	_	_	
19-23	2601-2607	closed	_	_	
19-24	2608-2616	formulas	_	_	
19-25	2616-2617	)	_	_	
19-26	2617-2618	.	_	_	

#Text=To prove formulas true CADET constructs a function assigning a value to y for every assignment to x1 and x2 (a _Skolem function_).
20-1	2619-2621	To	_	_	
20-2	2622-2627	prove	_	_	
20-3	2628-2636	formulas	_	_	
20-4	2637-2641	true	_	_	
20-5	2642-2647	CADET	*	SOFTWARE	
20-6	2648-2658	constructs	_	_	
20-7	2659-2660	a	_	_	
20-8	2661-2669	function	_	_	
20-9	2670-2679	assigning	_	_	
20-10	2680-2681	a	_	_	
20-11	2682-2687	value	_	_	
20-12	2688-2690	to	_	_	
20-13	2691-2692	y	_	_	
20-14	2693-2696	for	_	_	
20-15	2697-2702	every	_	_	
20-16	2703-2713	assignment	_	_	
20-17	2714-2716	to	_	_	
20-18	2717-2719	x1	_	_	
20-19	2720-2723	and	_	_	
20-20	2724-2726	x2	_	_	
20-21	2727-2728	(	_	_	
20-22	2728-2729	a	_	_	
20-23	2730-2731	_	_	_	
20-24	2731-2737	Skolem	_	_	
20-25	2738-2746	function	_	_	
20-26	2746-2747	_	_	_	
20-27	2747-2748	)	_	_	
20-28	2748-2749	.	_	_	

#Text=For many applications, such as circuit repair, safety games, and [strategy extraction for LTL synthesis](https://www.react.uni-saarland.de/publications/FFRT17.html) we are interested in the function that CADET computed as it represents the solution of the encoded problem.
21-1	2750-2753	For	_	_	
21-2	2754-2758	many	_	_	
21-3	2759-2771	applications	_	_	
21-4	2771-2772	,	_	_	
21-5	2773-2777	such	_	_	
21-6	2778-2780	as	_	_	
21-7	2781-2788	circuit	_	_	
21-8	2789-2795	repair	_	_	
21-9	2795-2796	,	_	_	
21-10	2797-2803	safety	_	_	
21-11	2804-2809	games	_	_	
21-12	2809-2810	,	_	_	
21-13	2811-2814	and	_	_	
21-14	2815-2816	[	_	_	
21-15	2816-2824	strategy	_	_	
21-16	2825-2835	extraction	_	_	
21-17	2836-2839	for	_	_	
21-18	2840-2843	LTL	_	_	
21-19	2844-2853	synthesis	_	_	
21-20	2853-2854	]	_	_	
21-21	2854-2855	(	_	_	
21-22	2855-2860	https	_	_	
21-23	2860-2861	:	_	_	
21-24	2861-2862	/	_	_	
21-25	2862-2863	/	_	_	
21-26	2863-2888	www.react.uni-saarland.de	_	_	
21-27	2888-2889	/	_	_	
21-28	2889-2901	publications	_	_	
21-29	2901-2902	/	_	_	
21-30	2902-2908	FFRT17	_	_	
21-31	2908-2909	.	_	_	
21-32	2909-2913	html	_	_	
21-33	2913-2914	)	_	_	
21-34	2915-2917	we	_	_	
21-35	2918-2921	are	_	_	
21-36	2922-2932	interested	_	_	
21-37	2933-2935	in	_	_	
21-38	2936-2939	the	_	_	
21-39	2940-2948	function	_	_	
21-40	2949-2953	that	_	_	
21-41	2954-2959	CADET	*	SOFTWARE	
21-42	2960-2968	computed	_	_	
21-43	2969-2971	as	_	_	
21-44	2972-2974	it	_	_	
21-45	2975-2985	represents	_	_	
21-46	2986-2989	the	_	_	
21-47	2990-2998	solution	_	_	
21-48	2999-3001	of	_	_	
21-49	3002-3005	the	_	_	
21-50	3006-3013	encoded	_	_	
21-51	3014-3021	problem	_	_	
21-52	3021-3022	.	_	_	

#Text=With the command line argument `-c <filename>` CADET outputs this function as an [AIGER](fmv.jku.at/aiger/) circuit: 
#Text=
#Text=
#Text=```bash
#Text=$ .
22-1	3023-3027	With	_	_	
22-2	3028-3031	the	_	_	
22-3	3032-3039	command	_	_	
22-4	3040-3044	line	_	_	
22-5	3045-3053	argument	_	_	
22-6	3054-3055	`	_	_	
22-7	3055-3056	-	_	_	
22-8	3056-3057	c	_	_	
22-9	3058-3059	<	_	_	
22-10	3059-3067	filename	_	_	
22-11	3067-3068	>	_	_	
22-12	3068-3069	`	_	_	
22-13	3070-3075	CADET	*	SOFTWARE	
22-14	3076-3083	outputs	_	_	
22-15	3084-3088	this	_	_	
22-16	3089-3097	function	_	_	
22-17	3098-3100	as	_	_	
22-18	3101-3103	an	_	_	
22-19	3104-3105	[	_	_	
22-20	3105-3110	AIGER	*	SOFTWARE	
22-21	3110-3111	]	_	_	
22-22	3111-3112	(	_	_	
22-23	3112-3122	fmv.jku.at	_	_	
22-24	3122-3123	/	_	_	
22-25	3123-3128	aiger	*	SOFTWARE	
22-26	3128-3129	/	_	_	
22-27	3129-3130	)	_	_	
22-28	3131-3138	circuit	_	_	
22-29	3138-3139	:	_	_	
22-30	3143-3144	`	_	_	
22-31	3144-3145	`	_	_	
22-32	3145-3146	`	_	_	
22-33	3146-3150	bash	*	PROGLANG	
22-34	3151-3152	$	_	_	
22-35	3153-3154	.	_	_	

#Text=/cadet -c result.aig formula.qdimacs
#Text=```
#Text=
#Text=The result is written to the file `result.aig`, which is typically a bit bloated and it is intended to be minimized after generation.
23-1	3154-3155	/	_	_	
23-2	3155-3160	cadet	*	SOFTWARE	
23-3	3161-3162	-	_	_	
23-4	3162-3163	c	_	_	
23-5	3164-3174	result.aig	_	_	
23-6	3175-3190	formula.qdimacs	_	_	
23-6.1	3183-3190	qdimacs	*	SOFTWARE	
23-7	3191-3192	`	_	_	
23-8	3192-3193	`	_	_	
23-9	3193-3194	`	_	_	
23-10	3196-3199	The	_	_	
23-11	3200-3206	result	_	_	
23-12	3207-3209	is	_	_	
23-13	3210-3217	written	_	_	
23-14	3218-3220	to	_	_	
23-15	3221-3224	the	_	_	
23-16	3225-3229	file	_	_	
23-17	3230-3231	`	_	_	
23-18	3231-3241	result.aig	_	_	
23-19	3241-3242	`	_	_	
23-20	3242-3243	,	_	_	
23-21	3244-3249	which	_	_	
23-22	3250-3252	is	_	_	
23-23	3253-3262	typically	_	_	
23-24	3263-3264	a	_	_	
23-25	3265-3268	bit	_	_	
23-26	3269-3276	bloated	_	_	
23-27	3277-3280	and	_	_	
23-28	3281-3283	it	_	_	
23-29	3284-3286	is	_	_	
23-30	3287-3295	intended	_	_	
23-31	3296-3298	to	_	_	
23-32	3299-3301	be	_	_	
23-33	3302-3311	minimized	_	_	
23-34	3312-3317	after	_	_	
23-35	3318-3328	generation	_	_	
23-36	3328-3329	.	_	_	

#Text=For example, you can use the following command to minimize circuits with [ABC](https://people.eecs.berkeley.edu/~alanmi/abc/):
#Text=
#Text=```bash
#Text=$ abc -c "read result.aig; dc2; write result.aig"
#Text=```
#Text=
#Text=After the minimization a circuit with a single AND-gate remains:
#Text=
#Text=```aiger
#Text=aag 3 2 0 1 1
#Text=2
#Text=4
#Text=6
#Text=6 4 2
#Text=i0 1
#Text=i1 2
#Text=o0 3
#Text=```
#Text=
#Text=To view a human-readable version of the circuit as shown above you have to convert the AIGER binrary formag `.aig` to the AIGER ASCII format `.aag` using the tool `aigtoaig` available in the [AIGER toolset](http://fmv.jku.at/aiger/aiger-1.9.9.tar.gz). 
#Text=
#Text=## Installing CADET
#Text=
#Text=
#Text=CADET can be built from source with both clang and gcc.
24-1	3330-3333	For	_	_	
24-2	3334-3341	example	_	_	
24-3	3341-3342	,	_	_	
24-4	3343-3346	you	_	_	
24-5	3347-3350	can	_	_	
24-6	3351-3354	use	_	_	
24-7	3355-3358	the	_	_	
24-8	3359-3368	following	_	_	
24-9	3369-3376	command	_	_	
24-10	3377-3379	to	_	_	
24-11	3380-3388	minimize	_	_	
24-12	3389-3397	circuits	_	_	
24-13	3398-3402	with	_	_	
24-14	3403-3404	[	_	_	
24-15	3404-3407	ABC	*	SOFTWARE	
24-16	3407-3408	]	_	_	
24-17	3408-3409	(	_	_	
24-18	3409-3414	https	_	_	
24-19	3414-3415	:	_	_	
24-20	3415-3416	/	_	_	
24-21	3416-3417	/	_	_	
24-22	3417-3441	people.eecs.berkeley.edu	_	_	
24-23	3441-3442	/	_	_	
24-24	3442-3443	~	_	_	
24-25	3443-3449	alanmi	_	_	
24-26	3449-3450	/	_	_	
24-27	3450-3453	abc	*	SOFTWARE	
24-28	3453-3454	/	_	_	
24-29	3454-3455	)	_	_	
24-30	3455-3456	:	_	_	
24-31	3458-3459	`	_	_	
24-32	3459-3460	`	_	_	
24-33	3460-3461	`	_	_	
24-34	3461-3465	bash	*	PROGLANG	
24-35	3466-3467	$	_	_	
24-36	3468-3471	abc	_	_	
24-37	3472-3473	-	_	_	
24-38	3473-3474	c	_	_	
24-39	3475-3476	"	_	_	
24-40	3476-3480	read	_	_	
24-41	3481-3491	result.aig	_	_	
24-42	3491-3492	;	_	_	
24-43	3493-3496	dc2	_	_	
24-44	3496-3497	;	_	_	
24-45	3498-3503	write	_	_	
24-46	3504-3514	result.aig	_	_	
24-47	3514-3515	"	_	_	
24-48	3516-3517	`	_	_	
24-49	3517-3518	`	_	_	
24-50	3518-3519	`	_	_	
24-51	3521-3526	After	_	_	
24-52	3527-3530	the	_	_	
24-53	3531-3543	minimization	_	_	
24-54	3544-3545	a	_	_	
24-55	3546-3553	circuit	_	_	
24-56	3554-3558	with	_	_	
24-57	3559-3560	a	_	_	
24-58	3561-3567	single	_	_	
24-59	3568-3576	AND-gate	_	_	
24-60	3577-3584	remains	_	_	
24-61	3584-3585	:	_	_	
24-62	3587-3588	`	_	_	
24-63	3588-3589	`	_	_	
24-64	3589-3590	`	_	_	
24-65	3590-3595	aiger	*	SOFTWARE	
24-66	3596-3599	aag	_	_	
24-67	3600-3601	3	_	_	
24-68	3602-3603	2	_	_	
24-69	3604-3605	0	_	_	
24-70	3606-3607	1	_	_	
24-71	3608-3609	1	_	_	
24-72	3610-3611	2	_	_	
24-73	3612-3613	4	_	_	
24-74	3614-3615	6	_	_	
24-75	3616-3617	6	_	_	
24-76	3618-3619	4	_	_	
24-77	3620-3621	2	_	_	
24-78	3622-3624	i0	_	_	
24-79	3625-3626	1	_	_	
24-80	3627-3629	i1	_	_	
24-81	3630-3631	2	_	_	
24-82	3632-3634	o0	_	_	
24-83	3635-3636	3	_	_	
24-84	3637-3638	`	_	_	
24-85	3638-3639	`	_	_	
24-86	3639-3640	`	_	_	
24-87	3642-3644	To	_	_	
24-88	3645-3649	view	_	_	
24-89	3650-3651	a	_	_	
24-90	3652-3666	human-readable	_	_	
24-91	3667-3674	version	_	_	
24-92	3675-3677	of	_	_	
24-93	3678-3681	the	_	_	
24-94	3682-3689	circuit	_	_	
24-95	3690-3692	as	_	_	
24-96	3693-3698	shown	_	_	
24-97	3699-3704	above	_	_	
24-98	3705-3708	you	_	_	
24-99	3709-3713	have	_	_	
24-100	3714-3716	to	_	_	
24-101	3717-3724	convert	_	_	
24-102	3725-3728	the	_	_	
24-103	3729-3734	AIGER	*	SOFTWARE	
24-104	3735-3742	binrary	_	_	
24-105	3743-3749	formag	_	_	
24-106	3750-3751	`	_	_	
24-107	3751-3752	.	_	_	
24-108	3752-3755	aig	_	_	
24-109	3755-3756	`	_	_	
24-110	3757-3759	to	_	_	
24-111	3760-3763	the	_	_	
24-112	3764-3769	AIGER	*	SOFTWARE	
24-113	3770-3775	ASCII	_	_	
24-114	3776-3782	format	_	_	
24-115	3783-3784	`	_	_	
24-116	3784-3785	.	_	_	
24-117	3785-3788	aag	_	_	
24-118	3788-3789	`	_	_	
24-119	3790-3795	using	_	_	
24-120	3796-3799	the	_	_	
24-121	3800-3804	tool	_	_	
24-122	3805-3806	`	_	_	
24-123	3806-3814	aigtoaig	*	SOFTWARE	
24-124	3814-3815	`	_	_	
24-125	3816-3825	available	_	_	
24-126	3826-3828	in	_	_	
24-127	3829-3832	the	_	_	
24-128	3833-3834	[	_	_	
24-129	3834-3839	AIGER	*	SOFTWARE	
24-130	3840-3847	toolset	_	_	
24-131	3847-3848	]	_	_	
24-132	3848-3849	(	_	_	
24-133	3849-3853	http	_	_	
24-134	3853-3854	:	_	_	
24-135	3854-3855	/	_	_	
24-136	3855-3856	/	_	_	
24-137	3856-3866	fmv.jku.at	_	_	
24-138	3866-3867	/	_	_	
24-139	3867-3872	aiger	*	SOFTWARE	
24-140	3872-3873	/	_	_	
24-141	3873-3878	aiger	*[2]	SOFTWARE[2]	
24-142	3878-3879	-	*[2]	SOFTWARE[2]	
24-143	3879-3884	1.9.9	*[2]	SOFTWARE[2]	
24-144	3884-3885	.	_	_	
24-145	3885-3891	tar.gz	_	_	
24-146	3891-3892	)	_	_	
24-147	3892-3893	.	_	_	
24-148	3896-3897	#	_	_	
24-149	3897-3898	#	_	_	
24-150	3899-3909	Installing	_	_	
24-151	3910-3915	CADET	*	SOFTWARE	
24-152	3918-3923	CADET	*	SOFTWARE	
24-153	3924-3927	can	_	_	
24-154	3928-3930	be	_	_	
24-155	3931-3936	built	_	_	
24-156	3937-3941	from	_	_	
24-157	3942-3948	source	_	_	
24-158	3949-3953	with	_	_	
24-159	3954-3958	both	_	_	
24-160	3959-3964	clang	_	_	
24-161	3965-3968	and	_	_	
24-162	3969-3972	gcc	_	_	
24-163	3972-3973	.	_	_	

#Text=You can find pre-built binaries of CADET for Linux and OSX.
25-1	3974-3977	You	_	_	
25-2	3978-3981	can	_	_	
25-3	3982-3986	find	_	_	
25-4	3987-3996	pre-built	_	_	
25-5	3997-4005	binaries	_	_	
25-6	4006-4008	of	_	_	
25-7	4009-4014	CADET	*	SOFTWARE	
25-8	4015-4018	for	_	_	
25-9	4019-4024	Linux	_	_	
25-10	4025-4028	and	_	_	
25-11	4029-4032	OSX	_	_	
25-12	4032-4033	.	_	_	

#Text=The testing scripts require Python 3.
26-1	4034-4037	The	_	_	
26-2	4038-4045	testing	_	_	
26-3	4046-4053	scripts	_	_	
26-4	4054-4061	require	_	_	
26-5	4062-4068	Python	*[3]	SOFTWARE[3]	
26-6	4069-4070	3	*[3]	SOFTWARE[3]	
26-7	4070-4071	.	_	_	

#Text=To compile the solver type:
#Text=
#Text=```bash
#Text=$ .
27-1	4075-4077	To	_	_	
27-2	4078-4085	compile	_	_	
27-3	4086-4089	the	_	_	
27-4	4090-4096	solver	_	_	
27-5	4097-4101	type	_	_	
27-6	4101-4102	:	_	_	
27-7	4104-4105	`	_	_	
27-8	4105-4106	`	_	_	
27-9	4106-4107	`	_	_	
27-10	4107-4111	bash	*	PROGLANG	
27-11	4112-4113	$	_	_	
27-12	4114-4115	.	_	_	

#Text=/configure && make
#Text=```
#Text=
#Text=To make sure the solver works correctly execute the test suite:
#Text=
#Text=```bash
#Text=$ make test
#Text=```
#Text=
#Text=One of the test cases will timeout as part of the testsuite and a number of tests will return with the result UNKNOWN, which is intended. 
#Text=
#Text=
#Text=## Usage
#Text=
#Text=The most common use case for the solver is to solve formulas specified as a [QDIMACS](http://www.qbflib.org/qdimacs.html) file.
28-1	4115-4116	/	_	_	
28-2	4116-4125	configure	_	_	
28-3	4126-4127	&	_	_	
28-4	4127-4128	&	_	_	
28-5	4129-4133	make	*	SOFTWARE	
28-6	4134-4135	`	_	_	
28-7	4135-4136	`	_	_	
28-8	4136-4137	`	_	_	
28-9	4139-4141	To	_	_	
28-10	4142-4146	make	_	_	
28-11	4147-4151	sure	_	_	
28-12	4152-4155	the	_	_	
28-13	4156-4162	solver	_	_	
28-14	4163-4168	works	_	_	
28-15	4169-4178	correctly	_	_	
28-16	4179-4186	execute	_	_	
28-17	4187-4190	the	_	_	
28-18	4191-4195	test	_	_	
28-19	4196-4201	suite	_	_	
28-20	4201-4202	:	_	_	
28-21	4204-4205	`	_	_	
28-22	4205-4206	`	_	_	
28-23	4206-4207	`	_	_	
28-24	4207-4211	bash	*	PROGLANG	
28-25	4212-4213	$	_	_	
28-26	4214-4218	make	*	SOFTWARE	
28-27	4219-4223	test	_	_	
28-28	4224-4225	`	_	_	
28-29	4225-4226	`	_	_	
28-30	4226-4227	`	_	_	
28-31	4229-4232	One	_	_	
28-32	4233-4235	of	_	_	
28-33	4236-4239	the	_	_	
28-34	4240-4244	test	_	_	
28-35	4245-4250	cases	_	_	
28-36	4251-4255	will	_	_	
28-37	4256-4263	timeout	_	_	
28-38	4264-4266	as	_	_	
28-39	4267-4271	part	_	_	
28-40	4272-4274	of	_	_	
28-41	4275-4278	the	_	_	
28-42	4279-4288	testsuite	_	_	
28-43	4289-4292	and	_	_	
28-44	4293-4294	a	_	_	
28-45	4295-4301	number	_	_	
28-46	4302-4304	of	_	_	
28-47	4305-4310	tests	_	_	
28-48	4311-4315	will	_	_	
28-49	4316-4322	return	_	_	
28-50	4323-4327	with	_	_	
28-51	4328-4331	the	_	_	
28-52	4332-4338	result	_	_	
28-53	4339-4346	UNKNOWN	_	_	
28-54	4346-4347	,	_	_	
28-55	4348-4353	which	_	_	
28-56	4354-4356	is	_	_	
28-57	4357-4365	intended	_	_	
28-58	4365-4366	.	_	_	
28-59	4370-4371	#	_	_	
28-60	4371-4372	#	_	_	
28-61	4373-4378	Usage	_	_	
28-62	4380-4383	The	_	_	
28-63	4384-4388	most	_	_	
28-64	4389-4395	common	_	_	
28-65	4396-4399	use	_	_	
28-66	4400-4404	case	_	_	
28-67	4405-4408	for	_	_	
28-68	4409-4412	the	_	_	
28-69	4413-4419	solver	_	_	
28-70	4420-4422	is	_	_	
28-71	4423-4425	to	_	_	
28-72	4426-4431	solve	_	_	
28-73	4432-4440	formulas	_	_	
28-74	4441-4450	specified	_	_	
28-75	4451-4453	as	_	_	
28-76	4454-4455	a	_	_	
28-77	4456-4457	[	_	_	
28-78	4457-4464	QDIMACS	*	SOFTWARE	
28-79	4464-4465	]	_	_	
28-80	4465-4466	(	_	_	
28-81	4466-4470	http	_	_	
28-82	4470-4471	:	_	_	
28-83	4471-4472	/	_	_	
28-84	4472-4473	/	_	_	
28-85	4473-4487	www.qbflib.org	_	_	
28-86	4487-4488	/	_	_	
28-87	4488-4500	qdimacs.html	_	_	
28-87.1	4488-4495	qdimacs	*	SOFTWARE	
28-88	4500-4501	)	_	_	
28-89	4502-4506	file	_	_	
28-90	4506-4507	.	_	_	

#Text=```bash
#Text=$ .
29-1	4510-4511	`	_	_	
29-2	4511-4512	`	_	_	
29-3	4512-4513	`	_	_	
29-4	4513-4517	bash	*	PROGLANG	
29-5	4518-4519	$	_	_	
29-6	4520-4521	.	_	_	

#Text=/cadet file.qdimacs
#Text=```
#Text=
#Text=You can also pipe QDIMACS into the solver:
#Text=
#Text=```bash
#Text=$ cat file.qdimacs | .
30-1	4521-4522	/	_	_	
30-2	4522-4527	cadet	*	SOFTWARE	
30-3	4528-4540	file.qdimacs	_	_	
30-3.1	4533-4540	qdimacs	*	SOFTWARE	
30-4	4541-4542	`	_	_	
30-5	4542-4543	`	_	_	
30-6	4543-4544	`	_	_	
30-7	4546-4549	You	_	_	
30-8	4550-4553	can	_	_	
30-9	4554-4558	also	_	_	
30-10	4559-4563	pipe	_	_	
30-11	4564-4571	QDIMACS	*	SOFTWARE	
30-12	4572-4576	into	_	_	
30-13	4577-4580	the	_	_	
30-14	4581-4587	solver	_	_	
30-15	4587-4588	:	_	_	
30-16	4590-4591	`	_	_	
30-17	4591-4592	`	_	_	
30-18	4592-4593	`	_	_	
30-19	4593-4597	bash	*	PROGLANG	
30-20	4598-4599	$	_	_	
30-21	4600-4603	cat	_	_	
30-22	4604-4616	file.qdimacs	_	_	
30-22.1	4609-4616	qdimacs	*	SOFTWARE	
30-23	4617-4618	|	_	_	
30-24	4619-4620	.	_	_	

#Text=/cadet
#Text=```
#Text=
#Text=#### Input Formats
#Text=
#Text=CADET reads files in both [QDIMACS](http://www.qbflib.org/qdimacs.html) and [QAIGER](https://github.com/ltentrup/QAIGER) format.
31-1	4620-4621	/	_	_	
31-2	4621-4626	cadet	*	SOFTWARE	
31-3	4627-4628	`	_	_	
31-4	4628-4629	`	_	_	
31-5	4629-4630	`	_	_	
31-6	4632-4633	#	_	_	
31-7	4633-4634	#	_	_	
31-8	4634-4635	#	_	_	
31-9	4635-4636	#	_	_	
31-10	4637-4642	Input	_	_	
31-11	4643-4650	Formats	_	_	
31-12	4652-4657	CADET	*	SOFTWARE	
31-13	4658-4663	reads	_	_	
31-14	4664-4669	files	_	_	
31-15	4670-4672	in	_	_	
31-16	4673-4677	both	_	_	
31-17	4678-4679	[	_	_	
31-18	4679-4686	QDIMACS	*	SOFTWARE	
31-19	4686-4687	]	_	_	
31-20	4687-4688	(	_	_	
31-21	4688-4692	http	_	_	
31-22	4692-4693	:	_	_	
31-23	4693-4694	/	_	_	
31-24	4694-4695	/	_	_	
31-25	4695-4709	www.qbflib.org	_	_	
31-26	4709-4710	/	_	_	
31-27	4710-4722	qdimacs.html	_	_	
31-27.1	4710-4717	qdimacs	*	SOFTWARE	
31-28	4722-4723	)	_	_	
31-29	4724-4727	and	_	_	
31-30	4728-4729	[	_	_	
31-31	4729-4735	QAIGER	*	SOFTWARE	
31-32	4735-4736	]	_	_	
31-33	4736-4737	(	_	_	
31-34	4737-4742	https	_	_	
31-35	4742-4743	:	_	_	
31-36	4743-4744	/	_	_	
31-37	4744-4745	/	_	_	
31-38	4745-4755	github.com	_	_	
31-39	4755-4756	/	_	_	
31-40	4756-4764	ltentrup	_	_	
31-41	4764-4765	/	_	_	
31-42	4765-4771	QAIGER	*	SOFTWARE	
31-43	4771-4772	)	_	_	
31-44	4773-4779	format	_	_	
31-45	4779-4780	.	_	_	

#Text=Files can be zipped with gzip, but must then end with the file extension gz or gzip. 
#Text=
#Text=
#Text=## Proofs
#Text=
#Text=CADET is able to prove (or _certify_) its results.
32-1	4781-4786	Files	_	_	
32-2	4787-4790	can	_	_	
32-3	4791-4793	be	_	_	
32-4	4794-4800	zipped	_	_	
32-5	4801-4805	with	_	_	
32-6	4806-4810	gzip	_	_	
32-7	4810-4811	,	_	_	
32-8	4812-4815	but	_	_	
32-9	4816-4820	must	_	_	
32-10	4821-4825	then	_	_	
32-11	4826-4829	end	_	_	
32-12	4830-4834	with	_	_	
32-13	4835-4838	the	_	_	
32-14	4839-4843	file	_	_	
32-15	4844-4853	extension	_	_	
32-16	4854-4856	gz	_	_	
32-17	4857-4859	or	_	_	
32-18	4860-4864	gzip	_	_	
32-19	4864-4865	.	_	_	
32-20	4869-4870	#	_	_	
32-21	4870-4871	#	_	_	
32-22	4872-4878	Proofs	_	_	
32-23	4880-4885	CADET	*	SOFTWARE	
32-24	4886-4888	is	_	_	
32-25	4889-4893	able	_	_	
32-26	4894-4896	to	_	_	
32-27	4897-4902	prove	_	_	
32-28	4903-4904	(	_	_	
32-29	4904-4906	or	_	_	
32-30	4907-4908	_	_	_	
32-31	4908-4915	certify	_	_	
32-32	4915-4916	_	_	_	
32-33	4916-4917	)	_	_	
32-34	4918-4921	its	_	_	
32-35	4922-4929	results	_	_	
32-36	4929-4930	.	_	_	

#Text=As 2QBF formulas in QDIMACS have a forall-exists quantifier alternation, proofs for UNSAT results are given as an assignment to the universally quantified variables.
33-1	4931-4933	As	_	_	
33-2	4934-4938	2QBF	_	_	
33-3	4939-4947	formulas	_	_	
33-4	4948-4950	in	_	_	
33-5	4951-4958	QDIMACS	*	SOFTWARE	
33-6	4959-4963	have	_	_	
33-7	4964-4965	a	_	_	
33-8	4966-4979	forall-exists	_	_	
33-9	4980-4990	quantifier	_	_	
33-10	4991-5002	alternation	_	_	
33-11	5002-5003	,	_	_	
33-12	5004-5010	proofs	_	_	
33-13	5011-5014	for	_	_	
33-14	5015-5020	UNSAT	_	_	
33-15	5021-5028	results	_	_	
33-16	5029-5032	are	_	_	
33-17	5033-5038	given	_	_	
33-18	5039-5041	as	_	_	
33-19	5042-5044	an	_	_	
33-20	5045-5055	assignment	_	_	
33-21	5056-5058	to	_	_	
33-22	5059-5062	the	_	_	
33-23	5063-5074	universally	_	_	
33-24	5075-5085	quantified	_	_	
33-25	5086-5095	variables	_	_	
33-26	5095-5096	.	_	_	

#Text=Proofs for SAT results are given as a circuit, mapping assignments to the universally quantified variables to assignments to the existentially quantified variables.
34-1	5097-5103	Proofs	_	_	
34-2	5104-5107	for	_	_	
34-3	5108-5111	SAT	_	_	
34-4	5112-5119	results	_	_	
34-5	5120-5123	are	_	_	
34-6	5124-5129	given	_	_	
34-7	5130-5132	as	_	_	
34-8	5133-5134	a	_	_	
34-9	5135-5142	circuit	_	_	
34-10	5142-5143	,	_	_	
34-11	5144-5151	mapping	_	_	
34-12	5152-5163	assignments	_	_	
34-13	5164-5166	to	_	_	
34-14	5167-5170	the	_	_	
34-15	5171-5182	universally	_	_	
34-16	5183-5193	quantified	_	_	
34-17	5194-5203	variables	_	_	
34-18	5204-5206	to	_	_	
34-19	5207-5218	assignments	_	_	
34-20	5219-5221	to	_	_	
34-21	5222-5225	the	_	_	
34-22	5226-5239	existentially	_	_	
34-23	5240-5250	quantified	_	_	
34-24	5251-5260	variables	_	_	
34-25	5260-5261	.	_	_	

#Text=Certificates for UNSAT results are written to stdout according to the [QDIMACS](http://www.qbflib.org/qdimacs.html) standard.
35-1	5264-5276	Certificates	_	_	
35-2	5277-5280	for	_	_	
35-3	5281-5286	UNSAT	_	_	
35-4	5287-5294	results	_	_	
35-5	5295-5298	are	_	_	
35-6	5299-5306	written	_	_	
35-7	5307-5309	to	_	_	
35-8	5310-5316	stdout	_	_	
35-9	5317-5326	according	_	_	
35-10	5327-5329	to	_	_	
35-11	5330-5333	the	_	_	
35-12	5334-5335	[	_	_	
35-13	5335-5342	QDIMACS	*	SOFTWARE	
35-14	5342-5343	]	_	_	
35-15	5343-5344	(	_	_	
35-16	5344-5348	http	_	_	
35-17	5348-5349	:	_	_	
35-18	5349-5350	/	_	_	
35-19	5350-5351	/	_	_	
35-20	5351-5365	www.qbflib.org	_	_	
35-21	5365-5366	/	_	_	
35-22	5366-5378	qdimacs.html	_	_	
35-22.1	5366-5373	qdimacs	*	SOFTWARE	
35-23	5378-5379	)	_	_	
35-24	5380-5388	standard	_	_	
35-25	5388-5389	.	_	_	

#Text=To print output according to the QDIMACS standard, use the `--qdimacs_out` flag.
36-1	5390-5392	To	_	_	
36-2	5393-5398	print	_	_	
36-3	5399-5405	output	_	_	
36-4	5406-5415	according	_	_	
36-5	5416-5418	to	_	_	
36-6	5419-5422	the	_	_	
36-7	5423-5430	QDIMACS	*	SOFTWARE	
36-8	5431-5439	standard	_	_	
36-9	5439-5440	,	_	_	
36-10	5441-5444	use	_	_	
36-11	5445-5448	the	_	_	
36-12	5449-5450	`	_	_	
36-13	5450-5451	-	_	_	
36-14	5451-5452	-	_	_	
36-15	5452-5463	qdimacs_out	_	_	
36-15.1	5452-5459	qdimacs	*	SOFTWARE	
36-16	5463-5464	`	_	_	
36-17	5465-5469	flag	_	_	
36-18	5469-5470	.	_	_	

#Text=CADET checks UNSAT certificates internally by default.
37-1	5471-5476	CADET	*	SOFTWARE	
37-2	5477-5483	checks	_	_	
37-3	5484-5489	UNSAT	_	_	
37-4	5490-5502	certificates	_	_	
37-5	5503-5513	internally	_	_	
37-6	5514-5516	by	_	_	
37-7	5517-5524	default	_	_	
37-8	5524-5525	.	_	_	

#Text=With the command line option `-c [file]` CADET writes the SAT certificate for true 2QBF.
38-1	5528-5532	With	_	_	
38-2	5533-5536	the	_	_	
38-3	5537-5544	command	_	_	
38-4	5545-5549	line	_	_	
38-5	5550-5556	option	_	_	
38-6	5557-5558	`	_	_	
38-7	5558-5559	-	_	_	
38-8	5559-5560	c	_	_	
38-9	5561-5562	[	_	_	
38-10	5562-5566	file	_	_	
38-11	5566-5567	]	_	_	
38-12	5567-5568	`	_	_	
38-13	5569-5574	CADET	*	SOFTWARE	
38-14	5575-5581	writes	_	_	
38-15	5582-5585	the	_	_	
38-16	5586-5589	SAT	_	_	
38-17	5590-5601	certificate	_	_	
38-18	5602-5605	for	_	_	
38-19	5606-5610	true	_	_	
38-20	5611-5615	2QBF	_	_	
38-21	5615-5616	.	_	_	

#Text=You can either specify a file name to which the certificate should be written (ending in `.aag` or `.aig`) or you can specify `sdtout` to let CADET print the certificate on the terminal.
39-1	5617-5620	You	_	_	
39-2	5621-5624	can	_	_	
39-3	5625-5631	either	_	_	
39-4	5632-5639	specify	_	_	
39-5	5640-5641	a	_	_	
39-6	5642-5646	file	_	_	
39-7	5647-5651	name	_	_	
39-8	5652-5654	to	_	_	
39-9	5655-5660	which	_	_	
39-10	5661-5664	the	_	_	
39-11	5665-5676	certificate	_	_	
39-12	5677-5683	should	_	_	
39-13	5684-5686	be	_	_	
39-14	5687-5694	written	_	_	
39-15	5695-5696	(	_	_	
39-16	5696-5702	ending	_	_	
39-17	5703-5705	in	_	_	
39-18	5706-5707	`	_	_	
39-19	5707-5708	.	_	_	
39-20	5708-5711	aag	_	_	
39-21	5711-5712	`	_	_	
39-22	5713-5715	or	_	_	
39-23	5716-5717	`	_	_	
39-24	5717-5718	.	_	_	
39-25	5718-5721	aig	_	_	
39-26	5721-5722	`	_	_	
39-27	5722-5723	)	_	_	
39-28	5724-5726	or	_	_	
39-29	5727-5730	you	_	_	
39-30	5731-5734	can	_	_	
39-31	5735-5742	specify	_	_	
39-32	5743-5744	`	_	_	
39-33	5744-5750	sdtout	_	_	
39-34	5750-5751	`	_	_	
39-35	5752-5754	to	_	_	
39-36	5755-5758	let	_	_	
39-37	5759-5764	CADET	*	SOFTWARE	
39-38	5765-5770	print	_	_	
39-39	5771-5774	the	_	_	
39-40	5775-5786	certificate	_	_	
39-41	5787-5789	on	_	_	
39-42	5790-5793	the	_	_	
39-43	5794-5802	terminal	_	_	
39-44	5802-5803	.	_	_	

#Text=For example, type:
#Text=
#Text=```bash
#Text=$ .
40-1	5804-5807	For	_	_	
40-2	5808-5815	example	_	_	
40-3	5815-5816	,	_	_	
40-4	5817-5821	type	_	_	
40-5	5821-5822	:	_	_	
40-6	5824-5825	`	_	_	
40-7	5825-5826	`	_	_	
40-8	5826-5827	`	_	_	
40-9	5827-5831	bash	*	PROGLANG	
40-10	5832-5833	$	_	_	
40-11	5834-5835	.	_	_	

#Text=/cadet -c certificate.aag file.qdimacs
#Text=```
#Text=
#Text=As soon as you work with certificates you may want to install the [AIGER tool set](http://fmv.jku.at/aiger/aiger-1.9.4.tar.gz) and the [ABC](https://people.eecs.berkeley.edu/~alanmi/abc/).
41-1	5835-5836	/	_	_	
41-2	5836-5841	cadet	*	SOFTWARE	
41-3	5842-5843	-	_	_	
41-4	5843-5844	c	_	_	
41-5	5845-5860	certificate.aag	_	_	
41-6	5861-5873	file.qdimacs	_	_	
41-6.1	5866-5873	qdimacs	*	SOFTWARE	
41-7	5874-5875	`	_	_	
41-8	5875-5876	`	_	_	
41-9	5876-5877	`	_	_	
41-10	5879-5881	As	_	_	
41-11	5882-5886	soon	_	_	
41-12	5887-5889	as	_	_	
41-13	5890-5893	you	_	_	
41-14	5894-5898	work	_	_	
41-15	5899-5903	with	_	_	
41-16	5904-5916	certificates	_	_	
41-17	5917-5920	you	_	_	
41-18	5921-5924	may	_	_	
41-19	5925-5929	want	_	_	
41-20	5930-5932	to	_	_	
41-21	5933-5940	install	_	_	
41-22	5941-5944	the	_	_	
41-23	5945-5946	[	_	_	
41-24	5946-5951	AIGER	*	SOFTWARE	
41-25	5952-5956	tool	_	_	
41-26	5957-5960	set	_	_	
41-27	5960-5961	]	_	_	
41-28	5961-5962	(	_	_	
41-29	5962-5966	http	_	_	
41-30	5966-5967	:	_	_	
41-31	5967-5968	/	_	_	
41-32	5968-5969	/	_	_	
41-33	5969-5979	fmv.jku.at	_	_	
41-34	5979-5980	/	_	_	
41-35	5980-5985	aiger	*	SOFTWARE	
41-36	5985-5986	/	_	_	
41-37	5986-5991	aiger	*[4]	SOFTWARE[4]	
41-38	5991-5992	-	*[4]	SOFTWARE[4]	
41-39	5992-5997	1.9.4	*[4]	SOFTWARE[4]	
41-40	5997-5998	.	_	_	
41-41	5998-6004	tar.gz	_	_	
41-42	6004-6005	)	_	_	
41-43	6006-6009	and	_	_	
41-44	6010-6013	the	_	_	
41-45	6014-6015	[	_	_	
41-46	6015-6018	ABC	*	SOFTWARE	
41-47	6018-6019	]	_	_	
41-48	6019-6020	(	_	_	
41-49	6020-6025	https	_	_	
41-50	6025-6026	:	_	_	
41-51	6026-6027	/	_	_	
41-52	6027-6028	/	_	_	
41-53	6028-6052	people.eecs.berkeley.edu	_	_	
41-54	6052-6053	/	_	_	
41-55	6053-6054	~	_	_	
41-56	6054-6060	alanmi	_	_	
41-57	6060-6061	/	_	_	
41-58	6061-6064	abc	*	SOFTWARE	
41-59	6064-6065	/	_	_	
41-60	6065-6066	)	_	_	
41-61	6066-6067	.	_	_	

#Text=The distribution of CADET comes with several scripts that demonstrate how to generate, simplify, and check certificates using ABC and the AIGER tool set.
#Text=
#Text=#### Checking Certificates
#Text=
#Text=UNSAT results are checked internally by default.
42-1	6068-6071	The	_	_	
42-2	6072-6084	distribution	_	_	
42-3	6085-6087	of	_	_	
42-4	6088-6093	CADET	*	SOFTWARE	
42-5	6094-6099	comes	_	_	
42-6	6100-6104	with	_	_	
42-7	6105-6112	several	_	_	
42-8	6113-6120	scripts	_	_	
42-9	6121-6125	that	_	_	
42-10	6126-6137	demonstrate	_	_	
42-11	6138-6141	how	_	_	
42-12	6142-6144	to	_	_	
42-13	6145-6153	generate	_	_	
42-14	6153-6154	,	_	_	
42-15	6155-6163	simplify	_	_	
42-16	6163-6164	,	_	_	
42-17	6165-6168	and	_	_	
42-18	6169-6174	check	_	_	
42-19	6175-6187	certificates	_	_	
42-20	6188-6193	using	_	_	
42-21	6194-6197	ABC	*	SOFTWARE	
42-22	6198-6201	and	_	_	
42-23	6202-6205	the	_	_	
42-24	6206-6211	AIGER	*	SOFTWARE	
42-25	6212-6216	tool	_	_	
42-26	6217-6220	set	_	_	
42-27	6220-6221	.	_	_	
42-28	6223-6224	#	_	_	
42-29	6224-6225	#	_	_	
42-30	6225-6226	#	_	_	
42-31	6226-6227	#	_	_	
42-32	6228-6236	Checking	_	_	
42-33	6237-6249	Certificates	_	_	
42-34	6251-6256	UNSAT	_	_	
42-35	6257-6264	results	_	_	
42-36	6265-6268	are	_	_	
42-37	6269-6276	checked	_	_	
42-38	6277-6287	internally	_	_	
42-39	6288-6290	by	_	_	
42-40	6291-6298	default	_	_	
42-41	6298-6299	.	_	_	

#Text=You can double check them by asserting the assignment to the universals in the CNF of the QDIMACS and querying a SAT solver.
43-1	6300-6303	You	_	_	
43-2	6304-6307	can	_	_	
43-3	6308-6314	double	_	_	
43-4	6315-6320	check	_	_	
43-5	6321-6325	them	_	_	
43-6	6326-6328	by	_	_	
43-7	6329-6338	asserting	_	_	
43-8	6339-6342	the	_	_	
43-9	6343-6353	assignment	_	_	
43-10	6354-6356	to	_	_	
43-11	6357-6360	the	_	_	
43-12	6361-6371	universals	_	_	
43-13	6372-6374	in	_	_	
43-14	6375-6378	the	_	_	
43-15	6379-6382	CNF	_	_	
43-16	6383-6385	of	_	_	
43-17	6386-6389	the	_	_	
43-18	6390-6397	QDIMACS	*	SOFTWARE	
43-19	6398-6401	and	_	_	
43-20	6402-6410	querying	_	_	
43-21	6411-6412	a	_	_	
43-22	6413-6416	SAT	_	_	
43-23	6417-6423	solver	_	_	
43-24	6423-6424	.	_	_	

#Text=For checking SAT certificates you have two options: By default CADET produces certificates that can be checked by Certcheck, which was written by [Leander Tentrup](https://www.react.uni-saarland.de/people/tentrup.html).
44-1	6427-6430	For	_	_	
44-2	6431-6439	checking	_	_	
44-3	6440-6443	SAT	_	_	
44-4	6444-6456	certificates	_	_	
44-5	6457-6460	you	_	_	
44-6	6461-6465	have	_	_	
44-7	6466-6469	two	_	_	
44-8	6470-6477	options	_	_	
44-9	6477-6478	:	_	_	
44-10	6479-6481	By	_	_	
44-11	6482-6489	default	_	_	
44-12	6490-6495	CADET	*	SOFTWARE	
44-13	6496-6504	produces	_	_	
44-14	6505-6517	certificates	_	_	
44-15	6518-6522	that	_	_	
44-16	6523-6526	can	_	_	
44-17	6527-6529	be	_	_	
44-18	6530-6537	checked	_	_	
44-19	6538-6540	by	_	_	
44-20	6541-6550	Certcheck	_	_	
44-21	6550-6551	,	_	_	
44-22	6552-6557	which	_	_	
44-23	6558-6561	was	_	_	
44-24	6562-6569	written	_	_	
44-25	6570-6572	by	_	_	
44-26	6573-6574	[	_	_	
44-27	6574-6581	Leander	_	_	
44-28	6582-6589	Tentrup	_	_	
44-29	6589-6590	]	_	_	
44-30	6590-6591	(	_	_	
44-31	6591-6596	https	_	_	
44-32	6596-6597	:	_	_	
44-33	6597-6598	/	_	_	
44-34	6598-6599	/	_	_	
44-35	6599-6624	www.react.uni-saarland.de	_	_	
44-36	6624-6625	/	_	_	
44-37	6625-6631	people	_	_	
44-38	6631-6632	/	_	_	
44-39	6632-6644	tentrup.html	_	_	
44-40	6644-6645	)	_	_	
44-41	6645-6646	.	_	_	

#Text=Certcheck comes with the distribution of [CAQE](https://www.react.uni-saarland.de/tools/caqe/).
45-1	6647-6656	Certcheck	_	_	
45-2	6657-6662	comes	_	_	
45-3	6663-6667	with	_	_	
45-4	6668-6671	the	_	_	
45-5	6672-6684	distribution	_	_	
45-6	6685-6687	of	_	_	
45-7	6688-6689	[	_	_	
45-8	6689-6693	CAQE	*	SOFTWARE	
45-9	6693-6694	]	_	_	
45-10	6694-6695	(	_	_	
45-11	6695-6700	https	_	_	
45-12	6700-6701	:	_	_	
45-13	6701-6702	/	_	_	
45-14	6702-6703	/	_	_	
45-15	6703-6728	www.react.uni-saarland.de	_	_	
45-16	6728-6729	/	_	_	
45-17	6729-6734	tools	_	_	
45-18	6734-6735	/	_	_	
45-19	6735-6739	caqe	*	SOFTWARE	
45-20	6739-6740	/	_	_	
45-21	6740-6741	)	_	_	
45-22	6741-6742	.	_	_	

#Text=To produce certificates that are compatible with [QBFcert](http://fmv.jku.at/qbfcert/) add `--qbfcert` option to the command line.
46-1	6743-6745	To	_	_	
46-2	6746-6753	produce	_	_	
46-3	6754-6766	certificates	_	_	
46-4	6767-6771	that	_	_	
46-5	6772-6775	are	_	_	
46-6	6776-6786	compatible	_	_	
46-7	6787-6791	with	_	_	
46-8	6792-6793	[	_	_	
46-9	6793-6800	QBFcert	*	SOFTWARE	
46-10	6800-6801	]	_	_	
46-11	6801-6802	(	_	_	
46-12	6802-6806	http	_	_	
46-13	6806-6807	:	_	_	
46-14	6807-6808	/	_	_	
46-15	6808-6809	/	_	_	
46-16	6809-6819	fmv.jku.at	_	_	
46-17	6819-6820	/	_	_	
46-18	6820-6827	qbfcert	*	SOFTWARE	
46-19	6827-6828	/	_	_	
46-20	6828-6829	)	_	_	
46-21	6830-6833	add	_	_	
46-22	6834-6835	`	_	_	
46-23	6835-6836	-	_	_	
46-24	6836-6837	-	_	_	
46-25	6837-6844	qbfcert	*	SOFTWARE	
46-26	6844-6845	`	_	_	
46-27	6846-6852	option	_	_	
46-28	6853-6855	to	_	_	
46-29	6856-6859	the	_	_	
46-30	6860-6867	command	_	_	
46-31	6868-6872	line	_	_	
46-32	6872-6873	.	_	_	

#Text=Note that QBFcert standard is only compatible with the ASCII format of the AIGER standard, so be sure that the certificate file name ends with `.aag`.
47-1	6876-6880	Note	_	_	
47-2	6881-6885	that	_	_	
47-3	6886-6893	QBFcert	*	SOFTWARE	
47-4	6894-6902	standard	_	_	
47-5	6903-6905	is	_	_	
47-6	6906-6910	only	_	_	
47-7	6911-6921	compatible	_	_	
47-8	6922-6926	with	_	_	
47-9	6927-6930	the	_	_	
47-10	6931-6936	ASCII	_	_	
47-11	6937-6943	format	_	_	
47-12	6944-6946	of	_	_	
47-13	6947-6950	the	_	_	
47-14	6951-6956	AIGER	*	SOFTWARE	
47-15	6957-6965	standard	_	_	
47-16	6965-6966	,	_	_	
47-17	6967-6969	so	_	_	
47-18	6970-6972	be	_	_	
47-19	6973-6977	sure	_	_	
47-20	6978-6982	that	_	_	
47-21	6983-6986	the	_	_	
47-22	6987-6998	certificate	_	_	
47-23	6999-7003	file	_	_	
47-24	7004-7008	name	_	_	
47-25	7009-7013	ends	_	_	
47-26	7014-7018	with	_	_	
47-27	7019-7020	`	_	_	
47-28	7020-7021	.	_	_	
47-29	7021-7024	aag	_	_	
47-30	7024-7025	`	_	_	
47-31	7025-7026	.	_	_	

#Text=Also, be aware that QBFcert certificates cannot be minimized by ABC. 
#Text=
#Text=## Publications
#Text=
#Text=[Learning Heuristics for 2QBF through Deep Reinforcement Learning](https://arxiv.org/abs/1807.08058).
48-1	7027-7031	Also	_	_	
48-2	7031-7032	,	_	_	
48-3	7033-7035	be	_	_	
48-4	7036-7041	aware	_	_	
48-5	7042-7046	that	_	_	
48-6	7047-7054	QBFcert	*	SOFTWARE	
48-7	7055-7067	certificates	_	_	
48-8	7068-7074	cannot	_	_	
48-9	7075-7077	be	_	_	
48-10	7078-7087	minimized	_	_	
48-11	7088-7090	by	_	_	
48-12	7091-7094	ABC	*	SOFTWARE	
48-13	7094-7095	.	_	_	
48-14	7098-7099	#	_	_	
48-15	7099-7100	#	_	_	
48-16	7101-7113	Publications	_	_	
48-17	7115-7116	[	_	_	
48-18	7116-7124	Learning	*[5]	PUBLICATION[5]	
48-19	7125-7135	Heuristics	*[5]	PUBLICATION[5]	
48-20	7136-7139	for	*[5]	PUBLICATION[5]	
48-21	7140-7144	2QBF	*[5]	PUBLICATION[5]	
48-22	7145-7152	through	*[5]	PUBLICATION[5]	
48-23	7153-7157	Deep	*[5]	PUBLICATION[5]	
48-24	7158-7171	Reinforcement	*[5]	PUBLICATION[5]	
48-25	7172-7180	Learning	*[5]	PUBLICATION[5]	
48-26	7180-7181	]	_	_	
48-27	7181-7182	(	_	_	
48-28	7182-7187	https	_	_	
48-29	7187-7188	:	_	_	
48-30	7188-7189	/	_	_	
48-31	7189-7190	/	_	_	
48-32	7190-7199	arxiv.org	_	_	
48-33	7199-7200	/	_	_	
48-34	7200-7203	abs	_	_	
48-35	7203-7204	/	_	_	
48-36	7204-7214	1807.08058	_	_	
48-37	7214-7215	)	_	_	
48-38	7215-7216	.	_	_	

#Text=Gil Lederman, Markus N.
49-1	7217-7220	Gil	_	_	
49-2	7221-7229	Lederman	_	_	
49-3	7229-7230	,	_	_	
49-4	7231-7237	Markus	_	_	
49-5	7238-7239	N	_	_	
49-6	7239-7240	.	_	_	

#Text=Rabe, Edward A.
50-1	7241-7245	Rabe	_	_	
50-2	7245-7246	,	_	_	
50-3	7247-7253	Edward	_	_	
50-4	7254-7255	A	_	_	
50-5	7255-7256	.	_	_	

#Text=Lee, Sanjit A.
51-1	7257-7260	Lee	_	_	
51-2	7260-7261	,	_	_	
51-3	7262-7268	Sanjit	_	_	
51-4	7269-7270	A	_	_	
51-5	7270-7271	.	_	_	

#Text=Seshia. arXiv preprint, 2018.
52-1	7272-7278	Seshia	_	_	
52-2	7278-7279	.	_	_	
52-3	7280-7285	arXiv	_	_	
52-4	7286-7294	preprint	_	_	
52-5	7294-7295	,	_	_	
52-6	7296-7300	2018	_	_	
52-7	7300-7301	.	_	_	

#Text=[Understanding and Extending Incremental Determinization for 2QBF](https://people.eecs.berkeley.edu/~sseshia/pubdir/id-cav18.pdf).
53-1	7303-7304	[	_	_	
53-2	7304-7317	Understanding	*[6]	PUBLICATION[6]	
53-3	7318-7321	and	*[6]	PUBLICATION[6]	
53-4	7322-7331	Extending	*[6]	PUBLICATION[6]	
53-5	7332-7343	Incremental	*[6]	PUBLICATION[6]	
53-6	7344-7359	Determinization	*[6]	PUBLICATION[6]	
53-7	7360-7363	for	*[6]	PUBLICATION[6]	
53-8	7364-7368	2QBF	*[6]	PUBLICATION[6]	
53-9	7368-7369	]	_	_	
53-10	7369-7370	(	_	_	
53-11	7370-7375	https	_	_	
53-12	7375-7376	:	_	_	
53-13	7376-7377	/	_	_	
53-14	7377-7378	/	_	_	
53-15	7378-7402	people.eecs.berkeley.edu	_	_	
53-16	7402-7403	/	_	_	
53-17	7403-7404	~	_	_	
53-18	7404-7411	sseshia	_	_	
53-19	7411-7412	/	_	_	
53-20	7412-7418	pubdir	_	_	
53-21	7418-7419	/	_	_	
53-22	7419-7427	id-cav18	_	_	
53-22.1	7422-7427	cav18	*	CONFERENCE	
53-23	7427-7428	.	_	_	
53-24	7428-7431	pdf	_	_	
53-25	7431-7432	)	_	_	
53-26	7432-7433	.	_	_	

#Text=Markus N.
54-1	7434-7440	Markus	_	_	
54-2	7441-7442	N	_	_	
54-3	7442-7443	.	_	_	

#Text=Rabe, Leander Tentrup, Cameron Rasmussen, and Sanjit Seshia.
55-1	7444-7448	Rabe	_	_	
55-2	7448-7449	,	_	_	
55-3	7450-7457	Leander	_	_	
55-4	7458-7465	Tentrup	_	_	
55-5	7465-7466	,	_	_	
55-6	7467-7474	Cameron	_	_	
55-7	7475-7484	Rasmussen	_	_	
55-8	7484-7485	,	_	_	
55-9	7486-7489	and	_	_	
55-10	7490-7496	Sanjit	_	_	
55-11	7497-7503	Seshia	_	_	
55-12	7503-7504	.	_	_	

#Text=CAV, 2018.
56-1	7505-7508	CAV	*[7]	CONFERENCE[7]	
56-2	7508-7509	,	*[7]	CONFERENCE[7]	
56-3	7510-7514	2018	*[7]	CONFERENCE[7]	
56-4	7514-7515	.	_	_	

#Text=[Encodings of Bounded Synthesis](https://www.react.uni-saarland.de/publications/FFRT17.html) Faymonville, Finkbeiner, Rabe, Tentrup.
57-1	7517-7518	[	_	_	
57-2	7518-7527	Encodings	*[8]	PUBLICATION[8]	
57-3	7528-7530	of	*[8]	PUBLICATION[8]	
57-4	7531-7538	Bounded	*[8]	PUBLICATION[8]	
57-5	7539-7548	Synthesis	*[8]	PUBLICATION[8]	
57-6	7548-7549	]	_	_	
57-7	7549-7550	(	_	_	
57-8	7550-7555	https	_	_	
57-9	7555-7556	:	_	_	
57-10	7556-7557	/	_	_	
57-11	7557-7558	/	_	_	
57-12	7558-7583	www.react.uni-saarland.de	_	_	
57-13	7583-7584	/	_	_	
57-14	7584-7596	publications	_	_	
57-15	7596-7597	/	_	_	
57-16	7597-7603	FFRT17	_	_	
57-17	7603-7604	.	_	_	
57-18	7604-7608	html	_	_	
57-19	7608-7609	)	_	_	
57-20	7610-7621	Faymonville	_	_	
57-21	7621-7622	,	_	_	
57-22	7623-7633	Finkbeiner	_	_	
57-23	7633-7634	,	_	_	
57-24	7635-7639	Rabe	_	_	
57-25	7639-7640	,	_	_	
57-26	7641-7648	Tentrup	_	_	
57-27	7648-7649	.	_	_	

#Text=TACAS, 2017.
58-1	7650-7655	TACAS	*[9]	CONFERENCE[9]	
58-2	7655-7656	,	*[9]	CONFERENCE[9]	
58-3	7657-7661	2017	*[9]	CONFERENCE[9]	
58-4	7661-7662	.	_	_	

#Text=[Incremental Determinization](https://www.eecs.berkeley.edu/~rabe/IncrementalDeterminizationSAT2016.pdf).
59-1	7664-7665	[	_	_	
59-2	7665-7676	Incremental	*[10]	PUBLICATION[10]	
59-3	7677-7692	Determinization	*[10]	PUBLICATION[10]	
59-4	7692-7693	]	_	_	
59-5	7693-7694	(	_	_	
59-6	7694-7699	https	_	_	
59-7	7699-7700	:	_	_	
59-8	7700-7701	/	_	_	
59-9	7701-7702	/	_	_	
59-10	7702-7723	www.eecs.berkeley.edu	_	_	
59-11	7723-7724	/	_	_	
59-12	7724-7725	~	_	_	
59-13	7725-7729	rabe	_	_	
59-14	7729-7730	/	_	_	
59-15	7730-7763	IncrementalDeterminizationSAT2016	_	_	
59-16	7763-7764	.	_	_	
59-17	7764-7767	pdf	_	_	
59-18	7767-7768	)	_	_	
59-19	7768-7769	.	_	_	

#Text=Markus N.
60-1	7770-7776	Markus	_	_	
60-2	7777-7778	N	_	_	
60-3	7778-7779	.	_	_	

#Text=Rabe and Sanjit Seshia.
61-1	7780-7784	Rabe	_	_	
61-2	7785-7788	and	_	_	
61-3	7789-7795	Sanjit	_	_	
61-4	7796-7802	Seshia	_	_	
61-5	7802-7803	.	_	_	

#Text=SAT, 2016.
#Text=
#Text=## Acknowledgements
#Text=
#Text=I am indebted to my collaborators, colleagues, and friends who inspired and supported me during this project.
62-1	7804-7807	SAT	_	_	
62-2	7807-7808	,	_	_	
62-3	7809-7813	2016	_	_	
62-4	7813-7814	.	_	_	
62-5	7816-7817	#	_	_	
62-6	7817-7818	#	_	_	
62-7	7819-7835	Acknowledgements	_	_	
62-8	7837-7838	I	_	_	
62-9	7839-7841	am	_	_	
62-10	7842-7850	indebted	_	_	
62-11	7851-7853	to	_	_	
62-12	7854-7856	my	_	_	
62-13	7857-7870	collaborators	_	_	
62-14	7870-7871	,	_	_	
62-15	7872-7882	colleagues	_	_	
62-16	7882-7883	,	_	_	
62-17	7884-7887	and	_	_	
62-18	7888-7895	friends	_	_	
62-19	7896-7899	who	_	_	
62-20	7900-7908	inspired	_	_	
62-21	7909-7912	and	_	_	
62-22	7913-7922	supported	_	_	
62-23	7923-7925	me	_	_	
62-24	7926-7932	during	_	_	
62-25	7933-7937	this	_	_	
62-26	7938-7945	project	_	_	
62-27	7945-7946	.	_	_	

#Text=In particular, I want to mention Leander Tentrup who contributed some code to this project.
63-1	7947-7949	In	_	_	
63-2	7950-7960	particular	_	_	
63-3	7960-7961	,	_	_	
63-4	7962-7963	I	_	_	
63-5	7964-7968	want	_	_	
63-6	7969-7971	to	_	_	
63-7	7972-7979	mention	_	_	
63-8	7980-7987	Leander	_	_	
63-9	7988-7995	Tentrup	_	_	
63-10	7996-7999	who	_	_	
63-11	8000-8011	contributed	_	_	
63-12	8012-8016	some	_	_	
63-13	8017-8021	code	_	_	
63-14	8022-8024	to	_	_	
63-15	8025-8029	this	_	_	
63-16	8030-8037	project	_	_	
63-17	8037-8038	.	_	_	

#Text=I also want to thank Armin Biere and Will Klieber for fruitful discussions about various aspects of SAT and QBF solving.
64-1	8039-8040	I	_	_	
64-2	8041-8045	also	_	_	
64-3	8046-8050	want	_	_	
64-4	8051-8053	to	_	_	
64-5	8054-8059	thank	_	_	
64-6	8060-8065	Armin	_	_	
64-7	8066-8071	Biere	_	_	
64-8	8072-8075	and	_	_	
64-9	8076-8080	Will	_	_	
64-10	8081-8088	Klieber	_	_	
64-11	8089-8092	for	_	_	
64-12	8093-8101	fruitful	_	_	
64-13	8102-8113	discussions	_	_	
64-14	8114-8119	about	_	_	
64-15	8120-8127	various	_	_	
64-16	8128-8135	aspects	_	_	
64-17	8136-8138	of	_	_	
64-18	8139-8142	SAT	_	_	
64-19	8143-8146	and	_	_	
64-20	8147-8150	QBF	_	_	
64-21	8151-8158	solving	_	_	
64-22	8158-8159	.	_	_	

#Text=I also want to thank Armando Solar-Lezama, Baruch Sterin, S.
65-1	8160-8161	I	_	_	
65-2	8162-8166	also	_	_	
65-3	8167-8171	want	_	_	
65-4	8172-8174	to	_	_	
65-5	8175-8180	thank	_	_	
65-6	8181-8188	Armando	_	_	
65-7	8189-8201	Solar-Lezama	_	_	
65-8	8201-8202	,	_	_	
65-9	8203-8209	Baruch	_	_	
65-10	8210-8216	Sterin	_	_	
65-11	8216-8217	,	_	_	
65-12	8218-8219	S	_	_	
65-13	8219-8220	.	_	_	

#Text=Akshay, Supratik Chakraborty, and many others who contributed benchmarks and insights into their tools.
66-1	8221-8227	Akshay	_	_	
66-2	8227-8228	,	_	_	
66-3	8229-8237	Supratik	_	_	
66-4	8238-8249	Chakraborty	_	_	
66-5	8249-8250	,	_	_	
66-6	8251-8254	and	_	_	
66-7	8255-8259	many	_	_	
66-8	8260-8266	others	_	_	
66-9	8267-8270	who	_	_	
66-10	8271-8282	contributed	_	_	
66-11	8283-8293	benchmarks	_	_	
66-12	8294-8297	and	_	_	
66-13	8298-8306	insights	_	_	
66-14	8307-8311	into	_	_	
66-15	8312-8317	their	_	_	
66-16	8318-8323	tools	_	_	
66-17	8323-8324	.	_	_	
