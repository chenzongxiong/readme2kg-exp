#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=**Please watch our video here: https://www.youtube.com/watch?
1-1	0-1	*	_	_	
1-2	1-2	*	_	_	
1-3	2-8	Please	_	_	
1-4	9-14	watch	_	_	
1-5	15-18	our	_	_	
1-6	19-24	video	_	_	
1-7	25-29	here	_	_	
1-8	29-30	:	_	_	
1-9	31-36	https	_	_	
1-10	36-37	:	_	_	
1-11	37-38	/	_	_	
1-12	38-39	/	_	_	
1-13	39-54	www.youtube.com	_	_	
1-14	54-55	/	_	_	
1-15	55-60	watch	_	_	
1-16	60-61	?	_	_	

#Text=v=VAuz25w0a5k**\r
#Text=\r
#Text=# ML-Quadrat (ML2)\r
#Text=ML2 is a Computer-Aided Software Engineering (CASE) tool, based on the Model-Driven Software Engineering (MDSE) paradigm, specifically the Domain-Specific Modeling (DSM) methodology with full code generation.
2-1	61-62	v	_	_	
2-2	62-63	=	_	_	
2-3	63-74	VAuz25w0a5k	_	_	
2-4	74-75	*	_	_	
2-5	75-76	*	_	_	
2-6	80-81	#	_	_	
2-7	82-92	ML-Quadrat	*	SOFTWARE	
2-8	93-94	(	_	_	
2-9	94-97	ML2	*	SOFTWARE	
2-10	97-98	)	_	_	
2-11	100-103	ML2	*	SOFTWARE	
2-12	104-106	is	_	_	
2-13	107-108	a	_	_	
2-14	109-123	Computer-Aided	_	_	
2-15	124-132	Software	_	_	
2-16	133-144	Engineering	_	_	
2-17	145-146	(	_	_	
2-18	146-150	CASE	_	_	
2-19	150-151	)	_	_	
2-20	152-156	tool	_	_	
2-21	156-157	,	_	_	
2-22	158-163	based	_	_	
2-23	164-166	on	_	_	
2-24	167-170	the	_	_	
2-25	171-183	Model-Driven	_	_	
2-26	184-192	Software	_	_	
2-27	193-204	Engineering	_	_	
2-28	205-206	(	_	_	
2-29	206-210	MDSE	_	_	
2-30	210-211	)	_	_	
2-31	212-220	paradigm	_	_	
2-32	220-221	,	_	_	
2-33	222-234	specifically	_	_	
2-34	235-238	the	_	_	
2-35	239-254	Domain-Specific	_	_	
2-36	255-263	Modeling	_	_	
2-37	264-265	(	_	_	
2-38	265-268	DSM	_	_	
2-39	268-269	)	_	_	
2-40	270-281	methodology	_	_	
2-41	282-286	with	_	_	
2-42	287-291	full	_	_	
2-43	292-296	code	_	_	
2-44	297-307	generation	_	_	
2-45	307-308	.	_	_	

#Text=ML2 is focused on creating smart services for the Internet of Things (IoT) and Cyber-Physical Systems (CPS).
3-1	309-312	ML2	*	SOFTWARE	
3-2	313-315	is	_	_	
3-3	316-323	focused	_	_	
3-4	324-326	on	_	_	
3-5	327-335	creating	_	_	
3-6	336-341	smart	_	_	
3-7	342-350	services	_	_	
3-8	351-354	for	_	_	
3-9	355-358	the	_	_	
3-10	359-367	Internet	_	_	
3-11	368-370	of	_	_	
3-12	371-377	Things	_	_	
3-13	378-379	(	_	_	
3-14	379-382	IoT	_	_	
3-15	382-383	)	_	_	
3-16	384-387	and	_	_	
3-17	388-402	Cyber-Physical	_	_	
3-18	403-410	Systems	_	_	
3-19	411-412	(	_	_	
3-20	412-415	CPS	_	_	
3-21	415-416	)	_	_	
3-22	416-417	.	_	_	

#Text=Moreover, it is based on the [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project) projects.
4-1	418-426	Moreover	_	_	
4-2	426-427	,	_	_	
4-3	428-430	it	_	_	
4-4	431-433	is	_	_	
4-5	434-439	based	_	_	
4-6	440-442	on	_	_	
4-7	443-446	the	_	_	
4-8	447-448	[	_	_	
4-9	448-455	ThingML	*	PROJECT	
4-10	455-456	]	_	_	
4-11	456-457	(	_	_	
4-12	457-462	https	_	_	
4-13	462-463	:	_	_	
4-14	463-464	/	_	_	
4-15	464-465	/	_	_	
4-16	465-475	github.com	_	_	
4-17	475-476	/	_	_	
4-18	476-484	TelluIoT	_	_	
4-19	484-485	/	_	_	
4-20	485-492	ThingML	*	PROJECT	
4-21	492-493	)	_	_	
4-22	494-495	/	_	_	
4-23	496-497	[	_	_	
4-24	497-502	HEADS	*	PROJECT	
4-25	502-503	]	_	_	
4-26	503-504	(	_	_	
4-27	504-509	https	_	_	
4-28	509-510	:	_	_	
4-29	510-511	/	_	_	
4-30	511-512	/	_	_	
4-31	512-522	github.com	_	_	
4-32	522-523	/	_	_	
4-33	523-536	HEADS-project	_	_	
4-33.1	523-528	HEADS	*	PROJECT	
4-34	536-537	)	_	_	
4-35	538-546	projects	_	_	
4-36	546-547	.	_	_	

#Text=Similar to ThingML/HEADS, ML2 is built using the [Eclipse Modeling Framework (EMF)](https://www.eclipse.org/modeling/emf/), as well as the [Xtext framework](https://www.eclipse.org/Xtext/), and is released under the terms of the Apache 2.0 permissive open source license.
5-1	548-555	Similar	_	_	
5-2	556-558	to	_	_	
5-3	559-566	ThingML	*	PROJECT	
5-4	566-567	/	_	_	
5-5	567-572	HEADS	*	PROJECT	
5-6	572-573	,	_	_	
5-7	574-577	ML2	*	SOFTWARE	
5-8	578-580	is	_	_	
5-9	581-586	built	_	_	
5-10	587-592	using	_	_	
5-11	593-596	the	_	_	
5-12	597-598	[	_	_	
5-13	598-605	Eclipse	_	_	
5-14	606-614	Modeling	_	_	
5-15	615-624	Framework	_	_	
5-16	625-626	(	_	_	
5-17	626-629	EMF	_	_	
5-18	629-630	)	_	_	
5-19	630-631	]	_	_	
5-20	631-632	(	_	_	
5-21	632-637	https	_	_	
5-22	637-638	:	_	_	
5-23	638-639	/	_	_	
5-24	639-640	/	_	_	
5-25	640-655	www.eclipse.org	_	_	
5-26	655-656	/	_	_	
5-27	656-664	modeling	_	_	
5-28	664-665	/	_	_	
5-29	665-668	emf	_	_	
5-30	668-669	/	_	_	
5-31	669-670	)	_	_	
5-32	670-671	,	_	_	
5-33	672-674	as	_	_	
5-34	675-679	well	_	_	
5-35	680-682	as	_	_	
5-36	683-686	the	_	_	
5-37	687-688	[	_	_	
5-38	688-693	Xtext	_	_	
5-39	694-703	framework	_	_	
5-40	703-704	]	_	_	
5-41	704-705	(	_	_	
5-42	705-710	https	_	_	
5-43	710-711	:	_	_	
5-44	711-712	/	_	_	
5-45	712-713	/	_	_	
5-46	713-728	www.eclipse.org	_	_	
5-47	728-729	/	_	_	
5-48	729-734	Xtext	_	_	
5-49	734-735	/	_	_	
5-50	735-736	)	_	_	
5-51	736-737	,	_	_	
5-52	738-741	and	_	_	
5-53	742-744	is	_	_	
5-54	745-753	released	_	_	
5-55	754-759	under	_	_	
5-56	760-763	the	_	_	
5-57	764-769	terms	_	_	
5-58	770-772	of	_	_	
5-59	773-776	the	_	_	
5-60	777-783	Apache	*[1]	LICENSE[1]	
5-61	784-787	2.0	*[1]	LICENSE[1]	
5-62	788-798	permissive	_	_	
5-63	799-803	open	_	_	
5-64	804-810	source	_	_	
5-65	811-818	license	_	_	
5-66	818-819	.	_	_	

#Text=The name ML-Quadrat ("Quadrat" is the German word for "square" / ˆ2) refers to the fact that the project is about two MLs simultaneously: (i) ML for Modeling Language (as in ThingML); (ii) ML for Machine Learning, i.e., a sub-discipline of Artificial Intelligence (AI).
6-1	824-827	The	_	_	
6-2	828-832	name	_	_	
6-3	833-843	ML-Quadrat	*	PROJECT	
6-4	844-845	(	_	_	
6-5	845-846	"	_	_	
6-6	846-853	Quadrat	_	_	
6-7	853-854	"	_	_	
6-8	855-857	is	_	_	
6-9	858-861	the	_	_	
6-10	862-868	German	_	_	
6-11	869-873	word	_	_	
6-12	874-877	for	_	_	
6-13	878-879	"	_	_	
6-14	879-885	square	_	_	
6-15	885-886	"	_	_	
6-16	887-888	/	_	_	
6-17	889-891	ˆ2	_	_	
6-18	891-892	)	_	_	
6-19	893-899	refers	_	_	
6-20	900-902	to	_	_	
6-21	903-906	the	_	_	
6-22	907-911	fact	_	_	
6-23	912-916	that	_	_	
6-24	917-920	the	_	_	
6-25	921-928	project	_	_	
6-26	929-931	is	_	_	
6-27	932-937	about	_	_	
6-28	938-941	two	_	_	
6-29	942-945	MLs	_	_	
6-30	946-960	simultaneously	_	_	
6-31	960-961	:	_	_	
6-32	962-963	(	_	_	
6-33	963-964	i	_	_	
6-34	964-965	)	_	_	
6-35	966-968	ML	_	_	
6-36	969-972	for	_	_	
6-37	973-981	Modeling	_	_	
6-38	982-990	Language	_	_	
6-39	991-992	(	_	_	
6-40	992-994	as	_	_	
6-41	995-997	in	_	_	
6-42	998-1005	ThingML	*	PROJECT	
6-43	1005-1006	)	_	_	
6-44	1006-1007	;	_	_	
6-45	1008-1009	(	_	_	
6-46	1009-1011	ii	_	_	
6-47	1011-1012	)	_	_	
6-48	1013-1015	ML	_	_	
6-49	1016-1019	for	_	_	
6-50	1020-1027	Machine	_	_	
6-51	1028-1036	Learning	_	_	
6-52	1036-1037	,	_	_	
6-53	1038-1041	i.e	_	_	
6-54	1041-1042	.	_	_	
6-55	1042-1043	,	_	_	
6-56	1044-1045	a	_	_	
6-57	1046-1060	sub-discipline	_	_	
6-58	1061-1063	of	_	_	
6-59	1064-1074	Artificial	_	_	
6-60	1075-1087	Intelligence	_	_	
6-61	1088-1089	(	_	_	
6-62	1089-1091	AI	_	_	
6-63	1091-1092	)	_	_	
6-64	1092-1093	.	_	_	

#Text=However, in what follows, we refer to the project name as ML2 for simplicity.\r
#Text=\r
#Text=## Why ML2?
7-1	1094-1101	However	_	_	
7-2	1101-1102	,	_	_	
7-3	1103-1105	in	_	_	
7-4	1106-1110	what	_	_	
7-5	1111-1118	follows	_	_	
7-6	1118-1119	,	_	_	
7-7	1120-1122	we	_	_	
7-8	1123-1128	refer	_	_	
7-9	1129-1131	to	_	_	
7-10	1132-1135	the	_	_	
7-11	1136-1143	project	_	_	
7-12	1144-1148	name	_	_	
7-13	1149-1151	as	_	_	
7-14	1152-1155	ML2	*	PROJECT	
7-15	1156-1159	for	_	_	
7-16	1160-1170	simplicity	_	_	
7-17	1170-1171	.	_	_	
7-18	1175-1176	#	_	_	
7-19	1176-1177	#	_	_	
7-20	1178-1181	Why	_	_	
7-21	1182-1185	ML2	*	SOFTWARE	
7-22	1185-1186	?	_	_	

#Text=ThingML/HEADS and other Model-Driven Software Engineering (MDSE) tools for the IoT/CPS, that we are aware of, do not support Data Analytics and Machine Learning (DAML) at the modeling layer.
8-1	1188-1195	ThingML	*	PROJECT	
8-2	1195-1196	/	_	_	
8-3	1196-1201	HEADS	*	PROJECT	
8-4	1202-1205	and	_	_	
8-5	1206-1211	other	_	_	
8-6	1212-1224	Model-Driven	_	_	
8-7	1225-1233	Software	_	_	
8-8	1234-1245	Engineering	_	_	
8-9	1246-1247	(	_	_	
8-10	1247-1251	MDSE	_	_	
8-11	1251-1252	)	_	_	
8-12	1253-1258	tools	_	_	
8-13	1259-1262	for	_	_	
8-14	1263-1266	the	_	_	
8-15	1267-1270	IoT	_	_	
8-16	1270-1271	/	_	_	
8-17	1271-1274	CPS	_	_	
8-18	1274-1275	,	_	_	
8-19	1276-1280	that	_	_	
8-20	1281-1283	we	_	_	
8-21	1284-1287	are	_	_	
8-22	1288-1293	aware	_	_	
8-23	1294-1296	of	_	_	
8-24	1296-1297	,	_	_	
8-25	1298-1300	do	_	_	
8-26	1301-1304	not	_	_	
8-27	1305-1312	support	_	_	
8-28	1313-1317	Data	_	_	
8-29	1318-1327	Analytics	_	_	
8-30	1328-1331	and	_	_	
8-31	1332-1339	Machine	_	_	
8-32	1340-1348	Learning	_	_	
8-33	1349-1350	(	_	_	
8-34	1350-1354	DAML	_	_	
8-35	1354-1355	)	_	_	
8-36	1356-1358	at	_	_	
8-37	1359-1362	the	_	_	
8-38	1363-1371	modeling	_	_	
8-39	1372-1377	layer	_	_	
8-40	1377-1378	.	_	_	

#Text=However, DAML methods and techniques are crucial for developing smart IoT services and CPS applications.
9-1	1379-1386	However	_	_	
9-2	1386-1387	,	_	_	
9-3	1388-1392	DAML	_	_	
9-4	1393-1400	methods	_	_	
9-5	1401-1404	and	_	_	
9-6	1405-1415	techniques	_	_	
9-7	1416-1419	are	_	_	
9-8	1420-1427	crucial	_	_	
9-9	1428-1431	for	_	_	
9-10	1432-1442	developing	_	_	
9-11	1443-1448	smart	_	_	
9-12	1449-1452	IoT	_	_	
9-13	1453-1461	services	_	_	
9-14	1462-1465	and	_	_	
9-15	1466-1469	CPS	_	_	
9-16	1470-1482	applications	_	_	
9-17	1482-1483	.	_	_	

#Text=Therefore, we enable DAML at the modeling layer through our Domain-Specific Modeling Language (DSML) and tool.
10-1	1484-1493	Therefore	_	_	
10-2	1493-1494	,	_	_	
10-3	1495-1497	we	_	_	
10-4	1498-1504	enable	_	_	
10-5	1505-1509	DAML	_	_	
10-6	1510-1512	at	_	_	
10-7	1513-1516	the	_	_	
10-8	1517-1525	modeling	_	_	
10-9	1526-1531	layer	_	_	
10-10	1532-1539	through	_	_	
10-11	1540-1543	our	_	_	
10-12	1544-1559	Domain-Specific	_	_	
10-13	1560-1568	Modeling	_	_	
10-14	1569-1577	Language	_	_	
10-15	1578-1579	(	_	_	
10-16	1579-1583	DSML	_	_	
10-17	1583-1584	)	_	_	
10-18	1585-1588	and	_	_	
10-19	1589-1593	tool	_	_	
10-20	1593-1594	.	_	_	

#Text=In other words, the practitioner has access to the APIs of ML libraries and frameworks, such as [Scikit-Learn](https://scikit-learn.org/stable/), [Keras](https://keras.io)/[TensorFlow](https://www.tensorflow.org), [PyTorch](https://pytorch.org) and [WEKA](https://www.cs.waikato.ac.nz/~ml/weka/) at the modeling layer.
11-1	1595-1597	In	_	_	
11-2	1598-1603	other	_	_	
11-3	1604-1609	words	_	_	
11-4	1609-1610	,	_	_	
11-5	1611-1614	the	_	_	
11-6	1615-1627	practitioner	_	_	
11-7	1628-1631	has	_	_	
11-8	1632-1638	access	_	_	
11-9	1639-1641	to	_	_	
11-10	1642-1645	the	_	_	
11-11	1646-1650	APIs	_	_	
11-12	1651-1653	of	_	_	
11-13	1654-1656	ML	_	_	
11-14	1657-1666	libraries	_	_	
11-15	1667-1670	and	_	_	
11-16	1671-1681	frameworks	_	_	
11-17	1681-1682	,	_	_	
11-18	1683-1687	such	_	_	
11-19	1688-1690	as	_	_	
11-20	1691-1692	[	_	_	
11-21	1692-1704	Scikit-Learn	*	SOFTWARE	
11-22	1704-1705	]	_	_	
11-23	1705-1706	(	_	_	
11-24	1706-1711	https	_	_	
11-25	1711-1712	:	_	_	
11-26	1712-1713	/	_	_	
11-27	1713-1714	/	_	_	
11-28	1714-1730	scikit-learn.org	_	_	
11-28.1	1714-1726	scikit-learn	*	SOFTWARE	
11-29	1730-1731	/	_	_	
11-30	1731-1737	stable	_	_	
11-31	1737-1738	/	_	_	
11-32	1738-1739	)	_	_	
11-33	1739-1740	,	_	_	
11-34	1741-1742	[	_	_	
11-35	1742-1747	Keras	*	SOFTWARE	
11-36	1747-1748	]	_	_	
11-37	1748-1749	(	_	_	
11-38	1749-1754	https	_	_	
11-39	1754-1755	:	_	_	
11-40	1755-1756	/	_	_	
11-41	1756-1757	/	_	_	
11-42	1757-1765	keras.io	_	_	
11-42.1	1757-1762	keras	*	SOFTWARE	
11-43	1765-1766	)	_	_	
11-44	1766-1767	/	_	_	
11-45	1767-1768	[	_	_	
11-46	1768-1778	TensorFlow	*	SOFTWARE	
11-47	1778-1779	]	_	_	
11-48	1779-1780	(	_	_	
11-49	1780-1785	https	_	_	
11-50	1785-1786	:	_	_	
11-51	1786-1787	/	_	_	
11-52	1787-1788	/	_	_	
11-53	1788-1806	www.tensorflow.org	_	_	
11-53.1	1792-1802	tensorflow	*	SOFTWARE	
11-54	1806-1807	)	_	_	
11-55	1807-1808	,	_	_	
11-56	1809-1810	[	_	_	
11-57	1810-1817	PyTorch	*	SOFTWARE	
11-58	1817-1818	]	_	_	
11-59	1818-1819	(	_	_	
11-60	1819-1824	https	_	_	
11-61	1824-1825	:	_	_	
11-62	1825-1826	/	_	_	
11-63	1826-1827	/	_	_	
11-64	1827-1838	pytorch.org	_	_	
11-64.1	1827-1834	pytorch	*	SOFTWARE	
11-65	1838-1839	)	_	_	
11-66	1840-1843	and	_	_	
11-67	1844-1845	[	_	_	
11-68	1845-1849	WEKA	*	SOFTWARE	
11-69	1849-1850	]	_	_	
11-70	1850-1851	(	_	_	
11-71	1851-1856	https	_	_	
11-72	1856-1857	:	_	_	
11-73	1857-1858	/	_	_	
11-74	1858-1859	/	_	_	
11-75	1859-1879	www.cs.waikato.ac.nz	_	_	
11-76	1879-1880	/	_	_	
11-77	1880-1881	~	_	_	
11-78	1881-1883	ml	_	_	
11-79	1883-1884	/	_	_	
11-80	1884-1888	weka	*	SOFTWARE	
11-81	1888-1889	/	_	_	
11-82	1889-1890	)	_	_	
11-83	1891-1893	at	_	_	
11-84	1894-1897	the	_	_	
11-85	1898-1906	modeling	_	_	
11-86	1907-1912	layer	_	_	
11-87	1912-1913	.	_	_	

#Text=The model-to-code transformations generate the full source code of the entire software solution, including the ML part in a fully automated manner.
12-1	1914-1917	The	_	_	
12-2	1918-1931	model-to-code	_	_	
12-3	1932-1947	transformations	_	_	
12-4	1948-1956	generate	_	_	
12-5	1957-1960	the	_	_	
12-6	1961-1965	full	_	_	
12-7	1966-1972	source	_	_	
12-8	1973-1977	code	_	_	
12-9	1978-1980	of	_	_	
12-10	1981-1984	the	_	_	
12-11	1985-1991	entire	_	_	
12-12	1992-2000	software	_	_	
12-13	2001-2009	solution	_	_	
12-14	2009-2010	,	_	_	
12-15	2011-2020	including	_	_	
12-16	2021-2024	the	_	_	
12-17	2025-2027	ML	_	_	
12-18	2028-2032	part	_	_	
12-19	2033-2035	in	_	_	
12-20	2036-2037	a	_	_	
12-21	2038-2043	fully	_	_	
12-22	2044-2053	automated	_	_	
12-23	2054-2060	manner	_	_	
12-24	2060-2061	.	_	_	

#Text=Moreover, the generated code is capable of creating, training, deploying and possibly re-training the ML models as necessary.
13-1	2066-2074	Moreover	_	_	
13-2	2074-2075	,	_	_	
13-3	2076-2079	the	_	_	
13-4	2080-2089	generated	_	_	
13-5	2090-2094	code	_	_	
13-6	2095-2097	is	_	_	
13-7	2098-2105	capable	_	_	
13-8	2106-2108	of	_	_	
13-9	2109-2117	creating	_	_	
13-10	2117-2118	,	_	_	
13-11	2119-2127	training	_	_	
13-12	2127-2128	,	_	_	
13-13	2129-2138	deploying	_	_	
13-14	2139-2142	and	_	_	
13-15	2143-2151	possibly	_	_	
13-16	2152-2163	re-training	_	_	
13-17	2164-2167	the	_	_	
13-18	2168-2170	ML	_	_	
13-19	2171-2177	models	_	_	
13-20	2178-2180	as	_	_	
13-21	2181-2190	necessary	_	_	
13-22	2190-2191	.	_	_	

#Text=Further, one may bring a pre-trained ML model with any arbitrary architecture, which might have been trained using any learning algorithm, and simply "connect" or "plug" it into the software model.
14-1	2192-2199	Further	_	_	
14-2	2199-2200	,	_	_	
14-3	2201-2204	one	_	_	
14-4	2205-2208	may	_	_	
14-5	2209-2214	bring	_	_	
14-6	2215-2216	a	_	_	
14-7	2217-2228	pre-trained	_	_	
14-8	2229-2231	ML	_	_	
14-9	2232-2237	model	_	_	
14-10	2238-2242	with	_	_	
14-11	2243-2246	any	_	_	
14-12	2247-2256	arbitrary	_	_	
14-13	2257-2269	architecture	_	_	
14-14	2269-2270	,	_	_	
14-15	2271-2276	which	_	_	
14-16	2277-2282	might	_	_	
14-17	2283-2287	have	_	_	
14-18	2288-2292	been	_	_	
14-19	2293-2300	trained	_	_	
14-20	2301-2306	using	_	_	
14-21	2307-2310	any	_	_	
14-22	2311-2319	learning	_	_	
14-23	2320-2329	algorithm	_	_	
14-24	2329-2330	,	_	_	
14-25	2331-2334	and	_	_	
14-26	2335-2341	simply	_	_	
14-27	2342-2343	"	_	_	
14-28	2343-2350	connect	_	_	
14-29	2350-2351	"	_	_	
14-30	2352-2354	or	_	_	
14-31	2355-2356	"	_	_	
14-32	2356-2360	plug	_	_	
14-33	2360-2361	"	_	_	
14-34	2362-2364	it	_	_	
14-35	2365-2369	into	_	_	
14-36	2370-2373	the	_	_	
14-37	2374-2382	software	_	_	
14-38	2383-2388	model	_	_	
14-39	2388-2389	.	_	_	

#Text=This is called the blackbox-ML mode or the hybrid/mixed MDSE/Non-MDSE mode.
15-1	2390-2394	This	_	_	
15-2	2395-2397	is	_	_	
15-3	2398-2404	called	_	_	
15-4	2405-2408	the	_	_	
15-5	2409-2420	blackbox-ML	_	_	
15-6	2421-2425	mode	_	_	
15-7	2426-2428	or	_	_	
15-8	2429-2432	the	_	_	
15-9	2433-2439	hybrid	_	_	
15-10	2439-2440	/	_	_	
15-11	2440-2445	mixed	_	_	
15-12	2446-2450	MDSE	_	_	
15-13	2450-2451	/	_	_	
15-14	2451-2459	Non-MDSE	_	_	
15-15	2460-2464	mode	_	_	
15-16	2464-2465	.	_	_	

#Text=This mode offers a lot of flexibility since the practitioner is not limited to the ML models/algorithms/methods/techniques that are already supported by the DSML of ML2.
16-1	2466-2470	This	_	_	
16-2	2471-2475	mode	_	_	
16-3	2476-2482	offers	_	_	
16-4	2483-2484	a	_	_	
16-5	2485-2488	lot	_	_	
16-6	2489-2491	of	_	_	
16-7	2492-2503	flexibility	_	_	
16-8	2504-2509	since	_	_	
16-9	2510-2513	the	_	_	
16-10	2514-2526	practitioner	_	_	
16-11	2527-2529	is	_	_	
16-12	2530-2533	not	_	_	
16-13	2534-2541	limited	_	_	
16-14	2542-2544	to	_	_	
16-15	2545-2548	the	_	_	
16-16	2549-2551	ML	_	_	
16-17	2552-2558	models	_	_	
16-18	2558-2559	/	_	_	
16-19	2559-2569	algorithms	_	_	
16-20	2569-2570	/	_	_	
16-21	2570-2577	methods	_	_	
16-22	2577-2578	/	_	_	
16-23	2578-2588	techniques	_	_	
16-24	2589-2593	that	_	_	
16-25	2594-2597	are	_	_	
16-26	2598-2605	already	_	_	
16-27	2606-2615	supported	_	_	
16-28	2616-2618	by	_	_	
16-29	2619-2622	the	_	_	
16-30	2623-2627	DSML	_	_	
16-31	2628-2630	of	_	_	
16-32	2631-2634	ML2	*	SOFTWARE	
16-33	2634-2635	.	_	_	

#Text=However, the drawback is that the software model instance does not include sufficient details about the ML model, so that it can re-train it in the future.
17-1	2636-2643	However	_	_	
17-2	2643-2644	,	_	_	
17-3	2645-2648	the	_	_	
17-4	2649-2657	drawback	_	_	
17-5	2658-2660	is	_	_	
17-6	2661-2665	that	_	_	
17-7	2666-2669	the	_	_	
17-8	2670-2678	software	_	_	
17-9	2679-2684	model	_	_	
17-10	2685-2693	instance	_	_	
17-11	2694-2698	does	_	_	
17-12	2699-2702	not	_	_	
17-13	2703-2710	include	_	_	
17-14	2711-2721	sufficient	_	_	
17-15	2722-2729	details	_	_	
17-16	2730-2735	about	_	_	
17-17	2736-2739	the	_	_	
17-18	2740-2742	ML	_	_	
17-19	2743-2748	model	_	_	
17-20	2748-2749	,	_	_	
17-21	2750-2752	so	_	_	
17-22	2753-2757	that	_	_	
17-23	2758-2760	it	_	_	
17-24	2761-2764	can	_	_	
17-25	2765-2773	re-train	_	_	
17-26	2774-2776	it	_	_	
17-27	2777-2779	in	_	_	
17-28	2780-2783	the	_	_	
17-29	2784-2790	future	_	_	
17-30	2790-2791	.	_	_	

#Text=Hence, it is called the blackbox-ML mode.
18-1	2792-2797	Hence	_	_	
18-2	2797-2798	,	_	_	
18-3	2799-2801	it	_	_	
18-4	2802-2804	is	_	_	
18-5	2805-2811	called	_	_	
18-6	2812-2815	the	_	_	
18-7	2816-2827	blackbox-ML	_	_	
18-8	2828-2832	mode	_	_	
18-9	2832-2833	.	_	_	

#Text=<a name="toc"></a>\r
#Text=# Table of Contents\r
#Text=\r
#Text=1.
19-1	2838-2839	<	_	_	
19-2	2839-2840	a	_	_	
19-3	2841-2845	name	_	_	
19-4	2845-2846	=	_	_	
19-5	2846-2847	"	_	_	
19-6	2847-2850	toc	_	_	
19-7	2850-2851	"	_	_	
19-8	2851-2852	>	_	_	
19-9	2852-2853	<	_	_	
19-10	2853-2854	/	_	_	
19-11	2854-2855	a	_	_	
19-12	2855-2856	>	_	_	
19-13	2858-2859	#	_	_	
19-14	2860-2865	Table	_	_	
19-15	2866-2868	of	_	_	
19-16	2869-2877	Contents	_	_	
19-17	2881-2882	1	_	_	
19-18	2882-2883	.	_	_	

#Text=[How to Cite ML2 in Your Publications](#citation)\r
#Text=2.
20-1	2884-2885	[	_	_	
20-2	2885-2888	How	_	_	
20-3	2889-2891	to	_	_	
20-4	2892-2896	Cite	_	_	
20-5	2897-2900	ML2	*	SOFTWARE	
20-6	2901-2903	in	_	_	
20-7	2904-2908	Your	_	_	
20-8	2909-2921	Publications	_	_	
20-9	2921-2922	]	_	_	
20-10	2922-2923	(	_	_	
20-11	2923-2924	#	_	_	
20-12	2924-2932	citation	_	_	
20-13	2932-2933	)	_	_	
20-14	2935-2936	2	_	_	
20-15	2936-2937	.	_	_	

#Text=[Reporting Issues/Bugs and Requests](#issues)\r
#Text=3.
21-1	2938-2939	[	_	_	
21-2	2939-2948	Reporting	_	_	
21-3	2949-2955	Issues	_	_	
21-4	2955-2956	/	_	_	
21-5	2956-2960	Bugs	_	_	
21-6	2961-2964	and	_	_	
21-7	2965-2973	Requests	_	_	
21-8	2973-2974	]	_	_	
21-9	2974-2975	(	_	_	
21-10	2975-2976	#	_	_	
21-11	2976-2982	issues	_	_	
21-12	2982-2983	)	_	_	
21-13	2985-2986	3	_	_	
21-14	2986-2987	.	_	_	

#Text=[Quick (15 mins) Tutorial](#user-doc-quick)\r
#Text=4.
22-1	2988-2989	[	_	_	
22-2	2989-2994	Quick	_	_	
22-3	2995-2996	(	_	_	
22-4	2996-2998	15	_	_	
22-5	2999-3003	mins	_	_	
22-6	3003-3004	)	_	_	
22-7	3005-3013	Tutorial	_	_	
22-8	3013-3014	]	_	_	
22-9	3014-3015	(	_	_	
22-10	3015-3016	#	_	_	
22-11	3016-3030	user-doc-quick	_	_	
22-12	3030-3031	)	_	_	
22-13	3033-3034	4	_	_	
22-14	3034-3035	.	_	_	

#Text=[Users' Documentation (Full Tutorial)](#user-doc)\r
#Text=5.
23-1	3036-3037	[	_	_	
23-2	3037-3042	Users	_	_	
23-3	3042-3043	'	_	_	
23-4	3044-3057	Documentation	_	_	
23-5	3058-3059	(	_	_	
23-6	3059-3063	Full	_	_	
23-7	3064-3072	Tutorial	_	_	
23-8	3072-3073	)	_	_	
23-9	3073-3074	]	_	_	
23-10	3074-3075	(	_	_	
23-11	3075-3076	#	_	_	
23-12	3076-3084	user-doc	_	_	
23-13	3084-3085	)	_	_	
23-14	3087-3088	5	_	_	
23-15	3088-3089	.	_	_	

#Text=[Maven Artifacts](#maven)\r
#Text=6.
24-1	3090-3091	[	_	_	
24-2	3091-3096	Maven	_	_	
24-3	3097-3106	Artifacts	_	_	
24-4	3106-3107	]	_	_	
24-5	3107-3108	(	_	_	
24-6	3108-3109	#	_	_	
24-7	3109-3114	maven	_	_	
24-8	3114-3115	)	_	_	
24-9	3117-3118	6	_	_	
24-10	3118-3119	.	_	_	

#Text=[Developers' Documentation (for Contributors)](#dev-doc)\r
#Text=7.
25-1	3120-3121	[	_	_	
25-2	3121-3131	Developers	_	_	
25-3	3131-3132	'	_	_	
25-4	3133-3146	Documentation	_	_	
25-5	3147-3148	(	_	_	
25-6	3148-3151	for	_	_	
25-7	3152-3164	Contributors	_	_	
25-8	3164-3165	)	_	_	
25-9	3165-3166	]	_	_	
25-10	3166-3167	(	_	_	
25-11	3167-3168	#	_	_	
25-12	3168-3175	dev-doc	_	_	
25-13	3175-3176	)	_	_	
25-14	3178-3179	7	_	_	
25-15	3179-3180	.	_	_	

#Text=[Exploitation & Industry Adoption](#exploitation)\r
#Text=\r
#Text=<a name="citation"></a>\r
#Text=## 1.
26-1	3181-3182	[	_	_	
26-2	3182-3194	Exploitation	_	_	
26-3	3195-3196	&	_	_	
26-4	3197-3205	Industry	_	_	
26-5	3206-3214	Adoption	_	_	
26-6	3214-3215	]	_	_	
26-7	3215-3216	(	_	_	
26-8	3216-3217	#	_	_	
26-9	3217-3229	exploitation	_	_	
26-10	3229-3230	)	_	_	
26-11	3234-3235	<	_	_	
26-12	3235-3236	a	_	_	
26-13	3237-3241	name	_	_	
26-14	3241-3242	=	_	_	
26-15	3242-3243	"	_	_	
26-16	3243-3251	citation	_	_	
26-17	3251-3252	"	_	_	
26-18	3252-3253	>	_	_	
26-19	3253-3254	<	_	_	
26-20	3254-3255	/	_	_	
26-21	3255-3256	a	_	_	
26-22	3256-3257	>	_	_	
26-23	3259-3260	#	_	_	
26-24	3260-3261	#	_	_	
26-25	3262-3263	1	_	_	
26-26	3263-3264	.	_	_	

#Text=How to Cite ML2 in Your Publications\r
#Text=Please cite the following journal paper if you are using ML2 or referring to it in your papers:\r
#Text=\r
#Text=[**A model-driven approach to machine learning and software modeling for the IoT:** Generating full source code for smart Internet of Things (IoT) services and cyber-physical systems (CPS), Armin Moin, Moharram Challenger, Atta Badii and Stephan Günnemann, Software and Systems Modeling (SoSyM), January 2022.]
27-1	3265-3268	How	_	_	
27-2	3269-3271	to	_	_	
27-3	3272-3276	Cite	_	_	
27-4	3277-3280	ML2	*	SOFTWARE	
27-5	3281-3283	in	_	_	
27-6	3284-3288	Your	_	_	
27-7	3289-3301	Publications	_	_	
27-8	3303-3309	Please	_	_	
27-9	3310-3314	cite	_	_	
27-10	3315-3318	the	_	_	
27-11	3319-3328	following	_	_	
27-12	3329-3336	journal	_	_	
27-13	3337-3342	paper	_	_	
27-14	3343-3345	if	_	_	
27-15	3346-3349	you	_	_	
27-16	3350-3353	are	_	_	
27-17	3354-3359	using	_	_	
27-18	3360-3363	ML2	*	SOFTWARE	
27-19	3364-3366	or	_	_	
27-20	3367-3376	referring	_	_	
27-21	3377-3379	to	_	_	
27-22	3380-3382	it	_	_	
27-23	3383-3385	in	_	_	
27-24	3386-3390	your	_	_	
27-25	3391-3397	papers	_	_	
27-26	3397-3398	:	_	_	
27-27	3402-3403	[	_	_	
27-28	3403-3404	*	_	_	
27-29	3404-3405	*	_	_	
27-30	3405-3406	A	*[2]	PUBLICATION[2]	
27-31	3407-3419	model-driven	*[2]	PUBLICATION[2]	
27-32	3420-3428	approach	*[2]	PUBLICATION[2]	
27-33	3429-3431	to	*[2]	PUBLICATION[2]	
27-34	3432-3439	machine	*[2]	PUBLICATION[2]	
27-35	3440-3448	learning	*[2]	PUBLICATION[2]	
27-36	3449-3452	and	*[2]	PUBLICATION[2]	
27-37	3453-3461	software	*[2]	PUBLICATION[2]	
27-38	3462-3470	modeling	*[2]	PUBLICATION[2]	
27-39	3471-3474	for	*[2]	PUBLICATION[2]	
27-40	3475-3478	the	*[2]	PUBLICATION[2]	
27-41	3479-3482	IoT	*[2]	PUBLICATION[2]	
27-42	3482-3483	:	_	_	
27-43	3483-3484	*	_	_	
27-44	3484-3485	*	_	_	
27-45	3486-3496	Generating	_	_	
27-46	3497-3501	full	_	_	
27-47	3502-3508	source	_	_	
27-48	3509-3513	code	_	_	
27-49	3514-3517	for	_	_	
27-50	3518-3523	smart	_	_	
27-51	3524-3532	Internet	_	_	
27-52	3533-3535	of	_	_	
27-53	3536-3542	Things	_	_	
27-54	3543-3544	(	_	_	
27-55	3544-3547	IoT	_	_	
27-56	3547-3548	)	_	_	
27-57	3549-3557	services	_	_	
27-58	3558-3561	and	_	_	
27-59	3562-3576	cyber-physical	_	_	
27-60	3577-3584	systems	_	_	
27-61	3585-3586	(	_	_	
27-62	3586-3589	CPS	_	_	
27-63	3589-3590	)	_	_	
27-64	3590-3591	,	_	_	
27-65	3592-3597	Armin	_	_	
27-66	3598-3602	Moin	_	_	
27-67	3602-3603	,	_	_	
27-68	3604-3612	Moharram	_	_	
27-69	3613-3623	Challenger	_	_	
27-70	3623-3624	,	_	_	
27-71	3625-3629	Atta	_	_	
27-72	3630-3635	Badii	_	_	
27-73	3636-3639	and	_	_	
27-74	3640-3647	Stephan	_	_	
27-75	3648-3657	Günnemann	_	_	
27-76	3657-3658	,	_	_	
27-77	3659-3667	Software	_	_	
27-78	3668-3671	and	_	_	
27-79	3672-3679	Systems	_	_	
27-80	3680-3688	Modeling	_	_	
27-81	3689-3690	(	_	_	
27-82	3690-3695	SoSyM	_	_	
27-83	3695-3696	)	_	_	
27-84	3696-3697	,	_	_	
27-85	3698-3705	January	_	_	
27-86	3706-3710	2022	_	_	
27-87	3710-3711	.	_	_	
27-88	3711-3712	]	_	_	

#Text=(https://link.springer.com/article/10.1007/s10270-021-00967-x)\r
#Text=BibTeX:\r
#Text=```\r
#Text=@article{Moin+2022-SoSyM,\r
#Text=\tauthor = {Armin Moin and Moharram Challenger and Atta Badii and Stephan G{\\"u}nnemann},\r
#Text=\tdate = {2022/01/19},\r
#Text=\tdoi = {10.1007/s10270-021-00967-x},\r
#Text=\tisbn = {1619-1374},\r
#Text=\tjournal = {Software and Systems Modeling (SoSyM)},\r
#Text=\ttitle = {A model-driven approach to machine learning and software modeling for the {IoT}},\r
#Text=\turl = {https://doi.org/10.1007/s10270-021-00967-x},\r
#Text=\tyear = {2022},\r
#Text=}\r
#Text=```\r
#Text=\r
#Text=<a name="issues"></a>\r
#Text=## 2.
28-1	3712-3713	(	_	_	
28-2	3713-3718	https	_	_	
28-3	3718-3719	:	_	_	
28-4	3719-3720	/	_	_	
28-5	3720-3721	/	_	_	
28-6	3721-3738	link.springer.com	_	_	
28-7	3738-3739	/	_	_	
28-8	3739-3746	article	_	_	
28-9	3746-3747	/	_	_	
28-10	3747-3754	10.1007	_	_	
28-11	3754-3755	/	_	_	
28-12	3755-3761	s10270	_	_	
28-13	3761-3762	-	_	_	
28-14	3762-3765	021	_	_	
28-15	3765-3766	-	_	_	
28-16	3766-3771	00967	_	_	
28-17	3771-3772	-	_	_	
28-18	3772-3773	x	_	_	
28-19	3773-3774	)	_	_	
28-20	3776-3782	BibTeX	*	SOFTWARE	
28-21	3782-3783	:	_	_	
28-22	3785-3786	`	_	_	
28-23	3786-3787	`	_	_	
28-24	3787-3788	`	_	_	
28-25	3790-3791	@	_	_	
28-26	3791-3798	article	_	_	
28-27	3798-3799	{	_	_	
28-28	3799-3803	Moin	_	_	
28-29	3803-3804	+	_	_	
28-30	3804-3808	2022	_	_	
28-31	3808-3809	-	_	_	
28-32	3809-3814	SoSyM	_	_	
28-33	3814-3815	,	_	_	
28-34	3818-3824	author	_	_	
28-35	3825-3826	=	_	_	
28-36	3827-3828	{	_	_	
28-37	3828-3833	Armin	_	_	
28-38	3834-3838	Moin	_	_	
28-39	3839-3842	and	_	_	
28-40	3843-3851	Moharram	_	_	
28-41	3852-3862	Challenger	_	_	
28-42	3863-3866	and	_	_	
28-43	3867-3871	Atta	_	_	
28-44	3872-3877	Badii	_	_	
28-45	3878-3881	and	_	_	
28-46	3882-3889	Stephan	_	_	
28-47	3890-3891	G	_	_	
28-48	3891-3892	{	_	_	
28-49	3892-3893	\	_	_	
28-50	3893-3894	"	_	_	
28-51	3894-3895	u	_	_	
28-52	3895-3896	}	_	_	
28-53	3896-3903	nnemann	_	_	
28-54	3903-3904	}	_	_	
28-55	3904-3905	,	_	_	
28-56	3908-3912	date	_	_	
28-57	3913-3914	=	_	_	
28-58	3915-3916	{	_	_	
28-59	3916-3920	2022	_	_	
28-60	3920-3921	/	_	_	
28-61	3921-3923	01	_	_	
28-62	3923-3924	/	_	_	
28-63	3924-3926	19	_	_	
28-64	3926-3927	}	_	_	
28-65	3927-3928	,	_	_	
28-66	3931-3934	doi	_	_	
28-67	3935-3936	=	_	_	
28-68	3937-3938	{	_	_	
28-69	3938-3945	10.1007	_	_	
28-70	3945-3946	/	_	_	
28-71	3946-3952	s10270	_	_	
28-72	3952-3953	-	_	_	
28-73	3953-3956	021	_	_	
28-74	3956-3957	-	_	_	
28-75	3957-3962	00967	_	_	
28-76	3962-3963	-	_	_	
28-77	3963-3964	x	_	_	
28-78	3964-3965	}	_	_	
28-79	3965-3966	,	_	_	
28-80	3969-3973	isbn	_	_	
28-81	3974-3975	=	_	_	
28-82	3976-3977	{	_	_	
28-83	3977-3981	1619	_	_	
28-84	3981-3982	-	_	_	
28-85	3982-3986	1374	_	_	
28-86	3986-3987	}	_	_	
28-87	3987-3988	,	_	_	
28-88	3991-3998	journal	_	_	
28-89	3999-4000	=	_	_	
28-90	4001-4002	{	_	_	
28-91	4002-4010	Software	_	_	
28-92	4011-4014	and	_	_	
28-93	4015-4022	Systems	_	_	
28-94	4023-4031	Modeling	_	_	
28-95	4032-4033	(	_	_	
28-96	4033-4038	SoSyM	_	_	
28-97	4038-4039	)	_	_	
28-98	4039-4040	}	_	_	
28-99	4040-4041	,	_	_	
28-100	4044-4049	title	_	_	
28-101	4050-4051	=	_	_	
28-102	4052-4053	{	_	_	
28-103	4053-4054	A	*[3]	PUBLICATION[3]	
28-104	4055-4067	model-driven	*[3]	PUBLICATION[3]	
28-105	4068-4076	approach	*[3]	PUBLICATION[3]	
28-106	4077-4079	to	*[3]	PUBLICATION[3]	
28-107	4080-4087	machine	*[3]	PUBLICATION[3]	
28-108	4088-4096	learning	*[3]	PUBLICATION[3]	
28-109	4097-4100	and	*[3]	PUBLICATION[3]	
28-110	4101-4109	software	*[3]	PUBLICATION[3]	
28-111	4110-4118	modeling	*[3]	PUBLICATION[3]	
28-112	4119-4122	for	*[3]	PUBLICATION[3]	
28-113	4123-4126	the	*[3]	PUBLICATION[3]	
28-114	4127-4128	{	*[3]	PUBLICATION[3]	
28-115	4128-4131	IoT	*[3]	PUBLICATION[3]	
28-116	4131-4132	}	*[3]	PUBLICATION[3]	
28-117	4132-4133	}	_	_	
28-118	4133-4134	,	_	_	
28-119	4137-4140	url	_	_	
28-120	4141-4142	=	_	_	
28-121	4143-4144	{	_	_	
28-122	4144-4149	https	_	_	
28-123	4149-4150	:	_	_	
28-124	4150-4151	/	_	_	
28-125	4151-4152	/	_	_	
28-126	4152-4159	doi.org	_	_	
28-127	4159-4160	/	_	_	
28-128	4160-4167	10.1007	_	_	
28-129	4167-4168	/	_	_	
28-130	4168-4174	s10270	_	_	
28-131	4174-4175	-	_	_	
28-132	4175-4178	021	_	_	
28-133	4178-4179	-	_	_	
28-134	4179-4184	00967	_	_	
28-135	4184-4185	-	_	_	
28-136	4185-4186	x	_	_	
28-137	4186-4187	}	_	_	
28-138	4187-4188	,	_	_	
28-139	4191-4195	year	_	_	
28-140	4196-4197	=	_	_	
28-141	4198-4199	{	_	_	
28-142	4199-4203	2022	_	_	
28-143	4203-4204	}	_	_	
28-144	4204-4205	,	_	_	
28-145	4207-4208	}	_	_	
28-146	4210-4211	`	_	_	
28-147	4211-4212	`	_	_	
28-148	4212-4213	`	_	_	
28-149	4217-4218	<	_	_	
28-150	4218-4219	a	_	_	
28-151	4220-4224	name	_	_	
28-152	4224-4225	=	_	_	
28-153	4225-4226	"	_	_	
28-154	4226-4232	issues	_	_	
28-155	4232-4233	"	_	_	
28-156	4233-4234	>	_	_	
28-157	4234-4235	<	_	_	
28-158	4235-4236	/	_	_	
28-159	4236-4237	a	_	_	
28-160	4237-4238	>	_	_	
28-161	4240-4241	#	_	_	
28-162	4241-4242	#	_	_	
28-163	4243-4244	2	_	_	
28-164	4244-4245	.	_	_	

#Text=Reporting Issues/Bugs and Requests\r
#Text=ML2 is a research prototype.
29-1	4246-4255	Reporting	_	_	
29-2	4256-4262	Issues	_	_	
29-3	4262-4263	/	_	_	
29-4	4263-4267	Bugs	_	_	
29-5	4268-4271	and	_	_	
29-6	4272-4280	Requests	_	_	
29-7	4282-4285	ML2	*	SOFTWARE	
29-8	4286-4288	is	_	_	
29-9	4289-4290	a	_	_	
29-10	4291-4299	research	_	_	
29-11	4300-4309	prototype	_	_	
29-12	4309-4310	.	_	_	

#Text=If you find any issues/bugs or have any feature request, please kindly report that through our issue tracking system: https://github.com/arminmoin/ML-Quadrat/issues\r
#Text=\r
#Text=[Back to top](#toc)\r
#Text=\r
#Text=<a name="user-doc-quick"></a>\r
#Text=## 3.
30-1	4311-4313	If	_	_	
30-2	4314-4317	you	_	_	
30-3	4318-4322	find	_	_	
30-4	4323-4326	any	_	_	
30-5	4327-4333	issues	_	_	
30-6	4333-4334	/	_	_	
30-7	4334-4338	bugs	_	_	
30-8	4339-4341	or	_	_	
30-9	4342-4346	have	_	_	
30-10	4347-4350	any	_	_	
30-11	4351-4358	feature	_	_	
30-12	4359-4366	request	_	_	
30-13	4366-4367	,	_	_	
30-14	4368-4374	please	_	_	
30-15	4375-4381	kindly	_	_	
30-16	4382-4388	report	_	_	
30-17	4389-4393	that	_	_	
30-18	4394-4401	through	_	_	
30-19	4402-4405	our	_	_	
30-20	4406-4411	issue	_	_	
30-21	4412-4420	tracking	_	_	
30-22	4421-4427	system	_	_	
30-23	4427-4428	:	_	_	
30-24	4429-4434	https	_	_	
30-25	4434-4435	:	_	_	
30-26	4435-4436	/	_	_	
30-27	4436-4437	/	_	_	
30-28	4437-4447	github.com	_	_	
30-29	4447-4448	/	_	_	
30-30	4448-4457	arminmoin	_	_	
30-31	4457-4458	/	_	_	
30-32	4458-4468	ML-Quadrat	*	SOFTWARE	
30-33	4468-4469	/	_	_	
30-34	4469-4475	issues	_	_	
30-35	4479-4480	[	_	_	
30-36	4480-4484	Back	_	_	
30-37	4485-4487	to	_	_	
30-38	4488-4491	top	_	_	
30-39	4491-4492	]	_	_	
30-40	4492-4493	(	_	_	
30-41	4493-4494	#	_	_	
30-42	4494-4497	toc	_	_	
30-43	4497-4498	)	_	_	
30-44	4502-4503	<	_	_	
30-45	4503-4504	a	_	_	
30-46	4505-4509	name	_	_	
30-47	4509-4510	=	_	_	
30-48	4510-4511	"	_	_	
30-49	4511-4525	user-doc-quick	_	_	
30-50	4525-4526	"	_	_	
30-51	4526-4527	>	_	_	
30-52	4527-4528	<	_	_	
30-53	4528-4529	/	_	_	
30-54	4529-4530	a	_	_	
30-55	4530-4531	>	_	_	
30-56	4533-4534	#	_	_	
30-57	4534-4535	#	_	_	
30-58	4536-4537	3	_	_	
30-59	4537-4538	.	_	_	

#Text=Quick (15 mins) Tutorial\r
#Text=Here, we provide a quick tutorial to get familiar with ML2.
31-1	4539-4544	Quick	_	_	
31-2	4545-4546	(	_	_	
31-3	4546-4548	15	_	_	
31-4	4549-4553	mins	_	_	
31-5	4553-4554	)	_	_	
31-6	4555-4563	Tutorial	_	_	
31-7	4565-4569	Here	_	_	
31-8	4569-4570	,	_	_	
31-9	4571-4573	we	_	_	
31-10	4574-4581	provide	_	_	
31-11	4582-4583	a	_	_	
31-12	4584-4589	quick	_	_	
31-13	4590-4598	tutorial	_	_	
31-14	4599-4601	to	_	_	
31-15	4602-4605	get	_	_	
31-16	4606-4614	familiar	_	_	
31-17	4615-4619	with	_	_	
31-18	4620-4623	ML2	*	SOFTWARE	
31-19	4623-4624	.	_	_	

#Text=However, in order to read the full documentation, please go to the section [ML2 Users' Documentation (Full Tutorial)](#user-doc) below.\r
#Text=\r
#Text=### How to install ML2?
32-1	4625-4632	However	_	_	
32-2	4632-4633	,	_	_	
32-3	4634-4636	in	_	_	
32-4	4637-4642	order	_	_	
32-5	4643-4645	to	_	_	
32-6	4646-4650	read	_	_	
32-7	4651-4654	the	_	_	
32-8	4655-4659	full	_	_	
32-9	4660-4673	documentation	_	_	
32-10	4673-4674	,	_	_	
32-11	4675-4681	please	_	_	
32-12	4682-4684	go	_	_	
32-13	4685-4687	to	_	_	
32-14	4688-4691	the	_	_	
32-15	4692-4699	section	_	_	
32-16	4700-4701	[	_	_	
32-17	4701-4704	ML2	*	SOFTWARE	
32-18	4705-4710	Users	_	_	
32-19	4710-4711	'	_	_	
32-20	4712-4725	Documentation	_	_	
32-21	4726-4727	(	_	_	
32-22	4727-4731	Full	_	_	
32-23	4732-4740	Tutorial	_	_	
32-24	4740-4741	)	_	_	
32-25	4741-4742	]	_	_	
32-26	4742-4743	(	_	_	
32-27	4743-4744	#	_	_	
32-28	4744-4752	user-doc	_	_	
32-29	4752-4753	)	_	_	
32-30	4754-4759	below	_	_	
32-31	4759-4760	.	_	_	
32-32	4764-4765	#	_	_	
32-33	4765-4766	#	_	_	
32-34	4766-4767	#	_	_	
32-35	4768-4771	How	_	_	
32-36	4772-4774	to	_	_	
32-37	4775-4782	install	_	_	
32-38	4783-4786	ML2	*	SOFTWARE	
32-39	4786-4787	?	_	_	

#Text=**System requirements and software prerequisites:**\r
#Text=We recommend a normal PC/laptop with at least 4GB of main memory (RAM) and at least 1GB of free disk space.
33-1	4789-4790	*	_	_	
33-2	4790-4791	*	_	_	
33-3	4791-4797	System	_	_	
33-4	4798-4810	requirements	_	_	
33-5	4811-4814	and	_	_	
33-6	4815-4823	software	_	_	
33-7	4824-4837	prerequisites	_	_	
33-8	4837-4838	:	_	_	
33-9	4838-4839	*	_	_	
33-10	4839-4840	*	_	_	
33-11	4842-4844	We	_	_	
33-12	4845-4854	recommend	_	_	
33-13	4855-4856	a	_	_	
33-14	4857-4863	normal	_	_	
33-15	4864-4866	PC	_	_	
33-16	4866-4867	/	_	_	
33-17	4867-4873	laptop	_	_	
33-18	4874-4878	with	_	_	
33-19	4879-4881	at	_	_	
33-20	4882-4887	least	_	_	
33-21	4888-4891	4GB	_	_	
33-22	4892-4894	of	_	_	
33-23	4895-4899	main	_	_	
33-24	4900-4906	memory	_	_	
33-25	4907-4908	(	_	_	
33-26	4908-4911	RAM	_	_	
33-27	4911-4912	)	_	_	
33-28	4913-4916	and	_	_	
33-29	4917-4919	at	_	_	
33-30	4920-4925	least	_	_	
33-31	4926-4929	1GB	_	_	
33-32	4930-4932	of	_	_	
33-33	4933-4937	free	_	_	
33-34	4938-4942	disk	_	_	
33-35	4943-4948	space	_	_	
33-36	4948-4949	.	_	_	

#Text=In this tutorial, we use a x86_64 Linux system with the Ubuntu 20.04.2 LTS (focal) operating system.
34-1	4950-4952	In	_	_	
34-2	4953-4957	this	_	_	
34-3	4958-4966	tutorial	_	_	
34-4	4966-4967	,	_	_	
34-5	4968-4970	we	_	_	
34-6	4971-4974	use	_	_	
34-7	4975-4976	a	_	_	
34-8	4977-4980	x86	_	_	
34-9	4980-4981	_	_	_	
34-10	4981-4983	64	_	_	
34-11	4984-4989	Linux	*	SOFTWARE	
34-12	4990-4996	system	_	_	
34-13	4997-5001	with	_	_	
34-14	5002-5005	the	_	_	
34-15	5006-5012	Ubuntu	*[4]	SOFTWARE[4]	
34-16	5013-5020	20.04.2	*[4]	SOFTWARE[4]	
34-17	5021-5024	LTS	*[4]	SOFTWARE[4]	
34-18	5025-5026	(	_	_	
34-19	5026-5031	focal	_	_	
34-20	5031-5032	)	_	_	
34-21	5033-5042	operating	_	_	
34-22	5043-5049	system	_	_	
34-23	5049-5050	.	_	_	

#Text=Please install the following software before proceeding with the installation of ML2 (use ```sudo su``` to run the commands as root and at the end ```exit``` in order to get back to the non-root user):\r
#Text=\r
#Text=1.
35-1	5051-5057	Please	_	_	
35-2	5058-5065	install	_	_	
35-3	5066-5069	the	_	_	
35-4	5070-5079	following	_	_	
35-5	5080-5088	software	_	_	
35-6	5089-5095	before	_	_	
35-7	5096-5106	proceeding	_	_	
35-8	5107-5111	with	_	_	
35-9	5112-5115	the	_	_	
35-10	5116-5128	installation	_	_	
35-11	5129-5131	of	_	_	
35-12	5132-5135	ML2	*	SOFTWARE	
35-13	5136-5137	(	_	_	
35-14	5137-5140	use	_	_	
35-15	5141-5142	`	_	_	
35-16	5142-5143	`	_	_	
35-17	5143-5144	`	_	_	
35-18	5144-5148	sudo	_	_	
35-19	5149-5151	su	_	_	
35-20	5151-5152	`	_	_	
35-21	5152-5153	`	_	_	
35-22	5153-5154	`	_	_	
35-23	5155-5157	to	_	_	
35-24	5158-5161	run	_	_	
35-25	5162-5165	the	_	_	
35-26	5166-5174	commands	_	_	
35-27	5175-5177	as	_	_	
35-28	5178-5182	root	_	_	
35-29	5183-5186	and	_	_	
35-30	5187-5189	at	_	_	
35-31	5190-5193	the	_	_	
35-32	5194-5197	end	_	_	
35-33	5198-5199	`	_	_	
35-34	5199-5200	`	_	_	
35-35	5200-5201	`	_	_	
35-36	5201-5205	exit	_	_	
35-37	5205-5206	`	_	_	
35-38	5206-5207	`	_	_	
35-39	5207-5208	`	_	_	
35-40	5209-5211	in	_	_	
35-41	5212-5217	order	_	_	
35-42	5218-5220	to	_	_	
35-43	5221-5224	get	_	_	
35-44	5225-5229	back	_	_	
35-45	5230-5232	to	_	_	
35-46	5233-5236	the	_	_	
35-47	5237-5245	non-root	_	_	
35-48	5246-5250	user	_	_	
35-49	5250-5251	)	_	_	
35-50	5251-5252	:	_	_	
35-51	5256-5257	1	_	_	
35-52	5257-5258	.	_	_	

#Text=[Git](https://git-scm.com/): \r
#Text=```\r
#Text=sudo su\r
#Text=apt-get install git\r
#Text=```\r
#Text=2.
36-1	5259-5260	[	_	_	
36-2	5260-5263	Git	*	SOFTWARE	
36-3	5263-5264	]	_	_	
36-4	5264-5265	(	_	_	
36-5	5265-5270	https	_	_	
36-6	5270-5271	:	_	_	
36-7	5271-5272	/	_	_	
36-8	5272-5273	/	_	_	
36-9	5273-5284	git-scm.com	_	_	
36-9.1	5273-5276	git	*	SOFTWARE	
36-10	5284-5285	/	_	_	
36-11	5285-5286	)	_	_	
36-12	5286-5287	:	_	_	
36-13	5290-5291	`	_	_	
36-14	5291-5292	`	_	_	
36-15	5292-5293	`	_	_	
36-16	5295-5299	sudo	*	SOFTWARE	
36-17	5300-5302	su	_	_	
36-18	5304-5311	apt-get	_	_	
36-19	5312-5319	install	_	_	
36-20	5320-5323	git	*	SOFTWARE	
36-21	5325-5326	`	_	_	
36-22	5326-5327	`	_	_	
36-23	5327-5328	`	_	_	
36-24	5330-5331	2	_	_	
36-25	5331-5332	.	_	_	

#Text=[The Java Runtime Environment (JRE) and the Java Development Kit (JDK)](https://www.java.com/en/download/): \r
#Text=```\r
#Text=apt-get install default-jre default-jdk\r
#Text=```\r
#Text=3.
37-1	5333-5334	[	_	_	
37-2	5334-5337	The	_	_	
37-3	5338-5342	Java	*	PROGLANG	
37-4	5343-5350	Runtime	_	_	
37-5	5351-5362	Environment	_	_	
37-6	5363-5364	(	_	_	
37-7	5364-5367	JRE	*	SOFTWARE	
37-8	5367-5368	)	_	_	
37-9	5369-5372	and	_	_	
37-10	5373-5376	the	_	_	
37-11	5377-5381	Java	*[5]	SOFTWARE[5]	
37-12	5382-5393	Development	*[5]	SOFTWARE[5]	
37-13	5394-5397	Kit	*[5]	SOFTWARE[5]	
37-14	5398-5399	(	_	_	
37-15	5399-5402	JDK	*	SOFTWARE	
37-16	5402-5403	)	_	_	
37-17	5403-5404	]	_	_	
37-18	5404-5405	(	_	_	
37-19	5405-5410	https	_	_	
37-20	5410-5411	:	_	_	
37-21	5411-5412	/	_	_	
37-22	5412-5413	/	_	_	
37-23	5413-5425	www.java.com	_	_	
37-23.1	5417-5421	java	*	SOFTWARE	
37-24	5425-5426	/	_	_	
37-25	5426-5428	en	_	_	
37-26	5428-5429	/	_	_	
37-27	5429-5437	download	_	_	
37-28	5437-5438	/	_	_	
37-29	5438-5439	)	_	_	
37-30	5439-5440	:	_	_	
37-31	5443-5444	`	_	_	
37-32	5444-5445	`	_	_	
37-33	5445-5446	`	_	_	
37-34	5448-5455	apt-get	_	_	
37-35	5456-5463	install	_	_	
37-36	5464-5475	default-jre	_	_	
37-37	5476-5487	default-jdk	_	_	
37-38	5489-5490	`	_	_	
37-39	5490-5491	`	_	_	
37-40	5491-5492	`	_	_	
37-41	5494-5495	3	_	_	
37-42	5495-5496	.	_	_	

#Text=[Apache Maven](https://maven.apache.org/): \r
#Text=```\r
#Text=apt-get install maven\r
#Text=exit\r
#Text=```\r
#Text=\r
#Text=**Now, please follow the steps below in the Linux terminal / shell / command line:**\r
#Text=\r
#Text=1.
38-1	5497-5498	[	_	_	
38-2	5498-5504	Apache	*[6]	SOFTWARE[6]	
38-3	5505-5510	Maven	*[6]	SOFTWARE[6]	
38-4	5510-5511	]	_	_	
38-5	5511-5512	(	_	_	
38-6	5512-5517	https	_	_	
38-7	5517-5518	:	_	_	
38-8	5518-5519	/	_	_	
38-9	5519-5520	/	_	_	
38-10	5520-5536	maven.apache.org	_	_	
38-10.1	5520-5525	maven	*	SOFTWARE	
38-11	5536-5537	/	_	_	
38-12	5537-5538	)	_	_	
38-13	5538-5539	:	_	_	
38-14	5542-5543	`	_	_	
38-15	5543-5544	`	_	_	
38-16	5544-5545	`	_	_	
38-17	5547-5554	apt-get	_	_	
38-18	5555-5562	install	_	_	
38-19	5563-5568	maven	*	SOFTWARE	
38-20	5570-5574	exit	_	_	
38-21	5576-5577	`	_	_	
38-22	5577-5578	`	_	_	
38-23	5578-5579	`	_	_	
38-24	5583-5584	*	_	_	
38-25	5584-5585	*	_	_	
38-26	5585-5588	Now	_	_	
38-27	5588-5589	,	_	_	
38-28	5590-5596	please	_	_	
38-29	5597-5603	follow	_	_	
38-30	5604-5607	the	_	_	
38-31	5608-5613	steps	_	_	
38-32	5614-5619	below	_	_	
38-33	5620-5622	in	_	_	
38-34	5623-5626	the	_	_	
38-35	5627-5632	Linux	*	SOFTWARE	
38-36	5633-5641	terminal	_	_	
38-37	5642-5643	/	_	_	
38-38	5644-5649	shell	_	_	
38-39	5650-5651	/	_	_	
38-40	5652-5659	command	_	_	
38-41	5660-5664	line	_	_	
38-42	5664-5665	:	_	_	
38-43	5665-5666	*	_	_	
38-44	5666-5667	*	_	_	
38-45	5671-5672	1	_	_	
38-46	5672-5673	.	_	_	

#Text=Check out the source code from the Git repository:\r
#Text=```bash\r
#Text=git clone https://github.com/arminmoin/ML-Quadrat/\r
#Text=```\r
#Text=\r
#Text=2.
39-1	5674-5679	Check	_	_	
39-2	5680-5683	out	_	_	
39-3	5684-5687	the	_	_	
39-4	5688-5694	source	_	_	
39-5	5695-5699	code	_	_	
39-6	5700-5704	from	_	_	
39-7	5705-5708	the	_	_	
39-8	5709-5712	Git	*	SOFTWARE	
39-9	5713-5723	repository	_	_	
39-10	5723-5724	:	_	_	
39-11	5726-5727	`	_	_	
39-12	5727-5728	`	_	_	
39-13	5728-5729	`	_	_	
39-14	5729-5733	bash	*	PROGLANG	
39-15	5735-5738	git	*	SOFTWARE	
39-16	5739-5744	clone	_	_	
39-17	5745-5750	https	_	_	
39-18	5750-5751	:	_	_	
39-19	5751-5752	/	_	_	
39-20	5752-5753	/	_	_	
39-21	5753-5763	github.com	_	_	
39-22	5763-5764	/	_	_	
39-23	5764-5773	arminmoin	_	_	
39-24	5773-5774	/	_	_	
39-25	5774-5784	ML-Quadrat	*	SOFTWARE	
39-26	5784-5785	/	_	_	
39-27	5787-5788	`	_	_	
39-28	5788-5789	`	_	_	
39-29	5789-5790	`	_	_	
39-30	5794-5795	2	_	_	
39-31	5795-5796	.	_	_	

#Text=Install ML2 using the Apache Maven:\r
#Text=```bash\r
#Text=cd ML-Quadrat\r
#Text=mvn clean install -DskipTests\r
#Text=cd ML2/language\r
#Text=mvn clean install -DskipTests\r
#Text=cd ../..\r
#Text=```\r
#Text=\r
#Text=Note that the -DskipTests option lets us skip running the tests, thus saving more time.
40-1	5797-5804	Install	_	_	
40-2	5805-5808	ML2	*	SOFTWARE	
40-3	5809-5814	using	_	_	
40-4	5815-5818	the	_	_	
40-5	5819-5825	Apache	*[7]	SOFTWARE[7]	
40-6	5826-5831	Maven	*[7]	SOFTWARE[7]	
40-7	5831-5832	:	_	_	
40-8	5834-5835	`	_	_	
40-9	5835-5836	`	_	_	
40-10	5836-5837	`	_	_	
40-11	5837-5841	bash	*	PROGLANG	
40-12	5843-5845	cd	_	_	
40-13	5846-5856	ML-Quadrat	*	SOFTWARE	
40-14	5858-5861	mvn	_	_	
40-15	5862-5867	clean	_	_	
40-16	5868-5875	install	_	_	
40-17	5876-5877	-	_	_	
40-18	5877-5887	DskipTests	_	_	
40-19	5889-5891	cd	_	_	
40-20	5892-5895	ML2	*	SOFTWARE	
40-21	5895-5896	/	_	_	
40-22	5896-5904	language	_	_	
40-23	5906-5909	mvn	_	_	
40-24	5910-5915	clean	_	_	
40-25	5916-5923	install	_	_	
40-26	5924-5925	-	_	_	
40-27	5925-5935	DskipTests	_	_	
40-28	5937-5939	cd	_	_	
40-29	5940-5941	.	_	_	
40-30	5941-5942	.	_	_	
40-31	5942-5943	/	_	_	
40-32	5943-5944	.	_	_	
40-33	5944-5945	.	_	_	
40-34	5947-5948	`	_	_	
40-35	5948-5949	`	_	_	
40-36	5949-5950	`	_	_	
40-37	5954-5958	Note	_	_	
40-38	5959-5963	that	_	_	
40-39	5964-5967	the	_	_	
40-40	5968-5969	-	_	_	
40-41	5969-5979	DskipTests	_	_	
40-42	5980-5986	option	_	_	
40-43	5987-5991	lets	_	_	
40-44	5992-5994	us	_	_	
40-45	5995-5999	skip	_	_	
40-46	6000-6007	running	_	_	
40-47	6008-6011	the	_	_	
40-48	6012-6017	tests	_	_	
40-49	6017-6018	,	_	_	
40-50	6019-6023	thus	_	_	
40-51	6024-6030	saving	_	_	
40-52	6031-6035	more	_	_	
40-53	6036-6040	time	_	_	
40-54	6040-6041	.	_	_	

#Text=If you want to see a more detailed output to debug, use the option -X:\r
#Text=\r
#Text=```bash\r
#Text=mvn clean install -DskipTests -X\r
#Text=```\r
#Text=\r
#Text=Moreover, if you want to use Maven in the offline mode, e.g., in the case that your machine is behind a firewall that prohibits the Internet access, you should use the option -o, but, remember that you would need to first copy the .m2 directory, which includes the Maven cache from another computer behind the firewall (on which you have already cached ´the required dependencies) to this computer.
41-1	6045-6047	If	_	_	
41-2	6048-6051	you	_	_	
41-3	6052-6056	want	_	_	
41-4	6057-6059	to	_	_	
41-5	6060-6063	see	_	_	
41-6	6064-6065	a	_	_	
41-7	6066-6070	more	_	_	
41-8	6071-6079	detailed	_	_	
41-9	6080-6086	output	_	_	
41-10	6087-6089	to	_	_	
41-11	6090-6095	debug	_	_	
41-12	6095-6096	,	_	_	
41-13	6097-6100	use	_	_	
41-14	6101-6104	the	_	_	
41-15	6105-6111	option	_	_	
41-16	6112-6113	-	_	_	
41-17	6113-6114	X	_	_	
41-18	6114-6115	:	_	_	
41-19	6119-6120	`	_	_	
41-20	6120-6121	`	_	_	
41-21	6121-6122	`	_	_	
41-22	6122-6126	bash	*	PROGLANG	
41-23	6128-6131	mvn	_	_	
41-24	6132-6137	clean	_	_	
41-25	6138-6145	install	_	_	
41-26	6146-6147	-	_	_	
41-27	6147-6157	DskipTests	_	_	
41-28	6158-6159	-	_	_	
41-29	6159-6160	X	_	_	
41-30	6162-6163	`	_	_	
41-31	6163-6164	`	_	_	
41-32	6164-6165	`	_	_	
41-33	6169-6177	Moreover	_	_	
41-34	6177-6178	,	_	_	
41-35	6179-6181	if	_	_	
41-36	6182-6185	you	_	_	
41-37	6186-6190	want	_	_	
41-38	6191-6193	to	_	_	
41-39	6194-6197	use	_	_	
41-40	6198-6203	Maven	*	SOFTWARE	
41-41	6204-6206	in	_	_	
41-42	6207-6210	the	_	_	
41-43	6211-6218	offline	_	_	
41-44	6219-6223	mode	_	_	
41-45	6223-6224	,	_	_	
41-46	6225-6228	e.g	_	_	
41-47	6228-6229	.	_	_	
41-48	6229-6230	,	_	_	
41-49	6231-6233	in	_	_	
41-50	6234-6237	the	_	_	
41-51	6238-6242	case	_	_	
41-52	6243-6247	that	_	_	
41-53	6248-6252	your	_	_	
41-54	6253-6260	machine	_	_	
41-55	6261-6263	is	_	_	
41-56	6264-6270	behind	_	_	
41-57	6271-6272	a	_	_	
41-58	6273-6281	firewall	_	_	
41-59	6282-6286	that	_	_	
41-60	6287-6296	prohibits	_	_	
41-61	6297-6300	the	_	_	
41-62	6301-6309	Internet	_	_	
41-63	6310-6316	access	_	_	
41-64	6316-6317	,	_	_	
41-65	6318-6321	you	_	_	
41-66	6322-6328	should	_	_	
41-67	6329-6332	use	_	_	
41-68	6333-6336	the	_	_	
41-69	6337-6343	option	_	_	
41-70	6344-6345	-	_	_	
41-71	6345-6346	o	_	_	
41-72	6346-6347	,	_	_	
41-73	6348-6351	but	_	_	
41-74	6351-6352	,	_	_	
41-75	6353-6361	remember	_	_	
41-76	6362-6366	that	_	_	
41-77	6367-6370	you	_	_	
41-78	6371-6376	would	_	_	
41-79	6377-6381	need	_	_	
41-80	6382-6384	to	_	_	
41-81	6385-6390	first	_	_	
41-82	6391-6395	copy	_	_	
41-83	6396-6399	the	_	_	
41-84	6400-6401	.	_	_	
41-85	6401-6403	m2	_	_	
41-86	6404-6413	directory	_	_	
41-87	6413-6414	,	_	_	
41-88	6415-6420	which	_	_	
41-89	6421-6429	includes	_	_	
41-90	6430-6433	the	_	_	
41-91	6434-6439	Maven	*	SOFTWARE	
41-92	6440-6445	cache	_	_	
41-93	6446-6450	from	_	_	
41-94	6451-6458	another	_	_	
41-95	6459-6467	computer	_	_	
41-96	6468-6474	behind	_	_	
41-97	6475-6478	the	_	_	
41-98	6479-6487	firewall	_	_	
41-99	6488-6489	(	_	_	
41-100	6489-6491	on	_	_	
41-101	6492-6497	which	_	_	
41-102	6498-6501	you	_	_	
41-103	6502-6506	have	_	_	
41-104	6507-6514	already	_	_	
41-105	6515-6521	cached	_	_	
41-106	6522-6523	´	_	_	
41-107	6523-6526	the	_	_	
41-108	6527-6535	required	_	_	
41-109	6536-6548	dependencies	_	_	
41-110	6548-6549	)	_	_	
41-111	6550-6552	to	_	_	
41-112	6553-6557	this	_	_	
41-113	6558-6566	computer	_	_	
41-114	6566-6567	.	_	_	

#Text=The .m2 directory is usually stored in the user's home directory.
42-1	6568-6571	The	_	_	
42-2	6572-6573	.	_	_	
42-3	6573-6575	m2	_	_	
42-4	6576-6585	directory	_	_	
42-5	6586-6588	is	_	_	
42-6	6589-6596	usually	_	_	
42-7	6597-6603	stored	_	_	
42-8	6604-6606	in	_	_	
42-9	6607-6610	the	_	_	
42-10	6611-6617	user's	_	_	
42-11	6618-6622	home	_	_	
42-12	6623-6632	directory	_	_	
42-13	6632-6633	.	_	_	

#Text=```bash\r
#Text=mvn clean install -DskipTests -o\r
#Text=```\r
#Text=\r
#Text=### How to find a sample model instance?
43-1	6637-6638	`	_	_	
43-2	6638-6639	`	_	_	
43-3	6639-6640	`	_	_	
43-4	6640-6644	bash	*	PROGLANG	
43-5	6646-6649	mvn	_	_	
43-6	6650-6655	clean	_	_	
43-7	6656-6663	install	_	_	
43-8	6664-6665	-	_	_	
43-9	6665-6675	DskipTests	_	_	
43-10	6676-6677	-	_	_	
43-11	6677-6678	o	_	_	
43-12	6680-6681	`	_	_	
43-13	6681-6682	`	_	_	
43-14	6682-6683	`	_	_	
43-15	6687-6688	#	_	_	
43-16	6688-6689	#	_	_	
43-17	6689-6690	#	_	_	
43-18	6691-6694	How	_	_	
43-19	6695-6697	to	_	_	
43-20	6698-6702	find	_	_	
43-21	6703-6704	a	_	_	
43-22	6705-6711	sample	_	_	
43-23	6712-6717	model	_	_	
43-24	6718-6726	instance	_	_	
43-25	6726-6727	?	_	_	

#Text=There exist a number of sample model instances with the .thingml extension at this location: https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/org.thingml.samples/src/main/thingml\r
#Text=\r
#Text=Let's choose [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml) for this quick tutorial, and generate, e.g., the Python and Java source code out of it using the Python_Java model-to-code transformation (a.k.a. code generator or "compiler").
44-1	6729-6734	There	_	_	
44-2	6735-6740	exist	_	_	
44-3	6741-6742	a	_	_	
44-4	6743-6749	number	_	_	
44-5	6750-6752	of	_	_	
44-6	6753-6759	sample	_	_	
44-7	6760-6765	model	_	_	
44-8	6766-6775	instances	_	_	
44-9	6776-6780	with	_	_	
44-10	6781-6784	the	_	_	
44-11	6785-6786	.	_	_	
44-12	6786-6793	thingml	_	_	
44-13	6794-6803	extension	_	_	
44-14	6804-6806	at	_	_	
44-15	6807-6811	this	_	_	
44-16	6812-6820	location	_	_	
44-17	6820-6821	:	_	_	
44-18	6822-6827	https	_	_	
44-19	6827-6828	:	_	_	
44-20	6828-6829	/	_	_	
44-21	6829-6830	/	_	_	
44-22	6830-6840	github.com	_	_	
44-23	6840-6841	/	_	_	
44-24	6841-6850	arminmoin	_	_	
44-25	6850-6851	/	_	_	
44-26	6851-6861	ML-Quadrat	*	SOFTWARE	
44-27	6861-6862	/	_	_	
44-28	6862-6866	tree	_	_	
44-29	6866-6867	/	_	_	
44-30	6867-6873	master	_	_	
44-31	6873-6874	/	_	_	
44-32	6874-6877	ML2	*	SOFTWARE	
44-33	6877-6878	/	_	_	
44-34	6878-6897	org.thingml.samples	_	_	
44-35	6897-6898	/	_	_	
44-36	6898-6901	src	_	_	
44-37	6901-6902	/	_	_	
44-38	6902-6906	main	_	_	
44-39	6906-6907	/	_	_	
44-40	6907-6914	thingml	_	_	
44-41	6918-6923	Let's	_	_	
44-42	6924-6930	choose	_	_	
44-43	6931-6932	[	_	_	
44-44	6932-6935	ML2	*	SOFTWARE	
44-45	6935-6936	_	_	_	
44-46	6936-6957	Demo_PingPong.thingml	_	_	
44-47	6957-6958	]	_	_	
44-48	6958-6959	(	_	_	
44-49	6959-6964	https	_	_	
44-50	6964-6965	:	_	_	
44-51	6965-6966	/	_	_	
44-52	6966-6967	/	_	_	
44-53	6967-6977	github.com	_	_	
44-54	6977-6978	/	_	_	
44-55	6978-6987	arminmoin	_	_	
44-56	6987-6988	/	_	_	
44-57	6988-6998	ML-Quadrat	*	SOFTWARE	
44-58	6998-6999	/	_	_	
44-59	6999-7003	blob	_	_	
44-60	7003-7004	/	_	_	
44-61	7004-7010	master	_	_	
44-62	7010-7011	/	_	_	
44-63	7011-7014	ML2	*	SOFTWARE	
44-64	7014-7015	/	_	_	
44-65	7015-7034	org.thingml.samples	_	_	
44-66	7034-7035	/	_	_	
44-67	7035-7038	src	_	_	
44-68	7038-7039	/	_	_	
44-69	7039-7043	main	_	_	
44-70	7043-7044	/	_	_	
44-71	7044-7051	thingml	_	_	
44-72	7051-7052	/	_	_	
44-73	7052-7055	ML2	_	_	
44-74	7055-7056	_	_	_	
44-75	7056-7077	Demo_PingPong.thingml	_	_	
44-76	7077-7078	)	_	_	
44-77	7079-7082	for	_	_	
44-78	7083-7087	this	_	_	
44-79	7088-7093	quick	_	_	
44-80	7094-7102	tutorial	_	_	
44-81	7102-7103	,	_	_	
44-82	7104-7107	and	_	_	
44-83	7108-7116	generate	_	_	
44-84	7116-7117	,	_	_	
44-85	7118-7121	e.g	_	_	
44-86	7121-7122	.	_	_	
44-87	7122-7123	,	_	_	
44-88	7124-7127	the	_	_	
44-89	7128-7134	Python	*	PROGLANG	
44-90	7135-7138	and	_	_	
44-91	7139-7143	Java	*	PROGLANG	
44-92	7144-7150	source	_	_	
44-93	7151-7155	code	_	_	
44-94	7156-7159	out	_	_	
44-95	7160-7162	of	_	_	
44-96	7163-7165	it	_	_	
44-97	7166-7171	using	_	_	
44-98	7172-7175	the	_	_	
44-99	7176-7187	Python_Java	_	_	
44-99.1	7176-7182	Python	*	PROGLANG	
44-99.2	7183-7187	Java	*	PROGLANG	
44-100	7188-7201	model-to-code	_	_	
44-101	7202-7216	transformation	_	_	
44-102	7217-7218	(	_	_	
44-103	7218-7223	a.k.a	_	_	
44-104	7223-7224	.	_	_	
44-105	7225-7229	code	_	_	
44-106	7230-7239	generator	_	_	
44-107	7240-7242	or	_	_	
44-108	7243-7244	"	_	_	
44-109	7244-7252	compiler	_	_	
44-110	7252-7253	"	_	_	
44-111	7253-7254	)	_	_	
44-112	7254-7255	.	_	_	

#Text=This example is about a simple client-server interaction, where a thing called "PingServer" simply waits for the ping messages of another thing, called "PingClient".
45-1	7256-7260	This	_	_	
45-2	7261-7268	example	_	_	
45-3	7269-7271	is	_	_	
45-4	7272-7277	about	_	_	
45-5	7278-7279	a	_	_	
45-6	7280-7286	simple	_	_	
45-7	7287-7300	client-server	_	_	
45-8	7301-7312	interaction	_	_	
45-9	7312-7313	,	_	_	
45-10	7314-7319	where	_	_	
45-11	7320-7321	a	_	_	
45-12	7322-7327	thing	_	_	
45-13	7328-7334	called	_	_	
45-14	7335-7336	"	_	_	
45-15	7336-7346	PingServer	_	_	
45-16	7346-7347	"	_	_	
45-17	7348-7354	simply	_	_	
45-18	7355-7360	waits	_	_	
45-19	7361-7364	for	_	_	
45-20	7365-7368	the	_	_	
45-21	7369-7373	ping	_	_	
45-22	7374-7382	messages	_	_	
45-23	7383-7385	of	_	_	
45-24	7386-7393	another	_	_	
45-25	7394-7399	thing	_	_	
45-26	7399-7400	,	_	_	
45-27	7401-7407	called	_	_	
45-28	7408-7409	"	_	_	
45-29	7409-7419	PingClient	_	_	
45-30	7419-7420	"	_	_	
45-31	7420-7421	.	_	_	

#Text=In the original version from [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project), the server used to reply to every ping message of the client with a pong response.
46-1	7422-7424	In	_	_	
46-2	7425-7428	the	_	_	
46-3	7429-7437	original	_	_	
46-4	7438-7445	version	_	_	
46-5	7446-7450	from	_	_	
46-6	7451-7452	[	_	_	
46-7	7452-7459	ThingML	*	PROJECT	
46-8	7459-7460	]	_	_	
46-9	7460-7461	(	_	_	
46-10	7461-7466	https	_	_	
46-11	7466-7467	:	_	_	
46-12	7467-7468	/	_	_	
46-13	7468-7469	/	_	_	
46-14	7469-7479	github.com	_	_	
46-15	7479-7480	/	_	_	
46-16	7480-7488	TelluIoT	_	_	
46-17	7488-7489	/	_	_	
46-18	7489-7496	ThingML	*	PROJECT	
46-19	7496-7497	)	_	_	
46-20	7498-7499	/	_	_	
46-21	7500-7501	[	_	_	
46-22	7501-7506	HEADS	*	PROJECT	
46-23	7506-7507	]	_	_	
46-24	7507-7508	(	_	_	
46-25	7508-7513	https	_	_	
46-26	7513-7514	:	_	_	
46-27	7514-7515	/	_	_	
46-28	7515-7516	/	_	_	
46-29	7516-7526	github.com	_	_	
46-30	7526-7527	/	_	_	
46-31	7527-7540	HEADS-project	_	_	
46-31.1	7527-7532	HEADS	*	PROJECT	
46-32	7540-7541	)	_	_	
46-33	7541-7542	,	_	_	
46-34	7543-7546	the	_	_	
46-35	7547-7553	server	_	_	
46-36	7554-7558	used	_	_	
46-37	7559-7561	to	_	_	
46-38	7562-7567	reply	_	_	
46-39	7568-7570	to	_	_	
46-40	7571-7576	every	_	_	
46-41	7577-7581	ping	_	_	
46-42	7582-7589	message	_	_	
46-43	7590-7592	of	_	_	
46-44	7593-7596	the	_	_	
46-45	7597-7603	client	_	_	
46-46	7604-7608	with	_	_	
46-47	7609-7610	a	_	_	
46-48	7611-7615	pong	_	_	
46-49	7616-7624	response	_	_	
46-50	7624-7625	.	_	_	

#Text=However, this was in general in a real-world scenario prone to the so-called "Distributed Denial of Service" (DDoS) attacks, where malicious clients may overload the server with their requests (ping messages).
47-1	7626-7633	However	_	_	
47-2	7633-7634	,	_	_	
47-3	7635-7639	this	_	_	
47-4	7640-7643	was	_	_	
47-5	7644-7646	in	_	_	
47-6	7647-7654	general	_	_	
47-7	7655-7657	in	_	_	
47-8	7658-7659	a	_	_	
47-9	7660-7670	real-world	_	_	
47-10	7671-7679	scenario	_	_	
47-11	7680-7685	prone	_	_	
47-12	7686-7688	to	_	_	
47-13	7689-7692	the	_	_	
47-14	7693-7702	so-called	_	_	
47-15	7703-7704	"	_	_	
47-16	7704-7715	Distributed	_	_	
47-17	7716-7722	Denial	_	_	
47-18	7723-7725	of	_	_	
47-19	7726-7733	Service	_	_	
47-20	7733-7734	"	_	_	
47-21	7735-7736	(	_	_	
47-22	7736-7740	DDoS	_	_	
47-23	7740-7741	)	_	_	
47-24	7742-7749	attacks	_	_	
47-25	7749-7750	,	_	_	
47-26	7751-7756	where	_	_	
47-27	7757-7766	malicious	_	_	
47-28	7767-7774	clients	_	_	
47-29	7775-7778	may	_	_	
47-30	7779-7787	overload	_	_	
47-31	7788-7791	the	_	_	
47-32	7792-7798	server	_	_	
47-33	7799-7803	with	_	_	
47-34	7804-7809	their	_	_	
47-35	7810-7818	requests	_	_	
47-36	7819-7820	(	_	_	
47-37	7820-7824	ping	_	_	
47-38	7825-7833	messages	_	_	
47-39	7833-7834	)	_	_	
47-40	7834-7835	.	_	_	

#Text=However, in ML2, this example is enhanced in order to make the server a bit "smarter"!
48-1	7836-7843	However	_	_	
48-2	7843-7844	,	_	_	
48-3	7845-7847	in	_	_	
48-4	7848-7851	ML2	*	SOFTWARE	
48-5	7851-7852	,	_	_	
48-6	7853-7857	this	_	_	
48-7	7858-7865	example	_	_	
48-8	7866-7868	is	_	_	
48-9	7869-7877	enhanced	_	_	
48-10	7878-7880	in	_	_	
48-11	7881-7886	order	_	_	
48-12	7887-7889	to	_	_	
48-13	7890-7894	make	_	_	
48-14	7895-7898	the	_	_	
48-15	7899-7905	server	_	_	
48-16	7906-7907	a	_	_	
48-17	7908-7911	bit	_	_	
48-18	7912-7913	"	_	_	
48-19	7913-7920	smarter	_	_	
48-20	7920-7921	"	_	_	
48-21	7921-7922	!	_	_	

#Text=Hence, the server will first consult a new thing, called PingPongDataAnalytics, which deploys ML, in order to see if a client is likely to be an attacker or not.
49-1	7923-7928	Hence	_	_	
49-2	7928-7929	,	_	_	
49-3	7930-7933	the	_	_	
49-4	7934-7940	server	_	_	
49-5	7941-7945	will	_	_	
49-6	7946-7951	first	_	_	
49-7	7952-7959	consult	_	_	
49-8	7960-7961	a	_	_	
49-9	7962-7965	new	_	_	
49-10	7966-7971	thing	_	_	
49-11	7971-7972	,	_	_	
49-12	7973-7979	called	_	_	
49-13	7980-8001	PingPongDataAnalytics	_	_	
49-14	8001-8002	,	_	_	
49-15	8003-8008	which	_	_	
49-16	8009-8016	deploys	_	_	
49-17	8017-8019	ML	_	_	
49-18	8019-8020	,	_	_	
49-19	8021-8023	in	_	_	
49-20	8024-8029	order	_	_	
49-21	8030-8032	to	_	_	
49-22	8033-8036	see	_	_	
49-23	8037-8039	if	_	_	
49-24	8040-8041	a	_	_	
49-25	8042-8048	client	_	_	
49-26	8049-8051	is	_	_	
49-27	8052-8058	likely	_	_	
49-28	8059-8061	to	_	_	
49-29	8062-8064	be	_	_	
49-30	8065-8067	an	_	_	
49-31	8068-8076	attacker	_	_	
49-32	8077-8079	or	_	_	
49-33	8080-8083	not	_	_	
49-34	8083-8084	.	_	_	

#Text=If it is likely to be an attacker, then the ping message will simply be ignored (optionally, the IP address of the sender might be blacklisted for some time).
50-1	8085-8087	If	_	_	
50-2	8088-8090	it	_	_	
50-3	8091-8093	is	_	_	
50-4	8094-8100	likely	_	_	
50-5	8101-8103	to	_	_	
50-6	8104-8106	be	_	_	
50-7	8107-8109	an	_	_	
50-8	8110-8118	attacker	_	_	
50-9	8118-8119	,	_	_	
50-10	8120-8124	then	_	_	
50-11	8125-8128	the	_	_	
50-12	8129-8133	ping	_	_	
50-13	8134-8141	message	_	_	
50-14	8142-8146	will	_	_	
50-15	8147-8153	simply	_	_	
50-16	8154-8156	be	_	_	
50-17	8157-8164	ignored	_	_	
50-18	8165-8166	(	_	_	
50-19	8166-8176	optionally	_	_	
50-20	8176-8177	,	_	_	
50-21	8178-8181	the	_	_	
50-22	8182-8184	IP	_	_	
50-23	8185-8192	address	_	_	
50-24	8193-8195	of	_	_	
50-25	8196-8199	the	_	_	
50-26	8200-8206	sender	_	_	
50-27	8207-8212	might	_	_	
50-28	8213-8215	be	_	_	
50-29	8216-8227	blacklisted	_	_	
50-30	8228-8231	for	_	_	
50-31	8232-8236	some	_	_	
50-32	8237-8241	time	_	_	
50-33	8241-8242	)	_	_	
50-34	8242-8243	.	_	_	

#Text=Otherwise, the ping message will be responded with a pong message.
51-1	8244-8253	Otherwise	_	_	
51-2	8253-8254	,	_	_	
51-3	8255-8258	the	_	_	
51-4	8259-8263	ping	_	_	
51-5	8264-8271	message	_	_	
51-6	8272-8276	will	_	_	
51-7	8277-8279	be	_	_	
51-8	8280-8289	responded	_	_	
51-9	8290-8294	with	_	_	
51-10	8295-8296	a	_	_	
51-11	8297-8301	pong	_	_	
51-12	8302-8309	message	_	_	
51-13	8309-8310	.	_	_	

#Text=The details of the syntax of the sample model instance will be explained in the [full tutorial](#user-doc) below.
52-1	8314-8317	The	_	_	
52-2	8318-8325	details	_	_	
52-3	8326-8328	of	_	_	
52-4	8329-8332	the	_	_	
52-5	8333-8339	syntax	_	_	
52-6	8340-8342	of	_	_	
52-7	8343-8346	the	_	_	
52-8	8347-8353	sample	_	_	
52-9	8354-8359	model	_	_	
52-10	8360-8368	instance	_	_	
52-11	8369-8373	will	_	_	
52-12	8374-8376	be	_	_	
52-13	8377-8386	explained	_	_	
52-14	8387-8389	in	_	_	
52-15	8390-8393	the	_	_	
52-16	8394-8395	[	_	_	
52-17	8395-8399	full	_	_	
52-18	8400-8408	tutorial	_	_	
52-19	8408-8409	]	_	_	
52-20	8409-8410	(	_	_	
52-21	8410-8411	#	_	_	
52-22	8411-8419	user-doc	_	_	
52-23	8419-8420	)	_	_	
52-24	8421-8426	below	_	_	
52-25	8426-8427	.	_	_	

#Text=Note that the software model instances in ML2 have the .thingml extension, similar to the ThingML/HEADS projects, although the meta-models/grammars of the DSMLs are different (ML2 is backward-compatible).  \r
#Text=\r
#Text=### How to generate code out of the sample model instance?
53-1	8428-8432	Note	_	_	
53-2	8433-8437	that	_	_	
53-3	8438-8441	the	_	_	
53-4	8442-8450	software	_	_	
53-5	8451-8456	model	_	_	
53-6	8457-8466	instances	_	_	
53-7	8467-8469	in	_	_	
53-8	8470-8473	ML2	*	SOFTWARE	
53-9	8474-8478	have	_	_	
53-10	8479-8482	the	_	_	
53-11	8483-8484	.	_	_	
53-12	8484-8491	thingml	_	_	
53-13	8492-8501	extension	_	_	
53-14	8501-8502	,	_	_	
53-15	8503-8510	similar	_	_	
53-16	8511-8513	to	_	_	
53-17	8514-8517	the	_	_	
53-18	8518-8525	ThingML	*	PROJECT	
53-19	8525-8526	/	_	_	
53-20	8526-8531	HEADS	*	PROJECT	
53-21	8532-8540	projects	_	_	
53-22	8540-8541	,	_	_	
53-23	8542-8550	although	_	_	
53-24	8551-8554	the	_	_	
53-25	8555-8566	meta-models	_	_	
53-26	8566-8567	/	_	_	
53-27	8567-8575	grammars	_	_	
53-28	8576-8578	of	_	_	
53-29	8579-8582	the	_	_	
53-30	8583-8588	DSMLs	_	_	
53-31	8589-8592	are	_	_	
53-32	8593-8602	different	_	_	
53-33	8603-8604	(	_	_	
53-34	8604-8607	ML2	*	PROJECT	
53-35	8608-8610	is	_	_	
53-36	8611-8630	backward-compatible	_	_	
53-37	8630-8631	)	_	_	
53-38	8631-8632	.	_	_	
53-39	8638-8639	#	_	_	
53-40	8639-8640	#	_	_	
53-41	8640-8641	#	_	_	
53-42	8642-8645	How	_	_	
53-43	8646-8648	to	_	_	
53-44	8649-8657	generate	_	_	
53-45	8658-8662	code	_	_	
53-46	8663-8666	out	_	_	
53-47	8667-8669	of	_	_	
53-48	8670-8673	the	_	_	
53-49	8674-8680	sample	_	_	
53-50	8681-8686	model	_	_	
53-51	8687-8695	instance	_	_	
53-52	8695-8696	?	_	_	

#Text=Run the following commands in the Linux terminal:\r
#Text=```bash\r
#Text=cd ML2/compilers/registry/target\r
#Text=java -jar mlquadrat.compilers.registry-2.0.0-SNAPSHOT-jar-with-dependencies.jar -c auto -s ../../..
54-1	8698-8701	Run	_	_	
54-2	8702-8705	the	_	_	
54-3	8706-8715	following	_	_	
54-4	8716-8724	commands	_	_	
54-5	8725-8727	in	_	_	
54-6	8728-8731	the	_	_	
54-7	8732-8737	Linux	*	SOFTWARE	
54-8	8738-8746	terminal	_	_	
54-9	8746-8747	:	_	_	
54-10	8749-8750	`	_	_	
54-11	8750-8751	`	_	_	
54-12	8751-8752	`	_	_	
54-13	8752-8756	bash	*	PROGLANG	
54-14	8758-8760	cd	_	_	
54-15	8761-8764	ML2	*	SOFTWARE	
54-16	8764-8765	/	_	_	
54-17	8765-8774	compilers	_	_	
54-18	8774-8775	/	_	_	
54-19	8775-8783	registry	_	_	
54-20	8783-8784	/	_	_	
54-21	8784-8790	target	_	_	
54-22	8792-8796	java	*	SOFTWARE	
54-23	8797-8798	-	_	_	
54-24	8798-8801	jar	_	_	
54-25	8802-8830	mlquadrat.compilers.registry	_	_	
54-26	8830-8831	-	_	_	
54-27	8831-8836	2.0.0	_	_	
54-28	8836-8837	-	_	_	
54-29	8837-8871	SNAPSHOT-jar-with-dependencies.jar	_	_	
54-30	8872-8873	-	_	_	
54-31	8873-8874	c	_	_	
54-32	8875-8879	auto	_	_	
54-33	8880-8881	-	_	_	
54-34	8881-8882	s	_	_	
54-35	8883-8884	.	_	_	
54-36	8884-8885	.	_	_	
54-37	8885-8886	/	_	_	
54-38	8886-8887	.	_	_	
54-39	8887-8888	.	_	_	
54-40	8888-8889	/	_	_	
54-41	8889-8890	.	_	_	
54-42	8890-8891	.	_	_	

#Text=/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml -o ../../../../..
55-1	8891-8892	/	_	_	
55-2	8892-8911	org.thingml.samples	_	_	
55-3	8911-8912	/	_	_	
55-4	8912-8915	src	_	_	
55-5	8915-8916	/	_	_	
55-6	8916-8920	main	_	_	
55-7	8920-8921	/	_	_	
55-8	8921-8928	thingml	_	_	
55-9	8928-8929	/	_	_	
55-10	8929-8932	ML2	*	SOFTWARE	
55-11	8932-8933	_	_	_	
55-12	8933-8954	Demo_PingPong.thingml	_	_	
55-13	8955-8956	-	_	_	
55-14	8956-8957	o	_	_	
55-15	8958-8959	.	_	_	
55-16	8959-8960	.	_	_	
55-17	8960-8961	/	_	_	
55-18	8961-8962	.	_	_	
55-19	8962-8963	.	_	_	
55-20	8963-8964	/	_	_	
55-21	8964-8965	.	_	_	
55-22	8965-8966	.	_	_	
55-23	8966-8967	/	_	_	
55-24	8967-8968	.	_	_	
55-25	8968-8969	.	_	_	
55-26	8969-8970	/	_	_	
55-27	8970-8971	.	_	_	
55-28	8971-8972	.	_	_	

#Text=/Generated_ML2_Demo_PingPong\r
#Text=```\r
#Text=The -c option specifies the model-to-code transformation (a.k.a. the code generator) or "**c**ompiler" that shall be deployed.
56-1	8972-8973	/	_	_	
56-2	8973-8986	Generated_ML2	_	_	
56-2.1	8983-8986	ML2	*	SOFTWARE	
56-3	8986-8987	_	_	_	
56-4	8987-9000	Demo_PingPong	_	_	
56-5	9002-9003	`	_	_	
56-6	9003-9004	`	_	_	
56-7	9004-9005	`	_	_	
56-8	9007-9010	The	_	_	
56-9	9011-9012	-	_	_	
56-10	9012-9013	c	_	_	
56-11	9014-9020	option	_	_	
56-12	9021-9030	specifies	_	_	
56-13	9031-9034	the	_	_	
56-14	9035-9048	model-to-code	_	_	
56-15	9049-9063	transformation	_	_	
56-16	9064-9065	(	_	_	
56-17	9065-9070	a.k.a	_	_	
56-18	9070-9071	.	_	_	
56-19	9072-9075	the	_	_	
56-20	9076-9080	code	_	_	
56-21	9081-9090	generator	_	_	
56-22	9090-9091	)	_	_	
56-23	9092-9094	or	_	_	
56-24	9095-9096	"	_	_	
56-25	9096-9097	*	_	_	
56-26	9097-9098	*	_	_	
56-27	9098-9099	c	_	_	
56-28	9099-9100	*	_	_	
56-29	9100-9101	*	_	_	
56-30	9101-9108	ompiler	_	_	
56-31	9108-9109	"	_	_	
56-32	9110-9114	that	_	_	
56-33	9115-9120	shall	_	_	
56-34	9121-9123	be	_	_	
56-35	9124-9132	deployed	_	_	
56-36	9132-9133	.	_	_	

#Text=Here, we choose "auto" since the model instance already includes this information in the configuration section of it (the optional @compiler annotation).
57-1	9134-9138	Here	_	_	
57-2	9138-9139	,	_	_	
57-3	9140-9142	we	_	_	
57-4	9143-9149	choose	_	_	
57-5	9150-9151	"	_	_	
57-6	9151-9155	auto	_	_	
57-7	9155-9156	"	_	_	
57-8	9157-9162	since	_	_	
57-9	9163-9166	the	_	_	
57-10	9167-9172	model	_	_	
57-11	9173-9181	instance	_	_	
57-12	9182-9189	already	_	_	
57-13	9190-9198	includes	_	_	
57-14	9199-9203	this	_	_	
57-15	9204-9215	information	_	_	
57-16	9216-9218	in	_	_	
57-17	9219-9222	the	_	_	
57-18	9223-9236	configuration	_	_	
57-19	9237-9244	section	_	_	
57-20	9245-9247	of	_	_	
57-21	9248-9250	it	_	_	
57-22	9251-9252	(	_	_	
57-23	9252-9255	the	_	_	
57-24	9256-9264	optional	_	_	
57-25	9265-9266	@	_	_	
57-26	9266-9274	compiler	_	_	
57-27	9275-9285	annotation	_	_	
57-28	9285-9286	)	_	_	
57-29	9286-9287	.	_	_	

#Text=Also, the -s and the -o options let the user state the paths of the **s**ource model instance and the **o**utput directory for the target generated code, respectively.
58-1	9288-9292	Also	_	_	
58-2	9292-9293	,	_	_	
58-3	9294-9297	the	_	_	
58-4	9298-9299	-	_	_	
58-5	9299-9300	s	_	_	
58-6	9301-9304	and	_	_	
58-7	9305-9308	the	_	_	
58-8	9309-9310	-	_	_	
58-9	9310-9311	o	_	_	
58-10	9312-9319	options	_	_	
58-11	9320-9323	let	_	_	
58-12	9324-9327	the	_	_	
58-13	9328-9332	user	_	_	
58-14	9333-9338	state	_	_	
58-15	9339-9342	the	_	_	
58-16	9343-9348	paths	_	_	
58-17	9349-9351	of	_	_	
58-18	9352-9355	the	_	_	
58-19	9356-9357	*	_	_	
58-20	9357-9358	*	_	_	
58-21	9358-9359	s	_	_	
58-22	9359-9360	*	_	_	
58-23	9360-9361	*	_	_	
58-24	9361-9366	ource	_	_	
58-25	9367-9372	model	_	_	
58-26	9373-9381	instance	_	_	
58-27	9382-9385	and	_	_	
58-28	9386-9389	the	_	_	
58-29	9390-9391	*	_	_	
58-30	9391-9392	*	_	_	
58-31	9392-9393	o	_	_	
58-32	9393-9394	*	_	_	
58-33	9394-9395	*	_	_	
58-34	9395-9400	utput	_	_	
58-35	9401-9410	directory	_	_	
58-36	9411-9414	for	_	_	
58-37	9415-9418	the	_	_	
58-38	9419-9425	target	_	_	
58-39	9426-9435	generated	_	_	
58-40	9436-9440	code	_	_	
58-41	9440-9441	,	_	_	
58-42	9442-9454	respectively	_	_	
58-43	9454-9455	.	_	_	

#Text=If the output directory does not exist, it will be created.
59-1	9456-9458	If	_	_	
59-2	9459-9462	the	_	_	
59-3	9463-9469	output	_	_	
59-4	9470-9479	directory	_	_	
59-5	9480-9484	does	_	_	
59-6	9485-9488	not	_	_	
59-7	9489-9494	exist	_	_	
59-8	9494-9495	,	_	_	
59-9	9496-9498	it	_	_	
59-10	9499-9503	will	_	_	
59-11	9504-9506	be	_	_	
59-12	9507-9514	created	_	_	
59-13	9514-9515	.	_	_	

#Text=The generated code includes the entire source code that is needed, as well as the necessary build scripts.
60-1	9520-9523	The	_	_	
60-2	9524-9533	generated	_	_	
60-3	9534-9538	code	_	_	
60-4	9539-9547	includes	_	_	
60-5	9548-9551	the	_	_	
60-6	9552-9558	entire	_	_	
60-7	9559-9565	source	_	_	
60-8	9566-9570	code	_	_	
60-9	9571-9575	that	_	_	
60-10	9576-9578	is	_	_	
60-11	9579-9585	needed	_	_	
60-12	9585-9586	,	_	_	
60-13	9587-9589	as	_	_	
60-14	9590-9594	well	_	_	
60-15	9595-9597	as	_	_	
60-16	9598-9601	the	_	_	
60-17	9602-9611	necessary	_	_	
60-18	9612-9617	build	_	_	
60-19	9618-9625	scripts	_	_	
60-20	9625-9626	.	_	_	

#Text=Thus, it can be easily built/installed.
61-1	9627-9631	Thus	_	_	
61-2	9631-9632	,	_	_	
61-3	9633-9635	it	_	_	
61-4	9636-9639	can	_	_	
61-5	9640-9642	be	_	_	
61-6	9643-9649	easily	_	_	
61-7	9650-9655	built	_	_	
61-8	9655-9656	/	_	_	
61-9	9656-9665	installed	_	_	
61-10	9665-9666	.	_	_	

#Text=For instance, in this case, the generated code is in Java and Python.
62-1	9667-9670	For	_	_	
62-2	9671-9679	instance	_	_	
62-3	9679-9680	,	_	_	
62-4	9681-9683	in	_	_	
62-5	9684-9688	this	_	_	
62-6	9689-9693	case	_	_	
62-7	9693-9694	,	_	_	
62-8	9695-9698	the	_	_	
62-9	9699-9708	generated	_	_	
62-10	9709-9713	code	_	_	
62-11	9714-9716	is	_	_	
62-12	9717-9719	in	_	_	
62-13	9720-9724	Java	*	PROGLANG	
62-14	9725-9728	and	_	_	
62-15	9729-9735	Python	*	PROGLANG	
62-16	9735-9736	.	_	_	

#Text=Hence, it can be easily built/installed using the Apache Maven with one command (mvn clean install).
63-1	9737-9742	Hence	_	_	
63-2	9742-9743	,	_	_	
63-3	9744-9746	it	_	_	
63-4	9747-9750	can	_	_	
63-5	9751-9753	be	_	_	
63-6	9754-9760	easily	_	_	
63-7	9761-9766	built	_	_	
63-8	9766-9767	/	_	_	
63-9	9767-9776	installed	_	_	
63-10	9777-9782	using	_	_	
63-11	9783-9786	the	_	_	
63-12	9787-9793	Apache	*[8]	SOFTWARE[8]	
63-13	9794-9799	Maven	*[8]	SOFTWARE[8]	
63-14	9800-9804	with	_	_	
63-15	9805-9808	one	_	_	
63-16	9809-9816	command	_	_	
63-17	9817-9818	(	_	_	
63-18	9818-9821	mvn	_	_	
63-19	9822-9827	clean	_	_	
63-20	9828-9835	install	_	_	
63-21	9835-9836	)	_	_	
63-22	9836-9837	.	_	_	

#Text=The Java and the Python parts are already seamlessly integrated.
64-1	9838-9841	The	_	_	
64-2	9842-9846	Java	*	PROGLANG	
64-3	9847-9850	and	_	_	
64-4	9851-9854	the	_	_	
64-5	9855-9861	Python	*	PROGLANG	
64-6	9862-9867	parts	_	_	
64-7	9868-9871	are	_	_	
64-8	9872-9879	already	_	_	
64-9	9880-9890	seamlessly	_	_	
64-10	9891-9901	integrated	_	_	
64-11	9901-9902	.	_	_	

#Text=Also, the output of Maven will include an executable JAR file with all the dependencies as a bundle.
65-1	9903-9907	Also	_	_	
65-2	9907-9908	,	_	_	
65-3	9909-9912	the	_	_	
65-4	9913-9919	output	_	_	
65-5	9920-9922	of	_	_	
65-6	9923-9928	Maven	*	SOFTWARE	
65-7	9929-9933	will	_	_	
65-8	9934-9941	include	_	_	
65-9	9942-9944	an	_	_	
65-10	9945-9955	executable	_	_	
65-11	9956-9959	JAR	_	_	
65-12	9960-9964	file	_	_	
65-13	9965-9969	with	_	_	
65-14	9970-9973	all	_	_	
65-15	9974-9977	the	_	_	
65-16	9978-9990	dependencies	_	_	
65-17	9991-9993	as	_	_	
65-18	9994-9995	a	_	_	
65-19	9996-10002	bundle	_	_	
65-20	10002-10003	.	_	_	

#Text=Hence, running the generated IoT service will be also very easy with just one command (java -jar ...).
66-1	10004-10009	Hence	_	_	
66-2	10009-10010	,	_	_	
66-3	10011-10018	running	_	_	
66-4	10019-10022	the	_	_	
66-5	10023-10032	generated	_	_	
66-6	10033-10036	IoT	_	_	
66-7	10037-10044	service	_	_	
66-8	10045-10049	will	_	_	
66-9	10050-10052	be	_	_	
66-10	10053-10057	also	_	_	
66-11	10058-10062	very	_	_	
66-12	10063-10067	easy	_	_	
66-13	10068-10072	with	_	_	
66-14	10073-10077	just	_	_	
66-15	10078-10081	one	_	_	
66-16	10082-10089	command	_	_	
66-17	10090-10091	(	_	_	
66-18	10091-10095	java	*	PROGLANG	
66-19	10096-10097	-	_	_	
66-20	10097-10100	jar	_	_	
66-21	10101-10102	.	_	_	
66-22	10102-10103	.	_	_	
66-23	10103-10104	.	_	_	
66-24	10104-10105	)	_	_	
66-25	10105-10106	.	_	_	

#Text=Below, we illustrate how to install and run the generated code.
67-1	10107-10112	Below	_	_	
67-2	10112-10113	,	_	_	
67-3	10114-10116	we	_	_	
67-4	10117-10127	illustrate	_	_	
67-5	10128-10131	how	_	_	
67-6	10132-10134	to	_	_	
67-7	10135-10142	install	_	_	
67-8	10143-10146	and	_	_	
67-9	10147-10150	run	_	_	
67-10	10151-10154	the	_	_	
67-11	10155-10164	generated	_	_	
67-12	10165-10169	code	_	_	
67-13	10169-10170	.	_	_	

#Text=[Back to top](#toc)\r
#Text=\r
#Text=<a name="user-doc"></a>\r
#Text=## 4.
68-1	10174-10175	[	_	_	
68-2	10175-10179	Back	_	_	
68-3	10180-10182	to	_	_	
68-4	10183-10186	top	_	_	
68-5	10186-10187	]	_	_	
68-6	10187-10188	(	_	_	
68-7	10188-10189	#	_	_	
68-8	10189-10192	toc	_	_	
68-9	10192-10193	)	_	_	
68-10	10197-10198	<	_	_	
68-11	10198-10199	a	_	_	
68-12	10200-10204	name	_	_	
68-13	10204-10205	=	_	_	
68-14	10205-10206	"	_	_	
68-15	10206-10214	user-doc	_	_	
68-16	10214-10215	"	_	_	
68-17	10215-10216	>	_	_	
68-18	10216-10217	<	_	_	
68-19	10217-10218	/	_	_	
68-20	10218-10219	a	_	_	
68-21	10219-10220	>	_	_	
68-22	10222-10223	#	_	_	
68-23	10223-10224	#	_	_	
68-24	10225-10226	4	_	_	
68-25	10226-10227	.	_	_	

#Text=Users' Documentation (Full Tutorial)\r
#Text=Before reading the full tutorial below, you should first follow the [quick (15 mins) tutorial](#user-doc-quick) above.
69-1	10228-10233	Users	_	_	
69-2	10233-10234	'	_	_	
69-3	10235-10248	Documentation	_	_	
69-4	10249-10250	(	_	_	
69-5	10250-10254	Full	_	_	
69-6	10255-10263	Tutorial	_	_	
69-7	10263-10264	)	_	_	
69-8	10266-10272	Before	_	_	
69-9	10273-10280	reading	_	_	
69-10	10281-10284	the	_	_	
69-11	10285-10289	full	_	_	
69-12	10290-10298	tutorial	_	_	
69-13	10299-10304	below	_	_	
69-14	10304-10305	,	_	_	
69-15	10306-10309	you	_	_	
69-16	10310-10316	should	_	_	
69-17	10317-10322	first	_	_	
69-18	10323-10329	follow	_	_	
69-19	10330-10333	the	_	_	
69-20	10334-10335	[	_	_	
69-21	10335-10340	quick	_	_	
69-22	10341-10342	(	_	_	
69-23	10342-10344	15	_	_	
69-24	10345-10349	mins	_	_	
69-25	10349-10350	)	_	_	
69-26	10351-10359	tutorial	_	_	
69-27	10359-10360	]	_	_	
69-28	10360-10361	(	_	_	
69-29	10361-10362	#	_	_	
69-30	10362-10376	user-doc-quick	_	_	
69-31	10376-10377	)	_	_	
69-32	10378-10383	above	_	_	
69-33	10383-10384	.	_	_	

#Text=In what follows, we first name the additional software packages that you should install.
70-1	10385-10387	In	_	_	
70-2	10388-10392	what	_	_	
70-3	10393-10400	follows	_	_	
70-4	10400-10401	,	_	_	
70-5	10402-10404	we	_	_	
70-6	10405-10410	first	_	_	
70-7	10411-10415	name	_	_	
70-8	10416-10419	the	_	_	
70-9	10420-10430	additional	_	_	
70-10	10431-10439	software	_	_	
70-11	10440-10448	packages	_	_	
70-12	10449-10453	that	_	_	
70-13	10454-10457	you	_	_	
70-14	10458-10464	should	_	_	
70-15	10465-10472	install	_	_	
70-16	10472-10473	.	_	_	

#Text=Then, we illustrate how the generated example in the quick tutorial can be installed and executed.
71-1	10474-10478	Then	_	_	
71-2	10478-10479	,	_	_	
71-3	10480-10482	we	_	_	
71-4	10483-10493	illustrate	_	_	
71-5	10494-10497	how	_	_	
71-6	10498-10501	the	_	_	
71-7	10502-10511	generated	_	_	
71-8	10512-10519	example	_	_	
71-9	10520-10522	in	_	_	
71-10	10523-10526	the	_	_	
71-11	10527-10532	quick	_	_	
71-12	10533-10541	tutorial	_	_	
71-13	10542-10545	can	_	_	
71-14	10546-10548	be	_	_	
71-15	10549-10558	installed	_	_	
71-16	10559-10562	and	_	_	
71-17	10563-10571	executed	_	_	
71-18	10571-10572	.	_	_	

#Text=Further, we show how the textual and the tree-based model editors can be used in the Eclipse IDE.
72-1	10573-10580	Further	_	_	
72-2	10580-10581	,	_	_	
72-3	10582-10584	we	_	_	
72-4	10585-10589	show	_	_	
72-5	10590-10593	how	_	_	
72-6	10594-10597	the	_	_	
72-7	10598-10605	textual	_	_	
72-8	10606-10609	and	_	_	
72-9	10610-10613	the	_	_	
72-10	10614-10624	tree-based	_	_	
72-11	10625-10630	model	_	_	
72-12	10631-10638	editors	_	_	
72-13	10639-10642	can	_	_	
72-14	10643-10645	be	_	_	
72-15	10646-10650	used	_	_	
72-16	10651-10653	in	_	_	
72-17	10654-10657	the	_	_	
72-18	10658-10665	Eclipse	*[9]	SOFTWARE[9]	
72-19	10666-10669	IDE	*[9]	SOFTWARE[9]	
72-20	10669-10670	.	_	_	

#Text=Finally, we provide the full documentation of the Domain-Specific Modeling Langauge (DSML).\r
#Text=\r
#Text=### Additional software prerequisites\r
#Text=I.
73-1	10671-10678	Finally	_	_	
73-2	10678-10679	,	_	_	
73-3	10680-10682	we	_	_	
73-4	10683-10690	provide	_	_	
73-5	10691-10694	the	_	_	
73-6	10695-10699	full	_	_	
73-7	10700-10713	documentation	_	_	
73-8	10714-10716	of	_	_	
73-9	10717-10720	the	_	_	
73-10	10721-10736	Domain-Specific	_	_	
73-11	10737-10745	Modeling	_	_	
73-12	10746-10754	Langauge	_	_	
73-13	10755-10756	(	_	_	
73-14	10756-10760	DSML	_	_	
73-15	10760-10761	)	_	_	
73-16	10761-10762	.	_	_	
73-17	10766-10767	#	_	_	
73-18	10767-10768	#	_	_	
73-19	10768-10769	#	_	_	
73-20	10770-10780	Additional	_	_	
73-21	10781-10789	software	_	_	
73-22	10790-10803	prerequisites	_	_	
73-23	10805-10806	I	_	_	
73-24	10806-10807	.	_	_	

#Text=Install the latest version of [Anaconda for Python 3.x](https://docs.anaconda.com/anaconda/install/linux/), e.g., as follows (use ```sudo su``` to run the chmod command as root and then ```exit``` in order to get back to the non-root user):\r
#Text=\r
#Text=```bash\r
#Text=wget https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh\r
#Text=sudo su\r
#Text=chmod u+x .
74-1	10808-10815	Install	_	_	
74-2	10816-10819	the	_	_	
74-3	10820-10826	latest	_	_	
74-4	10827-10834	version	_	_	
74-5	10835-10837	of	_	_	
74-6	10838-10839	[	_	_	
74-7	10839-10847	Anaconda	*	SOFTWARE	
74-8	10848-10851	for	_	_	
74-9	10852-10858	Python	*[10]	PROGLANG[10]	
74-10	10859-10860	3	*[10]	PROGLANG[10]	
74-11	10860-10861	.	*[10]	PROGLANG[10]	
74-12	10861-10862	x	*[10]	PROGLANG[10]	
74-13	10862-10863	]	_	_	
74-14	10863-10864	(	_	_	
74-15	10864-10869	https	_	_	
74-16	10869-10870	:	_	_	
74-17	10870-10871	/	_	_	
74-18	10871-10872	/	_	_	
74-19	10872-10889	docs.anaconda.com	_	_	
74-19.1	10877-10885	anaconda	*	SOFTWARE	
74-20	10889-10890	/	_	_	
74-21	10890-10898	anaconda	_	_	
74-22	10898-10899	/	_	_	
74-23	10899-10906	install	_	_	
74-24	10906-10907	/	_	_	
74-25	10907-10912	linux	*	SOFTWARE	
74-26	10912-10913	/	_	_	
74-27	10913-10914	)	_	_	
74-28	10914-10915	,	_	_	
74-29	10916-10919	e.g	_	_	
74-30	10919-10920	.	_	_	
74-31	10920-10921	,	_	_	
74-32	10922-10924	as	_	_	
74-33	10925-10932	follows	_	_	
74-34	10933-10934	(	_	_	
74-35	10934-10937	use	_	_	
74-36	10938-10939	`	_	_	
74-37	10939-10940	`	_	_	
74-38	10940-10941	`	_	_	
74-39	10941-10945	sudo	*	SOFTWARE	
74-40	10946-10948	su	_	_	
74-41	10948-10949	`	_	_	
74-42	10949-10950	`	_	_	
74-43	10950-10951	`	_	_	
74-44	10952-10954	to	_	_	
74-45	10955-10958	run	_	_	
74-46	10959-10962	the	_	_	
74-47	10963-10968	chmod	_	_	
74-48	10969-10976	command	_	_	
74-49	10977-10979	as	_	_	
74-50	10980-10984	root	_	_	
74-51	10985-10988	and	_	_	
74-52	10989-10993	then	_	_	
74-53	10994-10995	`	_	_	
74-54	10995-10996	`	_	_	
74-55	10996-10997	`	_	_	
74-56	10997-11001	exit	_	_	
74-57	11001-11002	`	_	_	
74-58	11002-11003	`	_	_	
74-59	11003-11004	`	_	_	
74-60	11005-11007	in	_	_	
74-61	11008-11013	order	_	_	
74-62	11014-11016	to	_	_	
74-63	11017-11020	get	_	_	
74-64	11021-11025	back	_	_	
74-65	11026-11028	to	_	_	
74-66	11029-11032	the	_	_	
74-67	11033-11041	non-root	_	_	
74-68	11042-11046	user	_	_	
74-69	11046-11047	)	_	_	
74-70	11047-11048	:	_	_	
74-71	11052-11053	`	_	_	
74-72	11053-11054	`	_	_	
74-73	11054-11055	`	_	_	
74-74	11055-11059	bash	*	PROGLANG	
74-75	11061-11065	wget	_	_	
74-76	11066-11071	https	_	_	
74-77	11071-11072	:	_	_	
74-78	11072-11073	/	_	_	
74-79	11073-11074	/	_	_	
74-80	11074-11091	repo.anaconda.com	_	_	
74-80.1	11079-11087	anaconda	*	SOFTWARE	
74-81	11091-11092	/	_	_	
74-82	11092-11099	archive	_	_	
74-83	11099-11100	/	_	_	
74-84	11100-11109	Anaconda3	_	_	
74-85	11109-11110	-	_	_	
74-86	11110-11117	2021.05	_	_	
74-87	11117-11118	-	_	_	
74-88	11118-11127	Linux-x86	_	_	
74-89	11127-11128	_	_	_	
74-90	11128-11130	64	_	_	
74-91	11130-11131	.	_	_	
74-92	11131-11133	sh	_	_	
74-93	11135-11139	sudo	_	_	
74-94	11140-11142	su	_	_	
74-95	11144-11149	chmod	_	_	
74-96	11150-11151	u	_	_	
74-97	11151-11152	+	_	_	
74-98	11152-11153	x	_	_	
74-99	11154-11155	.	_	_	

#Text=/Anaconda3-2021.05-Linux-x86_64.sh\r
#Text=exit\r
#Text=.
75-1	11155-11156	/	_	_	
75-2	11156-11165	Anaconda3	*	SOFTWARE	
75-3	11165-11166	-	_	_	
75-4	11166-11173	2021.05	_	_	
75-5	11173-11174	-	_	_	
75-6	11174-11183	Linux-x86	_	_	
75-6.1	11174-11179	Linux	*	SOFTWARE	
75-7	11183-11184	_	_	_	
75-8	11184-11186	64	_	_	
75-9	11186-11187	.	_	_	
75-10	11187-11189	sh	_	_	
75-11	11191-11195	exit	_	_	
75-12	11197-11198	.	_	_	

#Text=/Anaconda3-2021.05-Linux-x86_64.sh\r
#Text=```\r
#Text=\r
#Text=Perhaps you need to add conda to the PATH environmental variable, if it is not there (you may check that with ```echo $PATH```).
76-1	11198-11199	/	_	_	
76-2	11199-11208	Anaconda3	*	SOFTWARE	
76-3	11208-11209	-	_	_	
76-4	11209-11216	2021.05	_	_	
76-5	11216-11217	-	_	_	
76-6	11217-11226	Linux-x86	_	_	
76-6.1	11217-11222	Linux	*	SOFTWARE	
76-7	11226-11227	_	_	_	
76-8	11227-11229	64	_	_	
76-9	11229-11230	.	_	_	
76-10	11230-11232	sh	_	_	
76-11	11234-11235	`	_	_	
76-12	11235-11236	`	_	_	
76-13	11236-11237	`	_	_	
76-14	11241-11248	Perhaps	_	_	
76-15	11249-11252	you	_	_	
76-16	11253-11257	need	_	_	
76-17	11258-11260	to	_	_	
76-18	11261-11264	add	_	_	
76-19	11265-11270	conda	_	_	
76-20	11271-11273	to	_	_	
76-21	11274-11277	the	_	_	
76-22	11278-11282	PATH	_	_	
76-23	11283-11296	environmental	_	_	
76-24	11297-11305	variable	_	_	
76-25	11305-11306	,	_	_	
76-26	11307-11309	if	_	_	
76-27	11310-11312	it	_	_	
76-28	11313-11315	is	_	_	
76-29	11316-11319	not	_	_	
76-30	11320-11325	there	_	_	
76-31	11326-11327	(	_	_	
76-32	11327-11330	you	_	_	
76-33	11331-11334	may	_	_	
76-34	11335-11340	check	_	_	
76-35	11341-11345	that	_	_	
76-36	11346-11350	with	_	_	
76-37	11351-11352	`	_	_	
76-38	11352-11353	`	_	_	
76-39	11353-11354	`	_	_	
76-40	11354-11358	echo	_	_	
76-41	11359-11360	$	_	_	
76-42	11360-11364	PATH	_	_	
76-43	11364-11365	`	_	_	
76-44	11365-11366	`	_	_	
76-45	11366-11367	`	_	_	
76-46	11367-11368	)	_	_	
76-47	11368-11369	.	_	_	

#Text=Assuming, you have downloaded and installed Anaconda in /home/user:\r
#Text=\r
#Text=```bash \r
#Text=export PATH=$PATH:/home/user/anaconda3/condabin/\r
#Text=```\r
#Text=To make it permanent, use a text editor, such as vim, append that to the .bashrc file (replace user with your username), and run source as follows:\r
#Text=```bash \r
#Text=vim /home/user/.bashrc\r
#Text=source /home/user/.bashrc\r
#Text=```\r
#Text=\r
#Text=Then, please follow the steps below, in order to create a conda virtual environment and install the latest versions of the required Python libraries.
77-1	11370-11378	Assuming	_	_	
77-2	11378-11379	,	_	_	
77-3	11380-11383	you	_	_	
77-4	11384-11388	have	_	_	
77-5	11389-11399	downloaded	_	_	
77-6	11400-11403	and	_	_	
77-7	11404-11413	installed	_	_	
77-8	11414-11422	Anaconda	_	_	
77-9	11423-11425	in	_	_	
77-10	11426-11427	/	_	_	
77-11	11427-11431	home	_	_	
77-12	11431-11432	/	_	_	
77-13	11432-11436	user	_	_	
77-14	11436-11437	:	_	_	
77-15	11441-11442	`	_	_	
77-16	11442-11443	`	_	_	
77-17	11443-11444	`	_	_	
77-18	11444-11448	bash	*	PROGLANG	
77-19	11451-11457	export	_	_	
77-20	11458-11462	PATH	_	_	
77-21	11462-11463	=	_	_	
77-22	11463-11464	$	_	_	
77-23	11464-11468	PATH	_	_	
77-24	11468-11469	:	_	_	
77-25	11469-11470	/	_	_	
77-26	11470-11474	home	_	_	
77-27	11474-11475	/	_	_	
77-28	11475-11479	user	_	_	
77-29	11479-11480	/	_	_	
77-30	11480-11489	anaconda3	*	SOFTWARE	
77-31	11489-11490	/	_	_	
77-32	11490-11498	condabin	_	_	
77-33	11498-11499	/	_	_	
77-34	11501-11502	`	_	_	
77-35	11502-11503	`	_	_	
77-36	11503-11504	`	_	_	
77-37	11506-11508	To	_	_	
77-38	11509-11513	make	_	_	
77-39	11514-11516	it	_	_	
77-40	11517-11526	permanent	_	_	
77-41	11526-11527	,	_	_	
77-42	11528-11531	use	_	_	
77-43	11532-11533	a	_	_	
77-44	11534-11538	text	_	_	
77-45	11539-11545	editor	_	_	
77-46	11545-11546	,	_	_	
77-47	11547-11551	such	_	_	
77-48	11552-11554	as	_	_	
77-49	11555-11558	vim	*	SOFTWARE	
77-50	11558-11559	,	_	_	
77-51	11560-11566	append	_	_	
77-52	11567-11571	that	_	_	
77-53	11572-11574	to	_	_	
77-54	11575-11578	the	_	_	
77-55	11579-11580	.	_	_	
77-56	11580-11586	bashrc	_	_	
77-57	11587-11591	file	_	_	
77-58	11592-11593	(	_	_	
77-59	11593-11600	replace	_	_	
77-60	11601-11605	user	_	_	
77-61	11606-11610	with	_	_	
77-62	11611-11615	your	_	_	
77-63	11616-11624	username	_	_	
77-64	11624-11625	)	_	_	
77-65	11625-11626	,	_	_	
77-66	11627-11630	and	_	_	
77-67	11631-11634	run	_	_	
77-68	11635-11641	source	_	_	
77-69	11642-11644	as	_	_	
77-70	11645-11652	follows	_	_	
77-71	11652-11653	:	_	_	
77-72	11655-11656	`	_	_	
77-73	11656-11657	`	_	_	
77-74	11657-11658	`	_	_	
77-75	11658-11662	bash	*	PROGLANG	
77-76	11665-11668	vim	*	SOFTWARE	
77-77	11669-11670	/	_	_	
77-78	11670-11674	home	_	_	
77-79	11674-11675	/	_	_	
77-80	11675-11679	user	_	_	
77-81	11679-11680	/	_	_	
77-82	11680-11681	.	_	_	
77-83	11681-11687	bashrc	_	_	
77-84	11689-11695	source	_	_	
77-85	11696-11697	/	_	_	
77-86	11697-11701	home	_	_	
77-87	11701-11702	/	_	_	
77-88	11702-11706	user	_	_	
77-89	11706-11707	/	_	_	
77-90	11707-11708	.	_	_	
77-91	11708-11714	bashrc	_	_	
77-92	11716-11717	`	_	_	
77-93	11717-11718	`	_	_	
77-94	11718-11719	`	_	_	
77-95	11723-11727	Then	_	_	
77-96	11727-11728	,	_	_	
77-97	11729-11735	please	_	_	
77-98	11736-11742	follow	_	_	
77-99	11743-11746	the	_	_	
77-100	11747-11752	steps	_	_	
77-101	11753-11758	below	_	_	
77-102	11758-11759	,	_	_	
77-103	11760-11762	in	_	_	
77-104	11763-11768	order	_	_	
77-105	11769-11771	to	_	_	
77-106	11772-11778	create	_	_	
77-107	11779-11780	a	_	_	
77-108	11781-11786	conda	_	_	
77-109	11787-11794	virtual	_	_	
77-110	11795-11806	environment	_	_	
77-111	11807-11810	and	_	_	
77-112	11811-11818	install	_	_	
77-113	11819-11822	the	_	_	
77-114	11823-11829	latest	_	_	
77-115	11830-11838	versions	_	_	
77-116	11839-11841	of	_	_	
77-117	11842-11845	the	_	_	
77-118	11846-11854	required	_	_	
77-119	11855-11861	Python	*	PROGLANG	
77-120	11862-11871	libraries	_	_	
77-121	11871-11872	.	_	_	

#Text=They are necessary for running the generated code, if the generated code includes Python code for Data Analytics and Machine Learning (DAML).
78-1	11873-11877	They	_	_	
78-2	11878-11881	are	_	_	
78-3	11882-11891	necessary	_	_	
78-4	11892-11895	for	_	_	
78-5	11896-11903	running	_	_	
78-6	11904-11907	the	_	_	
78-7	11908-11917	generated	_	_	
78-8	11918-11922	code	_	_	
78-9	11922-11923	,	_	_	
78-10	11924-11926	if	_	_	
78-11	11927-11930	the	_	_	
78-12	11931-11940	generated	_	_	
78-13	11941-11945	code	_	_	
78-14	11946-11954	includes	_	_	
78-15	11955-11961	Python	*	PROGLANG	
78-16	11962-11966	code	_	_	
78-17	11967-11970	for	_	_	
78-18	11971-11975	Data	_	_	
78-19	11976-11985	Analytics	_	_	
78-20	11986-11989	and	_	_	
78-21	11990-11997	Machine	_	_	
78-22	11998-12006	Learning	_	_	
78-23	12007-12008	(	_	_	
78-24	12008-12012	DAML	_	_	
78-25	12012-12013	)	_	_	
78-26	12013-12014	.	_	_	

#Text=```bash\r
#Text=conda create --name ml2 python=3.8\r
#Text=conda activate ml2\r
#Text=conda install nb_conda jupyter numpy pandas matplotlib scikit-learn scikit-learn-intelex tensorflow-gpu gensim keras pytorch\r
#Text=conda install jupyter_contrib_nbextensions -c conda-forge\r
#Text=conda deactivate\r
#Text=conda activate ml2\r
#Text=```\r
#Text=\r
#Text=II.
79-1	12018-12019	`	_	_	
79-2	12019-12020	`	_	_	
79-3	12020-12021	`	_	_	
79-4	12021-12025	bash	*	PROGLANG	
79-5	12027-12032	conda	*	SOFTWARE	
79-6	12033-12039	create	_	_	
79-7	12040-12041	-	_	_	
79-8	12041-12042	-	_	_	
79-9	12042-12046	name	_	_	
79-10	12047-12050	ml2	*	SOFTWARE	
79-11	12051-12057	python	*[11]	PROGLANG[11]	
79-12	12057-12058	=	*[11]	PROGLANG[11]	
79-13	12058-12061	3.8	*[11]	PROGLANG[11]	
79-14	12063-12068	conda	*	SOFTWARE	
79-15	12069-12077	activate	_	_	
79-16	12078-12081	ml2	*	SOFTWARE	
79-17	12083-12088	conda	*	SOFTWARE	
79-18	12089-12096	install	_	_	
79-19	12097-12105	nb_conda	_	_	
79-20	12106-12113	jupyter	_	_	
79-21	12114-12119	numpy	*	SOFTWARE	
79-22	12120-12126	pandas	*	SOFTWARE	
79-23	12127-12137	matplotlib	*	SOFTWARE	
79-24	12138-12150	scikit-learn	*	SOFTWARE	
79-25	12151-12171	scikit-learn-intelex	*	SOFTWARE	
79-26	12172-12186	tensorflow-gpu	*	SOFTWARE	
79-27	12187-12193	gensim	*	SOFTWARE	
79-28	12194-12199	keras	*	SOFTWARE	
79-29	12200-12207	pytorch	*	SOFTWARE	
79-30	12209-12214	conda	*	SOFTWARE	
79-31	12215-12222	install	_	_	
79-32	12223-12251	jupyter_contrib_nbextensions	_	_	
79-33	12252-12253	-	_	_	
79-34	12253-12254	c	_	_	
79-35	12255-12266	conda-forge	_	_	
79-36	12268-12273	conda	*	SOFTWARE	
79-37	12274-12284	deactivate	_	_	
79-38	12286-12291	conda	*	SOFTWARE	
79-39	12292-12300	activate	_	_	
79-40	12301-12304	ml2	*	SOFTWARE	
79-41	12306-12307	`	_	_	
79-42	12307-12308	`	_	_	
79-43	12308-12309	`	_	_	
79-44	12313-12315	II	_	_	
79-45	12315-12316	.	_	_	

#Text=Donwload the latest version of the [Eclipse IDE](https://www.eclipse.org/downloads) and install the latest version of the [Eclipse Modeling Tools](https://projects.eclipse.org/projects/modeling) through the wizard.
80-1	12317-12325	Donwload	_	_	
80-2	12326-12329	the	_	_	
80-3	12330-12336	latest	_	_	
80-4	12337-12344	version	_	_	
80-5	12345-12347	of	_	_	
80-6	12348-12351	the	_	_	
80-7	12352-12353	[	_	_	
80-8	12353-12360	Eclipse	*[12]	SOFTWARE[12]	
80-9	12361-12364	IDE	*[12]	SOFTWARE[12]	
80-10	12364-12365	]	_	_	
80-11	12365-12366	(	_	_	
80-12	12366-12371	https	_	_	
80-13	12371-12372	:	_	_	
80-14	12372-12373	/	_	_	
80-15	12373-12374	/	_	_	
80-16	12374-12389	www.eclipse.org	_	_	
80-17	12389-12390	/	_	_	
80-18	12390-12399	downloads	_	_	
80-19	12399-12400	)	_	_	
80-20	12401-12404	and	_	_	
80-21	12405-12412	install	_	_	
80-22	12413-12416	the	_	_	
80-23	12417-12423	latest	_	_	
80-24	12424-12431	version	_	_	
80-25	12432-12434	of	_	_	
80-26	12435-12438	the	_	_	
80-27	12439-12440	[	_	_	
80-28	12440-12447	Eclipse	_	_	
80-29	12448-12456	Modeling	_	_	
80-30	12457-12462	Tools	_	_	
80-31	12462-12463	]	_	_	
80-32	12463-12464	(	_	_	
80-33	12464-12469	https	_	_	
80-34	12469-12470	:	_	_	
80-35	12470-12471	/	_	_	
80-36	12471-12472	/	_	_	
80-37	12472-12492	projects.eclipse.org	_	_	
80-38	12492-12493	/	_	_	
80-39	12493-12501	projects	_	_	
80-40	12501-12502	/	_	_	
80-41	12502-12510	modeling	_	_	
80-42	12510-12511	)	_	_	
80-43	12512-12519	through	_	_	
80-44	12520-12523	the	_	_	
80-45	12524-12530	wizard	_	_	
80-46	12530-12531	.	_	_	

#Text=III.
81-1	12535-12538	III	_	_	
81-2	12538-12539	.	_	_	

#Text=Install the [Xtext ANTLR plugin from this update site](https://download.itemis.de/updates/releases/2.1.1/) in the Eclipse IDE.\r
#Text=\r
#Text=### How to install and execute the generated code?
82-1	12540-12547	Install	_	_	
82-2	12548-12551	the	_	_	
82-3	12552-12553	[	_	_	
82-4	12553-12558	Xtext	*[13]	SOFTWARE[13]	
82-5	12559-12564	ANTLR	*[13]	SOFTWARE[13]	
82-6	12565-12571	plugin	_	_	
82-7	12572-12576	from	_	_	
82-8	12577-12581	this	_	_	
82-9	12582-12588	update	_	_	
82-10	12589-12593	site	_	_	
82-11	12593-12594	]	_	_	
82-12	12594-12595	(	_	_	
82-13	12595-12600	https	_	_	
82-14	12600-12601	:	_	_	
82-15	12601-12602	/	_	_	
82-16	12602-12603	/	_	_	
82-17	12603-12621	download.itemis.de	_	_	
82-18	12621-12622	/	_	_	
82-19	12622-12629	updates	_	_	
82-20	12629-12630	/	_	_	
82-21	12630-12638	releases	_	_	
82-22	12638-12639	/	_	_	
82-23	12639-12644	2.1.1	_	_	
82-24	12644-12645	/	_	_	
82-25	12645-12646	)	_	_	
82-26	12647-12649	in	_	_	
82-27	12650-12653	the	_	_	
82-28	12654-12661	Eclipse	*[14]	SOFTWARE[14]	
82-29	12662-12665	IDE	*[14]	SOFTWARE[14]	
82-30	12665-12666	.	_	_	
82-31	12670-12671	#	_	_	
82-32	12671-12672	#	_	_	
82-33	12672-12673	#	_	_	
82-34	12674-12677	How	_	_	
82-35	12678-12680	to	_	_	
82-36	12681-12688	install	_	_	
82-37	12689-12692	and	_	_	
82-38	12693-12700	execute	_	_	
82-39	12701-12704	the	_	_	
82-40	12705-12714	generated	_	_	
82-41	12715-12719	code	_	_	
82-42	12719-12720	?	_	_	

#Text=The code that we generated for the sample model instance through the [quick (15 mins) tutorial](#user-doc-quick) above, namely [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml), can be built easily using the Apache Maven (the generated code resides in the /home/user/Generated_ML2_Demo_PingPong directory):\r
#Text=\r
#Text=```bash\r
#Text=cd /home/user/Generated_ML2_Demo_PingPong\r
#Text=cd python_java/\r
#Text=mvn clean install\r
#Text=```\r
#Text=As mentioned, if you want to see a more detailed output to debug, use the option -X:\r
#Text=\r
#Text=```bash\r
#Text=mvn clean install -X\r
#Text=```\r
#Text=\r
#Text=Moreover, as stated before, if you want to use Maven in the offline mode, e.g., in the case that your machine is behind a firewall that prohibits the Internet access, you should use the option -o, but, remember that you would need to first copy the .m2 directory, which includes the Maven cache from another computer behind the firewall (on which you have already cached ´the required dependencies) to this computer.
83-1	12722-12725	The	_	_	
83-2	12726-12730	code	_	_	
83-3	12731-12735	that	_	_	
83-4	12736-12738	we	_	_	
83-5	12739-12748	generated	_	_	
83-6	12749-12752	for	_	_	
83-7	12753-12756	the	_	_	
83-8	12757-12763	sample	_	_	
83-9	12764-12769	model	_	_	
83-10	12770-12778	instance	_	_	
83-11	12779-12786	through	_	_	
83-12	12787-12790	the	_	_	
83-13	12791-12792	[	_	_	
83-14	12792-12797	quick	_	_	
83-15	12798-12799	(	_	_	
83-16	12799-12801	15	_	_	
83-17	12802-12806	mins	_	_	
83-18	12806-12807	)	_	_	
83-19	12808-12816	tutorial	_	_	
83-20	12816-12817	]	_	_	
83-21	12817-12818	(	_	_	
83-22	12818-12819	#	_	_	
83-23	12819-12833	user-doc-quick	_	_	
83-24	12833-12834	)	_	_	
83-25	12835-12840	above	_	_	
83-26	12840-12841	,	_	_	
83-27	12842-12848	namely	_	_	
83-28	12849-12850	[	_	_	
83-29	12850-12853	ML2	*	SOFTWARE	
83-30	12853-12854	_	_	_	
83-31	12854-12875	Demo_PingPong.thingml	_	_	
83-32	12875-12876	]	_	_	
83-33	12876-12877	(	_	_	
83-34	12877-12882	https	_	_	
83-35	12882-12883	:	_	_	
83-36	12883-12884	/	_	_	
83-37	12884-12885	/	_	_	
83-38	12885-12895	github.com	_	_	
83-39	12895-12896	/	_	_	
83-40	12896-12905	arminmoin	_	_	
83-41	12905-12906	/	_	_	
83-42	12906-12916	ML-Quadrat	*	SOFTWARE	
83-43	12916-12917	/	_	_	
83-44	12917-12921	blob	_	_	
83-45	12921-12922	/	_	_	
83-46	12922-12928	master	_	_	
83-47	12928-12929	/	_	_	
83-48	12929-12932	ML2	*	SOFTWARE	
83-49	12932-12933	/	_	_	
83-50	12933-12952	org.thingml.samples	_	_	
83-51	12952-12953	/	_	_	
83-52	12953-12956	src	_	_	
83-53	12956-12957	/	_	_	
83-54	12957-12961	main	_	_	
83-55	12961-12962	/	_	_	
83-56	12962-12969	thingml	_	_	
83-57	12969-12970	/	_	_	
83-58	12970-12973	ML2	_	_	
83-59	12973-12974	_	_	_	
83-60	12974-12995	Demo_PingPong.thingml	_	_	
83-61	12995-12996	)	_	_	
83-62	12996-12997	,	_	_	
83-63	12998-13001	can	_	_	
83-64	13002-13004	be	_	_	
83-65	13005-13010	built	_	_	
83-66	13011-13017	easily	_	_	
83-67	13018-13023	using	_	_	
83-68	13024-13027	the	_	_	
83-69	13028-13034	Apache	*[15]	SOFTWARE[15]	
83-70	13035-13040	Maven	*[15]	SOFTWARE[15]	
83-71	13041-13042	(	_	_	
83-72	13042-13045	the	_	_	
83-73	13046-13055	generated	_	_	
83-74	13056-13060	code	_	_	
83-75	13061-13068	resides	_	_	
83-76	13069-13071	in	_	_	
83-77	13072-13075	the	_	_	
83-78	13076-13077	/	_	_	
83-79	13077-13081	home	_	_	
83-80	13081-13082	/	_	_	
83-81	13082-13086	user	_	_	
83-82	13086-13087	/	_	_	
83-83	13087-13100	Generated_ML2	_	_	
83-83.1	13097-13100	ML2	*	SOFTWARE	
83-84	13100-13101	_	_	_	
83-85	13101-13114	Demo_PingPong	_	_	
83-86	13115-13124	directory	_	_	
83-87	13124-13125	)	_	_	
83-88	13125-13126	:	_	_	
83-89	13130-13131	`	_	_	
83-90	13131-13132	`	_	_	
83-91	13132-13133	`	_	_	
83-92	13133-13137	bash	*	PROGLANG	
83-93	13139-13141	cd	_	_	
83-94	13142-13143	/	_	_	
83-95	13143-13147	home	_	_	
83-96	13147-13148	/	_	_	
83-97	13148-13152	user	_	_	
83-98	13152-13153	/	_	_	
83-99	13153-13166	Generated_ML2	_	_	
83-99.1	13163-13166	ML2	*	SOFTWARE	
83-100	13166-13167	_	_	_	
83-101	13167-13180	Demo_PingPong	_	_	
83-102	13182-13184	cd	_	_	
83-103	13185-13196	python_java	_	_	
83-104	13196-13197	/	_	_	
83-105	13199-13202	mvn	_	_	
83-106	13203-13208	clean	_	_	
83-107	13209-13216	install	_	_	
83-108	13218-13219	`	_	_	
83-109	13219-13220	`	_	_	
83-110	13220-13221	`	_	_	
83-111	13223-13225	As	_	_	
83-112	13226-13235	mentioned	_	_	
83-113	13235-13236	,	_	_	
83-114	13237-13239	if	_	_	
83-115	13240-13243	you	_	_	
83-116	13244-13248	want	_	_	
83-117	13249-13251	to	_	_	
83-118	13252-13255	see	_	_	
83-119	13256-13257	a	_	_	
83-120	13258-13262	more	_	_	
83-121	13263-13271	detailed	_	_	
83-122	13272-13278	output	_	_	
83-123	13279-13281	to	_	_	
83-124	13282-13287	debug	_	_	
83-125	13287-13288	,	_	_	
83-126	13289-13292	use	_	_	
83-127	13293-13296	the	_	_	
83-128	13297-13303	option	_	_	
83-129	13304-13305	-	_	_	
83-130	13305-13306	X	_	_	
83-131	13306-13307	:	_	_	
83-132	13311-13312	`	_	_	
83-133	13312-13313	`	_	_	
83-134	13313-13314	`	_	_	
83-135	13314-13318	bash	*	PROGLANG	
83-136	13320-13323	mvn	_	_	
83-137	13324-13329	clean	_	_	
83-138	13330-13337	install	_	_	
83-139	13338-13339	-	_	_	
83-140	13339-13340	X	_	_	
83-141	13342-13343	`	_	_	
83-142	13343-13344	`	_	_	
83-143	13344-13345	`	_	_	
83-144	13349-13357	Moreover	_	_	
83-145	13357-13358	,	_	_	
83-146	13359-13361	as	_	_	
83-147	13362-13368	stated	_	_	
83-148	13369-13375	before	_	_	
83-149	13375-13376	,	_	_	
83-150	13377-13379	if	_	_	
83-151	13380-13383	you	_	_	
83-152	13384-13388	want	_	_	
83-153	13389-13391	to	_	_	
83-154	13392-13395	use	_	_	
83-155	13396-13401	Maven	*	SOFTWARE	
83-156	13402-13404	in	_	_	
83-157	13405-13408	the	_	_	
83-158	13409-13416	offline	_	_	
83-159	13417-13421	mode	_	_	
83-160	13421-13422	,	_	_	
83-161	13423-13426	e.g	_	_	
83-162	13426-13427	.	_	_	
83-163	13427-13428	,	_	_	
83-164	13429-13431	in	_	_	
83-165	13432-13435	the	_	_	
83-166	13436-13440	case	_	_	
83-167	13441-13445	that	_	_	
83-168	13446-13450	your	_	_	
83-169	13451-13458	machine	_	_	
83-170	13459-13461	is	_	_	
83-171	13462-13468	behind	_	_	
83-172	13469-13470	a	_	_	
83-173	13471-13479	firewall	_	_	
83-174	13480-13484	that	_	_	
83-175	13485-13494	prohibits	_	_	
83-176	13495-13498	the	_	_	
83-177	13499-13507	Internet	_	_	
83-178	13508-13514	access	_	_	
83-179	13514-13515	,	_	_	
83-180	13516-13519	you	_	_	
83-181	13520-13526	should	_	_	
83-182	13527-13530	use	_	_	
83-183	13531-13534	the	_	_	
83-184	13535-13541	option	_	_	
83-185	13542-13543	-	_	_	
83-186	13543-13544	o	_	_	
83-187	13544-13545	,	_	_	
83-188	13546-13549	but	_	_	
83-189	13549-13550	,	_	_	
83-190	13551-13559	remember	_	_	
83-191	13560-13564	that	_	_	
83-192	13565-13568	you	_	_	
83-193	13569-13574	would	_	_	
83-194	13575-13579	need	_	_	
83-195	13580-13582	to	_	_	
83-196	13583-13588	first	_	_	
83-197	13589-13593	copy	_	_	
83-198	13594-13597	the	_	_	
83-199	13598-13599	.	_	_	
83-200	13599-13601	m2	_	_	
83-201	13602-13611	directory	_	_	
83-202	13611-13612	,	_	_	
83-203	13613-13618	which	_	_	
83-204	13619-13627	includes	_	_	
83-205	13628-13631	the	_	_	
83-206	13632-13637	Maven	*	SOFTWARE	
83-207	13638-13643	cache	_	_	
83-208	13644-13648	from	_	_	
83-209	13649-13656	another	_	_	
83-210	13657-13665	computer	_	_	
83-211	13666-13672	behind	_	_	
83-212	13673-13676	the	_	_	
83-213	13677-13685	firewall	_	_	
83-214	13686-13687	(	_	_	
83-215	13687-13689	on	_	_	
83-216	13690-13695	which	_	_	
83-217	13696-13699	you	_	_	
83-218	13700-13704	have	_	_	
83-219	13705-13712	already	_	_	
83-220	13713-13719	cached	_	_	
83-221	13720-13721	´	_	_	
83-222	13721-13724	the	_	_	
83-223	13725-13733	required	_	_	
83-224	13734-13746	dependencies	_	_	
83-225	13746-13747	)	_	_	
83-226	13748-13750	to	_	_	
83-227	13751-13755	this	_	_	
83-228	13756-13764	computer	_	_	
83-229	13764-13765	.	_	_	

#Text=The .m2 directory is usually stored in the user's home directory.
84-1	13766-13769	The	_	_	
84-2	13770-13771	.	_	_	
84-3	13771-13773	m2	_	_	
84-4	13774-13783	directory	_	_	
84-5	13784-13786	is	_	_	
84-6	13787-13794	usually	_	_	
84-7	13795-13801	stored	_	_	
84-8	13802-13804	in	_	_	
84-9	13805-13808	the	_	_	
84-10	13809-13815	user's	_	_	
84-11	13816-13820	home	_	_	
84-12	13821-13830	directory	_	_	
84-13	13830-13831	.	_	_	

#Text=```bash\r
#Text=mvn clean install -o\r
#Text=```\r
#Text=\r
#Text=The target directory is created/updated.
85-1	13835-13836	`	_	_	
85-2	13836-13837	`	_	_	
85-3	13837-13838	`	_	_	
85-4	13838-13842	bash	*	PROGLANG	
85-5	13844-13847	mvn	_	_	
85-6	13848-13853	clean	_	_	
85-7	13854-13861	install	_	_	
85-8	13862-13863	-	_	_	
85-9	13863-13864	o	_	_	
85-10	13866-13867	`	_	_	
85-11	13867-13868	`	_	_	
85-12	13868-13869	`	_	_	
85-13	13873-13876	The	_	_	
85-14	13877-13883	target	_	_	
85-15	13884-13893	directory	_	_	
85-16	13894-13896	is	_	_	
85-17	13897-13904	created	_	_	
85-18	13904-13905	/	_	_	
85-19	13905-13912	updated	_	_	
85-20	13912-13913	.	_	_	

#Text=If the software model instance has a data analytics section with a dataset path, then we must provide the dataset in the target directory at the same path as specified in the data analytics section of the model instance, before running the application / IoT service.
86-1	13914-13916	If	_	_	
86-2	13917-13920	the	_	_	
86-3	13921-13929	software	_	_	
86-4	13930-13935	model	_	_	
86-5	13936-13944	instance	_	_	
86-6	13945-13948	has	_	_	
86-7	13949-13950	a	_	_	
86-8	13951-13955	data	_	_	
86-9	13956-13965	analytics	_	_	
86-10	13966-13973	section	_	_	
86-11	13974-13978	with	_	_	
86-12	13979-13980	a	_	_	
86-13	13981-13988	dataset	_	_	
86-14	13989-13993	path	_	_	
86-15	13993-13994	,	_	_	
86-16	13995-13999	then	_	_	
86-17	14000-14002	we	_	_	
86-18	14003-14007	must	_	_	
86-19	14008-14015	provide	_	_	
86-20	14016-14019	the	_	_	
86-21	14020-14027	dataset	_	_	
86-22	14028-14030	in	_	_	
86-23	14031-14034	the	_	_	
86-24	14035-14041	target	_	_	
86-25	14042-14051	directory	_	_	
86-26	14052-14054	at	_	_	
86-27	14055-14058	the	_	_	
86-28	14059-14063	same	_	_	
86-29	14064-14068	path	_	_	
86-30	14069-14071	as	_	_	
86-31	14072-14081	specified	_	_	
86-32	14082-14084	in	_	_	
86-33	14085-14088	the	_	_	
86-34	14089-14093	data	_	_	
86-35	14094-14103	analytics	_	_	
86-36	14104-14111	section	_	_	
86-37	14112-14114	of	_	_	
86-38	14115-14118	the	_	_	
86-39	14119-14124	model	_	_	
86-40	14125-14133	instance	_	_	
86-41	14133-14134	,	_	_	
86-42	14135-14141	before	_	_	
86-43	14142-14149	running	_	_	
86-44	14150-14153	the	_	_	
86-45	14154-14165	application	_	_	
86-46	14166-14167	/	_	_	
86-47	14168-14171	IoT	_	_	
86-48	14172-14179	service	_	_	
86-49	14179-14180	.	_	_	

#Text=For now, we copy a dummy sample dataset that is available at: https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demos_SampleData\r
#Text=\r
#Text=For the current example, we should choose the sample dataset [ip_dataset.csv](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demos_SampleData/ip_dataset.csv).
87-1	14181-14184	For	_	_	
87-2	14185-14188	now	_	_	
87-3	14188-14189	,	_	_	
87-4	14190-14192	we	_	_	
87-5	14193-14197	copy	_	_	
87-6	14198-14199	a	_	_	
87-7	14200-14205	dummy	_	_	
87-8	14206-14212	sample	_	_	
87-9	14213-14220	dataset	_	_	
87-10	14221-14225	that	_	_	
87-11	14226-14228	is	_	_	
87-12	14229-14238	available	_	_	
87-13	14239-14241	at	_	_	
87-14	14241-14242	:	_	_	
87-15	14243-14248	https	_	_	
87-16	14248-14249	:	_	_	
87-17	14249-14250	/	_	_	
87-18	14250-14251	/	_	_	
87-19	14251-14261	github.com	_	_	
87-20	14261-14262	/	_	_	
87-21	14262-14271	arminmoin	_	_	
87-22	14271-14272	/	_	_	
87-23	14272-14282	ML-Quadrat	*	SOFTWARE	
87-24	14282-14283	/	_	_	
87-25	14283-14287	tree	_	_	
87-26	14287-14288	/	_	_	
87-27	14288-14294	master	_	_	
87-28	14294-14295	/	_	_	
87-29	14295-14298	ML2	*	SOFTWARE	
87-30	14298-14299	/	_	_	
87-31	14299-14318	org.thingml.samples	_	_	
87-32	14318-14319	/	_	_	
87-33	14319-14322	src	_	_	
87-34	14322-14323	/	_	_	
87-35	14323-14327	main	_	_	
87-36	14327-14328	/	_	_	
87-37	14328-14335	thingml	_	_	
87-38	14335-14336	/	_	_	
87-39	14336-14339	ML2	*	SOFTWARE	
87-40	14339-14340	_	_	_	
87-41	14340-14356	Demos_SampleData	_	_	
87-42	14360-14363	For	_	_	
87-43	14364-14367	the	_	_	
87-44	14368-14375	current	_	_	
87-45	14376-14383	example	_	_	
87-46	14383-14384	,	_	_	
87-47	14385-14387	we	_	_	
87-48	14388-14394	should	_	_	
87-49	14395-14401	choose	_	_	
87-50	14402-14405	the	_	_	
87-51	14406-14412	sample	_	_	
87-52	14413-14420	dataset	_	_	
87-53	14421-14422	[	_	_	
87-54	14422-14436	ip_dataset.csv	*	DATASET	
87-55	14436-14437	]	_	_	
87-56	14437-14438	(	_	_	
87-57	14438-14443	https	_	_	
87-58	14443-14444	:	_	_	
87-59	14444-14445	/	_	_	
87-60	14445-14446	/	_	_	
87-61	14446-14456	github.com	_	_	
87-62	14456-14457	/	_	_	
87-63	14457-14466	arminmoin	_	_	
87-64	14466-14467	/	_	_	
87-65	14467-14477	ML-Quadrat	*	SOFTWARE	
87-66	14477-14478	/	_	_	
87-67	14478-14482	blob	_	_	
87-68	14482-14483	/	_	_	
87-69	14483-14489	master	_	_	
87-70	14489-14490	/	_	_	
87-71	14490-14493	ML2	_	_	
87-72	14493-14494	/	_	_	
87-73	14494-14513	org.thingml.samples	_	_	
87-74	14513-14514	/	_	_	
87-75	14514-14517	src	_	_	
87-76	14517-14518	/	_	_	
87-77	14518-14522	main	_	_	
87-78	14522-14523	/	_	_	
87-79	14523-14530	thingml	_	_	
87-80	14530-14531	/	_	_	
87-81	14531-14534	ML2	*	SOFTWARE	
87-82	14534-14535	_	_	_	
87-83	14535-14551	Demos_SampleData	_	_	
87-84	14551-14552	/	_	_	
87-85	14552-14566	ip_dataset.csv	*	DATASET	
87-86	14566-14567	)	_	_	
87-87	14567-14568	.	_	_	

#Text=We should copy this Comma-Sparated Values (CSV) file into the correct path, in this case at target/data (the data sub-directory must be created):\r
#Text=\r
#Text=```bash\r
#Text=cd target/\r
#Text=mkdir data\r
#Text=cp /home/user/ML-Quadrat/ML2/org.thingml.samples/src/main/thingml/ML2_Demos_SampleData/ip_dataset.csv data/\r
#Text=```\r
#Text=Now, in order to run the generated application / IoT service:\r
#Text=\r
#Text=```bash\r
#Text=java -jar SmartPingPongCfg-1.0.0-jar-with-dependencies.jar\r
#Text=```\r
#Text=After running the service, you will see the output in the terminal.
88-1	14569-14571	We	_	_	
88-2	14572-14578	should	_	_	
88-3	14579-14583	copy	_	_	
88-4	14584-14588	this	_	_	
88-5	14589-14603	Comma-Sparated	_	_	
88-6	14604-14610	Values	_	_	
88-7	14611-14612	(	_	_	
88-8	14612-14615	CSV	_	_	
88-9	14615-14616	)	_	_	
88-10	14617-14621	file	_	_	
88-11	14622-14626	into	_	_	
88-12	14627-14630	the	_	_	
88-13	14631-14638	correct	_	_	
88-14	14639-14643	path	_	_	
88-15	14643-14644	,	_	_	
88-16	14645-14647	in	_	_	
88-17	14648-14652	this	_	_	
88-18	14653-14657	case	_	_	
88-19	14658-14660	at	_	_	
88-20	14661-14667	target	_	_	
88-21	14667-14668	/	_	_	
88-22	14668-14672	data	_	_	
88-23	14673-14674	(	_	_	
88-24	14674-14677	the	_	_	
88-25	14678-14682	data	_	_	
88-26	14683-14696	sub-directory	_	_	
88-27	14697-14701	must	_	_	
88-28	14702-14704	be	_	_	
88-29	14705-14712	created	_	_	
88-30	14712-14713	)	_	_	
88-31	14713-14714	:	_	_	
88-32	14718-14719	`	_	_	
88-33	14719-14720	`	_	_	
88-34	14720-14721	`	_	_	
88-35	14721-14725	bash	*	PROGLANG	
88-36	14727-14729	cd	_	_	
88-37	14730-14736	target	_	_	
88-38	14736-14737	/	_	_	
88-39	14739-14744	mkdir	_	_	
88-40	14745-14749	data	_	_	
88-41	14751-14753	cp	_	_	
88-42	14754-14755	/	_	_	
88-43	14755-14759	home	_	_	
88-44	14759-14760	/	_	_	
88-45	14760-14764	user	_	_	
88-46	14764-14765	/	_	_	
88-47	14765-14775	ML-Quadrat	_	_	
88-48	14775-14776	/	_	_	
88-49	14776-14779	ML2	_	_	
88-50	14779-14780	/	_	_	
88-51	14780-14799	org.thingml.samples	_	_	
88-52	14799-14800	/	_	_	
88-53	14800-14803	src	_	_	
88-54	14803-14804	/	_	_	
88-55	14804-14808	main	_	_	
88-56	14808-14809	/	_	_	
88-57	14809-14816	thingml	_	_	
88-58	14816-14817	/	_	_	
88-59	14817-14820	ML2	*	SOFTWARE	
88-60	14820-14821	_	_	_	
88-61	14821-14837	Demos_SampleData	_	_	
88-62	14837-14838	/	_	_	
88-63	14838-14852	ip_dataset.csv	*	DATASET	
88-64	14853-14857	data	_	_	
88-65	14857-14858	/	_	_	
88-66	14860-14861	`	_	_	
88-67	14861-14862	`	_	_	
88-68	14862-14863	`	_	_	
88-69	14865-14868	Now	_	_	
88-70	14868-14869	,	_	_	
88-71	14870-14872	in	_	_	
88-72	14873-14878	order	_	_	
88-73	14879-14881	to	_	_	
88-74	14882-14885	run	_	_	
88-75	14886-14889	the	_	_	
88-76	14890-14899	generated	_	_	
88-77	14900-14911	application	_	_	
88-78	14912-14913	/	_	_	
88-79	14914-14917	IoT	_	_	
88-80	14918-14925	service	_	_	
88-81	14925-14926	:	_	_	
88-82	14930-14931	`	_	_	
88-83	14931-14932	`	_	_	
88-84	14932-14933	`	_	_	
88-85	14933-14937	bash	*	PROGLANG	
88-86	14939-14943	java	*	SOFTWARE	
88-87	14944-14945	-	_	_	
88-88	14945-14948	jar	_	_	
88-89	14949-14965	SmartPingPongCfg	_	_	
88-90	14965-14966	-	_	_	
88-91	14966-14971	1.0.0	_	_	
88-92	14971-14972	-	_	_	
88-93	14972-14997	jar-with-dependencies.jar	_	_	
88-94	14999-15000	`	_	_	
88-95	15000-15001	`	_	_	
88-96	15001-15002	`	_	_	
88-97	15004-15009	After	_	_	
88-98	15010-15017	running	_	_	
88-99	15018-15021	the	_	_	
88-100	15022-15029	service	_	_	
88-101	15029-15030	,	_	_	
88-102	15031-15034	you	_	_	
88-103	15035-15039	will	_	_	
88-104	15040-15043	see	_	_	
88-105	15044-15047	the	_	_	
88-106	15048-15054	output	_	_	
88-107	15055-15057	in	_	_	
88-108	15058-15061	the	_	_	
88-109	15062-15070	terminal	_	_	
88-110	15070-15071	.	_	_	

#Text=You may stop the service by pressing CTRL+C.
89-1	15072-15075	You	_	_	
89-2	15076-15079	may	_	_	
89-3	15080-15084	stop	_	_	
89-4	15085-15088	the	_	_	
89-5	15089-15096	service	_	_	
89-6	15097-15099	by	_	_	
89-7	15100-15108	pressing	_	_	
89-8	15109-15113	CTRL	_	_	
89-9	15113-15114	+	_	_	
89-10	15114-15115	C	_	_	
89-11	15115-15116	.	_	_	

#Text=If you check out the provided CSV file in the data directory, you'll see a new line appended there, as the result of the prediction of the deployed ML model in this sample smart IoT service.
90-1	15117-15119	If	_	_	
90-2	15120-15123	you	_	_	
90-3	15124-15129	check	_	_	
90-4	15130-15133	out	_	_	
90-5	15134-15137	the	_	_	
90-6	15138-15146	provided	_	_	
90-7	15147-15150	CSV	_	_	
90-8	15151-15155	file	_	_	
90-9	15156-15158	in	_	_	
90-10	15159-15162	the	_	_	
90-11	15163-15167	data	_	_	
90-12	15168-15177	directory	_	_	
90-13	15177-15178	,	_	_	
90-14	15179-15185	you'll	_	_	
90-15	15186-15189	see	_	_	
90-16	15190-15191	a	_	_	
90-17	15192-15195	new	_	_	
90-18	15196-15200	line	_	_	
90-19	15201-15209	appended	_	_	
90-20	15210-15215	there	_	_	
90-21	15215-15216	,	_	_	
90-22	15217-15219	as	_	_	
90-23	15220-15223	the	_	_	
90-24	15224-15230	result	_	_	
90-25	15231-15233	of	_	_	
90-26	15234-15237	the	_	_	
90-27	15238-15248	prediction	_	_	
90-28	15249-15251	of	_	_	
90-29	15252-15255	the	_	_	
90-30	15256-15264	deployed	_	_	
90-31	15265-15267	ML	_	_	
90-32	15268-15273	model	_	_	
90-33	15274-15276	in	_	_	
90-34	15277-15281	this	_	_	
90-35	15282-15288	sample	_	_	
90-36	15289-15294	smart	_	_	
90-37	15295-15298	IoT	_	_	
90-38	15299-15306	service	_	_	
90-39	15306-15307	.	_	_	

#Text=Congratulations!
91-1	15312-15327	Congratulations	_	_	
91-2	15327-15328	!	_	_	

#Text=It worked!
92-1	15329-15331	It	_	_	
92-2	15332-15338	worked	_	_	
92-3	15338-15339	!	_	_	

#Text=**Note:** If you try to generate the code on one machine and run the generated code on another machine, you might experience troubles, due to the absolute paths, e.g., in the case of the python_java code generator, in the generated Python scripts under src/python-scripts.
93-1	15343-15344	*	_	_	
93-2	15344-15345	*	_	_	
93-3	15345-15349	Note	_	_	
93-4	15349-15350	:	_	_	
93-5	15350-15351	*	_	_	
93-6	15351-15352	*	_	_	
93-7	15353-15355	If	_	_	
93-8	15356-15359	you	_	_	
93-9	15360-15363	try	_	_	
93-10	15364-15366	to	_	_	
93-11	15367-15375	generate	_	_	
93-12	15376-15379	the	_	_	
93-13	15380-15384	code	_	_	
93-14	15385-15387	on	_	_	
93-15	15388-15391	one	_	_	
93-16	15392-15399	machine	_	_	
93-17	15400-15403	and	_	_	
93-18	15404-15407	run	_	_	
93-19	15408-15411	the	_	_	
93-20	15412-15421	generated	_	_	
93-21	15422-15426	code	_	_	
93-22	15427-15429	on	_	_	
93-23	15430-15437	another	_	_	
93-24	15438-15445	machine	_	_	
93-25	15445-15446	,	_	_	
93-26	15447-15450	you	_	_	
93-27	15451-15456	might	_	_	
93-28	15457-15467	experience	_	_	
93-29	15468-15476	troubles	_	_	
93-30	15476-15477	,	_	_	
93-31	15478-15481	due	_	_	
93-32	15482-15484	to	_	_	
93-33	15485-15488	the	_	_	
93-34	15489-15497	absolute	_	_	
93-35	15498-15503	paths	_	_	
93-36	15503-15504	,	_	_	
93-37	15505-15508	e.g	_	_	
93-38	15508-15509	.	_	_	
93-39	15509-15510	,	_	_	
93-40	15511-15513	in	_	_	
93-41	15514-15517	the	_	_	
93-42	15518-15522	case	_	_	
93-43	15523-15525	of	_	_	
93-44	15526-15529	the	_	_	
93-45	15530-15541	python_java	_	_	
93-45.1	15530-15536	python	*	PROGLANG	
93-45.2	15537-15541	java	*	PROGLANG	
93-46	15542-15546	code	_	_	
93-47	15547-15556	generator	_	_	
93-48	15556-15557	,	_	_	
93-49	15558-15560	in	_	_	
93-50	15561-15564	the	_	_	
93-51	15565-15574	generated	_	_	
93-52	15575-15581	Python	*	PROGLANG	
93-53	15582-15589	scripts	_	_	
93-54	15590-15595	under	_	_	
93-55	15596-15599	src	_	_	
93-56	15599-15600	/	_	_	
93-57	15600-15614	python-scripts	_	_	
93-57.1	15600-15606	python	*	PROGLANG	
93-58	15614-15615	.	_	_	

#Text=Please adjust them accordingly before running the code.
94-1	15616-15622	Please	_	_	
94-2	15623-15629	adjust	_	_	
94-3	15630-15634	them	_	_	
94-4	15635-15646	accordingly	_	_	
94-5	15647-15653	before	_	_	
94-6	15654-15661	running	_	_	
94-7	15662-15665	the	_	_	
94-8	15666-15670	code	_	_	
94-9	15670-15671	.	_	_	

#Text=Alternatively, you can generate the code on the new machine and then execute the generated code.\r
#Text=\r
#Text=### How to create new software model instances?
95-1	15672-15685	Alternatively	_	_	
95-2	15685-15686	,	_	_	
95-3	15687-15690	you	_	_	
95-4	15691-15694	can	_	_	
95-5	15695-15703	generate	_	_	
95-6	15704-15707	the	_	_	
95-7	15708-15712	code	_	_	
95-8	15713-15715	on	_	_	
95-9	15716-15719	the	_	_	
95-10	15720-15723	new	_	_	
95-11	15724-15731	machine	_	_	
95-12	15732-15735	and	_	_	
95-13	15736-15740	then	_	_	
95-14	15741-15748	execute	_	_	
95-15	15749-15752	the	_	_	
95-16	15753-15762	generated	_	_	
95-17	15763-15767	code	_	_	
95-18	15767-15768	.	_	_	
95-19	15772-15773	#	_	_	
95-20	15773-15774	#	_	_	
95-21	15774-15775	#	_	_	
95-22	15776-15779	How	_	_	
95-23	15780-15782	to	_	_	
95-24	15783-15789	create	_	_	
95-25	15790-15793	new	_	_	
95-26	15794-15802	software	_	_	
95-27	15803-15808	model	_	_	
95-28	15809-15818	instances	_	_	
95-29	15818-15819	?	_	_	

#Text=In principle, it is possible to use any text editor, e.g., vi/vim, nano or Notepad to create a model instance as long as you follow the syntax of the Domain-Specific Modeling Language (DSML) of ML2 and save the text file with the **.thingml** extension.
96-1	15821-15823	In	_	_	
96-2	15824-15833	principle	_	_	
96-3	15833-15834	,	_	_	
96-4	15835-15837	it	_	_	
96-5	15838-15840	is	_	_	
96-6	15841-15849	possible	_	_	
96-7	15850-15852	to	_	_	
96-8	15853-15856	use	_	_	
96-9	15857-15860	any	_	_	
96-10	15861-15865	text	_	_	
96-11	15866-15872	editor	_	_	
96-12	15872-15873	,	_	_	
96-13	15874-15877	e.g	_	_	
96-14	15877-15878	.	_	_	
96-15	15878-15879	,	_	_	
96-16	15880-15882	vi	_	_	
96-17	15882-15883	/	_	_	
96-18	15883-15886	vim	*	SOFTWARE	
96-19	15886-15887	,	_	_	
96-20	15888-15892	nano	*	SOFTWARE	
96-21	15893-15895	or	_	_	
96-22	15896-15903	Notepad	*	SOFTWARE	
96-23	15904-15906	to	_	_	
96-24	15907-15913	create	_	_	
96-25	15914-15915	a	_	_	
96-26	15916-15921	model	_	_	
96-27	15922-15930	instance	_	_	
96-28	15931-15933	as	_	_	
96-29	15934-15938	long	_	_	
96-30	15939-15941	as	_	_	
96-31	15942-15945	you	_	_	
96-32	15946-15952	follow	_	_	
96-33	15953-15956	the	_	_	
96-34	15957-15963	syntax	_	_	
96-35	15964-15966	of	_	_	
96-36	15967-15970	the	_	_	
96-37	15971-15986	Domain-Specific	_	_	
96-38	15987-15995	Modeling	_	_	
96-39	15996-16004	Language	_	_	
96-40	16005-16006	(	_	_	
96-41	16006-16010	DSML	_	_	
96-42	16010-16011	)	_	_	
96-43	16012-16014	of	_	_	
96-44	16015-16018	ML2	*	SOFTWARE	
96-45	16019-16022	and	_	_	
96-46	16023-16027	save	_	_	
96-47	16028-16031	the	_	_	
96-48	16032-16036	text	_	_	
96-49	16037-16041	file	_	_	
96-50	16042-16046	with	_	_	
96-51	16047-16050	the	_	_	
96-52	16051-16052	*	_	_	
96-53	16052-16053	*	_	_	
96-54	16053-16054	.	_	_	
96-55	16054-16061	thingml	_	_	
96-56	16061-16062	*	_	_	
96-57	16062-16063	*	_	_	
96-58	16064-16073	extension	_	_	
96-59	16073-16074	.	_	_	

#Text=However, a major added value of the tool is delivered via the customized model editors.
97-1	16075-16082	However	_	_	
97-2	16082-16083	,	_	_	
97-3	16084-16085	a	_	_	
97-4	16086-16091	major	_	_	
97-5	16092-16097	added	_	_	
97-6	16098-16103	value	_	_	
97-7	16104-16106	of	_	_	
97-8	16107-16110	the	_	_	
97-9	16111-16115	tool	_	_	
97-10	16116-16118	is	_	_	
97-11	16119-16128	delivered	_	_	
97-12	16129-16132	via	_	_	
97-13	16133-16136	the	_	_	
97-14	16137-16147	customized	_	_	
97-15	16148-16153	model	_	_	
97-16	16154-16161	editors	_	_	
97-17	16161-16162	.	_	_	

#Text=There exist a textual model editor in the Eclipse IDE, which offers syntax highlighting, auto-completion and warnings/errors/hints at the design-time.
98-1	16163-16168	There	_	_	
98-2	16169-16174	exist	_	_	
98-3	16175-16176	a	_	_	
98-4	16177-16184	textual	_	_	
98-5	16185-16190	model	_	_	
98-6	16191-16197	editor	_	_	
98-7	16198-16200	in	_	_	
98-8	16201-16204	the	_	_	
98-9	16205-16212	Eclipse	*[16]	SOFTWARE[16]	
98-10	16213-16216	IDE	*[16]	SOFTWARE[16]	
98-11	16216-16217	,	_	_	
98-12	16218-16223	which	_	_	
98-13	16224-16230	offers	_	_	
98-14	16231-16237	syntax	_	_	
98-15	16238-16250	highlighting	_	_	
98-16	16250-16251	,	_	_	
98-17	16252-16267	auto-completion	_	_	
98-18	16268-16271	and	_	_	
98-19	16272-16280	warnings	_	_	
98-20	16280-16281	/	_	_	
98-21	16281-16287	errors	_	_	
98-22	16287-16288	/	_	_	
98-23	16288-16293	hints	_	_	
98-24	16294-16296	at	_	_	
98-25	16297-16300	the	_	_	
98-26	16301-16312	design-time	_	_	
98-27	16312-16313	.	_	_	

#Text=This is usually preferred by man advanced software developers.
99-1	16314-16318	This	_	_	
99-2	16319-16321	is	_	_	
99-3	16322-16329	usually	_	_	
99-4	16330-16339	preferred	_	_	
99-5	16340-16342	by	_	_	
99-6	16343-16346	man	_	_	
99-7	16347-16355	advanced	_	_	
99-8	16356-16364	software	_	_	
99-9	16365-16375	developers	_	_	
99-10	16375-16376	.	_	_	

#Text=Moreover, there exist a graphical EMF tree-based model editor.
100-1	16377-16385	Moreover	_	_	
100-2	16385-16386	,	_	_	
100-3	16387-16392	there	_	_	
100-4	16393-16398	exist	_	_	
100-5	16399-16400	a	_	_	
100-6	16401-16410	graphical	_	_	
100-7	16411-16414	EMF	_	_	
100-8	16415-16425	tree-based	_	_	
100-9	16426-16431	model	_	_	
100-10	16432-16438	editor	_	_	
100-11	16438-16439	.	_	_	

#Text=Below, we explain how to use each choice.
101-1	16440-16445	Below	_	_	
101-2	16445-16446	,	_	_	
101-3	16447-16449	we	_	_	
101-4	16450-16457	explain	_	_	
101-5	16458-16461	how	_	_	
101-6	16462-16464	to	_	_	
101-7	16465-16468	use	_	_	
101-8	16469-16473	each	_	_	
101-9	16474-16480	choice	_	_	
101-10	16480-16481	.	_	_	

#Text=However, we first need to set up the workspace in the Eclipse IDE.\r
#Text=\r
#Text=#### How to set up the workspace in the Eclipse IDE (Eclipse Modeling Tools)?
102-1	16482-16489	However	_	_	
102-2	16489-16490	,	_	_	
102-3	16491-16493	we	_	_	
102-4	16494-16499	first	_	_	
102-5	16500-16504	need	_	_	
102-6	16505-16507	to	_	_	
102-7	16508-16511	set	_	_	
102-8	16512-16514	up	_	_	
102-9	16515-16518	the	_	_	
102-10	16519-16528	workspace	_	_	
102-11	16529-16531	in	_	_	
102-12	16532-16535	the	_	_	
102-13	16536-16543	Eclipse	*[17]	SOFTWARE[17]	
102-14	16544-16547	IDE	*[17]	SOFTWARE[17]	
102-15	16547-16548	.	_	_	
102-16	16552-16553	#	_	_	
102-17	16553-16554	#	_	_	
102-18	16554-16555	#	_	_	
102-19	16555-16556	#	_	_	
102-20	16557-16560	How	_	_	
102-21	16561-16563	to	_	_	
102-22	16564-16567	set	_	_	
102-23	16568-16570	up	_	_	
102-24	16571-16574	the	_	_	
102-25	16575-16584	workspace	_	_	
102-26	16585-16587	in	_	_	
102-27	16588-16591	the	_	_	
102-28	16592-16599	Eclipse	*[18]	SOFTWARE[18]	
102-29	16600-16603	IDE	*[18]	SOFTWARE[18]	
102-30	16604-16605	(	_	_	
102-31	16605-16612	Eclipse	_	_	
102-32	16613-16621	Modeling	_	_	
102-33	16622-16627	Tools	_	_	
102-34	16627-16628	)	_	_	
102-35	16628-16629	?	_	_	

#Text=Once installed, you shall create a new workspace and then import the ML2 project there.
103-1	16631-16635	Once	_	_	
103-2	16636-16645	installed	_	_	
103-3	16645-16646	,	_	_	
103-4	16647-16650	you	_	_	
103-5	16651-16656	shall	_	_	
103-6	16657-16663	create	_	_	
103-7	16664-16665	a	_	_	
103-8	16666-16669	new	_	_	
103-9	16670-16679	workspace	_	_	
103-10	16680-16683	and	_	_	
103-11	16684-16688	then	_	_	
103-12	16689-16695	import	_	_	
103-13	16696-16699	the	_	_	
103-14	16700-16703	ML2	*	PROJECT	
103-15	16704-16711	project	_	_	
103-16	16712-16717	there	_	_	
103-17	16717-16718	.	_	_	

#Text=Perhaps there are different ways to accomplish that.
104-1	16719-16726	Perhaps	_	_	
104-2	16727-16732	there	_	_	
104-3	16733-16736	are	_	_	
104-4	16737-16746	different	_	_	
104-5	16747-16751	ways	_	_	
104-6	16752-16754	to	_	_	
104-7	16755-16765	accomplish	_	_	
104-8	16766-16770	that	_	_	
104-9	16770-16771	.	_	_	

#Text=However, we recommend the following method:\r
#Text=\r
#Text=File -> import -> General -> Existing Projects into Workspace / Projects from Folder or Archive (you should also check the option **search for nested projects** in the wizard)\r
#Text=\r
#Text=Make sure that you wait sufficiently long, so that the (sub-/nested) projects are built and you get a clean workspace without any errors.
105-1	16772-16779	However	_	_	
105-2	16779-16780	,	_	_	
105-3	16781-16783	we	_	_	
105-4	16784-16793	recommend	_	_	
105-5	16794-16797	the	_	_	
105-6	16798-16807	following	_	_	
105-7	16808-16814	method	_	_	
105-8	16814-16815	:	_	_	
105-9	16819-16823	File	_	_	
105-10	16824-16825	-	_	_	
105-11	16825-16826	>	_	_	
105-12	16827-16833	import	_	_	
105-13	16834-16835	-	_	_	
105-14	16835-16836	>	_	_	
105-15	16837-16844	General	_	_	
105-16	16845-16846	-	_	_	
105-17	16846-16847	>	_	_	
105-18	16848-16856	Existing	_	_	
105-19	16857-16865	Projects	_	_	
105-20	16866-16870	into	_	_	
105-21	16871-16880	Workspace	_	_	
105-22	16881-16882	/	_	_	
105-23	16883-16891	Projects	_	_	
105-24	16892-16896	from	_	_	
105-25	16897-16903	Folder	_	_	
105-26	16904-16906	or	_	_	
105-27	16907-16914	Archive	_	_	
105-28	16915-16916	(	_	_	
105-29	16916-16919	you	_	_	
105-30	16920-16926	should	_	_	
105-31	16927-16931	also	_	_	
105-32	16932-16937	check	_	_	
105-33	16938-16941	the	_	_	
105-34	16942-16948	option	_	_	
105-35	16949-16950	*	_	_	
105-36	16950-16951	*	_	_	
105-37	16951-16957	search	_	_	
105-38	16958-16961	for	_	_	
105-39	16962-16968	nested	_	_	
105-40	16969-16977	projects	_	_	
105-41	16977-16978	*	_	_	
105-42	16978-16979	*	_	_	
105-43	16980-16982	in	_	_	
105-44	16983-16986	the	_	_	
105-45	16987-16993	wizard	_	_	
105-46	16993-16994	)	_	_	
105-47	16998-17002	Make	_	_	
105-48	17003-17007	sure	_	_	
105-49	17008-17012	that	_	_	
105-50	17013-17016	you	_	_	
105-51	17017-17021	wait	_	_	
105-52	17022-17034	sufficiently	_	_	
105-53	17035-17039	long	_	_	
105-54	17039-17040	,	_	_	
105-55	17041-17043	so	_	_	
105-56	17044-17048	that	_	_	
105-57	17049-17052	the	_	_	
105-58	17053-17054	(	_	_	
105-59	17054-17057	sub	_	_	
105-60	17057-17058	-	_	_	
105-61	17058-17059	/	_	_	
105-62	17059-17065	nested	_	_	
105-63	17065-17066	)	_	_	
105-64	17067-17075	projects	_	_	
105-65	17076-17079	are	_	_	
105-66	17080-17085	built	_	_	
105-67	17086-17089	and	_	_	
105-68	17090-17093	you	_	_	
105-69	17094-17097	get	_	_	
105-70	17098-17099	a	_	_	
105-71	17100-17105	clean	_	_	
105-72	17106-17115	workspace	_	_	
105-73	17116-17123	without	_	_	
105-74	17124-17127	any	_	_	
105-75	17128-17134	errors	_	_	
105-76	17134-17135	.	_	_	

#Text=If that is not the case, sometimes cleaning the workspace (Project -> Clean... -> Clean all projects), updating the Maven projects (right click on a project -> Maven -> Update Project... -> Select All, you may also check the option **Force Update of Snapshots/Releases**) or restarting the Eclipse IDE (Eclipse Modeling Tools) might help.
106-1	17136-17138	If	_	_	
106-2	17139-17143	that	_	_	
106-3	17144-17146	is	_	_	
106-4	17147-17150	not	_	_	
106-5	17151-17154	the	_	_	
106-6	17155-17159	case	_	_	
106-7	17159-17160	,	_	_	
106-8	17161-17170	sometimes	_	_	
106-9	17171-17179	cleaning	_	_	
106-10	17180-17183	the	_	_	
106-11	17184-17193	workspace	_	_	
106-12	17194-17195	(	_	_	
106-13	17195-17202	Project	_	_	
106-14	17203-17204	-	_	_	
106-15	17204-17205	>	_	_	
106-16	17206-17211	Clean	_	_	
106-17	17211-17212	.	_	_	
106-18	17212-17213	.	_	_	
106-19	17213-17214	.	_	_	
106-20	17215-17216	-	_	_	
106-21	17216-17217	>	_	_	
106-22	17218-17223	Clean	_	_	
106-23	17224-17227	all	_	_	
106-24	17228-17236	projects	_	_	
106-25	17236-17237	)	_	_	
106-26	17237-17238	,	_	_	
106-27	17239-17247	updating	_	_	
106-28	17248-17251	the	_	_	
106-29	17252-17257	Maven	*	SOFTWARE	
106-30	17258-17266	projects	_	_	
106-31	17267-17268	(	_	_	
106-32	17268-17273	right	_	_	
106-33	17274-17279	click	_	_	
106-34	17280-17282	on	_	_	
106-35	17283-17284	a	_	_	
106-36	17285-17292	project	_	_	
106-37	17293-17294	-	_	_	
106-38	17294-17295	>	_	_	
106-39	17296-17301	Maven	*	SOFTWARE	
106-40	17302-17303	-	_	_	
106-41	17303-17304	>	_	_	
106-42	17305-17311	Update	_	_	
106-43	17312-17319	Project	_	_	
106-44	17319-17320	.	_	_	
106-45	17320-17321	.	_	_	
106-46	17321-17322	.	_	_	
106-47	17323-17324	-	_	_	
106-48	17324-17325	>	_	_	
106-49	17326-17332	Select	_	_	
106-50	17333-17336	All	_	_	
106-51	17336-17337	,	_	_	
106-52	17338-17341	you	_	_	
106-53	17342-17345	may	_	_	
106-54	17346-17350	also	_	_	
106-55	17351-17356	check	_	_	
106-56	17357-17360	the	_	_	
106-57	17361-17367	option	_	_	
106-58	17368-17369	*	_	_	
106-59	17369-17370	*	_	_	
106-60	17370-17375	Force	_	_	
106-61	17376-17382	Update	_	_	
106-62	17383-17385	of	_	_	
106-63	17386-17395	Snapshots	_	_	
106-64	17395-17396	/	_	_	
106-65	17396-17404	Releases	_	_	
106-66	17404-17405	*	_	_	
106-67	17405-17406	*	_	_	
106-68	17406-17407	)	_	_	
106-69	17408-17410	or	_	_	
106-70	17411-17421	restarting	_	_	
106-71	17422-17425	the	_	_	
106-72	17426-17433	Eclipse	*[19]	SOFTWARE[19]	
106-73	17434-17437	IDE	*[19]	SOFTWARE[19]	
106-74	17438-17439	(	_	_	
106-75	17439-17446	Eclipse	_	_	
106-76	17447-17455	Modeling	_	_	
106-77	17456-17461	Tools	_	_	
106-78	17461-17462	)	_	_	
106-79	17463-17468	might	_	_	
106-80	17469-17473	help	_	_	
106-81	17473-17474	.	_	_	

#Text=Once you import the projects into the workspace in the Eclipse IDE, you will get notified about a number of missing extensions, such as the Maven support in Eclipse (m2e) and the Eclipse Enterprise Java and Web Developers Tools, which can be installed through the Eclipse Marketplace.
107-1	17478-17482	Once	_	_	
107-2	17483-17486	you	_	_	
107-3	17487-17493	import	_	_	
107-4	17494-17497	the	_	_	
107-5	17498-17506	projects	_	_	
107-6	17507-17511	into	_	_	
107-7	17512-17515	the	_	_	
107-8	17516-17525	workspace	_	_	
107-9	17526-17528	in	_	_	
107-10	17529-17532	the	_	_	
107-11	17533-17540	Eclipse	*[20]	SOFTWARE[20]	
107-12	17541-17544	IDE	*[20]	SOFTWARE[20]	
107-13	17544-17545	,	_	_	
107-14	17546-17549	you	_	_	
107-15	17550-17554	will	_	_	
107-16	17555-17558	get	_	_	
107-17	17559-17567	notified	_	_	
107-18	17568-17573	about	_	_	
107-19	17574-17575	a	_	_	
107-20	17576-17582	number	_	_	
107-21	17583-17585	of	_	_	
107-22	17586-17593	missing	_	_	
107-23	17594-17604	extensions	_	_	
107-24	17604-17605	,	_	_	
107-25	17606-17610	such	_	_	
107-26	17611-17613	as	_	_	
107-27	17614-17617	the	_	_	
107-28	17618-17623	Maven	*	SOFTWARE	
107-29	17624-17631	support	_	_	
107-30	17632-17634	in	_	_	
107-31	17635-17642	Eclipse	*	SOFTWARE	
107-32	17643-17644	(	_	_	
107-33	17644-17647	m2e	_	_	
107-34	17647-17648	)	_	_	
107-35	17649-17652	and	_	_	
107-36	17653-17656	the	_	_	
107-37	17657-17664	Eclipse	*	SOFTWARE	
107-38	17665-17675	Enterprise	_	_	
107-39	17676-17680	Java	*	PROGLANG	
107-40	17681-17684	and	_	_	
107-41	17685-17688	Web	_	_	
107-42	17689-17699	Developers	_	_	
107-43	17700-17705	Tools	_	_	
107-44	17705-17706	,	_	_	
107-45	17707-17712	which	_	_	
107-46	17713-17716	can	_	_	
107-47	17717-17719	be	_	_	
107-48	17720-17729	installed	_	_	
107-49	17730-17737	through	_	_	
107-50	17738-17741	the	_	_	
107-51	17742-17749	Eclipse	*	SOFTWARE	
107-52	17750-17761	Marketplace	_	_	
107-53	17761-17762	.	_	_	

#Text=Please install them one by one.
108-1	17763-17769	Please	_	_	
108-2	17770-17777	install	_	_	
108-3	17778-17782	them	_	_	
108-4	17783-17786	one	_	_	
108-5	17787-17789	by	_	_	
108-6	17790-17793	one	_	_	
108-7	17793-17794	.	_	_	

#Text=You will need to restart the Eclipse IDE after each installation.
109-1	17795-17798	You	_	_	
109-2	17799-17803	will	_	_	
109-3	17804-17808	need	_	_	
109-4	17809-17811	to	_	_	
109-5	17812-17819	restart	_	_	
109-6	17820-17823	the	_	_	
109-7	17824-17831	Eclipse	*[21]	SOFTWARE[21]	
109-8	17832-17835	IDE	*[21]	SOFTWARE[21]	
109-9	17836-17841	after	_	_	
109-10	17842-17846	each	_	_	
109-11	17847-17859	installation	_	_	
109-12	17859-17860	.	_	_	

#Text=Finall, please go to Help -> Install New Software and install the following software through the default update site (e.g., http://download.eclipse.org/releases/2021-03): Under the Modeling category, select and install the MWE2 Language SDK, MWE2 Runtime SDK and Xtext Complete SDK.\r
#Text=\r
#Text=\r
#Text=#### Running the GenerateThingML.mwe2 workflow in the Eclipse IDE\r
#Text=One of the projects in the workspace, called thingml.ide might still have errors.
110-1	17865-17871	Finall	_	_	
110-2	17871-17872	,	_	_	
110-3	17873-17879	please	_	_	
110-4	17880-17882	go	_	_	
110-5	17883-17885	to	_	_	
110-6	17886-17890	Help	_	_	
110-7	17891-17892	-	_	_	
110-8	17892-17893	>	_	_	
110-9	17894-17901	Install	_	_	
110-10	17902-17905	New	_	_	
110-11	17906-17914	Software	_	_	
110-12	17915-17918	and	_	_	
110-13	17919-17926	install	_	_	
110-14	17927-17930	the	_	_	
110-15	17931-17940	following	_	_	
110-16	17941-17949	software	_	_	
110-17	17950-17957	through	_	_	
110-18	17958-17961	the	_	_	
110-19	17962-17969	default	_	_	
110-20	17970-17976	update	_	_	
110-21	17977-17981	site	_	_	
110-22	17982-17983	(	_	_	
110-23	17983-17986	e.g	_	_	
110-24	17986-17987	.	_	_	
110-25	17987-17988	,	_	_	
110-26	17989-17993	http	_	_	
110-27	17993-17994	:	_	_	
110-28	17994-17995	/	_	_	
110-29	17995-17996	/	_	_	
110-30	17996-18016	download.eclipse.org	_	_	
110-31	18016-18017	/	_	_	
110-32	18017-18025	releases	_	_	
110-33	18025-18026	/	_	_	
110-34	18026-18030	2021	_	_	
110-35	18030-18031	-	_	_	
110-36	18031-18033	03	_	_	
110-37	18033-18034	)	_	_	
110-38	18034-18035	:	_	_	
110-39	18036-18041	Under	_	_	
110-40	18042-18045	the	_	_	
110-41	18046-18054	Modeling	_	_	
110-42	18055-18063	category	_	_	
110-43	18063-18064	,	_	_	
110-44	18065-18071	select	_	_	
110-45	18072-18075	and	_	_	
110-46	18076-18083	install	_	_	
110-47	18084-18087	the	_	_	
110-48	18088-18092	MWE2	*[22]	SOFTWARE[22]	
110-49	18093-18101	Language	*[22]	SOFTWARE[22]	
110-50	18102-18105	SDK	*[22]	SOFTWARE[22]	
110-51	18105-18106	,	_	_	
110-52	18107-18111	MWE2	*[23]	SOFTWARE[23]	
110-53	18112-18119	Runtime	*[23]	SOFTWARE[23]	
110-54	18120-18123	SDK	*[23]	SOFTWARE[23]	
110-55	18124-18127	and	_	_	
110-56	18128-18133	Xtext	*[24]	SOFTWARE[24]	
110-57	18134-18142	Complete	*[24]	SOFTWARE[24]	
110-58	18143-18146	SDK	*[24]	SOFTWARE[24]	
110-59	18146-18147	.	_	_	
110-60	18153-18154	#	_	_	
110-61	18154-18155	#	_	_	
110-62	18155-18156	#	_	_	
110-63	18156-18157	#	_	_	
110-64	18158-18165	Running	_	_	
110-65	18166-18169	the	_	_	
110-66	18170-18190	GenerateThingML.mwe2	*	SOFTWARE	
110-67	18191-18199	workflow	_	_	
110-68	18200-18202	in	_	_	
110-69	18203-18206	the	_	_	
110-70	18207-18214	Eclipse	*[25]	SOFTWARE[25]	
110-71	18215-18218	IDE	*[25]	SOFTWARE[25]	
110-72	18220-18223	One	_	_	
110-73	18224-18226	of	_	_	
110-74	18227-18230	the	_	_	
110-75	18231-18239	projects	_	_	
110-76	18240-18242	in	_	_	
110-77	18243-18246	the	_	_	
110-78	18247-18256	workspace	_	_	
110-79	18256-18257	,	_	_	
110-80	18258-18264	called	_	_	
110-81	18265-18276	thingml.ide	_	_	
110-81.1	18265-18272	thingml	*	PROJECT	
110-82	18277-18282	might	_	_	
110-83	18283-18288	still	_	_	
110-84	18289-18293	have	_	_	
110-85	18294-18300	errors	_	_	
110-86	18300-18301	.	_	_	

#Text=Often, you need to do the following, in order to have a functioning textual model editor.
111-1	18302-18307	Often	_	_	
111-2	18307-18308	,	_	_	
111-3	18309-18312	you	_	_	
111-4	18313-18317	need	_	_	
111-5	18318-18320	to	_	_	
111-6	18321-18323	do	_	_	
111-7	18324-18327	the	_	_	
111-8	18328-18337	following	_	_	
111-9	18337-18338	,	_	_	
111-10	18339-18341	in	_	_	
111-11	18342-18347	order	_	_	
111-12	18348-18350	to	_	_	
111-13	18351-18355	have	_	_	
111-14	18356-18357	a	_	_	
111-15	18358-18369	functioning	_	_	
111-16	18370-18377	textual	_	_	
111-17	18378-18383	model	_	_	
111-18	18384-18390	editor	_	_	
111-19	18390-18391	.	_	_	

#Text=Please run the [GenerateThingML.mwe2](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/language/thingml/src/org/thingml/xtext/GenerateThingML.mwe2) workflow, which resides in the thingml project in the workspace (under src -> org.thingml.xtext) from within the Eclipse IDE by right-clicking on it and choosing Run as -> MWE2 Workflow from the context menu.
112-1	18396-18402	Please	_	_	
112-2	18403-18406	run	_	_	
112-3	18407-18410	the	_	_	
112-4	18411-18412	[	_	_	
112-5	18412-18432	GenerateThingML.mwe2	*	SOFTWARE	
112-6	18432-18433	]	_	_	
112-7	18433-18434	(	_	_	
112-8	18434-18439	https	_	_	
112-9	18439-18440	:	_	_	
112-10	18440-18441	/	_	_	
112-11	18441-18442	/	_	_	
112-12	18442-18452	github.com	_	_	
112-13	18452-18453	/	_	_	
112-14	18453-18462	arminmoin	_	_	
112-15	18462-18463	/	_	_	
112-16	18463-18473	ML-Quadrat	_	_	
112-17	18473-18474	/	_	_	
112-18	18474-18478	blob	_	_	
112-19	18478-18479	/	_	_	
112-20	18479-18485	master	_	_	
112-21	18485-18486	/	_	_	
112-22	18486-18489	ML2	_	_	
112-23	18489-18490	/	_	_	
112-24	18490-18498	language	_	_	
112-25	18498-18499	/	_	_	
112-26	18499-18506	thingml	_	_	
112-27	18506-18507	/	_	_	
112-28	18507-18510	src	_	_	
112-29	18510-18511	/	_	_	
112-30	18511-18514	org	_	_	
112-31	18514-18515	/	_	_	
112-32	18515-18522	thingml	_	_	
112-33	18522-18523	/	_	_	
112-34	18523-18528	xtext	_	_	
112-35	18528-18529	/	_	_	
112-36	18529-18549	GenerateThingML.mwe2	*	SOFTWARE	
112-37	18549-18550	)	_	_	
112-38	18551-18559	workflow	_	_	
112-39	18559-18560	,	_	_	
112-40	18561-18566	which	_	_	
112-41	18567-18574	resides	_	_	
112-42	18575-18577	in	_	_	
112-43	18578-18581	the	_	_	
112-44	18582-18589	thingml	*	PROJECT	
112-45	18590-18597	project	_	_	
112-46	18598-18600	in	_	_	
112-47	18601-18604	the	_	_	
112-48	18605-18614	workspace	_	_	
112-49	18615-18616	(	_	_	
112-50	18616-18621	under	_	_	
112-51	18622-18625	src	_	_	
112-52	18626-18627	-	_	_	
112-53	18627-18628	>	_	_	
112-54	18629-18646	org.thingml.xtext	_	_	
112-55	18646-18647	)	_	_	
112-56	18648-18652	from	_	_	
112-57	18653-18659	within	_	_	
112-58	18660-18663	the	_	_	
112-59	18664-18671	Eclipse	*[26]	SOFTWARE[26]	
112-60	18672-18675	IDE	*[26]	SOFTWARE[26]	
112-61	18676-18678	by	_	_	
112-62	18679-18693	right-clicking	_	_	
112-63	18694-18696	on	_	_	
112-64	18697-18699	it	_	_	
112-65	18700-18703	and	_	_	
112-66	18704-18712	choosing	_	_	
112-67	18713-18716	Run	_	_	
112-68	18717-18719	as	_	_	
112-69	18720-18721	-	_	_	
112-70	18721-18722	>	_	_	
112-71	18723-18727	MWE2	_	_	
112-72	18728-18736	Workflow	_	_	
112-73	18737-18741	from	_	_	
112-74	18742-18745	the	_	_	
112-75	18746-18753	context	_	_	
112-76	18754-18758	menu	_	_	
112-77	18758-18759	.	_	_	

#Text=This shall deploy the [Xtext ANTLR plugin](https://download.itemis.de/updates/releases/2.1.1/) that we installed before, and fix the issues.
113-1	18760-18764	This	_	_	
113-2	18765-18770	shall	_	_	
113-3	18771-18777	deploy	_	_	
113-4	18778-18781	the	_	_	
113-5	18782-18783	[	_	_	
113-6	18783-18788	Xtext	*[27]	SOFTWARE[27]	
113-7	18789-18794	ANTLR	*[27]	SOFTWARE[27]	
113-8	18795-18801	plugin	_	_	
113-9	18801-18802	]	_	_	
113-10	18802-18803	(	_	_	
113-11	18803-18808	https	_	_	
113-12	18808-18809	:	_	_	
113-13	18809-18810	/	_	_	
113-14	18810-18811	/	_	_	
113-15	18811-18829	download.itemis.de	_	_	
113-16	18829-18830	/	_	_	
113-17	18830-18837	updates	_	_	
113-18	18837-18838	/	_	_	
113-19	18838-18846	releases	_	_	
113-20	18846-18847	/	_	_	
113-21	18847-18852	2.1.1	_	_	
113-22	18852-18853	/	_	_	
113-23	18853-18854	)	_	_	
113-24	18855-18859	that	_	_	
113-25	18860-18862	we	_	_	
113-26	18863-18872	installed	_	_	
113-27	18873-18879	before	_	_	
113-28	18879-18880	,	_	_	
113-29	18881-18884	and	_	_	
113-30	18885-18888	fix	_	_	
113-31	18889-18892	the	_	_	
113-32	18893-18899	issues	_	_	
113-33	18899-18900	.	_	_	

#Text=This way, the customized textual model editor will work properly (see below).\r
#Text=\r
#Text=#### Running a nested Eclipse instance to use the model editors\r
#Text=In order to use the textual or the EMF tree-based model editors, you must run a new/nested instance of the Eclipse IDE inside of the Eclipse IDE (the above-mentioned workspace).
114-1	18901-18905	This	_	_	
114-2	18906-18909	way	_	_	
114-3	18909-18910	,	_	_	
114-4	18911-18914	the	_	_	
114-5	18915-18925	customized	_	_	
114-6	18926-18933	textual	_	_	
114-7	18934-18939	model	_	_	
114-8	18940-18946	editor	_	_	
114-9	18947-18951	will	_	_	
114-10	18952-18956	work	_	_	
114-11	18957-18965	properly	_	_	
114-12	18966-18967	(	_	_	
114-13	18967-18970	see	_	_	
114-14	18971-18976	below	_	_	
114-15	18976-18977	)	_	_	
114-16	18977-18978	.	_	_	
114-17	18982-18983	#	_	_	
114-18	18983-18984	#	_	_	
114-19	18984-18985	#	_	_	
114-20	18985-18986	#	_	_	
114-21	18987-18994	Running	_	_	
114-22	18995-18996	a	_	_	
114-23	18997-19003	nested	_	_	
114-24	19004-19011	Eclipse	_	_	
114-25	19012-19020	instance	_	_	
114-26	19021-19023	to	_	_	
114-27	19024-19027	use	_	_	
114-28	19028-19031	the	_	_	
114-29	19032-19037	model	_	_	
114-30	19038-19045	editors	_	_	
114-31	19047-19049	In	_	_	
114-32	19050-19055	order	_	_	
114-33	19056-19058	to	_	_	
114-34	19059-19062	use	_	_	
114-35	19063-19066	the	_	_	
114-36	19067-19074	textual	_	_	
114-37	19075-19077	or	_	_	
114-38	19078-19081	the	_	_	
114-39	19082-19085	EMF	_	_	
114-40	19086-19096	tree-based	_	_	
114-41	19097-19102	model	_	_	
114-42	19103-19110	editors	_	_	
114-43	19110-19111	,	_	_	
114-44	19112-19115	you	_	_	
114-45	19116-19120	must	_	_	
114-46	19121-19124	run	_	_	
114-47	19125-19126	a	_	_	
114-48	19127-19130	new	_	_	
114-49	19130-19131	/	_	_	
114-50	19131-19137	nested	_	_	
114-51	19138-19146	instance	_	_	
114-52	19147-19149	of	_	_	
114-53	19150-19153	the	_	_	
114-54	19154-19161	Eclipse	*[28]	SOFTWARE[28]	
114-55	19162-19165	IDE	*[28]	SOFTWARE[28]	
114-56	19166-19172	inside	_	_	
114-57	19173-19175	of	_	_	
114-58	19176-19179	the	_	_	
114-59	19180-19187	Eclipse	*[29]	SOFTWARE[29]	
114-60	19188-19191	IDE	*[29]	SOFTWARE[29]	
114-61	19192-19193	(	_	_	
114-62	19193-19196	the	_	_	
114-63	19197-19212	above-mentioned	_	_	
114-64	19213-19222	workspace	_	_	
114-65	19222-19223	)	_	_	
114-66	19223-19224	.	_	_	

#Text=To this aim, click on one of the projects in the workspace, let's say, e.g., thingml or thingml.ide, and select "Run As" and then "Eclipse Application" from the context menu.\r
#Text=\r
#Text=#### Using the Textual (Xtext-based) Model Editor\r
#Text=Create a new project in the new/nested Eclipse instance, say Demo_ML2 and then create a new file with the **.thingml** extension, such as Test.thingml.
115-1	19225-19227	To	_	_	
115-2	19228-19232	this	_	_	
115-3	19233-19236	aim	_	_	
115-4	19236-19237	,	_	_	
115-5	19238-19243	click	_	_	
115-6	19244-19246	on	_	_	
115-7	19247-19250	one	_	_	
115-8	19251-19253	of	_	_	
115-9	19254-19257	the	_	_	
115-10	19258-19266	projects	_	_	
115-11	19267-19269	in	_	_	
115-12	19270-19273	the	_	_	
115-13	19274-19283	workspace	_	_	
115-14	19283-19284	,	_	_	
115-15	19285-19290	let's	_	_	
115-16	19291-19294	say	_	_	
115-17	19294-19295	,	_	_	
115-18	19296-19299	e.g	_	_	
115-19	19299-19300	.	_	_	
115-20	19300-19301	,	_	_	
115-21	19302-19309	thingml	_	_	
115-22	19310-19312	or	_	_	
115-23	19313-19324	thingml.ide	_	_	
115-24	19324-19325	,	_	_	
115-25	19326-19329	and	_	_	
115-26	19330-19336	select	_	_	
115-27	19337-19338	"	_	_	
115-28	19338-19341	Run	_	_	
115-29	19342-19344	As	_	_	
115-30	19344-19345	"	_	_	
115-31	19346-19349	and	_	_	
115-32	19350-19354	then	_	_	
115-33	19355-19356	"	_	_	
115-34	19356-19363	Eclipse	_	_	
115-35	19364-19375	Application	_	_	
115-36	19375-19376	"	_	_	
115-37	19377-19381	from	_	_	
115-38	19382-19385	the	_	_	
115-39	19386-19393	context	_	_	
115-40	19394-19398	menu	_	_	
115-41	19398-19399	.	_	_	
115-42	19403-19404	#	_	_	
115-43	19404-19405	#	_	_	
115-44	19405-19406	#	_	_	
115-45	19406-19407	#	_	_	
115-46	19408-19413	Using	_	_	
115-47	19414-19417	the	_	_	
115-48	19418-19425	Textual	_	_	
115-49	19426-19427	(	_	_	
115-50	19427-19438	Xtext-based	_	_	
115-51	19438-19439	)	_	_	
115-52	19440-19445	Model	_	_	
115-53	19446-19452	Editor	_	_	
115-54	19454-19460	Create	_	_	
115-55	19461-19462	a	_	_	
115-56	19463-19466	new	_	_	
115-57	19467-19474	project	_	_	
115-58	19475-19477	in	_	_	
115-59	19478-19481	the	_	_	
115-60	19482-19485	new	_	_	
115-61	19485-19486	/	_	_	
115-62	19486-19492	nested	_	_	
115-63	19493-19500	Eclipse	*	SOFTWARE	
115-64	19501-19509	instance	_	_	
115-65	19509-19510	,	_	_	
115-66	19511-19514	say	_	_	
115-67	19515-19523	Demo_ML2	_	_	
115-68	19524-19527	and	_	_	
115-69	19528-19532	then	_	_	
115-70	19533-19539	create	_	_	
115-71	19540-19541	a	_	_	
115-72	19542-19545	new	_	_	
115-73	19546-19550	file	_	_	
115-74	19551-19555	with	_	_	
115-75	19556-19559	the	_	_	
115-76	19560-19561	*	_	_	
115-77	19561-19562	*	_	_	
115-78	19562-19563	.	_	_	
115-79	19563-19570	thingml	_	_	
115-80	19570-19571	*	_	_	
115-81	19571-19572	*	_	_	
115-82	19573-19582	extension	_	_	
115-83	19582-19583	,	_	_	
115-84	19584-19588	such	_	_	
115-85	19589-19591	as	_	_	
115-86	19592-19604	Test.thingml	_	_	
115-87	19604-19605	.	_	_	

#Text=This is a model instance, which shall conform to the meta-model/grammar of the DSML of ML2.
116-1	19606-19610	This	_	_	
116-2	19611-19613	is	_	_	
116-3	19614-19615	a	_	_	
116-4	19616-19621	model	_	_	
116-5	19622-19630	instance	_	_	
116-6	19630-19631	,	_	_	
116-7	19632-19637	which	_	_	
116-8	19638-19643	shall	_	_	
116-9	19644-19651	conform	_	_	
116-10	19652-19654	to	_	_	
116-11	19655-19658	the	_	_	
116-12	19659-19669	meta-model	_	_	
116-13	19669-19670	/	_	_	
116-14	19670-19677	grammar	_	_	
116-15	19678-19680	of	_	_	
116-16	19681-19684	the	_	_	
116-17	19685-19689	DSML	_	_	
116-18	19690-19692	of	_	_	
116-19	19693-19696	ML2	*	PROJECT	
116-20	19696-19697	.	_	_	

#Text=You may create this model instance by choosing File -> New -> Other -> Example EMF Model Creation Wizards -> ThingML Model, and then clicking on Next, then giving it the name Test.thingml, Clicking on Next, selecting **Model** as the **Model Object**, and finally clicking on Finish.
117-1	19698-19701	You	_	_	
117-2	19702-19705	may	_	_	
117-3	19706-19712	create	_	_	
117-4	19713-19717	this	_	_	
117-5	19718-19723	model	_	_	
117-6	19724-19732	instance	_	_	
117-7	19733-19735	by	_	_	
117-8	19736-19744	choosing	_	_	
117-9	19745-19749	File	_	_	
117-10	19750-19751	-	_	_	
117-11	19751-19752	>	_	_	
117-12	19753-19756	New	_	_	
117-13	19757-19758	-	_	_	
117-14	19758-19759	>	_	_	
117-15	19760-19765	Other	_	_	
117-16	19766-19767	-	_	_	
117-17	19767-19768	>	_	_	
117-18	19769-19776	Example	_	_	
117-19	19777-19780	EMF	_	_	
117-20	19781-19786	Model	_	_	
117-21	19787-19795	Creation	_	_	
117-22	19796-19803	Wizards	_	_	
117-23	19804-19805	-	_	_	
117-24	19805-19806	>	_	_	
117-25	19807-19814	ThingML	_	_	
117-26	19815-19820	Model	_	_	
117-27	19820-19821	,	_	_	
117-28	19822-19825	and	_	_	
117-29	19826-19830	then	_	_	
117-30	19831-19839	clicking	_	_	
117-31	19840-19842	on	_	_	
117-32	19843-19847	Next	_	_	
117-33	19847-19848	,	_	_	
117-34	19849-19853	then	_	_	
117-35	19854-19860	giving	_	_	
117-36	19861-19863	it	_	_	
117-37	19864-19867	the	_	_	
117-38	19868-19872	name	_	_	
117-39	19873-19885	Test.thingml	_	_	
117-40	19885-19886	,	_	_	
117-41	19887-19895	Clicking	_	_	
117-42	19896-19898	on	_	_	
117-43	19899-19903	Next	_	_	
117-44	19903-19904	,	_	_	
117-45	19905-19914	selecting	_	_	
117-46	19915-19916	*	_	_	
117-47	19916-19917	*	_	_	
117-48	19917-19922	Model	_	_	
117-49	19922-19923	*	_	_	
117-50	19923-19924	*	_	_	
117-51	19925-19927	as	_	_	
117-52	19928-19931	the	_	_	
117-53	19932-19933	*	_	_	
117-54	19933-19934	*	_	_	
117-55	19934-19939	Model	_	_	
117-56	19940-19946	Object	_	_	
117-57	19946-19947	*	_	_	
117-58	19947-19948	*	_	_	
117-59	19948-19949	,	_	_	
117-60	19950-19953	and	_	_	
117-61	19954-19961	finally	_	_	
117-62	19962-19970	clicking	_	_	
117-63	19971-19973	on	_	_	
117-64	19974-19980	Finish	_	_	
117-65	19980-19981	.	_	_	

#Text=By default, the customized, textual Xtext-based model editor will open for the files with the extension .thingml, i.e., for the ML2 model instances.
118-1	19986-19988	By	_	_	
118-2	19989-19996	default	_	_	
118-3	19996-19997	,	_	_	
118-4	19998-20001	the	_	_	
118-5	20002-20012	customized	_	_	
118-6	20012-20013	,	_	_	
118-7	20014-20021	textual	_	_	
118-8	20022-20033	Xtext-based	_	_	
118-9	20034-20039	model	_	_	
118-10	20040-20046	editor	_	_	
118-11	20047-20051	will	_	_	
118-12	20052-20056	open	_	_	
118-13	20057-20060	for	_	_	
118-14	20061-20064	the	_	_	
118-15	20065-20070	files	_	_	
118-16	20071-20075	with	_	_	
118-17	20076-20079	the	_	_	
118-18	20080-20089	extension	_	_	
118-19	20090-20091	.	_	_	
118-20	20091-20098	thingml	_	_	
118-21	20098-20099	,	_	_	
118-22	20100-20103	i.e	_	_	
118-23	20103-20104	.	_	_	
118-24	20104-20105	,	_	_	
118-25	20106-20109	for	_	_	
118-26	20110-20113	the	_	_	
118-27	20114-20117	ML2	*	SOFTWARE	
118-28	20118-20123	model	_	_	
118-29	20124-20133	instances	_	_	
118-30	20133-20134	.	_	_	

#Text=You can write the following in the model editor and save the model instance:\r
#Text=\r
#Text=```\r
#Text=thing my_thing {\r
#Text=\t\r
#Text=}\r
#Text=```\r
#Text=\r
#Text=If everything is configured properly so far, you should already see the syntax highlighting (e.g., the orange color for the keyword thing) and you should be also already able to experience the auto-completion, e.g., by pressing CTRL+SPACE simultaneously.
119-1	20135-20138	You	_	_	
119-2	20139-20142	can	_	_	
119-3	20143-20148	write	_	_	
119-4	20149-20152	the	_	_	
119-5	20153-20162	following	_	_	
119-6	20163-20165	in	_	_	
119-7	20166-20169	the	_	_	
119-8	20170-20175	model	_	_	
119-9	20176-20182	editor	_	_	
119-10	20183-20186	and	_	_	
119-11	20187-20191	save	_	_	
119-12	20192-20195	the	_	_	
119-13	20196-20201	model	_	_	
119-14	20202-20210	instance	_	_	
119-15	20210-20211	:	_	_	
119-16	20215-20216	`	_	_	
119-17	20216-20217	`	_	_	
119-18	20217-20218	`	_	_	
119-19	20220-20225	thing	_	_	
119-20	20226-20234	my_thing	_	_	
119-21	20235-20236	{	_	_	
119-22	20241-20242	}	_	_	
119-23	20244-20245	`	_	_	
119-24	20245-20246	`	_	_	
119-25	20246-20247	`	_	_	
119-26	20251-20253	If	_	_	
119-27	20254-20264	everything	_	_	
119-28	20265-20267	is	_	_	
119-29	20268-20278	configured	_	_	
119-30	20279-20287	properly	_	_	
119-31	20288-20290	so	_	_	
119-32	20291-20294	far	_	_	
119-33	20294-20295	,	_	_	
119-34	20296-20299	you	_	_	
119-35	20300-20306	should	_	_	
119-36	20307-20314	already	_	_	
119-37	20315-20318	see	_	_	
119-38	20319-20322	the	_	_	
119-39	20323-20329	syntax	_	_	
119-40	20330-20342	highlighting	_	_	
119-41	20343-20344	(	_	_	
119-42	20344-20347	e.g	_	_	
119-43	20347-20348	.	_	_	
119-44	20348-20349	,	_	_	
119-45	20350-20353	the	_	_	
119-46	20354-20360	orange	_	_	
119-47	20361-20366	color	_	_	
119-48	20367-20370	for	_	_	
119-49	20371-20374	the	_	_	
119-50	20375-20382	keyword	_	_	
119-51	20383-20388	thing	_	_	
119-52	20388-20389	)	_	_	
119-53	20390-20393	and	_	_	
119-54	20394-20397	you	_	_	
119-55	20398-20404	should	_	_	
119-56	20405-20407	be	_	_	
119-57	20408-20412	also	_	_	
119-58	20413-20420	already	_	_	
119-59	20421-20425	able	_	_	
119-60	20426-20428	to	_	_	
119-61	20429-20439	experience	_	_	
119-62	20440-20443	the	_	_	
119-63	20444-20459	auto-completion	_	_	
119-64	20459-20460	,	_	_	
119-65	20461-20464	e.g	_	_	
119-66	20464-20465	.	_	_	
119-67	20465-20466	,	_	_	
119-68	20467-20469	by	_	_	
119-69	20470-20478	pressing	_	_	
119-70	20479-20483	CTRL	_	_	
119-71	20483-20484	+	_	_	
119-72	20484-20489	SPACE	_	_	
119-73	20490-20504	simultaneously	_	_	
119-74	20504-20505	.	_	_	

#Text=Moreover, you will see warnings, errors and hints in the editor and also in the properties view/tab of the Eclipse IDE if applicable.\r
#Text=\r
#Text=#### Using the Graphical EMF Tree-based Model Editor\r
#Text=In the new/nested Eclipse instance, if you right-click on a model instance, e.g., Test.thingml and select Open With -> **ThingML Model Editor**, the graphical EMF tree-based model editor of ML2 will open.
120-1	20506-20514	Moreover	_	_	
120-2	20514-20515	,	_	_	
120-3	20516-20519	you	_	_	
120-4	20520-20524	will	_	_	
120-5	20525-20528	see	_	_	
120-6	20529-20537	warnings	_	_	
120-7	20537-20538	,	_	_	
120-8	20539-20545	errors	_	_	
120-9	20546-20549	and	_	_	
120-10	20550-20555	hints	_	_	
120-11	20556-20558	in	_	_	
120-12	20559-20562	the	_	_	
120-13	20563-20569	editor	_	_	
120-14	20570-20573	and	_	_	
120-15	20574-20578	also	_	_	
120-16	20579-20581	in	_	_	
120-17	20582-20585	the	_	_	
120-18	20586-20596	properties	_	_	
120-19	20597-20601	view	_	_	
120-20	20601-20602	/	_	_	
120-21	20602-20605	tab	_	_	
120-22	20606-20608	of	_	_	
120-23	20609-20612	the	_	_	
120-24	20613-20620	Eclipse	*[30]	SOFTWARE[30]	
120-25	20621-20624	IDE	*[30]	SOFTWARE[30]	
120-26	20625-20627	if	_	_	
120-27	20628-20638	applicable	_	_	
120-28	20638-20639	.	_	_	
120-29	20643-20644	#	_	_	
120-30	20644-20645	#	_	_	
120-31	20645-20646	#	_	_	
120-32	20646-20647	#	_	_	
120-33	20648-20653	Using	_	_	
120-34	20654-20657	the	_	_	
120-35	20658-20667	Graphical	_	_	
120-36	20668-20671	EMF	_	_	
120-37	20672-20682	Tree-based	_	_	
120-38	20683-20688	Model	_	_	
120-39	20689-20695	Editor	_	_	
120-40	20697-20699	In	_	_	
120-41	20700-20703	the	_	_	
120-42	20704-20707	new	_	_	
120-43	20707-20708	/	_	_	
120-44	20708-20714	nested	_	_	
120-45	20715-20722	Eclipse	*	SOFTWARE	
120-46	20723-20731	instance	_	_	
120-47	20731-20732	,	_	_	
120-48	20733-20735	if	_	_	
120-49	20736-20739	you	_	_	
120-50	20740-20751	right-click	_	_	
120-51	20752-20754	on	_	_	
120-52	20755-20756	a	_	_	
120-53	20757-20762	model	_	_	
120-54	20763-20771	instance	_	_	
120-55	20771-20772	,	_	_	
120-56	20773-20776	e.g	_	_	
120-57	20776-20777	.	_	_	
120-58	20777-20778	,	_	_	
120-59	20779-20791	Test.thingml	_	_	
120-60	20792-20795	and	_	_	
120-61	20796-20802	select	_	_	
120-62	20803-20807	Open	_	_	
120-63	20808-20812	With	_	_	
120-64	20813-20814	-	_	_	
120-65	20814-20815	>	_	_	
120-66	20816-20817	*	_	_	
120-67	20817-20818	*	_	_	
120-68	20818-20825	ThingML	_	_	
120-69	20826-20831	Model	_	_	
120-70	20832-20838	Editor	_	_	
120-71	20838-20839	*	_	_	
120-72	20839-20840	*	_	_	
120-73	20840-20841	,	_	_	
120-74	20842-20845	the	_	_	
120-75	20846-20855	graphical	_	_	
120-76	20856-20859	EMF	_	_	
120-77	20860-20870	tree-based	_	_	
120-78	20871-20876	model	_	_	
120-79	20877-20883	editor	_	_	
120-80	20884-20886	of	_	_	
120-81	20887-20890	ML2	*	SOFTWARE	
120-82	20891-20895	will	_	_	
120-83	20896-20900	open	_	_	
120-84	20900-20901	.	_	_	

#Text=In contrast, if you right-click on a model instance and select Open With -> **ThingML Editor**, not **ThingML Model Editor**, the **textual** Xtext-based model editor of ML2 will open.\r
#Text=\r
#Text=#### Which Model Editor to Choose?
121-1	20902-20904	In	_	_	
121-2	20905-20913	contrast	_	_	
121-3	20913-20914	,	_	_	
121-4	20915-20917	if	_	_	
121-5	20918-20921	you	_	_	
121-6	20922-20933	right-click	_	_	
121-7	20934-20936	on	_	_	
121-8	20937-20938	a	_	_	
121-9	20939-20944	model	_	_	
121-10	20945-20953	instance	_	_	
121-11	20954-20957	and	_	_	
121-12	20958-20964	select	_	_	
121-13	20965-20969	Open	_	_	
121-14	20970-20974	With	_	_	
121-15	20975-20976	-	_	_	
121-16	20976-20977	>	_	_	
121-17	20978-20979	*	_	_	
121-18	20979-20980	*	_	_	
121-19	20980-20987	ThingML	_	_	
121-20	20988-20994	Editor	_	_	
121-21	20994-20995	*	_	_	
121-22	20995-20996	*	_	_	
121-23	20996-20997	,	_	_	
121-24	20998-21001	not	_	_	
121-25	21002-21003	*	_	_	
121-26	21003-21004	*	_	_	
121-27	21004-21011	ThingML	_	_	
121-28	21012-21017	Model	_	_	
121-29	21018-21024	Editor	_	_	
121-30	21024-21025	*	_	_	
121-31	21025-21026	*	_	_	
121-32	21026-21027	,	_	_	
121-33	21028-21031	the	_	_	
121-34	21032-21033	*	_	_	
121-35	21033-21034	*	_	_	
121-36	21034-21041	textual	_	_	
121-37	21041-21042	*	_	_	
121-38	21042-21043	*	_	_	
121-39	21044-21055	Xtext-based	_	_	
121-40	21056-21061	model	_	_	
121-41	21062-21068	editor	_	_	
121-42	21069-21071	of	_	_	
121-43	21072-21075	ML2	*	SOFTWARE	
121-44	21076-21080	will	_	_	
121-45	21081-21085	open	_	_	
121-46	21085-21086	.	_	_	
121-47	21090-21091	#	_	_	
121-48	21091-21092	#	_	_	
121-49	21092-21093	#	_	_	
121-50	21093-21094	#	_	_	
121-51	21095-21100	Which	_	_	
121-52	21101-21106	Model	_	_	
121-53	21107-21113	Editor	_	_	
121-54	21114-21116	to	_	_	
121-55	21117-21123	Choose	_	_	
121-56	21123-21124	?	_	_	

#Text=There is no universal answer to this question.
122-1	21126-21131	There	_	_	
122-2	21132-21134	is	_	_	
122-3	21135-21137	no	_	_	
122-4	21138-21147	universal	_	_	
122-5	21148-21154	answer	_	_	
122-6	21155-21157	to	_	_	
122-7	21158-21162	this	_	_	
122-8	21163-21171	question	_	_	
122-9	21171-21172	.	_	_	

#Text=Some practitioners/users, especially many advanced software developers prefer the textual model editor, whereas some other practitioners/users find the graphical tree-based model editor more convenient.
123-1	21173-21177	Some	_	_	
123-2	21178-21191	practitioners	_	_	
123-3	21191-21192	/	_	_	
123-4	21192-21197	users	_	_	
123-5	21197-21198	,	_	_	
123-6	21199-21209	especially	_	_	
123-7	21210-21214	many	_	_	
123-8	21215-21223	advanced	_	_	
123-9	21224-21232	software	_	_	
123-10	21233-21243	developers	_	_	
123-11	21244-21250	prefer	_	_	
123-12	21251-21254	the	_	_	
123-13	21255-21262	textual	_	_	
123-14	21263-21268	model	_	_	
123-15	21269-21275	editor	_	_	
123-16	21275-21276	,	_	_	
123-17	21277-21284	whereas	_	_	
123-18	21285-21289	some	_	_	
123-19	21290-21295	other	_	_	
123-20	21296-21309	practitioners	_	_	
123-21	21309-21310	/	_	_	
123-22	21310-21315	users	_	_	
123-23	21316-21320	find	_	_	
123-24	21321-21324	the	_	_	
123-25	21325-21334	graphical	_	_	
123-26	21335-21345	tree-based	_	_	
123-27	21346-21351	model	_	_	
123-28	21352-21358	editor	_	_	
123-29	21359-21363	more	_	_	
123-30	21364-21374	convenient	_	_	
123-31	21374-21375	.	_	_	

#Text=Please give both a try if you are not sure about your own preference.
124-1	21376-21382	Please	_	_	
124-2	21383-21387	give	_	_	
124-3	21388-21392	both	_	_	
124-4	21393-21394	a	_	_	
124-5	21395-21398	try	_	_	
124-6	21399-21401	if	_	_	
124-7	21402-21405	you	_	_	
124-8	21406-21409	are	_	_	
124-9	21410-21413	not	_	_	
124-10	21414-21418	sure	_	_	
124-11	21419-21424	about	_	_	
124-12	21425-21429	your	_	_	
124-13	21430-21433	own	_	_	
124-14	21434-21444	preference	_	_	
124-15	21444-21445	.	_	_	

#Text=[Back to top](#toc)\r
#Text=\r
#Text=### Full documentation of the DSML\r
#Text=As mentioned, ML2 is based on the [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project) projects.
125-1	21449-21450	[	_	_	
125-2	21450-21454	Back	_	_	
125-3	21455-21457	to	_	_	
125-4	21458-21461	top	_	_	
125-5	21461-21462	]	_	_	
125-6	21462-21463	(	_	_	
125-7	21463-21464	#	_	_	
125-8	21464-21467	toc	_	_	
125-9	21467-21468	)	_	_	
125-10	21472-21473	#	_	_	
125-11	21473-21474	#	_	_	
125-12	21474-21475	#	_	_	
125-13	21476-21480	Full	_	_	
125-14	21481-21494	documentation	_	_	
125-15	21495-21497	of	_	_	
125-16	21498-21501	the	_	_	
125-17	21502-21506	DSML	_	_	
125-18	21508-21510	As	_	_	
125-19	21511-21520	mentioned	_	_	
125-20	21520-21521	,	_	_	
125-21	21522-21525	ML2	*	SOFTWARE	
125-22	21526-21528	is	_	_	
125-23	21529-21534	based	_	_	
125-24	21535-21537	on	_	_	
125-25	21538-21541	the	_	_	
125-26	21542-21543	[	_	_	
125-27	21543-21550	ThingML	*	PROJECT	
125-28	21550-21551	]	_	_	
125-29	21551-21552	(	_	_	
125-30	21552-21557	https	_	_	
125-31	21557-21558	:	_	_	
125-32	21558-21559	/	_	_	
125-33	21559-21560	/	_	_	
125-34	21560-21570	github.com	_	_	
125-35	21570-21571	/	_	_	
125-36	21571-21579	TelluIoT	_	_	
125-37	21579-21580	/	_	_	
125-38	21580-21587	ThingML	*	PROJECT	
125-39	21587-21588	)	_	_	
125-40	21589-21590	/	_	_	
125-41	21591-21592	[	_	_	
125-42	21592-21597	HEADS	*	PROJECT	
125-43	21597-21598	]	_	_	
125-44	21598-21599	(	_	_	
125-45	21599-21604	https	_	_	
125-46	21604-21605	:	_	_	
125-47	21605-21606	/	_	_	
125-48	21606-21607	/	_	_	
125-49	21607-21617	github.com	_	_	
125-50	21617-21618	/	_	_	
125-51	21618-21631	HEADS-project	_	_	
125-51.1	21618-21623	HEADS	*	PROJECT	
125-52	21631-21632	)	_	_	
125-53	21633-21641	projects	_	_	
125-54	21641-21642	.	_	_	

#Text=Therefore, in order to gain a deeper insight and a thorough understanding of the underlying concepts and technologies, you are invited to read the documentations of the said open source projects.
126-1	21643-21652	Therefore	_	_	
126-2	21652-21653	,	_	_	
126-3	21654-21656	in	_	_	
126-4	21657-21662	order	_	_	
126-5	21663-21665	to	_	_	
126-6	21666-21670	gain	_	_	
126-7	21671-21672	a	_	_	
126-8	21673-21679	deeper	_	_	
126-9	21680-21687	insight	_	_	
126-10	21688-21691	and	_	_	
126-11	21692-21693	a	_	_	
126-12	21694-21702	thorough	_	_	
126-13	21703-21716	understanding	_	_	
126-14	21717-21719	of	_	_	
126-15	21720-21723	the	_	_	
126-16	21724-21734	underlying	_	_	
126-17	21735-21743	concepts	_	_	
126-18	21744-21747	and	_	_	
126-19	21748-21760	technologies	_	_	
126-20	21760-21761	,	_	_	
126-21	21762-21765	you	_	_	
126-22	21766-21769	are	_	_	
126-23	21770-21777	invited	_	_	
126-24	21778-21780	to	_	_	
126-25	21781-21785	read	_	_	
126-26	21786-21789	the	_	_	
126-27	21790-21804	documentations	_	_	
126-28	21805-21807	of	_	_	
126-29	21808-21811	the	_	_	
126-30	21812-21816	said	_	_	
126-31	21817-21821	open	_	_	
126-32	21822-21828	source	_	_	
126-33	21829-21837	projects	_	_	
126-34	21837-21838	.	_	_	

#Text=In principle, a DSML comprises three key components: (i) Abstract syntax.
127-1	21842-21844	In	_	_	
127-2	21845-21854	principle	_	_	
127-3	21854-21855	,	_	_	
127-4	21856-21857	a	_	_	
127-5	21858-21862	DSML	_	_	
127-6	21863-21872	comprises	_	_	
127-7	21873-21878	three	_	_	
127-8	21879-21882	key	_	_	
127-9	21883-21893	components	_	_	
127-10	21893-21894	:	_	_	
127-11	21895-21896	(	_	_	
127-12	21896-21897	i	_	_	
127-13	21897-21898	)	_	_	
127-14	21899-21907	Abstract	_	_	
127-15	21908-21914	syntax	_	_	
127-16	21914-21915	.	_	_	

#Text=(ii) Concrete syntax.
128-1	21916-21917	(	_	_	
128-2	21917-21919	ii	_	_	
128-3	21919-21920	)	_	_	
128-4	21921-21929	Concrete	_	_	
128-5	21930-21936	syntax	_	_	
128-6	21936-21937	.	_	_	

#Text=(iii) Semantics.
129-1	21938-21939	(	_	_	
129-2	21939-21942	iii	_	_	
129-3	21942-21943	)	_	_	
129-4	21944-21953	Semantics	_	_	
129-5	21953-21954	.	_	_	

#Text=The **abstract syntax** of the DSML of ML2 is implemented through the [Xtext grammar](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/language/thingml/src/org/thingml/xtext/ThingML.xtext).
130-1	21955-21958	The	_	_	
130-2	21959-21960	*	_	_	
130-3	21960-21961	*	_	_	
130-4	21961-21969	abstract	_	_	
130-5	21970-21976	syntax	_	_	
130-6	21976-21977	*	_	_	
130-7	21977-21978	*	_	_	
130-8	21979-21981	of	_	_	
130-9	21982-21985	the	_	_	
130-10	21986-21990	DSML	_	_	
130-11	21991-21993	of	_	_	
130-12	21994-21997	ML2	*	PROJECT	
130-13	21998-22000	is	_	_	
130-14	22001-22012	implemented	_	_	
130-15	22013-22020	through	_	_	
130-16	22021-22024	the	_	_	
130-17	22025-22026	[	_	_	
130-18	22026-22031	Xtext	*	SOFTWARE	
130-19	22032-22039	grammar	_	_	
130-20	22039-22040	]	_	_	
130-21	22040-22041	(	_	_	
130-22	22041-22046	https	_	_	
130-23	22046-22047	:	_	_	
130-24	22047-22048	/	_	_	
130-25	22048-22049	/	_	_	
130-26	22049-22059	github.com	_	_	
130-27	22059-22060	/	_	_	
130-28	22060-22069	arminmoin	_	_	
130-29	22069-22070	/	_	_	
130-30	22070-22080	ML-Quadrat	_	_	
130-31	22080-22081	/	_	_	
130-32	22081-22085	blob	_	_	
130-33	22085-22086	/	_	_	
130-34	22086-22092	master	_	_	
130-35	22092-22093	/	_	_	
130-36	22093-22096	ML2	_	_	
130-37	22096-22097	/	_	_	
130-38	22097-22105	language	_	_	
130-39	22105-22106	/	_	_	
130-40	22106-22113	thingml	_	_	
130-41	22113-22114	/	_	_	
130-42	22114-22117	src	_	_	
130-43	22117-22118	/	_	_	
130-44	22118-22121	org	_	_	
130-45	22121-22122	/	_	_	
130-46	22122-22129	thingml	_	_	
130-47	22129-22130	/	_	_	
130-48	22130-22135	xtext	*	SOFTWARE	
130-49	22135-22136	/	_	_	
130-50	22136-22149	ThingML.xtext	_	_	
130-51	22149-22150	)	_	_	
130-52	22150-22151	.	_	_	

#Text=The Ecore meta-model is generated automatically out of the Xtext grammar.
131-1	22152-22155	The	_	_	
131-2	22156-22161	Ecore	_	_	
131-3	22162-22172	meta-model	_	_	
131-4	22173-22175	is	_	_	
131-5	22176-22185	generated	_	_	
131-6	22186-22199	automatically	_	_	
131-7	22200-22203	out	_	_	
131-8	22204-22206	of	_	_	
131-9	22207-22210	the	_	_	
131-10	22211-22216	Xtext	*	SOFTWARE	
131-11	22217-22224	grammar	_	_	
131-12	22224-22225	.	_	_	

#Text=Moreover, the **concrete syntax** of the DSML is realized in the textual (Xtext-based) and graphical (EMF tree-based) forms, as explained above.
132-1	22226-22234	Moreover	_	_	
132-2	22234-22235	,	_	_	
132-3	22236-22239	the	_	_	
132-4	22240-22241	*	_	_	
132-5	22241-22242	*	_	_	
132-6	22242-22250	concrete	_	_	
132-7	22251-22257	syntax	_	_	
132-8	22257-22258	*	_	_	
132-9	22258-22259	*	_	_	
132-10	22260-22262	of	_	_	
132-11	22263-22266	the	_	_	
132-12	22267-22271	DSML	_	_	
132-13	22272-22274	is	_	_	
132-14	22275-22283	realized	_	_	
132-15	22284-22286	in	_	_	
132-16	22287-22290	the	_	_	
132-17	22291-22298	textual	_	_	
132-18	22299-22300	(	_	_	
132-19	22300-22311	Xtext-based	_	_	
132-19.1	22300-22305	Xtext	*	SOFTWARE	
132-20	22311-22312	)	_	_	
132-21	22313-22316	and	_	_	
132-22	22317-22326	graphical	_	_	
132-23	22327-22328	(	_	_	
132-24	22328-22331	EMF	_	_	
132-25	22332-22342	tree-based	_	_	
132-26	22342-22343	)	_	_	
132-27	22344-22349	forms	_	_	
132-28	22349-22350	,	_	_	
132-29	22351-22353	as	_	_	
132-30	22354-22363	explained	_	_	
132-31	22364-22369	above	_	_	
132-32	22369-22370	.	_	_	

#Text=Last but not least, the **semantics** are implemented both via the Xtext framework (in Java and Xtend) on the modeling langauge layer and also through the model-to-code transformations (i.e., code generators, also known as "compilers").
133-1	22371-22375	Last	_	_	
133-2	22376-22379	but	_	_	
133-3	22380-22383	not	_	_	
133-4	22384-22389	least	_	_	
133-5	22389-22390	,	_	_	
133-6	22391-22394	the	_	_	
133-7	22395-22396	*	_	_	
133-8	22396-22397	*	_	_	
133-9	22397-22406	semantics	_	_	
133-10	22406-22407	*	_	_	
133-11	22407-22408	*	_	_	
133-12	22409-22412	are	_	_	
133-13	22413-22424	implemented	_	_	
133-14	22425-22429	both	_	_	
133-15	22430-22433	via	_	_	
133-16	22434-22437	the	_	_	
133-17	22438-22443	Xtext	*	SOFTWARE	
133-18	22444-22453	framework	_	_	
133-19	22454-22455	(	_	_	
133-20	22455-22457	in	_	_	
133-21	22458-22462	Java	*	PROGLANG	
133-22	22463-22466	and	_	_	
133-23	22467-22472	Xtend	*	PROGLANG	
133-24	22472-22473	)	_	_	
133-25	22474-22476	on	_	_	
133-26	22477-22480	the	_	_	
133-27	22481-22489	modeling	_	_	
133-28	22490-22498	langauge	_	_	
133-29	22499-22504	layer	_	_	
133-30	22505-22508	and	_	_	
133-31	22509-22513	also	_	_	
133-32	22514-22521	through	_	_	
133-33	22522-22525	the	_	_	
133-34	22526-22539	model-to-code	_	_	
133-35	22540-22555	transformations	_	_	
133-36	22556-22557	(	_	_	
133-37	22557-22560	i.e	_	_	
133-38	22560-22561	.	_	_	
133-39	22561-22562	,	_	_	
133-40	22563-22567	code	_	_	
133-41	22568-22578	generators	_	_	
133-42	22578-22579	,	_	_	
133-43	22580-22584	also	_	_	
133-44	22585-22590	known	_	_	
133-45	22591-22593	as	_	_	
133-46	22594-22595	"	_	_	
133-47	22595-22604	compilers	_	_	
133-48	22604-22605	"	_	_	
133-49	22605-22606	)	_	_	
133-50	22606-22607	.	_	_	

#Text=A typical software model instance that conforms to the meta-model/grammar of the DSML of ML2 consists of 4 main sections and various subsections in Section 3, i.e., "Things":\r
#Text=\r
#Text=#### Section 1.
134-1	22611-22612	A	_	_	
134-2	22613-22620	typical	_	_	
134-3	22621-22629	software	_	_	
134-4	22630-22635	model	_	_	
134-5	22636-22644	instance	_	_	
134-6	22645-22649	that	_	_	
134-7	22650-22658	conforms	_	_	
134-8	22659-22661	to	_	_	
134-9	22662-22665	the	_	_	
134-10	22666-22676	meta-model	_	_	
134-11	22676-22677	/	_	_	
134-12	22677-22684	grammar	_	_	
134-13	22685-22687	of	_	_	
134-14	22688-22691	the	_	_	
134-15	22692-22696	DSML	_	_	
134-16	22697-22699	of	_	_	
134-17	22700-22703	ML2	*	SOFTWARE	
134-18	22704-22712	consists	_	_	
134-19	22713-22715	of	_	_	
134-20	22716-22717	4	_	_	
134-21	22718-22722	main	_	_	
134-22	22723-22731	sections	_	_	
134-23	22732-22735	and	_	_	
134-24	22736-22743	various	_	_	
134-25	22744-22755	subsections	_	_	
134-26	22756-22758	in	_	_	
134-27	22759-22766	Section	_	_	
134-28	22767-22768	3	_	_	
134-29	22768-22769	,	_	_	
134-30	22770-22773	i.e	_	_	
134-31	22773-22774	.	_	_	
134-32	22774-22775	,	_	_	
134-33	22776-22777	"	_	_	
134-34	22777-22783	Things	_	_	
134-35	22783-22784	"	_	_	
134-36	22784-22785	:	_	_	
134-37	22789-22790	#	_	_	
134-38	22790-22791	#	_	_	
134-39	22791-22792	#	_	_	
134-40	22792-22793	#	_	_	
134-41	22794-22801	Section	_	_	
134-42	22802-22803	1	_	_	
134-43	22803-22804	.	_	_	

#Text=Imports\r
#Text=One may import other model instances that conform to the meta-model/grammar of the DSML of ML2 here.
135-1	22805-22812	Imports	_	_	
135-2	22814-22817	One	_	_	
135-3	22818-22821	may	_	_	
135-4	22822-22828	import	_	_	
135-5	22829-22834	other	_	_	
135-6	22835-22840	model	_	_	
135-7	22841-22850	instances	_	_	
135-8	22851-22855	that	_	_	
135-9	22856-22863	conform	_	_	
135-10	22864-22866	to	_	_	
135-11	22867-22870	the	_	_	
135-12	22871-22881	meta-model	_	_	
135-13	22881-22882	/	_	_	
135-14	22882-22889	grammar	_	_	
135-15	22890-22892	of	_	_	
135-16	22893-22896	the	_	_	
135-17	22897-22901	DSML	_	_	
135-18	22902-22904	of	_	_	
135-19	22905-22908	ML2	*	SOFTWARE	
135-20	22909-22913	here	_	_	
135-21	22913-22914	.	_	_	

#Text=For instance, a Platform-Specific Model (PSM) should import the corresponding Platform-Independent Model (PIM) in this section.
136-1	22915-22918	For	_	_	
136-2	22919-22927	instance	_	_	
136-3	22927-22928	,	_	_	
136-4	22929-22930	a	_	_	
136-5	22931-22948	Platform-Specific	_	_	
136-6	22949-22954	Model	_	_	
136-7	22955-22956	(	_	_	
136-8	22956-22959	PSM	_	_	
136-9	22959-22960	)	_	_	
136-10	22961-22967	should	_	_	
136-11	22968-22974	import	_	_	
136-12	22975-22978	the	_	_	
136-13	22979-22992	corresponding	_	_	
136-14	22993-23013	Platform-Independent	_	_	
136-15	23014-23019	Model	_	_	
136-16	23020-23021	(	_	_	
136-17	23021-23024	PIM	_	_	
136-18	23024-23025	)	_	_	
136-19	23026-23028	in	_	_	
136-20	23029-23033	this	_	_	
136-21	23034-23041	section	_	_	
136-22	23041-23042	.	_	_	

#Text=The provided examples [ML2_Demo_NIALM_PSM_Java.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_NIALM_PSM_Java.thingml) and [ML2_Demo_NIALM_PIM.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_NIALM_PIM.thingml) illustrate this.
137-1	23043-23046	The	_	_	
137-2	23047-23055	provided	_	_	
137-3	23056-23064	examples	_	_	
137-4	23065-23066	[	_	_	
137-5	23066-23069	ML2	*	SOFTWARE	
137-6	23069-23070	_	_	_	
137-7	23070-23097	Demo_NIALM_PSM_Java.thingml	_	_	
137-7.1	23085-23089	Java	*	PROGLANG	
137-8	23097-23098	]	_	_	
137-9	23098-23099	(	_	_	
137-10	23099-23104	https	_	_	
137-11	23104-23105	:	_	_	
137-12	23105-23106	/	_	_	
137-13	23106-23107	/	_	_	
137-14	23107-23117	github.com	_	_	
137-15	23117-23118	/	_	_	
137-16	23118-23127	arminmoin	_	_	
137-17	23127-23128	/	_	_	
137-18	23128-23138	ML-Quadrat	_	_	
137-19	23138-23139	/	_	_	
137-20	23139-23143	blob	_	_	
137-21	23143-23144	/	_	_	
137-22	23144-23150	master	_	_	
137-23	23150-23151	/	_	_	
137-24	23151-23154	ML2	_	_	
137-25	23154-23155	/	_	_	
137-26	23155-23174	org.thingml.samples	_	_	
137-27	23174-23175	/	_	_	
137-28	23175-23178	src	_	_	
137-29	23178-23179	/	_	_	
137-30	23179-23183	main	_	_	
137-31	23183-23184	/	_	_	
137-32	23184-23191	thingml	_	_	
137-33	23191-23192	/	_	_	
137-34	23192-23195	ML2	*	SOFTWARE	
137-35	23195-23196	_	_	_	
137-36	23196-23223	Demo_NIALM_PSM_Java.thingml	_	_	
137-36.1	23211-23215	Java	*	PROGLANG	
137-37	23223-23224	)	_	_	
137-38	23225-23228	and	_	_	
137-39	23229-23230	[	_	_	
137-40	23230-23233	ML2	*	SOFTWARE	
137-41	23233-23234	_	_	_	
137-42	23234-23256	Demo_NIALM_PIM.thingml	_	_	
137-43	23256-23257	]	_	_	
137-44	23257-23258	(	_	_	
137-45	23258-23263	https	_	_	
137-46	23263-23264	:	_	_	
137-47	23264-23265	/	_	_	
137-48	23265-23266	/	_	_	
137-49	23266-23276	github.com	_	_	
137-50	23276-23277	/	_	_	
137-51	23277-23286	arminmoin	_	_	
137-52	23286-23287	/	_	_	
137-53	23287-23297	ML-Quadrat	_	_	
137-54	23297-23298	/	_	_	
137-55	23298-23302	blob	_	_	
137-56	23302-23303	/	_	_	
137-57	23303-23309	master	_	_	
137-58	23309-23310	/	_	_	
137-59	23310-23313	ML2	_	_	
137-60	23313-23314	/	_	_	
137-61	23314-23333	org.thingml.samples	_	_	
137-62	23333-23334	/	_	_	
137-63	23334-23337	src	_	_	
137-64	23337-23338	/	_	_	
137-65	23338-23342	main	_	_	
137-66	23342-23343	/	_	_	
137-67	23343-23350	thingml	_	_	
137-68	23350-23351	/	_	_	
137-69	23351-23354	ML2	*	SOFTWARE	
137-70	23354-23355	_	_	_	
137-71	23355-23377	Demo_NIALM_PIM.thingml	_	_	
137-72	23377-23378	)	_	_	
137-73	23379-23389	illustrate	_	_	
137-74	23390-23394	this	_	_	
137-75	23394-23395	.	_	_	

#Text=However, this is not the only use-case for the imports.\r
#Text=\r
#Text=#### Section 2.
138-1	23396-23403	However	_	_	
138-2	23403-23404	,	_	_	
138-3	23405-23409	this	_	_	
138-4	23410-23412	is	_	_	
138-5	23413-23416	not	_	_	
138-6	23417-23420	the	_	_	
138-7	23421-23425	only	_	_	
138-8	23426-23434	use-case	_	_	
138-9	23435-23438	for	_	_	
138-10	23439-23442	the	_	_	
138-11	23443-23450	imports	_	_	
138-12	23450-23451	.	_	_	
138-13	23455-23456	#	_	_	
138-14	23456-23457	#	_	_	
138-15	23457-23458	#	_	_	
138-16	23458-23459	#	_	_	
138-17	23460-23467	Section	_	_	
138-18	23468-23469	2	_	_	
138-19	23469-23470	.	_	_	

#Text=Annotations\r
#Text=One may specify the platform annotations in this section.
139-1	23471-23482	Annotations	_	_	
139-2	23484-23487	One	_	_	
139-3	23488-23491	may	_	_	
139-4	23492-23499	specify	_	_	
139-5	23500-23503	the	_	_	
139-6	23504-23512	platform	_	_	
139-7	23513-23524	annotations	_	_	
139-8	23525-23527	in	_	_	
139-9	23528-23532	this	_	_	
139-10	23533-23540	section	_	_	
139-11	23540-23541	.	_	_	

#Text=For instance, the provided example [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml) demonstrates how the String, Boolean<1> and Int32<4> datatypes are supposed to be mapped to the "platform"-specific datatypes, such as String <-> char * for the C code generation, but String <-> String for the Java and the Javascript code generation.
140-1	23542-23545	For	_	_	
140-2	23546-23554	instance	_	_	
140-3	23554-23555	,	_	_	
140-4	23556-23559	the	_	_	
140-5	23560-23568	provided	_	_	
140-6	23569-23576	example	_	_	
140-7	23577-23578	[	_	_	
140-8	23578-23581	ML2	*	SOFTWARE	
140-9	23581-23582	_	_	_	
140-10	23582-23603	Demo_PingPong.thingml	_	_	
140-11	23603-23604	]	_	_	
140-12	23604-23605	(	_	_	
140-13	23605-23610	https	_	_	
140-14	23610-23611	:	_	_	
140-15	23611-23612	/	_	_	
140-16	23612-23613	/	_	_	
140-17	23613-23623	github.com	_	_	
140-18	23623-23624	/	_	_	
140-19	23624-23633	arminmoin	_	_	
140-20	23633-23634	/	_	_	
140-21	23634-23644	ML-Quadrat	*	SOFTWARE	
140-22	23644-23645	/	_	_	
140-23	23645-23649	blob	_	_	
140-24	23649-23650	/	_	_	
140-25	23650-23656	master	_	_	
140-26	23656-23657	/	_	_	
140-27	23657-23660	ML2	_	_	
140-28	23660-23661	/	_	_	
140-29	23661-23680	org.thingml.samples	_	_	
140-30	23680-23681	/	_	_	
140-31	23681-23684	src	_	_	
140-32	23684-23685	/	_	_	
140-33	23685-23689	main	_	_	
140-34	23689-23690	/	_	_	
140-35	23690-23697	thingml	_	_	
140-36	23697-23698	/	_	_	
140-37	23698-23701	ML2	_	_	
140-38	23701-23702	_	_	_	
140-39	23702-23723	Demo_PingPong.thingml	_	_	
140-40	23723-23724	)	_	_	
140-41	23725-23737	demonstrates	_	_	
140-42	23738-23741	how	_	_	
140-43	23742-23745	the	_	_	
140-44	23746-23752	String	_	_	
140-45	23752-23753	,	_	_	
140-46	23754-23761	Boolean	_	_	
140-47	23761-23762	<	_	_	
140-48	23762-23763	1	_	_	
140-49	23763-23764	>	_	_	
140-50	23765-23768	and	_	_	
140-51	23769-23774	Int32	_	_	
140-52	23774-23775	<	_	_	
140-53	23775-23776	4	_	_	
140-54	23776-23777	>	_	_	
140-55	23778-23787	datatypes	_	_	
140-56	23788-23791	are	_	_	
140-57	23792-23800	supposed	_	_	
140-58	23801-23803	to	_	_	
140-59	23804-23806	be	_	_	
140-60	23807-23813	mapped	_	_	
140-61	23814-23816	to	_	_	
140-62	23817-23820	the	_	_	
140-63	23821-23822	"	_	_	
140-64	23822-23830	platform	_	_	
140-65	23830-23831	"	_	_	
140-66	23831-23832	-	_	_	
140-67	23832-23840	specific	_	_	
140-68	23841-23850	datatypes	_	_	
140-69	23850-23851	,	_	_	
140-70	23852-23856	such	_	_	
140-71	23857-23859	as	_	_	
140-72	23860-23866	String	_	_	
140-73	23867-23868	<	_	_	
140-74	23868-23869	-	_	_	
140-75	23869-23870	>	_	_	
140-76	23871-23875	char	_	_	
140-77	23876-23877	*	_	_	
140-78	23878-23881	for	_	_	
140-79	23882-23885	the	_	_	
140-80	23886-23887	C	*	PROGLANG	
140-81	23888-23892	code	_	_	
140-82	23893-23903	generation	_	_	
140-83	23903-23904	,	_	_	
140-84	23905-23908	but	_	_	
140-85	23909-23915	String	_	_	
140-86	23916-23917	<	_	_	
140-87	23917-23918	-	_	_	
140-88	23918-23919	>	_	_	
140-89	23920-23926	String	_	_	
140-90	23927-23930	for	_	_	
140-91	23931-23934	the	_	_	
140-92	23935-23939	Java	*	PROGLANG	
140-93	23940-23943	and	_	_	
140-94	23944-23947	the	_	_	
140-95	23948-23958	Javascript	*	PROGLANG	
140-96	23959-23963	code	_	_	
140-97	23964-23974	generation	_	_	
140-98	23974-23975	.	_	_	

#Text=Note that the platform annotations might appear in other sections, e.g., for choosing the specific library/framework for DAML in Subsection 3.2 ("Data Analytics (and Machine Learning)"), or for selecting a particular model-to-code transformation (code generator, also known as "compiler") in Section 4 ("Configuration").\r
#Text=\r
#Text=#### Section 3.
141-1	23976-23980	Note	_	_	
141-2	23981-23985	that	_	_	
141-3	23986-23989	the	_	_	
141-4	23990-23998	platform	_	_	
141-5	23999-24010	annotations	_	_	
141-6	24011-24016	might	_	_	
141-7	24017-24023	appear	_	_	
141-8	24024-24026	in	_	_	
141-9	24027-24032	other	_	_	
141-10	24033-24041	sections	_	_	
141-11	24041-24042	,	_	_	
141-12	24043-24046	e.g	_	_	
141-13	24046-24047	.	_	_	
141-14	24047-24048	,	_	_	
141-15	24049-24052	for	_	_	
141-16	24053-24061	choosing	_	_	
141-17	24062-24065	the	_	_	
141-18	24066-24074	specific	_	_	
141-19	24075-24082	library	_	_	
141-20	24082-24083	/	_	_	
141-21	24083-24092	framework	_	_	
141-22	24093-24096	for	_	_	
141-23	24097-24101	DAML	_	_	
141-24	24102-24104	in	_	_	
141-25	24105-24115	Subsection	_	_	
141-26	24116-24119	3.2	_	_	
141-27	24120-24121	(	_	_	
141-28	24121-24122	"	_	_	
141-29	24122-24126	Data	_	_	
141-30	24127-24136	Analytics	_	_	
141-31	24137-24138	(	_	_	
141-32	24138-24141	and	_	_	
141-33	24142-24149	Machine	_	_	
141-34	24150-24158	Learning	_	_	
141-35	24158-24159	)	_	_	
141-36	24159-24160	"	_	_	
141-37	24160-24161	)	_	_	
141-38	24161-24162	,	_	_	
141-39	24163-24165	or	_	_	
141-40	24166-24169	for	_	_	
141-41	24170-24179	selecting	_	_	
141-42	24180-24181	a	_	_	
141-43	24182-24192	particular	_	_	
141-44	24193-24206	model-to-code	_	_	
141-45	24207-24221	transformation	_	_	
141-46	24222-24223	(	_	_	
141-47	24223-24227	code	_	_	
141-48	24228-24237	generator	_	_	
141-49	24237-24238	,	_	_	
141-50	24239-24243	also	_	_	
141-51	24244-24249	known	_	_	
141-52	24250-24252	as	_	_	
141-53	24253-24254	"	_	_	
141-54	24254-24262	compiler	_	_	
141-55	24262-24263	"	_	_	
141-56	24263-24264	)	_	_	
141-57	24265-24267	in	_	_	
141-58	24268-24275	Section	_	_	
141-59	24276-24277	4	_	_	
141-60	24278-24279	(	_	_	
141-61	24279-24280	"	_	_	
141-62	24280-24293	Configuration	_	_	
141-63	24293-24294	"	_	_	
141-64	24294-24295	)	_	_	
141-65	24295-24296	.	_	_	
141-66	24300-24301	#	_	_	
141-67	24301-24302	#	_	_	
141-68	24302-24303	#	_	_	
141-69	24303-24304	#	_	_	
141-70	24305-24312	Section	_	_	
141-71	24313-24314	3	_	_	
141-72	24314-24315	.	_	_	

#Text=Things\r
#Text=Things are somehow analogues to the "Classes" in the Object-Oriented Programming (OOP) paradigm.\r
#Text=\r
#Text=#####  For each thing, say Thing_A:\r
#Text=###### Subsection 3.1: Messages, Ports and Properties\r
#Text=The keywords of this subsection of the model instance are highlighted in **orange** in the textual model editor of ML2.
142-1	24316-24322	Things	_	_	
142-2	24324-24330	Things	_	_	
142-3	24331-24334	are	_	_	
142-4	24335-24342	somehow	_	_	
142-5	24343-24352	analogues	_	_	
142-6	24353-24355	to	_	_	
142-7	24356-24359	the	_	_	
142-8	24360-24361	"	_	_	
142-9	24361-24368	Classes	_	_	
142-10	24368-24369	"	_	_	
142-11	24370-24372	in	_	_	
142-12	24373-24376	the	_	_	
142-13	24377-24392	Object-Oriented	_	_	
142-14	24393-24404	Programming	_	_	
142-15	24405-24406	(	_	_	
142-16	24406-24409	OOP	_	_	
142-17	24409-24410	)	_	_	
142-18	24411-24419	paradigm	_	_	
142-19	24419-24420	.	_	_	
142-20	24424-24425	#	_	_	
142-21	24425-24426	#	_	_	
142-22	24426-24427	#	_	_	
142-23	24427-24428	#	_	_	
142-24	24428-24429	#	_	_	
142-25	24431-24434	For	_	_	
142-26	24435-24439	each	_	_	
142-27	24440-24445	thing	_	_	
142-28	24445-24446	,	_	_	
142-29	24447-24450	say	_	_	
142-30	24451-24458	Thing_A	_	_	
142-31	24458-24459	:	_	_	
142-32	24461-24462	#	_	_	
142-33	24462-24463	#	_	_	
142-34	24463-24464	#	_	_	
142-35	24464-24465	#	_	_	
142-36	24465-24466	#	_	_	
142-37	24466-24467	#	_	_	
142-38	24468-24478	Subsection	_	_	
142-39	24479-24482	3.1	_	_	
142-40	24482-24483	:	_	_	
142-41	24484-24492	Messages	_	_	
142-42	24492-24493	,	_	_	
142-43	24494-24499	Ports	_	_	
142-44	24500-24503	and	_	_	
142-45	24504-24514	Properties	_	_	
142-46	24516-24519	The	_	_	
142-47	24520-24528	keywords	_	_	
142-48	24529-24531	of	_	_	
142-49	24532-24536	this	_	_	
142-50	24537-24547	subsection	_	_	
142-51	24548-24550	of	_	_	
142-52	24551-24554	the	_	_	
142-53	24555-24560	model	_	_	
142-54	24561-24569	instance	_	_	
142-55	24570-24573	are	_	_	
142-56	24574-24585	highlighted	_	_	
142-57	24586-24588	in	_	_	
142-58	24589-24590	*	_	_	
142-59	24590-24591	*	_	_	
142-60	24591-24597	orange	_	_	
142-61	24597-24598	*	_	_	
142-62	24598-24599	*	_	_	
142-63	24600-24602	in	_	_	
142-64	24603-24606	the	_	_	
142-65	24607-24614	textual	_	_	
142-66	24615-24620	model	_	_	
142-67	24621-24627	editor	_	_	
142-68	24628-24630	of	_	_	
142-69	24631-24634	ML2	*	SOFTWARE	
142-70	24634-24635	.	_	_	

#Text=Following the semantics of [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project), the communication between the "things" in ML2 is carried out through asynchronous message-passing.
143-1	24636-24645	Following	_	_	
143-2	24646-24649	the	_	_	
143-3	24650-24659	semantics	_	_	
143-4	24660-24662	of	_	_	
143-5	24663-24664	[	_	_	
143-6	24664-24671	ThingML	*	PROJECT	
143-7	24671-24672	]	_	_	
143-8	24672-24673	(	_	_	
143-9	24673-24678	https	_	_	
143-10	24678-24679	:	_	_	
143-11	24679-24680	/	_	_	
143-12	24680-24681	/	_	_	
143-13	24681-24691	github.com	_	_	
143-14	24691-24692	/	_	_	
143-15	24692-24700	TelluIoT	_	_	
143-16	24700-24701	/	_	_	
143-17	24701-24708	ThingML	*	PROJECT	
143-18	24708-24709	)	_	_	
143-19	24710-24711	/	_	_	
143-20	24712-24713	[	_	_	
143-21	24713-24718	HEADS	*	PROJECT	
143-22	24718-24719	]	_	_	
143-23	24719-24720	(	_	_	
143-24	24720-24725	https	_	_	
143-25	24725-24726	:	_	_	
143-26	24726-24727	/	_	_	
143-27	24727-24728	/	_	_	
143-28	24728-24738	github.com	_	_	
143-29	24738-24739	/	_	_	
143-30	24739-24752	HEADS-project	_	_	
143-30.1	24739-24744	HEADS	*	PROJECT	
143-31	24752-24753	)	_	_	
143-32	24753-24754	,	_	_	
143-33	24755-24758	the	_	_	
143-34	24759-24772	communication	_	_	
143-35	24773-24780	between	_	_	
143-36	24781-24784	the	_	_	
143-37	24785-24786	"	_	_	
143-38	24786-24792	things	_	_	
143-39	24792-24793	"	_	_	
143-40	24794-24796	in	_	_	
143-41	24797-24800	ML2	*	PROJECT	
143-42	24801-24803	is	_	_	
143-43	24804-24811	carried	_	_	
143-44	24812-24815	out	_	_	
143-45	24816-24823	through	_	_	
143-46	24824-24836	asynchronous	_	_	
143-47	24837-24852	message-passing	_	_	
143-48	24852-24853	.	_	_	

#Text=A **message** must be sent from a **port** of the source thing to a **port** of the destination thing.
144-1	24854-24855	A	_	_	
144-2	24856-24857	*	_	_	
144-3	24857-24858	*	_	_	
144-4	24858-24865	message	_	_	
144-5	24865-24866	*	_	_	
144-6	24866-24867	*	_	_	
144-7	24868-24872	must	_	_	
144-8	24873-24875	be	_	_	
144-9	24876-24880	sent	_	_	
144-10	24881-24885	from	_	_	
144-11	24886-24887	a	_	_	
144-12	24888-24889	*	_	_	
144-13	24889-24890	*	_	_	
144-14	24890-24894	port	_	_	
144-15	24894-24895	*	_	_	
144-16	24895-24896	*	_	_	
144-17	24897-24899	of	_	_	
144-18	24900-24903	the	_	_	
144-19	24904-24910	source	_	_	
144-20	24911-24916	thing	_	_	
144-21	24917-24919	to	_	_	
144-22	24920-24921	a	_	_	
144-23	24922-24923	*	_	_	
144-24	24923-24924	*	_	_	
144-25	24924-24928	port	_	_	
144-26	24928-24929	*	_	_	
144-27	24929-24930	*	_	_	
144-28	24931-24933	of	_	_	
144-29	24934-24937	the	_	_	
144-30	24938-24949	destination	_	_	
144-31	24950-24955	thing	_	_	
144-32	24955-24956	.	_	_	

#Text=Moreover, each message may have zero or more **parameters**.
145-1	24957-24965	Moreover	_	_	
145-2	24965-24966	,	_	_	
145-3	24967-24971	each	_	_	
145-4	24972-24979	message	_	_	
145-5	24980-24983	may	_	_	
145-6	24984-24988	have	_	_	
145-7	24989-24993	zero	_	_	
145-8	24994-24996	or	_	_	
145-9	24997-25001	more	_	_	
145-10	25002-25003	*	_	_	
145-11	25003-25004	*	_	_	
145-12	25004-25014	parameters	_	_	
145-13	25014-25015	*	_	_	
145-14	25015-25016	*	_	_	
145-15	25016-25017	.	_	_	

#Text=Further, each thing can have local variables, called **properties**.\r
#Text=\r
#Text=###### Subsection 3.2: Data Analytics (and Machine Learning)\r
#Text=This is the main innovation of ML2 compared to [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project).
146-1	25018-25025	Further	_	_	
146-2	25025-25026	,	_	_	
146-3	25027-25031	each	_	_	
146-4	25032-25037	thing	_	_	
146-5	25038-25041	can	_	_	
146-6	25042-25046	have	_	_	
146-7	25047-25052	local	_	_	
146-8	25053-25062	variables	_	_	
146-9	25062-25063	,	_	_	
146-10	25064-25070	called	_	_	
146-11	25071-25072	*	_	_	
146-12	25072-25073	*	_	_	
146-13	25073-25083	properties	_	_	
146-14	25083-25084	*	_	_	
146-15	25084-25085	*	_	_	
146-16	25085-25086	.	_	_	
146-17	25090-25091	#	_	_	
146-18	25091-25092	#	_	_	
146-19	25092-25093	#	_	_	
146-20	25093-25094	#	_	_	
146-21	25094-25095	#	_	_	
146-22	25095-25096	#	_	_	
146-23	25097-25107	Subsection	_	_	
146-24	25108-25111	3.2	_	_	
146-25	25111-25112	:	_	_	
146-26	25113-25117	Data	_	_	
146-27	25118-25127	Analytics	_	_	
146-28	25128-25129	(	_	_	
146-29	25129-25132	and	_	_	
146-30	25133-25140	Machine	_	_	
146-31	25141-25149	Learning	_	_	
146-32	25149-25150	)	_	_	
146-33	25152-25156	This	_	_	
146-34	25157-25159	is	_	_	
146-35	25160-25163	the	_	_	
146-36	25164-25168	main	_	_	
146-37	25169-25179	innovation	_	_	
146-38	25180-25182	of	_	_	
146-39	25183-25186	ML2	*	SOFTWARE	
146-40	25187-25195	compared	_	_	
146-41	25196-25198	to	_	_	
146-42	25199-25200	[	_	_	
146-43	25200-25207	ThingML	*	PROJECT	
146-44	25207-25208	]	_	_	
146-45	25208-25209	(	_	_	
146-46	25209-25214	https	_	_	
146-47	25214-25215	:	_	_	
146-48	25215-25216	/	_	_	
146-49	25216-25217	/	_	_	
146-50	25217-25227	github.com	_	_	
146-51	25227-25228	/	_	_	
146-52	25228-25236	TelluIoT	_	_	
146-53	25236-25237	/	_	_	
146-54	25237-25244	ThingML	*	PROJECT	
146-55	25244-25245	)	_	_	
146-56	25246-25247	/	_	_	
146-57	25248-25249	[	_	_	
146-58	25249-25254	HEADS	*	PROJECT	
146-59	25254-25255	]	_	_	
146-60	25255-25256	(	_	_	
146-61	25256-25261	https	_	_	
146-62	25261-25262	:	_	_	
146-63	25262-25263	/	_	_	
146-64	25263-25264	/	_	_	
146-65	25264-25274	github.com	_	_	
146-66	25274-25275	/	_	_	
146-67	25275-25288	HEADS-project	_	_	
146-67.1	25275-25280	HEADS	*	PROJECT	
146-68	25288-25289	)	_	_	
146-69	25289-25290	.	_	_	

#Text=It is this subsection that enables DAML at the modeling layer.
147-1	25291-25293	It	_	_	
147-2	25294-25296	is	_	_	
147-3	25297-25301	this	_	_	
147-4	25302-25312	subsection	_	_	
147-5	25313-25317	that	_	_	
147-6	25318-25325	enables	_	_	
147-7	25326-25330	DAML	_	_	
147-8	25331-25333	at	_	_	
147-9	25334-25337	the	_	_	
147-10	25338-25346	modeling	_	_	
147-11	25347-25352	layer	_	_	
147-12	25352-25353	.	_	_	

#Text=However, this subsection is optional.
148-1	25354-25361	However	_	_	
148-2	25361-25362	,	_	_	
148-3	25363-25367	this	_	_	
148-4	25368-25378	subsection	_	_	
148-5	25379-25381	is	_	_	
148-6	25382-25390	optional	_	_	
148-7	25390-25391	.	_	_	

#Text=In other words, only those things that are supposed to possess DAML capabilities should have this subsection.
149-1	25392-25394	In	_	_	
149-2	25395-25400	other	_	_	
149-3	25401-25406	words	_	_	
149-4	25406-25407	,	_	_	
149-5	25408-25412	only	_	_	
149-6	25413-25418	those	_	_	
149-7	25419-25425	things	_	_	
149-8	25426-25430	that	_	_	
149-9	25431-25434	are	_	_	
149-10	25435-25443	supposed	_	_	
149-11	25444-25446	to	_	_	
149-12	25447-25454	possess	_	_	
149-13	25455-25459	DAML	_	_	
149-14	25460-25472	capabilities	_	_	
149-15	25473-25479	should	_	_	
149-16	25480-25484	have	_	_	
149-17	25485-25489	this	_	_	
149-18	25490-25500	subsection	_	_	
149-19	25500-25501	.	_	_	

#Text=Note that a software model instance may contain several things.
150-1	25502-25506	Note	_	_	
150-2	25507-25511	that	_	_	
150-3	25512-25513	a	_	_	
150-4	25514-25522	software	_	_	
150-5	25523-25528	model	_	_	
150-6	25529-25537	instance	_	_	
150-7	25538-25541	may	_	_	
150-8	25542-25549	contain	_	_	
150-9	25550-25557	several	_	_	
150-10	25558-25564	things	_	_	
150-11	25564-25565	.	_	_	

#Text=In fact, very often this is the case, since containing only one thing is trivial and no interaction can occur.
151-1	25566-25568	In	_	_	
151-2	25569-25573	fact	_	_	
151-3	25573-25574	,	_	_	
151-4	25575-25579	very	_	_	
151-5	25580-25585	often	_	_	
151-6	25586-25590	this	_	_	
151-7	25591-25593	is	_	_	
151-8	25594-25597	the	_	_	
151-9	25598-25602	case	_	_	
151-10	25602-25603	,	_	_	
151-11	25604-25609	since	_	_	
151-12	25610-25620	containing	_	_	
151-13	25621-25625	only	_	_	
151-14	25626-25629	one	_	_	
151-15	25630-25635	thing	_	_	
151-16	25636-25638	is	_	_	
151-17	25639-25646	trivial	_	_	
151-18	25647-25650	and	_	_	
151-19	25651-25653	no	_	_	
151-20	25654-25665	interaction	_	_	
151-21	25666-25669	can	_	_	
151-22	25670-25675	occur	_	_	
151-23	25675-25676	.	_	_	

#Text=However, usually only one or some of the things exhibit DAML capabilities, not all of them.
152-1	25677-25684	However	_	_	
152-2	25684-25685	,	_	_	
152-3	25686-25693	usually	_	_	
152-4	25694-25698	only	_	_	
152-5	25699-25702	one	_	_	
152-6	25703-25705	or	_	_	
152-7	25706-25710	some	_	_	
152-8	25711-25713	of	_	_	
152-9	25714-25717	the	_	_	
152-10	25718-25724	things	_	_	
152-11	25725-25732	exhibit	_	_	
152-12	25733-25737	DAML	_	_	
152-13	25738-25750	capabilities	_	_	
152-14	25750-25751	,	_	_	
152-15	25752-25755	not	_	_	
152-16	25756-25759	all	_	_	
152-17	25760-25762	of	_	_	
152-18	25763-25767	them	_	_	
152-19	25767-25768	.	_	_	

#Text=The keywords of this subsection of the model instance are highlighted in **blue** in the textual model editor of ML2.
153-1	25772-25775	The	_	_	
153-2	25776-25784	keywords	_	_	
153-3	25785-25787	of	_	_	
153-4	25788-25792	this	_	_	
153-5	25793-25803	subsection	_	_	
153-6	25804-25806	of	_	_	
153-7	25807-25810	the	_	_	
153-8	25811-25816	model	_	_	
153-9	25817-25825	instance	_	_	
153-10	25826-25829	are	_	_	
153-11	25830-25841	highlighted	_	_	
153-12	25842-25844	in	_	_	
153-13	25845-25846	*	_	_	
153-14	25846-25847	*	_	_	
153-15	25847-25851	blue	_	_	
153-16	25851-25852	*	_	_	
153-17	25852-25853	*	_	_	
153-18	25854-25856	in	_	_	
153-19	25857-25860	the	_	_	
153-20	25861-25868	textual	_	_	
153-21	25869-25874	model	_	_	
153-22	25875-25881	editor	_	_	
153-23	25882-25884	of	_	_	
153-24	25885-25888	ML2	*	SOFTWARE	
153-25	25888-25889	.	_	_	

#Text=Since there is obviously no documentation for this subsection elsewehre, which is reasonable due to its innovative nature, we elaborate on the concepts, syntax and semantics of this subsection in more detail in what follows.
154-1	25890-25895	Since	_	_	
154-2	25896-25901	there	_	_	
154-3	25902-25904	is	_	_	
154-4	25905-25914	obviously	_	_	
154-5	25915-25917	no	_	_	
154-6	25918-25931	documentation	_	_	
154-7	25932-25935	for	_	_	
154-8	25936-25940	this	_	_	
154-9	25941-25951	subsection	_	_	
154-10	25952-25961	elsewehre	_	_	
154-11	25961-25962	,	_	_	
154-12	25963-25968	which	_	_	
154-13	25969-25971	is	_	_	
154-14	25972-25982	reasonable	_	_	
154-15	25983-25986	due	_	_	
154-16	25987-25989	to	_	_	
154-17	25990-25993	its	_	_	
154-18	25994-26004	innovative	_	_	
154-19	26005-26011	nature	_	_	
154-20	26011-26012	,	_	_	
154-21	26013-26015	we	_	_	
154-22	26016-26025	elaborate	_	_	
154-23	26026-26028	on	_	_	
154-24	26029-26032	the	_	_	
154-25	26033-26041	concepts	_	_	
154-26	26041-26042	,	_	_	
154-27	26043-26049	syntax	_	_	
154-28	26050-26053	and	_	_	
154-29	26054-26063	semantics	_	_	
154-30	26064-26066	of	_	_	
154-31	26067-26071	this	_	_	
154-32	26072-26082	subsection	_	_	
154-33	26083-26085	in	_	_	
154-34	26086-26090	more	_	_	
154-35	26091-26097	detail	_	_	
154-36	26098-26100	in	_	_	
154-37	26101-26105	what	_	_	
154-38	26106-26113	follows	_	_	
154-39	26113-26114	.	_	_	

#Text=Let us consider two of the provided sample model instances [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml) and [ML2_Demo_PingPong_Blackbox.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong_Blackbox.thingml).
155-1	26118-26121	Let	_	_	
155-2	26122-26124	us	_	_	
155-3	26125-26133	consider	_	_	
155-4	26134-26137	two	_	_	
155-5	26138-26140	of	_	_	
155-6	26141-26144	the	_	_	
155-7	26145-26153	provided	_	_	
155-8	26154-26160	sample	_	_	
155-9	26161-26166	model	_	_	
155-10	26167-26176	instances	_	_	
155-11	26177-26178	[	_	_	
155-12	26178-26181	ML2	_	_	
155-13	26181-26182	_	_	_	
155-14	26182-26203	Demo_PingPong.thingml	_	_	
155-15	26203-26204	]	_	_	
155-16	26204-26205	(	_	_	
155-17	26205-26210	https	_	_	
155-18	26210-26211	:	_	_	
155-19	26211-26212	/	_	_	
155-20	26212-26213	/	_	_	
155-21	26213-26223	github.com	_	_	
155-22	26223-26224	/	_	_	
155-23	26224-26233	arminmoin	_	_	
155-24	26233-26234	/	_	_	
155-25	26234-26244	ML-Quadrat	_	_	
155-26	26244-26245	/	_	_	
155-27	26245-26249	blob	_	_	
155-28	26249-26250	/	_	_	
155-29	26250-26256	master	_	_	
155-30	26256-26257	/	_	_	
155-31	26257-26260	ML2	*	SOFTWARE	
155-32	26260-26261	/	_	_	
155-33	26261-26280	org.thingml.samples	_	_	
155-34	26280-26281	/	_	_	
155-35	26281-26284	src	_	_	
155-36	26284-26285	/	_	_	
155-37	26285-26289	main	_	_	
155-38	26289-26290	/	_	_	
155-39	26290-26297	thingml	_	_	
155-40	26297-26298	/	_	_	
155-41	26298-26301	ML2	_	_	
155-42	26301-26302	_	_	_	
155-43	26302-26323	Demo_PingPong.thingml	_	_	
155-44	26323-26324	)	_	_	
155-45	26325-26328	and	_	_	
155-46	26329-26330	[	_	_	
155-47	26330-26333	ML2	_	_	
155-48	26333-26334	_	_	_	
155-49	26334-26364	Demo_PingPong_Blackbox.thingml	_	_	
155-50	26364-26365	]	_	_	
155-51	26365-26366	(	_	_	
155-52	26366-26371	https	_	_	
155-53	26371-26372	:	_	_	
155-54	26372-26373	/	_	_	
155-55	26373-26374	/	_	_	
155-56	26374-26384	github.com	_	_	
155-57	26384-26385	/	_	_	
155-58	26385-26394	arminmoin	_	_	
155-59	26394-26395	/	_	_	
155-60	26395-26405	ML-Quadrat	_	_	
155-61	26405-26406	/	_	_	
155-62	26406-26410	blob	_	_	
155-63	26410-26411	/	_	_	
155-64	26411-26417	master	_	_	
155-65	26417-26418	/	_	_	
155-66	26418-26421	ML2	*	SOFTWARE	
155-67	26421-26422	/	_	_	
155-68	26422-26441	org.thingml.samples	_	_	
155-69	26441-26442	/	_	_	
155-70	26442-26445	src	_	_	
155-71	26445-26446	/	_	_	
155-72	26446-26450	main	_	_	
155-73	26450-26451	/	_	_	
155-74	26451-26458	thingml	_	_	
155-75	26458-26459	/	_	_	
155-76	26459-26462	ML2	_	_	
155-77	26462-26463	_	_	_	
155-78	26463-26493	Demo_PingPong_Blackbox.thingml	_	_	
155-79	26493-26494	)	_	_	
155-80	26494-26495	.	_	_	

#Text=The former corresponds to the pure (full) MDSE mode, whereas the latter corresponds to the **blackbox-ML mode or the hybrid/mixed MDSE/Non-MDSE mode**, where the practitioner (i.e., the user of the tool) may bring any arbitrary **pre-trained** ML model and "connect" or "plug" it into the software model.
156-1	26496-26499	The	_	_	
156-2	26500-26506	former	_	_	
156-3	26507-26518	corresponds	_	_	
156-4	26519-26521	to	_	_	
156-5	26522-26525	the	_	_	
156-6	26526-26530	pure	_	_	
156-7	26531-26532	(	_	_	
156-8	26532-26536	full	_	_	
156-9	26536-26537	)	_	_	
156-10	26538-26542	MDSE	_	_	
156-11	26543-26547	mode	_	_	
156-12	26547-26548	,	_	_	
156-13	26549-26556	whereas	_	_	
156-14	26557-26560	the	_	_	
156-15	26561-26567	latter	_	_	
156-16	26568-26579	corresponds	_	_	
156-17	26580-26582	to	_	_	
156-18	26583-26586	the	_	_	
156-19	26587-26588	*	_	_	
156-20	26588-26589	*	_	_	
156-21	26589-26600	blackbox-ML	_	_	
156-22	26601-26605	mode	_	_	
156-23	26606-26608	or	_	_	
156-24	26609-26612	the	_	_	
156-25	26613-26619	hybrid	_	_	
156-26	26619-26620	/	_	_	
156-27	26620-26625	mixed	_	_	
156-28	26626-26630	MDSE	_	_	
156-29	26630-26631	/	_	_	
156-30	26631-26639	Non-MDSE	_	_	
156-31	26640-26644	mode	_	_	
156-32	26644-26645	*	_	_	
156-33	26645-26646	*	_	_	
156-34	26646-26647	,	_	_	
156-35	26648-26653	where	_	_	
156-36	26654-26657	the	_	_	
156-37	26658-26670	practitioner	_	_	
156-38	26671-26672	(	_	_	
156-39	26672-26675	i.e	_	_	
156-40	26675-26676	.	_	_	
156-41	26676-26677	,	_	_	
156-42	26678-26681	the	_	_	
156-43	26682-26686	user	_	_	
156-44	26687-26689	of	_	_	
156-45	26690-26693	the	_	_	
156-46	26694-26698	tool	_	_	
156-47	26698-26699	)	_	_	
156-48	26700-26703	may	_	_	
156-49	26704-26709	bring	_	_	
156-50	26710-26713	any	_	_	
156-51	26714-26723	arbitrary	_	_	
156-52	26724-26725	*	_	_	
156-53	26725-26726	*	_	_	
156-54	26726-26737	pre-trained	_	_	
156-55	26737-26738	*	_	_	
156-56	26738-26739	*	_	_	
156-57	26740-26742	ML	_	_	
156-58	26743-26748	model	_	_	
156-59	26749-26752	and	_	_	
156-60	26753-26754	"	_	_	
156-61	26754-26761	connect	_	_	
156-62	26761-26762	"	_	_	
156-63	26763-26765	or	_	_	
156-64	26766-26767	"	_	_	
156-65	26767-26771	plug	_	_	
156-66	26771-26772	"	_	_	
156-67	26773-26775	it	_	_	
156-68	26776-26780	into	_	_	
156-69	26781-26784	the	_	_	
156-70	26785-26793	software	_	_	
156-71	26794-26799	model	_	_	
156-72	26799-26800	.	_	_	

#Text=This is the data_analytics subsection of thing PingPongDataAnalytics in the former sample (namely ML2_Demo_PingPong.thingml):\r
#Text=\r
#Text=```\r
#Text=\tdata_analytics da1 \r
#Text=\t@dalib "scikit-learn" {\r
#Text=\t//@dalib "keras-tensorflow" {\r
#Text=\t//{\r
#Text=\t\tlabels ON\r
#Text=\t\tfeatures client_ip_address,client_code,prediction\r
#Text=\t\tprediction_results prediction\r
#Text=\t\tdataset "data/ip_dataset.csv"\r
#Text=\t\tautoml OFF\r
#Text=\t\tsequential TRUE\r
#Text=\t\ttimestamps OFF\t\r
#Text=\t\tpreprocess_feature_scaler StandardScaler\r
#Text=\t\tmodel_algorithm nn_multilayer_perceptron my_nn_mlp(activation relu, optimizer adam, loss SparseCategoricalCrossentropy)\r
#Text=\t\ttraining_results "data/training.txt"\t\t\r
#Text=\t}\r
#Text=```\r
#Text=\r
#Text=In addition, this is the data_analytics subsection of thing PingPongDataAnalytics in the latter case (namely ML2_Demo_PingPong_Blackbox.thingml):\r
#Text=\r
#Text=```\r
#Text=\tdata_analytics da1 \r
#Text=\t@dalib "scikit-learn" {\r
#Text=\t\tlabels ON\r
#Text=\t\tfeatures client_ip_address,client_code,prediction\r
#Text=\t\tprediction_results prediction\r
#Text=\t\tblackbox_ml true\t\r
#Text=\t\tblackbox_ml_model "pre_trained/pre_trained_ml_model.pickle"\r
#Text=\t\tblackbox_import_algorithm "from sklearn.neural_network import MLPClassifier"\r
#Text=\t\t//blackbox_label_encoder "pre_trained/pre_trained_label_encoder.pickle"\r
#Text=\t}\r
#Text=```\r
#Text=\r
#Text=Below, we explain them line-by-line:\r
#Text=\r
#Text=(i) **data_analytics:** The **data_analytics** keyword must be followed by the name of this data_analytics component/block/workflow/pipeline since each thing may possess even more than one component/block/workflow/pipeline.
157-1	26804-26808	This	_	_	
157-2	26809-26811	is	_	_	
157-3	26812-26815	the	_	_	
157-4	26816-26830	data_analytics	_	_	
157-5	26831-26841	subsection	_	_	
157-6	26842-26844	of	_	_	
157-7	26845-26850	thing	_	_	
157-8	26851-26872	PingPongDataAnalytics	_	_	
157-9	26873-26875	in	_	_	
157-10	26876-26879	the	_	_	
157-11	26880-26886	former	_	_	
157-12	26887-26893	sample	_	_	
157-13	26894-26895	(	_	_	
157-14	26895-26901	namely	_	_	
157-15	26902-26905	ML2	_	_	
157-16	26905-26906	_	_	_	
157-17	26906-26927	Demo_PingPong.thingml	_	_	
157-18	26927-26928	)	_	_	
157-19	26928-26929	:	_	_	
157-20	26933-26934	`	_	_	
157-21	26934-26935	`	_	_	
157-22	26935-26936	`	_	_	
157-23	26939-26953	data_analytics	_	_	
157-24	26954-26957	da1	_	_	
157-25	26961-26962	@	_	_	
157-26	26962-26967	dalib	_	_	
157-27	26968-26969	"	_	_	
157-28	26969-26981	scikit-learn	*	SOFTWARE	
157-29	26981-26982	"	_	_	
157-30	26983-26984	{	_	_	
157-31	26987-26988	/	_	_	
157-32	26988-26989	/	_	_	
157-33	26989-26990	@	_	_	
157-34	26990-26995	dalib	_	_	
157-35	26996-26997	"	_	_	
157-36	26997-27013	keras-tensorflow	_	_	
157-36.1	26997-27002	keras	*	SOFTWARE	
157-36.2	27003-27013	tensorflow	*	SOFTWARE	
157-37	27013-27014	"	_	_	
157-38	27015-27016	{	_	_	
157-39	27019-27020	/	_	_	
157-40	27020-27021	/	_	_	
157-41	27021-27022	{	_	_	
157-42	27026-27032	labels	_	_	
157-43	27033-27035	ON	_	_	
157-44	27039-27047	features	_	_	
157-45	27048-27065	client_ip_address	_	_	
157-46	27065-27066	,	_	_	
157-47	27066-27077	client_code	_	_	
157-48	27077-27078	,	_	_	
157-49	27078-27088	prediction	_	_	
157-50	27092-27110	prediction_results	_	_	
157-51	27111-27121	prediction	_	_	
157-52	27125-27132	dataset	_	_	
157-53	27133-27134	"	_	_	
157-54	27134-27138	data	_	_	
157-55	27138-27139	/	_	_	
157-56	27139-27153	ip_dataset.csv	_	_	
157-57	27153-27154	"	_	_	
157-58	27158-27164	automl	_	_	
157-59	27165-27168	OFF	_	_	
157-60	27172-27182	sequential	_	_	
157-61	27183-27187	TRUE	_	_	
157-62	27191-27201	timestamps	_	_	
157-63	27202-27205	OFF	_	_	
157-64	27210-27235	preprocess_feature_scaler	_	_	
157-65	27236-27250	StandardScaler	_	_	
157-66	27254-27269	model_algorithm	_	_	
157-67	27270-27294	nn_multilayer_perceptron	_	_	
157-68	27295-27304	my_nn_mlp	_	_	
157-69	27304-27305	(	_	_	
157-70	27305-27315	activation	_	_	
157-71	27316-27320	relu	_	_	
157-72	27320-27321	,	_	_	
157-73	27322-27331	optimizer	_	_	
157-74	27332-27336	adam	_	_	
157-75	27336-27337	,	_	_	
157-76	27338-27342	loss	_	_	
157-77	27343-27372	SparseCategoricalCrossentropy	_	_	
157-78	27372-27373	)	_	_	
157-79	27377-27393	training_results	_	_	
157-80	27394-27395	"	_	_	
157-81	27395-27399	data	_	_	
157-82	27399-27400	/	_	_	
157-83	27400-27412	training.txt	_	_	
157-84	27412-27413	"	_	_	
157-85	27418-27419	}	_	_	
157-86	27421-27422	`	_	_	
157-87	27422-27423	`	_	_	
157-88	27423-27424	`	_	_	
157-89	27428-27430	In	_	_	
157-90	27431-27439	addition	_	_	
157-91	27439-27440	,	_	_	
157-92	27441-27445	this	_	_	
157-93	27446-27448	is	_	_	
157-94	27449-27452	the	_	_	
157-95	27453-27467	data_analytics	_	_	
157-96	27468-27478	subsection	_	_	
157-97	27479-27481	of	_	_	
157-98	27482-27487	thing	_	_	
157-99	27488-27509	PingPongDataAnalytics	_	_	
157-100	27510-27512	in	_	_	
157-101	27513-27516	the	_	_	
157-102	27517-27523	latter	_	_	
157-103	27524-27528	case	_	_	
157-104	27529-27530	(	_	_	
157-105	27530-27536	namely	_	_	
157-106	27537-27540	ML2	_	_	
157-107	27540-27541	_	_	_	
157-108	27541-27571	Demo_PingPong_Blackbox.thingml	_	_	
157-109	27571-27572	)	_	_	
157-110	27572-27573	:	_	_	
157-111	27577-27578	`	_	_	
157-112	27578-27579	`	_	_	
157-113	27579-27580	`	_	_	
157-114	27583-27597	data_analytics	_	_	
157-115	27598-27601	da1	_	_	
157-116	27605-27606	@	_	_	
157-117	27606-27611	dalib	_	_	
157-118	27612-27613	"	_	_	
157-119	27613-27625	scikit-learn	*	SOFTWARE	
157-120	27625-27626	"	_	_	
157-121	27627-27628	{	_	_	
157-122	27632-27638	labels	_	_	
157-123	27639-27641	ON	_	_	
157-124	27645-27653	features	_	_	
157-125	27654-27671	client_ip_address	_	_	
157-126	27671-27672	,	_	_	
157-127	27672-27683	client_code	_	_	
157-128	27683-27684	,	_	_	
157-129	27684-27694	prediction	_	_	
157-130	27698-27716	prediction_results	_	_	
157-131	27717-27727	prediction	_	_	
157-132	27731-27742	blackbox_ml	_	_	
157-133	27743-27747	true	_	_	
157-134	27752-27769	blackbox_ml_model	_	_	
157-135	27770-27771	"	_	_	
157-136	27771-27782	pre_trained	_	_	
157-137	27782-27783	/	_	_	
157-138	27783-27810	pre_trained_ml_model.pickle	_	_	
157-139	27810-27811	"	_	_	
157-140	27815-27840	blackbox_import_algorithm	_	_	
157-141	27841-27842	"	_	_	
157-142	27842-27846	from	_	_	
157-143	27847-27869	sklearn.neural_network	_	_	
157-144	27870-27876	import	_	_	
157-145	27877-27890	MLPClassifier	_	_	
157-146	27890-27891	"	_	_	
157-147	27895-27896	/	_	_	
157-148	27896-27897	/	_	_	
157-149	27897-27919	blackbox_label_encoder	_	_	
157-150	27920-27921	"	_	_	
157-151	27921-27932	pre_trained	_	_	
157-152	27932-27933	/	_	_	
157-153	27933-27965	pre_trained_label_encoder.pickle	_	_	
157-154	27965-27966	"	_	_	
157-155	27969-27970	}	_	_	
157-156	27972-27973	`	_	_	
157-157	27973-27974	`	_	_	
157-158	27974-27975	`	_	_	
157-159	27979-27984	Below	_	_	
157-160	27984-27985	,	_	_	
157-161	27986-27988	we	_	_	
157-162	27989-27996	explain	_	_	
157-163	27997-28001	them	_	_	
157-164	28002-28014	line-by-line	_	_	
157-165	28014-28015	:	_	_	
157-166	28019-28020	(	_	_	
157-167	28020-28021	i	_	_	
157-168	28021-28022	)	_	_	
157-169	28023-28024	*	_	_	
157-170	28024-28025	*	_	_	
157-171	28025-28039	data_analytics	_	_	
157-172	28039-28040	:	_	_	
157-173	28040-28041	*	_	_	
157-174	28041-28042	*	_	_	
157-175	28043-28046	The	_	_	
157-176	28047-28048	*	_	_	
157-177	28048-28049	*	_	_	
157-178	28049-28063	data_analytics	_	_	
157-179	28063-28064	*	_	_	
157-180	28064-28065	*	_	_	
157-181	28066-28073	keyword	_	_	
157-182	28074-28078	must	_	_	
157-183	28079-28081	be	_	_	
157-184	28082-28090	followed	_	_	
157-185	28091-28093	by	_	_	
157-186	28094-28097	the	_	_	
157-187	28098-28102	name	_	_	
157-188	28103-28105	of	_	_	
157-189	28106-28110	this	_	_	
157-190	28111-28125	data_analytics	_	_	
157-191	28126-28135	component	_	_	
157-192	28135-28136	/	_	_	
157-193	28136-28141	block	_	_	
157-194	28141-28142	/	_	_	
157-195	28142-28150	workflow	_	_	
157-196	28150-28151	/	_	_	
157-197	28151-28159	pipeline	_	_	
157-198	28160-28165	since	_	_	
157-199	28166-28170	each	_	_	
157-200	28171-28176	thing	_	_	
157-201	28177-28180	may	_	_	
157-202	28181-28188	possess	_	_	
157-203	28189-28193	even	_	_	
157-204	28194-28198	more	_	_	
157-205	28199-28203	than	_	_	
157-206	28204-28207	one	_	_	
157-207	28208-28217	component	_	_	
157-208	28217-28218	/	_	_	
157-209	28218-28223	block	_	_	
157-210	28223-28224	/	_	_	
157-211	28224-28232	workflow	_	_	
157-212	28232-28233	/	_	_	
157-213	28233-28241	pipeline	_	_	
157-214	28241-28242	.	_	_	

#Text=In this case, da1 is its name.
158-1	28243-28245	In	_	_	
158-2	28246-28250	this	_	_	
158-3	28251-28255	case	_	_	
158-4	28255-28256	,	_	_	
158-5	28257-28260	da1	_	_	
158-6	28261-28263	is	_	_	
158-7	28264-28267	its	_	_	
158-8	28268-28272	name	_	_	
158-9	28272-28273	.	_	_	

#Text=(ii) **@dalib:** The dalib annotation is optional.
159-1	28277-28278	(	_	_	
159-2	28278-28280	ii	_	_	
159-3	28280-28281	)	_	_	
159-4	28282-28283	*	_	_	
159-5	28283-28284	*	_	_	
159-6	28284-28285	@	_	_	
159-7	28285-28290	dalib	_	_	
159-8	28290-28291	:	_	_	
159-9	28291-28292	*	_	_	
159-10	28292-28293	*	_	_	
159-11	28294-28297	The	_	_	
159-12	28298-28303	dalib	_	_	
159-13	28304-28314	annotation	_	_	
159-14	28315-28317	is	_	_	
159-15	28318-28326	optional	_	_	
159-16	28326-28327	.	_	_	

#Text=It specifies the particular DAML library/framework that must be deployed for the code generation.
160-1	28328-28330	It	_	_	
160-2	28331-28340	specifies	_	_	
160-3	28341-28344	the	_	_	
160-4	28345-28355	particular	_	_	
160-5	28356-28360	DAML	_	_	
160-6	28361-28368	library	_	_	
160-7	28368-28369	/	_	_	
160-8	28369-28378	framework	_	_	
160-9	28379-28383	that	_	_	
160-10	28384-28388	must	_	_	
160-11	28389-28391	be	_	_	
160-12	28392-28400	deployed	_	_	
160-13	28401-28404	for	_	_	
160-14	28405-28408	the	_	_	
160-15	28409-28413	code	_	_	
160-16	28414-28424	generation	_	_	
160-17	28424-28425	.	_	_	

#Text=If it is not mentioned, or if it is set to auto (i.e., @dalib "auto"), then the MDSE tool will deploy its AutoML engine to find the best choice.
161-1	28426-28428	If	_	_	
161-2	28429-28431	it	_	_	
161-3	28432-28434	is	_	_	
161-4	28435-28438	not	_	_	
161-5	28439-28448	mentioned	_	_	
161-6	28448-28449	,	_	_	
161-7	28450-28452	or	_	_	
161-8	28453-28455	if	_	_	
161-9	28456-28458	it	_	_	
161-10	28459-28461	is	_	_	
161-11	28462-28465	set	_	_	
161-12	28466-28468	to	_	_	
161-13	28469-28473	auto	_	_	
161-14	28474-28475	(	_	_	
161-15	28475-28478	i.e	_	_	
161-16	28478-28479	.	_	_	
161-17	28479-28480	,	_	_	
161-18	28481-28482	@	_	_	
161-19	28482-28487	dalib	_	_	
161-20	28488-28489	"	_	_	
161-21	28489-28493	auto	_	_	
161-22	28493-28494	"	_	_	
161-23	28494-28495	)	_	_	
161-24	28495-28496	,	_	_	
161-25	28497-28501	then	_	_	
161-26	28502-28505	the	_	_	
161-27	28506-28510	MDSE	_	_	
161-28	28511-28515	tool	_	_	
161-29	28516-28520	will	_	_	
161-30	28521-28527	deploy	_	_	
161-31	28528-28531	its	_	_	
161-32	28532-28538	AutoML	_	_	
161-33	28539-28545	engine	_	_	
161-34	28546-28548	to	_	_	
161-35	28549-28553	find	_	_	
161-36	28554-28557	the	_	_	
161-37	28558-28562	best	_	_	
161-38	28563-28569	choice	_	_	
161-39	28569-28570	.	_	_	

#Text=In some cases the choice might be trivially limited to only one since not every DAML method/model/algorithm/technique is implemented in every DAML library/framework.
162-1	28571-28573	In	_	_	
162-2	28574-28578	some	_	_	
162-3	28579-28584	cases	_	_	
162-4	28585-28588	the	_	_	
162-5	28589-28595	choice	_	_	
162-6	28596-28601	might	_	_	
162-7	28602-28604	be	_	_	
162-8	28605-28614	trivially	_	_	
162-9	28615-28622	limited	_	_	
162-10	28623-28625	to	_	_	
162-11	28626-28630	only	_	_	
162-12	28631-28634	one	_	_	
162-13	28635-28640	since	_	_	
162-14	28641-28644	not	_	_	
162-15	28645-28650	every	_	_	
162-16	28651-28655	DAML	_	_	
162-17	28656-28662	method	_	_	
162-18	28662-28663	/	_	_	
162-19	28663-28668	model	_	_	
162-20	28668-28669	/	_	_	
162-21	28669-28678	algorithm	_	_	
162-22	28678-28679	/	_	_	
162-23	28679-28688	technique	_	_	
162-24	28689-28691	is	_	_	
162-25	28692-28703	implemented	_	_	
162-26	28704-28706	in	_	_	
162-27	28707-28712	every	_	_	
162-28	28713-28717	DAML	_	_	
162-29	28718-28725	library	_	_	
162-30	28725-28726	/	_	_	
162-31	28726-28735	framework	_	_	
162-32	28735-28736	.	_	_	

#Text=In the shown example, [the Scikit-Learn library](https://scikit-learn.org/stable/) has been chosen.
163-1	28737-28739	In	_	_	
163-2	28740-28743	the	_	_	
163-3	28744-28749	shown	_	_	
163-4	28750-28757	example	_	_	
163-5	28757-28758	,	_	_	
163-6	28759-28760	[	_	_	
163-7	28760-28763	the	_	_	
163-8	28764-28776	Scikit-Learn	*	SOFTWARE	
163-9	28777-28784	library	_	_	
163-10	28784-28785	]	_	_	
163-11	28785-28786	(	_	_	
163-12	28786-28791	https	_	_	
163-13	28791-28792	:	_	_	
163-14	28792-28793	/	_	_	
163-15	28793-28794	/	_	_	
163-16	28794-28810	scikit-learn.org	_	_	
163-16.1	28794-28806	scikit-learn	*	SOFTWARE	
163-17	28810-28811	/	_	_	
163-18	28811-28817	stable	_	_	
163-19	28817-28818	/	_	_	
163-20	28818-28819	)	_	_	
163-21	28820-28823	has	_	_	
163-22	28824-28828	been	_	_	
163-23	28829-28835	chosen	_	_	
163-24	28835-28836	.	_	_	

#Text=In any case, the APIs of the selected DAML library/framework will be used for the automated code generation.
164-1	28837-28839	In	_	_	
164-2	28840-28843	any	_	_	
164-3	28844-28848	case	_	_	
164-4	28848-28849	,	_	_	
164-5	28850-28853	the	_	_	
164-6	28854-28858	APIs	_	_	
164-7	28859-28861	of	_	_	
164-8	28862-28865	the	_	_	
164-9	28866-28874	selected	_	_	
164-10	28875-28879	DAML	_	_	
164-11	28880-28887	library	_	_	
164-12	28887-28888	/	_	_	
164-13	28888-28897	framework	_	_	
164-14	28898-28902	will	_	_	
164-15	28903-28905	be	_	_	
164-16	28906-28910	used	_	_	
164-17	28911-28914	for	_	_	
164-18	28915-28918	the	_	_	
164-19	28919-28928	automated	_	_	
164-20	28929-28933	code	_	_	
164-21	28934-28944	generation	_	_	
164-22	28944-28945	.	_	_	

#Text=However, the choice of the DAML library/framework must be compatible with the choice of the ML model/algorithm and the choice of the model-to-code transformation for the code generation.
165-1	28946-28953	However	_	_	
165-2	28953-28954	,	_	_	
165-3	28955-28958	the	_	_	
165-4	28959-28965	choice	_	_	
165-5	28966-28968	of	_	_	
165-6	28969-28972	the	_	_	
165-7	28973-28977	DAML	_	_	
165-8	28978-28985	library	_	_	
165-9	28985-28986	/	_	_	
165-10	28986-28995	framework	_	_	
165-11	28996-29000	must	_	_	
165-12	29001-29003	be	_	_	
165-13	29004-29014	compatible	_	_	
165-14	29015-29019	with	_	_	
165-15	29020-29023	the	_	_	
165-16	29024-29030	choice	_	_	
165-17	29031-29033	of	_	_	
165-18	29034-29037	the	_	_	
165-19	29038-29040	ML	_	_	
165-20	29041-29046	model	_	_	
165-21	29046-29047	/	_	_	
165-22	29047-29056	algorithm	_	_	
165-23	29057-29060	and	_	_	
165-24	29061-29064	the	_	_	
165-25	29065-29071	choice	_	_	
165-26	29072-29074	of	_	_	
165-27	29075-29078	the	_	_	
165-28	29079-29092	model-to-code	_	_	
165-29	29093-29107	transformation	_	_	
165-30	29108-29111	for	_	_	
165-31	29112-29115	the	_	_	
165-32	29116-29120	code	_	_	
165-33	29121-29131	generation	_	_	
165-34	29131-29132	.	_	_	

#Text=If you are uncertain, it would be often better to not specify any particular DAML library/framework, thus relying on the default option.
166-1	29133-29135	If	_	_	
166-2	29136-29139	you	_	_	
166-3	29140-29143	are	_	_	
166-4	29144-29153	uncertain	_	_	
166-5	29153-29154	,	_	_	
166-6	29155-29157	it	_	_	
166-7	29158-29163	would	_	_	
166-8	29164-29166	be	_	_	
166-9	29167-29172	often	_	_	
166-10	29173-29179	better	_	_	
166-11	29180-29182	to	_	_	
166-12	29183-29186	not	_	_	
166-13	29187-29194	specify	_	_	
166-14	29195-29198	any	_	_	
166-15	29199-29209	particular	_	_	
166-16	29210-29214	DAML	_	_	
166-17	29215-29222	library	_	_	
166-18	29222-29223	/	_	_	
166-19	29223-29232	framework	_	_	
166-20	29232-29233	,	_	_	
166-21	29234-29238	thus	_	_	
166-22	29239-29246	relying	_	_	
166-23	29247-29249	on	_	_	
166-24	29250-29253	the	_	_	
166-25	29254-29261	default	_	_	
166-26	29262-29268	option	_	_	
166-27	29268-29269	.	_	_	

#Text=**Note:** Currently, the @dalib annotation supports the following choices for the DAML library/framework out-of-the-box: ["scikit-learn" for the Scikit-Learn (Sklearn) library/framework]((https://scikit-learn.org/stable/)) and ["keras-tensorflow" for the Kears library/framework with the TensorFlow Backend](https://keras.io).
167-1	29271-29272	*	_	_	
167-2	29272-29273	*	_	_	
167-3	29273-29277	Note	_	_	
167-4	29277-29278	:	_	_	
167-5	29278-29279	*	_	_	
167-6	29279-29280	*	_	_	
167-7	29281-29290	Currently	_	_	
167-8	29290-29291	,	_	_	
167-9	29292-29295	the	_	_	
167-10	29296-29297	@	_	_	
167-11	29297-29302	dalib	_	_	
167-12	29303-29313	annotation	_	_	
167-13	29314-29322	supports	_	_	
167-14	29323-29326	the	_	_	
167-15	29327-29336	following	_	_	
167-16	29337-29344	choices	_	_	
167-17	29345-29348	for	_	_	
167-18	29349-29352	the	_	_	
167-19	29353-29357	DAML	_	_	
167-20	29358-29365	library	_	_	
167-21	29365-29366	/	_	_	
167-22	29366-29375	framework	_	_	
167-23	29376-29390	out-of-the-box	_	_	
167-24	29390-29391	:	_	_	
167-25	29392-29393	[	_	_	
167-26	29393-29394	"	_	_	
167-27	29394-29406	scikit-learn	_	_	
167-28	29406-29407	"	_	_	
167-29	29408-29411	for	_	_	
167-30	29412-29415	the	_	_	
167-31	29416-29428	Scikit-Learn	*	SOFTWARE	
167-32	29429-29430	(	_	_	
167-33	29430-29437	Sklearn	_	_	
167-34	29437-29438	)	_	_	
167-35	29439-29446	library	_	_	
167-36	29446-29447	/	_	_	
167-37	29447-29456	framework	_	_	
167-38	29456-29457	]	_	_	
167-39	29457-29458	(	_	_	
167-40	29458-29459	(	_	_	
167-41	29459-29464	https	_	_	
167-42	29464-29465	:	_	_	
167-43	29465-29466	/	_	_	
167-44	29466-29467	/	_	_	
167-45	29467-29483	scikit-learn.org	_	_	
167-45.1	29467-29479	scikit-learn	*	SOFTWARE	
167-46	29483-29484	/	_	_	
167-47	29484-29490	stable	_	_	
167-48	29490-29491	/	_	_	
167-49	29491-29492	)	_	_	
167-50	29492-29493	)	_	_	
167-51	29494-29497	and	_	_	
167-52	29498-29499	[	_	_	
167-53	29499-29500	"	_	_	
167-54	29500-29516	keras-tensorflow	_	_	
167-54.1	29500-29505	keras	*	SOFTWARE	
167-54.2	29506-29516	tensorflow	*	SOFTWARE	
167-55	29516-29517	"	_	_	
167-56	29518-29521	for	_	_	
167-57	29522-29525	the	_	_	
167-58	29526-29531	Kears	*	SOFTWARE	
167-59	29532-29539	library	_	_	
167-60	29539-29540	/	_	_	
167-61	29540-29549	framework	_	_	
167-62	29550-29554	with	_	_	
167-63	29555-29558	the	_	_	
167-64	29559-29569	TensorFlow	*	SOFTWARE	
167-65	29570-29577	Backend	_	_	
167-66	29577-29578	]	_	_	
167-67	29578-29579	(	_	_	
167-68	29579-29584	https	_	_	
167-69	29584-29585	:	_	_	
167-70	29585-29586	/	_	_	
167-71	29586-29587	/	_	_	
167-72	29587-29595	keras.io	_	_	
167-72.1	29587-29592	keras	*	SOFTWARE	
167-73	29595-29596	)	_	_	
167-74	29596-29597	.	_	_	

#Text=Supporting more DAML libraries/frameworks, such as [PyTorch](https://pytorch.org) (Python) and [WEKA](https://www.cs.waikato.ac.nz/~ml/weka/) (Java) is currently in progress.
168-1	29598-29608	Supporting	_	_	
168-2	29609-29613	more	_	_	
168-3	29614-29618	DAML	_	_	
168-4	29619-29628	libraries	_	_	
168-5	29628-29629	/	_	_	
168-6	29629-29639	frameworks	_	_	
168-7	29639-29640	,	_	_	
168-8	29641-29645	such	_	_	
168-9	29646-29648	as	_	_	
168-10	29649-29650	[	_	_	
168-11	29650-29657	PyTorch	*	SOFTWARE	
168-12	29657-29658	]	_	_	
168-13	29658-29659	(	_	_	
168-14	29659-29664	https	_	_	
168-15	29664-29665	:	_	_	
168-16	29665-29666	/	_	_	
168-17	29666-29667	/	_	_	
168-18	29667-29678	pytorch.org	_	_	
168-18.1	29667-29674	pytorch	*	SOFTWARE	
168-19	29678-29679	)	_	_	
168-20	29680-29681	(	_	_	
168-21	29681-29687	Python	*	PROGLANG	
168-22	29687-29688	)	_	_	
168-23	29689-29692	and	_	_	
168-24	29693-29694	[	_	_	
168-25	29694-29698	WEKA	*	SOFTWARE	
168-26	29698-29699	]	_	_	
168-27	29699-29700	(	_	_	
168-28	29700-29705	https	_	_	
168-29	29705-29706	:	_	_	
168-30	29706-29707	/	_	_	
168-31	29707-29708	/	_	_	
168-32	29708-29728	www.cs.waikato.ac.nz	_	_	
168-33	29728-29729	/	_	_	
168-34	29729-29730	~	_	_	
168-35	29730-29732	ml	_	_	
168-36	29732-29733	/	_	_	
168-37	29733-29737	weka	*	SOFTWARE	
168-38	29737-29738	/	_	_	
168-39	29738-29739	)	_	_	
168-40	29740-29741	(	_	_	
168-41	29741-29745	Java	*	PROGLANG	
168-42	29745-29746	)	_	_	
168-43	29747-29749	is	_	_	
168-44	29750-29759	currently	_	_	
168-45	29760-29762	in	_	_	
168-46	29763-29771	progress	_	_	
168-47	29771-29772	.	_	_	

#Text=(iii) **{:** Open the braces (curly brackets) as shown above.
169-1	29776-29777	(	_	_	
169-2	29777-29780	iii	_	_	
169-3	29780-29781	)	_	_	
169-4	29782-29783	*	_	_	
169-5	29783-29784	*	_	_	
169-6	29784-29785	{	_	_	
169-7	29785-29786	:	_	_	
169-8	29786-29787	*	_	_	
169-9	29787-29788	*	_	_	
169-10	29789-29793	Open	_	_	
169-11	29794-29797	the	_	_	
169-12	29798-29804	braces	_	_	
169-13	29805-29806	(	_	_	
169-14	29806-29811	curly	_	_	
169-15	29812-29820	brackets	_	_	
169-16	29820-29821	)	_	_	
169-17	29822-29824	as	_	_	
169-18	29825-29830	shown	_	_	
169-19	29831-29836	above	_	_	
169-20	29836-29837	.	_	_	

#Text=(iv) **//:** Similar to Java, in order to comment out a line (i.e., disable or inactivate it) or write any comment, a double slash can be added to the beginning of the line, e.g., see "//@dalib "keras-tensorflow" {" above.
170-1	29841-29842	(	_	_	
170-2	29842-29844	iv	_	_	
170-3	29844-29845	)	_	_	
170-4	29846-29847	*	_	_	
170-5	29847-29848	*	_	_	
170-6	29848-29849	/	_	_	
170-7	29849-29850	/	_	_	
170-8	29850-29851	:	_	_	
170-9	29851-29852	*	_	_	
170-10	29852-29853	*	_	_	
170-11	29854-29861	Similar	_	_	
170-12	29862-29864	to	_	_	
170-13	29865-29869	Java	*	PROGLANG	
170-14	29869-29870	,	_	_	
170-15	29871-29873	in	_	_	
170-16	29874-29879	order	_	_	
170-17	29880-29882	to	_	_	
170-18	29883-29890	comment	_	_	
170-19	29891-29894	out	_	_	
170-20	29895-29896	a	_	_	
170-21	29897-29901	line	_	_	
170-22	29902-29903	(	_	_	
170-23	29903-29906	i.e	_	_	
170-24	29906-29907	.	_	_	
170-25	29907-29908	,	_	_	
170-26	29909-29916	disable	_	_	
170-27	29917-29919	or	_	_	
170-28	29920-29930	inactivate	_	_	
170-29	29931-29933	it	_	_	
170-30	29933-29934	)	_	_	
170-31	29935-29937	or	_	_	
170-32	29938-29943	write	_	_	
170-33	29944-29947	any	_	_	
170-34	29948-29955	comment	_	_	
170-35	29955-29956	,	_	_	
170-36	29957-29958	a	_	_	
170-37	29959-29965	double	_	_	
170-38	29966-29971	slash	_	_	
170-39	29972-29975	can	_	_	
170-40	29976-29978	be	_	_	
170-41	29979-29984	added	_	_	
170-42	29985-29987	to	_	_	
170-43	29988-29991	the	_	_	
170-44	29992-30001	beginning	_	_	
170-45	30002-30004	of	_	_	
170-46	30005-30008	the	_	_	
170-47	30009-30013	line	_	_	
170-48	30013-30014	,	_	_	
170-49	30015-30018	e.g	_	_	
170-50	30018-30019	.	_	_	
170-51	30019-30020	,	_	_	
170-52	30021-30024	see	_	_	
170-53	30025-30026	"	_	_	
170-54	30026-30027	/	_	_	
170-55	30027-30028	/	_	_	
170-56	30028-30029	@	_	_	
170-57	30029-30034	dalib	_	_	
170-58	30035-30036	"	_	_	
170-59	30036-30052	keras-tensorflow	_	_	
170-59.1	30036-30041	keras	*	SOFTWARE	
170-59.2	30042-30052	tensorflow	*	SOFTWARE	
170-60	30052-30053	"	_	_	
170-61	30054-30055	{	_	_	
170-62	30055-30056	"	_	_	
170-63	30057-30062	above	_	_	
170-64	30062-30063	.	_	_	

#Text=(v) **labels:** This item specifies whether the data are labeled, unlabeled, or partially labeled.
171-1	30067-30068	(	_	_	
171-2	30068-30069	v	_	_	
171-3	30069-30070	)	_	_	
171-4	30071-30072	*	_	_	
171-5	30072-30073	*	_	_	
171-6	30073-30079	labels	_	_	
171-7	30079-30080	:	_	_	
171-8	30080-30081	*	_	_	
171-9	30081-30082	*	_	_	
171-10	30083-30087	This	_	_	
171-11	30088-30092	item	_	_	
171-12	30093-30102	specifies	_	_	
171-13	30103-30110	whether	_	_	
171-14	30111-30114	the	_	_	
171-15	30115-30119	data	_	_	
171-16	30120-30123	are	_	_	
171-17	30124-30131	labeled	_	_	
171-18	30131-30132	,	_	_	
171-19	30133-30142	unlabeled	_	_	
171-20	30142-30143	,	_	_	
171-21	30144-30146	or	_	_	
171-22	30147-30156	partially	_	_	
171-23	30157-30164	labeled	_	_	
171-24	30164-30165	.	_	_	

#Text=Thus, it implicitly determines the type of the ML task; its value can be ON for labeled data (supervised ML), OFF for unlabeled data (unsupervised ML), or SEMI for partially labeled data (semi-supervised ML).
172-1	30166-30170	Thus	_	_	
172-2	30170-30171	,	_	_	
172-3	30172-30174	it	_	_	
172-4	30175-30185	implicitly	_	_	
172-5	30186-30196	determines	_	_	
172-6	30197-30200	the	_	_	
172-7	30201-30205	type	_	_	
172-8	30206-30208	of	_	_	
172-9	30209-30212	the	_	_	
172-10	30213-30215	ML	_	_	
172-11	30216-30220	task	_	_	
172-12	30220-30221	;	_	_	
172-13	30222-30225	its	_	_	
172-14	30226-30231	value	_	_	
172-15	30232-30235	can	_	_	
172-16	30236-30238	be	_	_	
172-17	30239-30241	ON	_	_	
172-18	30242-30245	for	_	_	
172-19	30246-30253	labeled	_	_	
172-20	30254-30258	data	_	_	
172-21	30259-30260	(	_	_	
172-22	30260-30270	supervised	_	_	
172-23	30271-30273	ML	_	_	
172-24	30273-30274	)	_	_	
172-25	30274-30275	,	_	_	
172-26	30276-30279	OFF	_	_	
172-27	30280-30283	for	_	_	
172-28	30284-30293	unlabeled	_	_	
172-29	30294-30298	data	_	_	
172-30	30299-30300	(	_	_	
172-31	30300-30312	unsupervised	_	_	
172-32	30313-30315	ML	_	_	
172-33	30315-30316	)	_	_	
172-34	30316-30317	,	_	_	
172-35	30318-30320	or	_	_	
172-36	30321-30325	SEMI	_	_	
172-37	30326-30329	for	_	_	
172-38	30330-30339	partially	_	_	
172-39	30340-30347	labeled	_	_	
172-40	30348-30352	data	_	_	
172-41	30353-30354	(	_	_	
172-42	30354-30369	semi-supervised	_	_	
172-43	30370-30372	ML	_	_	
172-44	30372-30373	)	_	_	
172-45	30373-30374	.	_	_	

#Text=The "labels" parameter appears in both the pure (full) MDSE and the blackbox-ML modes.
173-1	30375-30378	The	_	_	
173-2	30379-30380	"	_	_	
173-3	30380-30386	labels	_	_	
173-4	30386-30387	"	_	_	
173-5	30388-30397	parameter	_	_	
173-6	30398-30405	appears	_	_	
173-7	30406-30408	in	_	_	
173-8	30409-30413	both	_	_	
173-9	30414-30417	the	_	_	
173-10	30418-30422	pure	_	_	
173-11	30423-30424	(	_	_	
173-12	30424-30428	full	_	_	
173-13	30428-30429	)	_	_	
173-14	30430-30434	MDSE	_	_	
173-15	30435-30438	and	_	_	
173-16	30439-30442	the	_	_	
173-17	30443-30454	blackbox-ML	_	_	
173-18	30455-30460	modes	_	_	
173-19	30460-30461	.	_	_	

#Text=(vi) **features:** This one specifies the ML features/attributes separated by commas.
174-1	30465-30466	(	_	_	
174-2	30466-30468	vi	_	_	
174-3	30468-30469	)	_	_	
174-4	30470-30471	*	_	_	
174-5	30471-30472	*	_	_	
174-6	30472-30480	features	_	_	
174-7	30480-30481	:	_	_	
174-8	30481-30482	*	_	_	
174-9	30482-30483	*	_	_	
174-10	30484-30488	This	_	_	
174-11	30489-30492	one	_	_	
174-12	30493-30502	specifies	_	_	
174-13	30503-30506	the	_	_	
174-14	30507-30509	ML	_	_	
174-15	30510-30518	features	_	_	
174-16	30518-30519	/	_	_	
174-17	30519-30529	attributes	_	_	
174-18	30530-30539	separated	_	_	
174-19	30540-30542	by	_	_	
174-20	30543-30549	commas	_	_	
174-21	30549-30550	.	_	_	

#Text=These are a subset of the properties (i.e., local variables) of the respective thing to which the data analytics block belongs.
175-1	30551-30556	These	_	_	
175-2	30557-30560	are	_	_	
175-3	30561-30562	a	_	_	
175-4	30563-30569	subset	_	_	
175-5	30570-30572	of	_	_	
175-6	30573-30576	the	_	_	
175-7	30577-30587	properties	_	_	
175-8	30588-30589	(	_	_	
175-9	30589-30592	i.e	_	_	
175-10	30592-30593	.	_	_	
175-11	30593-30594	,	_	_	
175-12	30595-30600	local	_	_	
175-13	30601-30610	variables	_	_	
175-14	30610-30611	)	_	_	
175-15	30612-30614	of	_	_	
175-16	30615-30618	the	_	_	
175-17	30619-30629	respective	_	_	
175-18	30630-30635	thing	_	_	
175-19	30636-30638	to	_	_	
175-20	30639-30644	which	_	_	
175-21	30645-30648	the	_	_	
175-22	30649-30653	data	_	_	
175-23	30654-30663	analytics	_	_	
175-24	30664-30669	block	_	_	
175-25	30670-30677	belongs	_	_	
175-26	30677-30678	.	_	_	

#Text=For instance, the properties might store the incoming messages or some of their specific parameters.
176-1	30679-30682	For	_	_	
176-2	30683-30691	instance	_	_	
176-3	30691-30692	,	_	_	
176-4	30693-30696	the	_	_	
176-5	30697-30707	properties	_	_	
176-6	30708-30713	might	_	_	
176-7	30714-30719	store	_	_	
176-8	30720-30723	the	_	_	
176-9	30724-30732	incoming	_	_	
176-10	30733-30741	messages	_	_	
176-11	30742-30744	or	_	_	
176-12	30745-30749	some	_	_	
176-13	30750-30752	of	_	_	
176-14	30753-30758	their	_	_	
176-15	30759-30767	specific	_	_	
176-16	30768-30778	parameters	_	_	
176-17	30778-30779	.	_	_	

#Text=The values of the features might be scalar or vector.
177-1	30780-30783	The	_	_	
177-2	30784-30790	values	_	_	
177-3	30791-30793	of	_	_	
177-4	30794-30797	the	_	_	
177-5	30798-30806	features	_	_	
177-6	30807-30812	might	_	_	
177-7	30813-30815	be	_	_	
177-8	30816-30822	scalar	_	_	
177-9	30823-30825	or	_	_	
177-10	30826-30832	vector	_	_	
177-11	30832-30833	.	_	_	

#Text=If "labels" is set to ON, thus having supervised ML, the last feature is considered as the class label.
178-1	30834-30836	If	_	_	
178-2	30837-30838	"	_	_	
178-3	30838-30844	labels	_	_	
178-4	30844-30845	"	_	_	
178-5	30846-30848	is	_	_	
178-6	30849-30852	set	_	_	
178-7	30853-30855	to	_	_	
178-8	30856-30858	ON	_	_	
178-9	30858-30859	,	_	_	
178-10	30860-30864	thus	_	_	
178-11	30865-30871	having	_	_	
178-12	30872-30882	supervised	_	_	
178-13	30883-30885	ML	_	_	
178-14	30885-30886	,	_	_	
178-15	30887-30890	the	_	_	
178-16	30891-30895	last	_	_	
178-17	30896-30903	feature	_	_	
178-18	30904-30906	is	_	_	
178-19	30907-30917	considered	_	_	
178-20	30918-30920	as	_	_	
178-21	30921-30924	the	_	_	
178-22	30925-30930	class	_	_	
178-23	30931-30936	label	_	_	
178-24	30936-30937	.	_	_	

#Text=Also in this case, the label can be a vector.
179-1	30938-30942	Also	_	_	
179-2	30943-30945	in	_	_	
179-3	30946-30950	this	_	_	
179-4	30951-30955	case	_	_	
179-5	30955-30956	,	_	_	
179-6	30957-30960	the	_	_	
179-7	30961-30966	label	_	_	
179-8	30967-30970	can	_	_	
179-9	30971-30973	be	_	_	
179-10	30974-30975	a	_	_	
179-11	30976-30982	vector	_	_	
179-12	30982-30983	.	_	_	

#Text=Similar to "labels", the "features" parameter is also used in both the pure (full) MDSE and the blackbox-ML modes.
180-1	30984-30991	Similar	_	_	
180-2	30992-30994	to	_	_	
180-3	30995-30996	"	_	_	
180-4	30996-31002	labels	_	_	
180-5	31002-31003	"	_	_	
180-6	31003-31004	,	_	_	
180-7	31005-31008	the	_	_	
180-8	31009-31010	"	_	_	
180-9	31010-31018	features	_	_	
180-10	31018-31019	"	_	_	
180-11	31020-31029	parameter	_	_	
180-12	31030-31032	is	_	_	
180-13	31033-31037	also	_	_	
180-14	31038-31042	used	_	_	
180-15	31043-31045	in	_	_	
180-16	31046-31050	both	_	_	
180-17	31051-31054	the	_	_	
180-18	31055-31059	pure	_	_	
180-19	31060-31061	(	_	_	
180-20	31061-31065	full	_	_	
180-21	31065-31066	)	_	_	
180-22	31067-31071	MDSE	_	_	
180-23	31072-31075	and	_	_	
180-24	31076-31079	the	_	_	
180-25	31080-31091	blackbox-ML	_	_	
180-26	31092-31097	modes	_	_	
180-27	31097-31098	.	_	_	

#Text=(vii) **prediction_results:** The predictions of the ML model, e.g., the predicted class label or target value in the case of supervised ML (classification/regression) or the cluster index in the case of unsupervised ML for a new data instance shall be stored in the property specified here.
181-1	31102-31103	(	_	_	
181-2	31103-31106	vii	_	_	
181-3	31106-31107	)	_	_	
181-4	31108-31109	*	_	_	
181-5	31109-31110	*	_	_	
181-6	31110-31128	prediction_results	_	_	
181-7	31128-31129	:	_	_	
181-8	31129-31130	*	_	_	
181-9	31130-31131	*	_	_	
181-10	31132-31135	The	_	_	
181-11	31136-31147	predictions	_	_	
181-12	31148-31150	of	_	_	
181-13	31151-31154	the	_	_	
181-14	31155-31157	ML	_	_	
181-15	31158-31163	model	_	_	
181-16	31163-31164	,	_	_	
181-17	31165-31168	e.g	_	_	
181-18	31168-31169	.	_	_	
181-19	31169-31170	,	_	_	
181-20	31171-31174	the	_	_	
181-21	31175-31184	predicted	_	_	
181-22	31185-31190	class	_	_	
181-23	31191-31196	label	_	_	
181-24	31197-31199	or	_	_	
181-25	31200-31206	target	_	_	
181-26	31207-31212	value	_	_	
181-27	31213-31215	in	_	_	
181-28	31216-31219	the	_	_	
181-29	31220-31224	case	_	_	
181-30	31225-31227	of	_	_	
181-31	31228-31238	supervised	_	_	
181-32	31239-31241	ML	_	_	
181-33	31242-31243	(	_	_	
181-34	31243-31257	classification	_	_	
181-35	31257-31258	/	_	_	
181-36	31258-31268	regression	_	_	
181-37	31268-31269	)	_	_	
181-38	31270-31272	or	_	_	
181-39	31273-31276	the	_	_	
181-40	31277-31284	cluster	_	_	
181-41	31285-31290	index	_	_	
181-42	31291-31293	in	_	_	
181-43	31294-31297	the	_	_	
181-44	31298-31302	case	_	_	
181-45	31303-31305	of	_	_	
181-46	31306-31318	unsupervised	_	_	
181-47	31319-31321	ML	_	_	
181-48	31322-31325	for	_	_	
181-49	31326-31327	a	_	_	
181-50	31328-31331	new	_	_	
181-51	31332-31336	data	_	_	
181-52	31337-31345	instance	_	_	
181-53	31346-31351	shall	_	_	
181-54	31352-31354	be	_	_	
181-55	31355-31361	stored	_	_	
181-56	31362-31364	in	_	_	
181-57	31365-31368	the	_	_	
181-58	31369-31377	property	_	_	
181-59	31378-31387	specified	_	_	
181-60	31388-31392	here	_	_	
181-61	31392-31393	.	_	_	

#Text=This parameter is also required in both the pure (full) MDSE and the blackbox-ML modes.
182-1	31394-31398	This	_	_	
182-2	31399-31408	parameter	_	_	
182-3	31409-31411	is	_	_	
182-4	31412-31416	also	_	_	
182-5	31417-31425	required	_	_	
182-6	31426-31428	in	_	_	
182-7	31429-31433	both	_	_	
182-8	31434-31437	the	_	_	
182-9	31438-31442	pure	_	_	
182-10	31443-31444	(	_	_	
182-11	31444-31448	full	_	_	
182-12	31448-31449	)	_	_	
182-13	31450-31454	MDSE	_	_	
182-14	31455-31458	and	_	_	
182-15	31459-31462	the	_	_	
182-16	31463-31474	blackbox-ML	_	_	
182-17	31475-31480	modes	_	_	
182-18	31480-31481	.	_	_	

#Text=(viii) **dataset:** This provides the path to the Comma-Separated Values (CSV) file containing the input data that shall be used for training the ML model.
183-1	31485-31486	(	_	_	
183-2	31486-31490	viii	_	_	
183-3	31490-31491	)	_	_	
183-4	31492-31493	*	_	_	
183-5	31493-31494	*	_	_	
183-6	31494-31501	dataset	_	_	
183-7	31501-31502	:	_	_	
183-8	31502-31503	*	_	_	
183-9	31503-31504	*	_	_	
183-10	31505-31509	This	_	_	
183-11	31510-31518	provides	_	_	
183-12	31519-31522	the	_	_	
183-13	31523-31527	path	_	_	
183-14	31528-31530	to	_	_	
183-15	31531-31534	the	_	_	
183-16	31535-31550	Comma-Separated	_	_	
183-17	31551-31557	Values	_	_	
183-18	31558-31559	(	_	_	
183-19	31559-31562	CSV	_	_	
183-20	31562-31563	)	_	_	
183-21	31564-31568	file	_	_	
183-22	31569-31579	containing	_	_	
183-23	31580-31583	the	_	_	
183-24	31584-31589	input	_	_	
183-25	31590-31594	data	_	_	
183-26	31595-31599	that	_	_	
183-27	31600-31605	shall	_	_	
183-28	31606-31608	be	_	_	
183-29	31609-31613	used	_	_	
183-30	31614-31617	for	_	_	
183-31	31618-31626	training	_	_	
183-32	31627-31630	the	_	_	
183-33	31631-31633	ML	_	_	
183-34	31634-31639	model	_	_	
183-35	31639-31640	.	_	_	

#Text=It must always start with "data/".
184-1	31641-31643	It	_	_	
184-2	31644-31648	must	_	_	
184-3	31649-31655	always	_	_	
184-4	31656-31661	start	_	_	
184-5	31662-31666	with	_	_	
184-6	31667-31668	"	_	_	
184-7	31668-31672	data	_	_	
184-8	31672-31673	/	_	_	
184-9	31673-31674	"	_	_	
184-10	31674-31675	.	_	_	

#Text=In other words, the dataset (CSV file) must always reside in the data directory.
185-1	31676-31678	In	_	_	
185-2	31679-31684	other	_	_	
185-3	31685-31690	words	_	_	
185-4	31690-31691	,	_	_	
185-5	31692-31695	the	_	_	
185-6	31696-31703	dataset	_	_	
185-7	31704-31705	(	_	_	
185-8	31705-31708	CSV	_	_	
185-9	31709-31713	file	_	_	
185-10	31713-31714	)	_	_	
185-11	31715-31719	must	_	_	
185-12	31720-31726	always	_	_	
185-13	31727-31733	reside	_	_	
185-14	31734-31736	in	_	_	
185-15	31737-31740	the	_	_	
185-16	31741-31745	data	_	_	
185-17	31746-31755	directory	_	_	
185-18	31755-31756	.	_	_	

#Text=Currently, only batch processing, i.e., offline learning is supported.
186-1	31757-31766	Currently	_	_	
186-2	31766-31767	,	_	_	
186-3	31768-31772	only	_	_	
186-4	31773-31778	batch	_	_	
186-5	31779-31789	processing	_	_	
186-6	31789-31790	,	_	_	
186-7	31791-31794	i.e	_	_	
186-8	31794-31795	.	_	_	
186-9	31795-31796	,	_	_	
186-10	31797-31804	offline	_	_	
186-11	31805-31813	learning	_	_	
186-12	31814-31816	is	_	_	
186-13	31817-31826	supported	_	_	
186-14	31826-31827	.	_	_	

#Text=Thus, the datasets are bounded.
187-1	31828-31832	Thus	_	_	
187-2	31832-31833	,	_	_	
187-3	31834-31837	the	_	_	
187-4	31838-31846	datasets	_	_	
187-5	31847-31850	are	_	_	
187-6	31851-31858	bounded	_	_	
187-7	31858-31859	.	_	_	

#Text=In the future, stream processing, i.e., online learning through unbounded datasets shall be supported too.
188-1	31860-31862	In	_	_	
188-2	31863-31866	the	_	_	
188-3	31867-31873	future	_	_	
188-4	31873-31874	,	_	_	
188-5	31875-31881	stream	_	_	
188-6	31882-31892	processing	_	_	
188-7	31892-31893	,	_	_	
188-8	31894-31897	i.e	_	_	
188-9	31897-31898	.	_	_	
188-10	31898-31899	,	_	_	
188-11	31900-31906	online	_	_	
188-12	31907-31915	learning	_	_	
188-13	31916-31923	through	_	_	
188-14	31924-31933	unbounded	_	_	
188-15	31934-31942	datasets	_	_	
188-16	31943-31948	shall	_	_	
188-17	31949-31951	be	_	_	
188-18	31952-31961	supported	_	_	
188-19	31962-31965	too	_	_	
188-20	31965-31966	.	_	_	

#Text=(ix) **automl:** This parameter can turn the AutoML (Automated ML) engine on or off.
189-1	31970-31971	(	_	_	
189-2	31971-31973	ix	_	_	
189-3	31973-31974	)	_	_	
189-4	31975-31976	*	_	_	
189-5	31976-31977	*	_	_	
189-6	31977-31983	automl	_	_	
189-7	31983-31984	:	_	_	
189-8	31984-31985	*	_	_	
189-9	31985-31986	*	_	_	
189-10	31987-31991	This	_	_	
189-11	31992-32001	parameter	_	_	
189-12	32002-32005	can	_	_	
189-13	32006-32010	turn	_	_	
189-14	32011-32014	the	_	_	
189-15	32015-32021	AutoML	_	_	
189-16	32022-32023	(	_	_	
189-17	32023-32032	Automated	_	_	
189-18	32033-32035	ML	_	_	
189-19	32035-32036	)	_	_	
189-20	32037-32043	engine	_	_	
189-21	32044-32046	on	_	_	
189-22	32047-32049	or	_	_	
189-23	32050-32053	off	_	_	
189-24	32053-32054	.	_	_	

#Text=The AutoML functionalities are still basic and under development.
190-1	32055-32058	The	_	_	
190-2	32059-32065	AutoML	_	_	
190-3	32066-32081	functionalities	_	_	
190-4	32082-32085	are	_	_	
190-5	32086-32091	still	_	_	
190-6	32092-32097	basic	_	_	
190-7	32098-32101	and	_	_	
190-8	32102-32107	under	_	_	
190-9	32108-32119	development	_	_	
190-10	32119-32120	.	_	_	

#Text=(x) **sequential:** This Boolean parameter specifies whether the data are sequential, i.e., whether the order matters.
191-1	32124-32125	(	_	_	
191-2	32125-32126	x	_	_	
191-3	32126-32127	)	_	_	
191-4	32128-32129	*	_	_	
191-5	32129-32130	*	_	_	
191-6	32130-32140	sequential	_	_	
191-7	32140-32141	:	_	_	
191-8	32141-32142	*	_	_	
191-9	32142-32143	*	_	_	
191-10	32144-32148	This	_	_	
191-11	32149-32156	Boolean	_	_	
191-12	32157-32166	parameter	_	_	
191-13	32167-32176	specifies	_	_	
191-14	32177-32184	whether	_	_	
191-15	32185-32188	the	_	_	
191-16	32189-32193	data	_	_	
191-17	32194-32197	are	_	_	
191-18	32198-32208	sequential	_	_	
191-19	32208-32209	,	_	_	
191-20	32210-32213	i.e	_	_	
191-21	32213-32214	.	_	_	
191-22	32214-32215	,	_	_	
191-23	32216-32223	whether	_	_	
191-24	32224-32227	the	_	_	
191-25	32228-32233	order	_	_	
191-26	32234-32241	matters	_	_	
191-27	32241-32242	.	_	_	

#Text=For instance, time series or DNA data may not be shuffled or be involved in cross validation or similar practices.
192-1	32243-32246	For	_	_	
192-2	32247-32255	instance	_	_	
192-3	32255-32256	,	_	_	
192-4	32257-32261	time	_	_	
192-5	32262-32268	series	_	_	
192-6	32269-32271	or	_	_	
192-7	32272-32275	DNA	_	_	
192-8	32276-32280	data	_	_	
192-9	32281-32284	may	_	_	
192-10	32285-32288	not	_	_	
192-11	32289-32291	be	_	_	
192-12	32292-32300	shuffled	_	_	
192-13	32301-32303	or	_	_	
192-14	32304-32306	be	_	_	
192-15	32307-32315	involved	_	_	
192-16	32316-32318	in	_	_	
192-17	32319-32324	cross	_	_	
192-18	32325-32335	validation	_	_	
192-19	32336-32338	or	_	_	
192-20	32339-32346	similar	_	_	
192-21	32347-32356	practices	_	_	
192-22	32356-32357	.	_	_	

#Text=(xi) **timestamps:** This binary (ON/OFF) parameter determines if the first column of the dataset includes the timestamps of the input data.
193-1	32361-32362	(	_	_	
193-2	32362-32364	xi	_	_	
193-3	32364-32365	)	_	_	
193-4	32366-32367	*	_	_	
193-5	32367-32368	*	_	_	
193-6	32368-32378	timestamps	_	_	
193-7	32378-32379	:	_	_	
193-8	32379-32380	*	_	_	
193-9	32380-32381	*	_	_	
193-10	32382-32386	This	_	_	
193-11	32387-32393	binary	_	_	
193-12	32394-32395	(	_	_	
193-13	32395-32397	ON	_	_	
193-14	32397-32398	/	_	_	
193-15	32398-32401	OFF	_	_	
193-16	32401-32402	)	_	_	
193-17	32403-32412	parameter	_	_	
193-18	32413-32423	determines	_	_	
193-19	32424-32426	if	_	_	
193-20	32427-32430	the	_	_	
193-21	32431-32436	first	_	_	
193-22	32437-32443	column	_	_	
193-23	32444-32446	of	_	_	
193-24	32447-32450	the	_	_	
193-25	32451-32458	dataset	_	_	
193-26	32459-32467	includes	_	_	
193-27	32468-32471	the	_	_	
193-28	32472-32482	timestamps	_	_	
193-29	32483-32485	of	_	_	
193-30	32486-32489	the	_	_	
193-31	32490-32495	input	_	_	
193-32	32496-32500	data	_	_	
193-33	32500-32501	.	_	_	

#Text=The format for the timestamps should be dd-mm-yyyy HH:MM:SS, e.g., 11-07-2020 13:50:27 for July 11, 2020 at 1:50:27pm.
194-1	32502-32505	The	_	_	
194-2	32506-32512	format	_	_	
194-3	32513-32516	for	_	_	
194-4	32517-32520	the	_	_	
194-5	32521-32531	timestamps	_	_	
194-6	32532-32538	should	_	_	
194-7	32539-32541	be	_	_	
194-8	32542-32552	dd-mm-yyyy	_	_	
194-9	32553-32555	HH	_	_	
194-10	32555-32556	:	_	_	
194-11	32556-32558	MM	_	_	
194-12	32558-32559	:	_	_	
194-13	32559-32561	SS	_	_	
194-14	32561-32562	,	_	_	
194-15	32563-32566	e.g	_	_	
194-16	32566-32567	.	_	_	
194-17	32567-32568	,	_	_	
194-18	32569-32571	11	_	_	
194-19	32571-32572	-	_	_	
194-20	32572-32574	07	_	_	
194-21	32574-32575	-	_	_	
194-22	32575-32579	2020	_	_	
194-23	32580-32582	13	_	_	
194-24	32582-32583	:	_	_	
194-25	32583-32585	50	_	_	
194-26	32585-32586	:	_	_	
194-27	32586-32588	27	_	_	
194-28	32589-32592	for	_	_	
194-29	32593-32597	July	_	_	
194-30	32598-32600	11	_	_	
194-31	32600-32601	,	_	_	
194-32	32602-32606	2020	_	_	
194-33	32607-32609	at	_	_	
194-34	32610-32611	1	_	_	
194-35	32611-32612	:	_	_	
194-36	32612-32614	50	_	_	
194-37	32614-32615	:	_	_	
194-38	32615-32619	27pm	_	_	
194-39	32619-32620	.	_	_	

#Text=If the timestamps parameter is set to ON, the predictions of the ML model will also be automatically timestamped, e.g., if they should be appended to the dataset.
195-1	32621-32623	If	_	_	
195-2	32624-32627	the	_	_	
195-3	32628-32638	timestamps	_	_	
195-4	32639-32648	parameter	_	_	
195-5	32649-32651	is	_	_	
195-6	32652-32655	set	_	_	
195-7	32656-32658	to	_	_	
195-8	32659-32661	ON	_	_	
195-9	32661-32662	,	_	_	
195-10	32663-32666	the	_	_	
195-11	32667-32678	predictions	_	_	
195-12	32679-32681	of	_	_	
195-13	32682-32685	the	_	_	
195-14	32686-32688	ML	_	_	
195-15	32689-32694	model	_	_	
195-16	32695-32699	will	_	_	
195-17	32700-32704	also	_	_	
195-18	32705-32707	be	_	_	
195-19	32708-32721	automatically	_	_	
195-20	32722-32733	timestamped	_	_	
195-21	32733-32734	,	_	_	
195-22	32735-32738	e.g	_	_	
195-23	32738-32739	.	_	_	
195-24	32739-32740	,	_	_	
195-25	32741-32743	if	_	_	
195-26	32744-32748	they	_	_	
195-27	32749-32755	should	_	_	
195-28	32756-32758	be	_	_	
195-29	32759-32767	appended	_	_	
195-30	32768-32770	to	_	_	
195-31	32771-32774	the	_	_	
195-32	32775-32782	dataset	_	_	
195-33	32782-32783	.	_	_	

#Text=(xii) **preprocess_feature_scaler:** Here, one could choose a scaler for the **standardization**, which works per ML feature (i.e., column-wise).
196-1	32787-32788	(	_	_	
196-2	32788-32791	xii	_	_	
196-3	32791-32792	)	_	_	
196-4	32793-32794	*	_	_	
196-5	32794-32795	*	_	_	
196-6	32795-32820	preprocess_feature_scaler	_	_	
196-7	32820-32821	:	_	_	
196-8	32821-32822	*	_	_	
196-9	32822-32823	*	_	_	
196-10	32824-32828	Here	_	_	
196-11	32828-32829	,	_	_	
196-12	32830-32833	one	_	_	
196-13	32834-32839	could	_	_	
196-14	32840-32846	choose	_	_	
196-15	32847-32848	a	_	_	
196-16	32849-32855	scaler	_	_	
196-17	32856-32859	for	_	_	
196-18	32860-32863	the	_	_	
196-19	32864-32865	*	_	_	
196-20	32865-32866	*	_	_	
196-21	32866-32881	standardization	_	_	
196-22	32881-32882	*	_	_	
196-23	32882-32883	*	_	_	
196-24	32883-32884	,	_	_	
196-25	32885-32890	which	_	_	
196-26	32891-32896	works	_	_	
196-27	32897-32900	per	_	_	
196-28	32901-32903	ML	_	_	
196-29	32904-32911	feature	_	_	
196-30	32912-32913	(	_	_	
196-31	32913-32916	i.e	_	_	
196-32	32916-32917	.	_	_	
196-33	32917-32918	,	_	_	
196-34	32919-32930	column-wise	_	_	
196-35	32930-32931	)	_	_	
196-36	32931-32932	.	_	_	

#Text=Many ML methods, such as Neural Networks exhibit a poor performance on the data with ML features that have different scales.
197-1	32933-32937	Many	_	_	
197-2	32938-32940	ML	_	_	
197-3	32941-32948	methods	_	_	
197-4	32948-32949	,	_	_	
197-5	32950-32954	such	_	_	
197-6	32955-32957	as	_	_	
197-7	32958-32964	Neural	_	_	
197-8	32965-32973	Networks	_	_	
197-9	32974-32981	exhibit	_	_	
197-10	32982-32983	a	_	_	
197-11	32984-32988	poor	_	_	
197-12	32989-33000	performance	_	_	
197-13	33001-33003	on	_	_	
197-14	33004-33007	the	_	_	
197-15	33008-33012	data	_	_	
197-16	33013-33017	with	_	_	
197-17	33018-33020	ML	_	_	
197-18	33021-33029	features	_	_	
197-19	33030-33034	that	_	_	
197-20	33035-33039	have	_	_	
197-21	33040-33049	different	_	_	
197-22	33050-33056	scales	_	_	
197-23	33056-33057	.	_	_	

#Text=The available choices for standardization are the standard scaler (i.e., z-score, which removes the mean and scales to unit variance), the robust scaler (which uses the statistics that are robust to the outliers), and the min-max scaler (which scales each feature to a given range).
198-1	33058-33061	The	_	_	
198-2	33062-33071	available	_	_	
198-3	33072-33079	choices	_	_	
198-4	33080-33083	for	_	_	
198-5	33084-33099	standardization	_	_	
198-6	33100-33103	are	_	_	
198-7	33104-33107	the	_	_	
198-8	33108-33116	standard	_	_	
198-9	33117-33123	scaler	_	_	
198-10	33124-33125	(	_	_	
198-11	33125-33128	i.e	_	_	
198-12	33128-33129	.	_	_	
198-13	33129-33130	,	_	_	
198-14	33131-33138	z-score	_	_	
198-15	33138-33139	,	_	_	
198-16	33140-33145	which	_	_	
198-17	33146-33153	removes	_	_	
198-18	33154-33157	the	_	_	
198-19	33158-33162	mean	_	_	
198-20	33163-33166	and	_	_	
198-21	33167-33173	scales	_	_	
198-22	33174-33176	to	_	_	
198-23	33177-33181	unit	_	_	
198-24	33182-33190	variance	_	_	
198-25	33190-33191	)	_	_	
198-26	33191-33192	,	_	_	
198-27	33193-33196	the	_	_	
198-28	33197-33203	robust	_	_	
198-29	33204-33210	scaler	_	_	
198-30	33211-33212	(	_	_	
198-31	33212-33217	which	_	_	
198-32	33218-33222	uses	_	_	
198-33	33223-33226	the	_	_	
198-34	33227-33237	statistics	_	_	
198-35	33238-33242	that	_	_	
198-36	33243-33246	are	_	_	
198-37	33247-33253	robust	_	_	
198-38	33254-33256	to	_	_	
198-39	33257-33260	the	_	_	
198-40	33261-33269	outliers	_	_	
198-41	33269-33270	)	_	_	
198-42	33270-33271	,	_	_	
198-43	33272-33275	and	_	_	
198-44	33276-33279	the	_	_	
198-45	33280-33287	min-max	_	_	
198-46	33288-33294	scaler	_	_	
198-47	33295-33296	(	_	_	
198-48	33296-33301	which	_	_	
198-49	33302-33308	scales	_	_	
198-50	33309-33313	each	_	_	
198-51	33314-33321	feature	_	_	
198-52	33322-33324	to	_	_	
198-53	33325-33326	a	_	_	
198-54	33327-33332	given	_	_	
198-55	33333-33338	range	_	_	
198-56	33338-33339	)	_	_	
198-57	33339-33340	.	_	_	

#Text=(xiii) **preprocess_sample_normalizer:** This is not shown in the above-mentioned examples.
199-1	33344-33345	(	_	_	
199-2	33345-33349	xiii	_	_	
199-3	33349-33350	)	_	_	
199-4	33351-33352	*	_	_	
199-5	33352-33353	*	_	_	
199-6	33353-33381	preprocess_sample_normalizer	_	_	
199-7	33381-33382	:	_	_	
199-8	33382-33383	*	_	_	
199-9	33383-33384	*	_	_	
199-10	33385-33389	This	_	_	
199-11	33390-33392	is	_	_	
199-12	33393-33396	not	_	_	
199-13	33397-33402	shown	_	_	
199-14	33403-33405	in	_	_	
199-15	33406-33409	the	_	_	
199-16	33410-33425	above-mentioned	_	_	
199-17	33426-33434	examples	_	_	
199-18	33434-33435	.	_	_	

#Text=Here, one could choose a normalizer for the **normalization**, which works per sample (i.e., row-wise).
200-1	33436-33440	Here	_	_	
200-2	33440-33441	,	_	_	
200-3	33442-33445	one	_	_	
200-4	33446-33451	could	_	_	
200-5	33452-33458	choose	_	_	
200-6	33459-33460	a	_	_	
200-7	33461-33471	normalizer	_	_	
200-8	33472-33475	for	_	_	
200-9	33476-33479	the	_	_	
200-10	33480-33481	*	_	_	
200-11	33481-33482	*	_	_	
200-12	33482-33495	normalization	_	_	
200-13	33495-33496	*	_	_	
200-14	33496-33497	*	_	_	
200-15	33497-33498	,	_	_	
200-16	33499-33504	which	_	_	
200-17	33505-33510	works	_	_	
200-18	33511-33514	per	_	_	
200-19	33515-33521	sample	_	_	
200-20	33522-33523	(	_	_	
200-21	33523-33526	i.e	_	_	
200-22	33526-33527	.	_	_	
200-23	33527-33528	,	_	_	
200-24	33529-33537	row-wise	_	_	
200-25	33537-33538	)	_	_	
200-26	33538-33539	.	_	_	

#Text=Normalization transforms each sample with at least one non-zero feature to the unit norm, independently of the other samples.
201-1	33540-33553	Normalization	_	_	
201-2	33554-33564	transforms	_	_	
201-3	33565-33569	each	_	_	
201-4	33570-33576	sample	_	_	
201-5	33577-33581	with	_	_	
201-6	33582-33584	at	_	_	
201-7	33585-33590	least	_	_	
201-8	33591-33594	one	_	_	
201-9	33595-33603	non-zero	_	_	
201-10	33604-33611	feature	_	_	
201-11	33612-33614	to	_	_	
201-12	33615-33618	the	_	_	
201-13	33619-33623	unit	_	_	
201-14	33624-33628	norm	_	_	
201-15	33628-33629	,	_	_	
201-16	33630-33643	independently	_	_	
201-17	33644-33646	of	_	_	
201-18	33647-33650	the	_	_	
201-19	33651-33656	other	_	_	
201-20	33657-33664	samples	_	_	
201-21	33664-33665	.	_	_	

#Text=This is usually required for similarity metrics, e.g., in text classification/clustering.
202-1	33666-33670	This	_	_	
202-2	33671-33673	is	_	_	
202-3	33674-33681	usually	_	_	
202-4	33682-33690	required	_	_	
202-5	33691-33694	for	_	_	
202-6	33695-33705	similarity	_	_	
202-7	33706-33713	metrics	_	_	
202-8	33713-33714	,	_	_	
202-9	33715-33718	e.g	_	_	
202-10	33718-33719	.	_	_	
202-11	33719-33720	,	_	_	
202-12	33721-33723	in	_	_	
202-13	33724-33728	text	_	_	
202-14	33729-33743	classification	_	_	
202-15	33743-33744	/	_	_	
202-16	33744-33754	clustering	_	_	
202-17	33754-33755	.	_	_	

#Text=The supported norms are the L2 norm, the L1 norm and the Max norm.
203-1	33756-33759	The	_	_	
203-2	33760-33769	supported	_	_	
203-3	33770-33775	norms	_	_	
203-4	33776-33779	are	_	_	
203-5	33780-33783	the	_	_	
203-6	33784-33786	L2	_	_	
203-7	33787-33791	norm	_	_	
203-8	33791-33792	,	_	_	
203-9	33793-33796	the	_	_	
203-10	33797-33799	L1	_	_	
203-11	33800-33804	norm	_	_	
203-12	33805-33808	and	_	_	
203-13	33809-33812	the	_	_	
203-14	33813-33816	Max	_	_	
203-15	33817-33821	norm	_	_	
203-16	33821-33822	.	_	_	

#Text=(xiv) **model_algorithm:** The specific ML method that shall be deployed is set here.
204-1	33826-33827	(	_	_	
204-2	33827-33830	xiv	_	_	
204-3	33830-33831	)	_	_	
204-4	33832-33833	*	_	_	
204-5	33833-33834	*	_	_	
204-6	33834-33849	model_algorithm	_	_	
204-7	33849-33850	:	_	_	
204-8	33850-33851	*	_	_	
204-9	33851-33852	*	_	_	
204-10	33853-33856	The	_	_	
204-11	33857-33865	specific	_	_	
204-12	33866-33868	ML	_	_	
204-13	33869-33875	method	_	_	
204-14	33876-33880	that	_	_	
204-15	33881-33886	shall	_	_	
204-16	33887-33889	be	_	_	
204-17	33890-33898	deployed	_	_	
204-18	33899-33901	is	_	_	
204-19	33902-33905	set	_	_	
204-20	33906-33910	here	_	_	
204-21	33910-33911	.	_	_	

#Text=The method includes the architecture/type of the ML model, e.g., whether it is from the ANN family or from the linear family, and in each case, what the hyper-parameters are, e.g., for Deep ANNs, how many hidden layers, with which sizes, does the ML model possess, what is the learning algorithm that shall be used for training the ML model, e.g., Stochastic Gradient Descent (SGD), and so forth.
205-1	33912-33915	The	_	_	
205-2	33916-33922	method	_	_	
205-3	33923-33931	includes	_	_	
205-4	33932-33935	the	_	_	
205-5	33936-33948	architecture	_	_	
205-6	33948-33949	/	_	_	
205-7	33949-33953	type	_	_	
205-8	33954-33956	of	_	_	
205-9	33957-33960	the	_	_	
205-10	33961-33963	ML	_	_	
205-11	33964-33969	model	_	_	
205-12	33969-33970	,	_	_	
205-13	33971-33974	e.g	_	_	
205-14	33974-33975	.	_	_	
205-15	33975-33976	,	_	_	
205-16	33977-33984	whether	_	_	
205-17	33985-33987	it	_	_	
205-18	33988-33990	is	_	_	
205-19	33991-33995	from	_	_	
205-20	33996-33999	the	_	_	
205-21	34000-34003	ANN	_	_	
205-22	34004-34010	family	_	_	
205-23	34011-34013	or	_	_	
205-24	34014-34018	from	_	_	
205-25	34019-34022	the	_	_	
205-26	34023-34029	linear	_	_	
205-27	34030-34036	family	_	_	
205-28	34036-34037	,	_	_	
205-29	34038-34041	and	_	_	
205-30	34042-34044	in	_	_	
205-31	34045-34049	each	_	_	
205-32	34050-34054	case	_	_	
205-33	34054-34055	,	_	_	
205-34	34056-34060	what	_	_	
205-35	34061-34064	the	_	_	
205-36	34065-34081	hyper-parameters	_	_	
205-37	34082-34085	are	_	_	
205-38	34085-34086	,	_	_	
205-39	34087-34090	e.g	_	_	
205-40	34090-34091	.	_	_	
205-41	34091-34092	,	_	_	
205-42	34093-34096	for	_	_	
205-43	34097-34101	Deep	_	_	
205-44	34102-34106	ANNs	_	_	
205-45	34106-34107	,	_	_	
205-46	34108-34111	how	_	_	
205-47	34112-34116	many	_	_	
205-48	34117-34123	hidden	_	_	
205-49	34124-34130	layers	_	_	
205-50	34130-34131	,	_	_	
205-51	34132-34136	with	_	_	
205-52	34137-34142	which	_	_	
205-53	34143-34148	sizes	_	_	
205-54	34148-34149	,	_	_	
205-55	34150-34154	does	_	_	
205-56	34155-34158	the	_	_	
205-57	34159-34161	ML	_	_	
205-58	34162-34167	model	_	_	
205-59	34168-34175	possess	_	_	
205-60	34175-34176	,	_	_	
205-61	34177-34181	what	_	_	
205-62	34182-34184	is	_	_	
205-63	34185-34188	the	_	_	
205-64	34189-34197	learning	_	_	
205-65	34198-34207	algorithm	_	_	
205-66	34208-34212	that	_	_	
205-67	34213-34218	shall	_	_	
205-68	34219-34221	be	_	_	
205-69	34222-34226	used	_	_	
205-70	34227-34230	for	_	_	
205-71	34231-34239	training	_	_	
205-72	34240-34243	the	_	_	
205-73	34244-34246	ML	_	_	
205-74	34247-34252	model	_	_	
205-75	34252-34253	,	_	_	
205-76	34254-34257	e.g	_	_	
205-77	34257-34258	.	_	_	
205-78	34258-34259	,	_	_	
205-79	34260-34270	Stochastic	_	_	
205-80	34271-34279	Gradient	_	_	
205-81	34280-34287	Descent	_	_	
205-82	34288-34289	(	_	_	
205-83	34289-34292	SGD	_	_	
205-84	34292-34293	)	_	_	
205-85	34293-34294	,	_	_	
205-86	34295-34298	and	_	_	
205-87	34299-34301	so	_	_	
205-88	34302-34307	forth	_	_	
205-89	34307-34308	.	_	_	

#Text=The range of ML models/algorithms/methods/techniques is evolving.
206-1	34309-34312	The	_	_	
206-2	34313-34318	range	_	_	
206-3	34319-34321	of	_	_	
206-4	34322-34324	ML	_	_	
206-5	34325-34331	models	_	_	
206-6	34331-34332	/	_	_	
206-7	34332-34342	algorithms	_	_	
206-8	34342-34343	/	_	_	
206-9	34343-34350	methods	_	_	
206-10	34350-34351	/	_	_	
206-11	34351-34361	techniques	_	_	
206-12	34362-34364	is	_	_	
206-13	34365-34373	evolving	_	_	
206-14	34373-34374	.	_	_	

#Text=However, currently, the following ML methods are supported (check out the API documentations of the respective libraries for the list of possible parameters/arguments, their order and their default values):\r
#Text=\r
#Text=**For supervised ML:**\r
#Text=1.
207-1	34375-34382	However	_	_	
207-2	34382-34383	,	_	_	
207-3	34384-34393	currently	_	_	
207-4	34393-34394	,	_	_	
207-5	34395-34398	the	_	_	
207-6	34399-34408	following	_	_	
207-7	34409-34411	ML	_	_	
207-8	34412-34419	methods	_	_	
207-9	34420-34423	are	_	_	
207-10	34424-34433	supported	_	_	
207-11	34434-34435	(	_	_	
207-12	34435-34440	check	_	_	
207-13	34441-34444	out	_	_	
207-14	34445-34448	the	_	_	
207-15	34449-34452	API	_	_	
207-16	34453-34467	documentations	_	_	
207-17	34468-34470	of	_	_	
207-18	34471-34474	the	_	_	
207-19	34475-34485	respective	_	_	
207-20	34486-34495	libraries	_	_	
207-21	34496-34499	for	_	_	
207-22	34500-34503	the	_	_	
207-23	34504-34508	list	_	_	
207-24	34509-34511	of	_	_	
207-25	34512-34520	possible	_	_	
207-26	34521-34531	parameters	_	_	
207-27	34531-34532	/	_	_	
207-28	34532-34541	arguments	_	_	
207-29	34541-34542	,	_	_	
207-30	34543-34548	their	_	_	
207-31	34549-34554	order	_	_	
207-32	34555-34558	and	_	_	
207-33	34559-34564	their	_	_	
207-34	34565-34572	default	_	_	
207-35	34573-34579	values	_	_	
207-36	34579-34580	)	_	_	
207-37	34580-34581	:	_	_	
207-38	34585-34586	*	_	_	
207-39	34586-34587	*	_	_	
207-40	34587-34590	For	_	_	
207-41	34591-34601	supervised	_	_	
207-42	34602-34604	ML	_	_	
207-43	34604-34605	:	_	_	
207-44	34605-34606	*	_	_	
207-45	34606-34607	*	_	_	
207-46	34609-34610	1	_	_	
207-47	34610-34611	.	_	_	

#Text=Logistic Regression for linear classification, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)\r
#Text=2.
208-1	34612-34620	Logistic	_	_	
208-2	34621-34631	Regression	_	_	
208-3	34632-34635	for	_	_	
208-4	34636-34642	linear	_	_	
208-5	34643-34657	classification	_	_	
208-6	34657-34658	,	_	_	
208-7	34659-34662	see	_	_	
208-8	34663-34666	the	_	_	
208-9	34667-34668	[	_	_	
208-10	34668-34680	Scikit-Learn	*	SOFTWARE	
208-11	34681-34684	API	_	_	
208-12	34685-34688	doc	_	_	
208-13	34688-34689	]	_	_	
208-14	34689-34690	(	_	_	
208-15	34690-34695	https	_	_	
208-16	34695-34696	:	_	_	
208-17	34696-34697	/	_	_	
208-18	34697-34698	/	_	_	
208-19	34698-34714	scikit-learn.org	_	_	
208-19.1	34698-34710	scikit-learn	*	SOFTWARE	
208-20	34714-34715	/	_	_	
208-21	34715-34721	stable	_	_	
208-22	34721-34722	/	_	_	
208-23	34722-34729	modules	_	_	
208-24	34729-34730	/	_	_	
208-25	34730-34739	generated	_	_	
208-26	34739-34740	/	_	_	
208-27	34740-34784	sklearn.linear_model.LogisticRegression.html	_	_	
208-28	34784-34785	)	_	_	
208-29	34787-34788	2	_	_	
208-30	34788-34789	.	_	_	

#Text=Linear Regression, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)\r
#Text=3.
209-1	34790-34796	Linear	_	_	
209-2	34797-34807	Regression	_	_	
209-3	34807-34808	,	_	_	
209-4	34809-34812	see	_	_	
209-5	34813-34816	the	_	_	
209-6	34817-34818	[	_	_	
209-7	34818-34830	Scikit-Learn	*	SOFTWARE	
209-8	34831-34834	API	_	_	
209-9	34835-34838	doc	_	_	
209-10	34838-34839	]	_	_	
209-11	34839-34840	(	_	_	
209-12	34840-34845	https	_	_	
209-13	34845-34846	:	_	_	
209-14	34846-34847	/	_	_	
209-15	34847-34848	/	_	_	
209-16	34848-34864	scikit-learn.org	_	_	
209-16.1	34848-34860	scikit-learn	*	SOFTWARE	
209-17	34864-34865	/	_	_	
209-18	34865-34871	stable	_	_	
209-19	34871-34872	/	_	_	
209-20	34872-34879	modules	_	_	
209-21	34879-34880	/	_	_	
209-22	34880-34889	generated	_	_	
209-23	34889-34890	/	_	_	
209-24	34890-34932	sklearn.linear_model.LinearRegression.html	_	_	
209-25	34932-34933	)	_	_	
209-26	34935-34936	3	_	_	
209-27	34936-34937	.	_	_	

#Text=Gaussian Naive Bayes, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html)\r
#Text=4.
210-1	34938-34946	Gaussian	_	_	
210-2	34947-34952	Naive	_	_	
210-3	34953-34958	Bayes	_	_	
210-4	34958-34959	,	_	_	
210-5	34960-34963	see	_	_	
210-6	34964-34967	the	_	_	
210-7	34968-34969	[	_	_	
210-8	34969-34981	Scikit-Learn	*	SOFTWARE	
210-9	34982-34985	API	_	_	
210-10	34986-34989	doc	_	_	
210-11	34989-34990	]	_	_	
210-12	34990-34991	(	_	_	
210-13	34991-34996	https	_	_	
210-14	34996-34997	:	_	_	
210-15	34997-34998	/	_	_	
210-16	34998-34999	/	_	_	
210-17	34999-35015	scikit-learn.org	_	_	
210-17.1	34999-35011	scikit-learn	*	SOFTWARE	
210-18	35015-35016	/	_	_	
210-19	35016-35022	stable	_	_	
210-20	35022-35023	/	_	_	
210-21	35023-35030	modules	_	_	
210-22	35030-35031	/	_	_	
210-23	35031-35040	generated	_	_	
210-24	35040-35041	/	_	_	
210-25	35041-35076	sklearn.naive_bayes.GaussianNB.html	_	_	
210-26	35076-35077	)	_	_	
210-27	35079-35080	4	_	_	
210-28	35080-35081	.	_	_	

#Text=Multinomial Naive Bayes, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html)\r
#Text=5.
211-1	35082-35093	Multinomial	_	_	
211-2	35094-35099	Naive	_	_	
211-3	35100-35105	Bayes	_	_	
211-4	35105-35106	,	_	_	
211-5	35107-35110	see	_	_	
211-6	35111-35114	the	_	_	
211-7	35115-35116	[	_	_	
211-8	35116-35128	Scikit-Learn	*	SOFTWARE	
211-9	35129-35132	API	_	_	
211-10	35133-35136	doc	_	_	
211-11	35136-35137	]	_	_	
211-12	35137-35138	(	_	_	
211-13	35138-35143	https	_	_	
211-14	35143-35144	:	_	_	
211-15	35144-35145	/	_	_	
211-16	35145-35146	/	_	_	
211-17	35146-35162	scikit-learn.org	_	_	
211-17.1	35146-35158	scikit-learn	*	SOFTWARE	
211-18	35162-35163	/	_	_	
211-19	35163-35169	stable	_	_	
211-20	35169-35170	/	_	_	
211-21	35170-35177	modules	_	_	
211-22	35177-35178	/	_	_	
211-23	35178-35187	generated	_	_	
211-24	35187-35188	/	_	_	
211-25	35188-35226	sklearn.naive_bayes.MultinomialNB.html	_	_	
211-26	35226-35227	)	_	_	
211-27	35229-35230	5	_	_	
211-28	35230-35231	.	_	_	

#Text=Complement Naive Bayes, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.ComplementNB.html)\r
#Text=6.
212-1	35232-35242	Complement	_	_	
212-2	35243-35248	Naive	_	_	
212-3	35249-35254	Bayes	_	_	
212-4	35254-35255	,	_	_	
212-5	35256-35259	see	_	_	
212-6	35260-35263	the	_	_	
212-7	35264-35265	[	_	_	
212-8	35265-35277	Scikit-Learn	*	SOFTWARE	
212-9	35278-35281	API	_	_	
212-10	35282-35285	doc	_	_	
212-11	35285-35286	]	_	_	
212-12	35286-35287	(	_	_	
212-13	35287-35292	https	_	_	
212-14	35292-35293	:	_	_	
212-15	35293-35294	/	_	_	
212-16	35294-35295	/	_	_	
212-17	35295-35311	scikit-learn.org	_	_	
212-17.1	35295-35307	scikit-learn	*	SOFTWARE	
212-18	35311-35312	/	_	_	
212-19	35312-35318	stable	_	_	
212-20	35318-35319	/	_	_	
212-21	35319-35326	modules	_	_	
212-22	35326-35327	/	_	_	
212-23	35327-35336	generated	_	_	
212-24	35336-35337	/	_	_	
212-25	35337-35374	sklearn.naive_bayes.ComplementNB.html	_	_	
212-26	35374-35375	)	_	_	
212-27	35377-35378	6	_	_	
212-28	35378-35379	.	_	_	

#Text=Bernoulli Naive Bayes, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.BernoulliNB.html)\r
#Text=7.
213-1	35380-35389	Bernoulli	_	_	
213-2	35390-35395	Naive	_	_	
213-3	35396-35401	Bayes	_	_	
213-4	35401-35402	,	_	_	
213-5	35403-35406	see	_	_	
213-6	35407-35410	the	_	_	
213-7	35411-35412	[	_	_	
213-8	35412-35424	Scikit-Learn	*	SOFTWARE	
213-9	35425-35428	API	_	_	
213-10	35429-35432	doc	_	_	
213-11	35432-35433	]	_	_	
213-12	35433-35434	(	_	_	
213-13	35434-35439	https	_	_	
213-14	35439-35440	:	_	_	
213-15	35440-35441	/	_	_	
213-16	35441-35442	/	_	_	
213-17	35442-35458	scikit-learn.org	_	_	
213-17.1	35442-35454	scikit-learn	*	SOFTWARE	
213-18	35458-35459	/	_	_	
213-19	35459-35465	stable	_	_	
213-20	35465-35466	/	_	_	
213-21	35466-35473	modules	_	_	
213-22	35473-35474	/	_	_	
213-23	35474-35483	generated	_	_	
213-24	35483-35484	/	_	_	
213-25	35484-35520	sklearn.naive_bayes.BernoulliNB.html	_	_	
213-26	35520-35521	)	_	_	
213-27	35523-35524	7	_	_	
213-28	35524-35525	.	_	_	

#Text=Categorical Naive Bayes, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.CategoricalNB.html)\r
#Text=8.
214-1	35526-35537	Categorical	_	_	
214-2	35538-35543	Naive	_	_	
214-3	35544-35549	Bayes	_	_	
214-4	35549-35550	,	_	_	
214-5	35551-35554	see	_	_	
214-6	35555-35558	the	_	_	
214-7	35559-35560	[	_	_	
214-8	35560-35572	Scikit-Learn	*	SOFTWARE	
214-9	35573-35576	API	_	_	
214-10	35577-35580	doc	_	_	
214-11	35580-35581	]	_	_	
214-12	35581-35582	(	_	_	
214-13	35582-35587	https	_	_	
214-14	35587-35588	:	_	_	
214-15	35588-35589	/	_	_	
214-16	35589-35590	/	_	_	
214-17	35590-35606	scikit-learn.org	_	_	
214-17.1	35590-35602	scikit-learn	*	SOFTWARE	
214-18	35606-35607	/	_	_	
214-19	35607-35613	stable	_	_	
214-20	35613-35614	/	_	_	
214-21	35614-35621	modules	_	_	
214-22	35621-35622	/	_	_	
214-23	35622-35631	generated	_	_	
214-24	35631-35632	/	_	_	
214-25	35632-35670	sklearn.naive_bayes.CategoricalNB.html	_	_	
214-26	35670-35671	)	_	_	
214-27	35673-35674	8	_	_	
214-28	35674-35675	.	_	_	

#Text=Decision Tree Regressor and Decision Tree Classifier, see the [Scikit-Learn API doc (regression)](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html) / [Scikit-Learn API doc (classification)](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html)\r
#Text=9.
215-1	35676-35684	Decision	_	_	
215-2	35685-35689	Tree	_	_	
215-3	35690-35699	Regressor	_	_	
215-4	35700-35703	and	_	_	
215-5	35704-35712	Decision	_	_	
215-6	35713-35717	Tree	_	_	
215-7	35718-35728	Classifier	_	_	
215-8	35728-35729	,	_	_	
215-9	35730-35733	see	_	_	
215-10	35734-35737	the	_	_	
215-11	35738-35739	[	_	_	
215-12	35739-35751	Scikit-Learn	*	SOFTWARE	
215-13	35752-35755	API	_	_	
215-14	35756-35759	doc	_	_	
215-15	35760-35761	(	_	_	
215-16	35761-35771	regression	_	_	
215-17	35771-35772	)	_	_	
215-18	35772-35773	]	_	_	
215-19	35773-35774	(	_	_	
215-20	35774-35779	https	_	_	
215-21	35779-35780	:	_	_	
215-22	35780-35781	/	_	_	
215-23	35781-35782	/	_	_	
215-24	35782-35798	scikit-learn.org	_	_	
215-24.1	35782-35794	scikit-learn	*	SOFTWARE	
215-25	35798-35799	/	_	_	
215-26	35799-35805	stable	_	_	
215-27	35805-35806	/	_	_	
215-28	35806-35813	modules	_	_	
215-29	35813-35814	/	_	_	
215-30	35814-35823	generated	_	_	
215-31	35823-35824	/	_	_	
215-32	35824-35863	sklearn.tree.DecisionTreeRegressor.html	_	_	
215-33	35863-35864	)	_	_	
215-34	35865-35866	/	_	_	
215-35	35867-35868	[	_	_	
215-36	35868-35880	Scikit-Learn	*	SOFTWARE	
215-37	35881-35884	API	_	_	
215-38	35885-35888	doc	_	_	
215-39	35889-35890	(	_	_	
215-40	35890-35904	classification	_	_	
215-41	35904-35905	)	_	_	
215-42	35905-35906	]	_	_	
215-43	35906-35907	(	_	_	
215-44	35907-35912	https	_	_	
215-45	35912-35913	:	_	_	
215-46	35913-35914	/	_	_	
215-47	35914-35915	/	_	_	
215-48	35915-35931	scikit-learn.org	_	_	
215-48.1	35915-35927	scikit-learn	*	SOFTWARE	
215-49	35931-35932	/	_	_	
215-50	35932-35938	stable	_	_	
215-51	35938-35939	/	_	_	
215-52	35939-35946	modules	_	_	
215-53	35946-35947	/	_	_	
215-54	35947-35956	generated	_	_	
215-55	35956-35957	/	_	_	
215-56	35957-35997	sklearn.tree.DecisionTreeClassifier.html	_	_	
215-57	35997-35998	)	_	_	
215-58	36000-36001	9	_	_	
215-59	36001-36002	.	_	_	

#Text=The Random Forest Regressor and Random Forest Classifier ensemble methods, see the [Scikit-Learn API doc (regression)](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html) / [Scikit-Learn API doc (classification)](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)\r
#Text=10.
216-1	36003-36006	The	_	_	
216-2	36007-36013	Random	_	_	
216-3	36014-36020	Forest	_	_	
216-4	36021-36030	Regressor	_	_	
216-5	36031-36034	and	_	_	
216-6	36035-36041	Random	_	_	
216-7	36042-36048	Forest	_	_	
216-8	36049-36059	Classifier	_	_	
216-9	36060-36068	ensemble	_	_	
216-10	36069-36076	methods	_	_	
216-11	36076-36077	,	_	_	
216-12	36078-36081	see	_	_	
216-13	36082-36085	the	_	_	
216-14	36086-36087	[	_	_	
216-15	36087-36099	Scikit-Learn	*	SOFTWARE	
216-16	36100-36103	API	_	_	
216-17	36104-36107	doc	_	_	
216-18	36108-36109	(	_	_	
216-19	36109-36119	regression	_	_	
216-20	36119-36120	)	_	_	
216-21	36120-36121	]	_	_	
216-22	36121-36122	(	_	_	
216-23	36122-36127	https	_	_	
216-24	36127-36128	:	_	_	
216-25	36128-36129	/	_	_	
216-26	36129-36130	/	_	_	
216-27	36130-36146	scikit-learn.org	_	_	
216-27.1	36130-36142	scikit-learn	*	SOFTWARE	
216-28	36146-36147	/	_	_	
216-29	36147-36153	stable	_	_	
216-30	36153-36154	/	_	_	
216-31	36154-36161	modules	_	_	
216-32	36161-36162	/	_	_	
216-33	36162-36171	generated	_	_	
216-34	36171-36172	/	_	_	
216-35	36172-36215	sklearn.ensemble.RandomForestRegressor.html	_	_	
216-36	36215-36216	)	_	_	
216-37	36217-36218	/	_	_	
216-38	36219-36220	[	_	_	
216-39	36220-36232	Scikit-Learn	*	SOFTWARE	
216-40	36233-36236	API	_	_	
216-41	36237-36240	doc	_	_	
216-42	36241-36242	(	_	_	
216-43	36242-36256	classification	_	_	
216-44	36256-36257	)	_	_	
216-45	36257-36258	]	_	_	
216-46	36258-36259	(	_	_	
216-47	36259-36264	https	_	_	
216-48	36264-36265	:	_	_	
216-49	36265-36266	/	_	_	
216-50	36266-36267	/	_	_	
216-51	36267-36283	scikit-learn.org	_	_	
216-51.1	36267-36279	scikit-learn	*	SOFTWARE	
216-52	36283-36284	/	_	_	
216-53	36284-36290	stable	_	_	
216-54	36290-36291	/	_	_	
216-55	36291-36298	modules	_	_	
216-56	36298-36299	/	_	_	
216-57	36299-36308	generated	_	_	
216-58	36308-36309	/	_	_	
216-59	36309-36353	sklearn.ensemble.RandomForestClassifier.html	_	_	
216-60	36353-36354	)	_	_	
216-61	36356-36358	10	_	_	
216-62	36358-36359	.	_	_	

#Text=The Multi-Layer Perceptron (MLP) Artificial Neural Networks (ANN) for classification and regression, see the [Keras API doc (default)](https://keras.io/guides/sequential_model/) and the [Scikit-Learn API doc (regression)](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html) / [Scikit-Learn API doc (classification)](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html).
217-1	36360-36363	The	_	_	
217-2	36364-36375	Multi-Layer	_	_	
217-3	36376-36386	Perceptron	_	_	
217-4	36387-36388	(	_	_	
217-5	36388-36391	MLP	_	_	
217-6	36391-36392	)	_	_	
217-7	36393-36403	Artificial	_	_	
217-8	36404-36410	Neural	_	_	
217-9	36411-36419	Networks	_	_	
217-10	36420-36421	(	_	_	
217-11	36421-36424	ANN	_	_	
217-12	36424-36425	)	_	_	
217-13	36426-36429	for	_	_	
217-14	36430-36444	classification	_	_	
217-15	36445-36448	and	_	_	
217-16	36449-36459	regression	_	_	
217-17	36459-36460	,	_	_	
217-18	36461-36464	see	_	_	
217-19	36465-36468	the	_	_	
217-20	36469-36470	[	_	_	
217-21	36470-36475	Keras	*	SOFTWARE	
217-22	36476-36479	API	_	_	
217-23	36480-36483	doc	_	_	
217-24	36484-36485	(	_	_	
217-25	36485-36492	default	_	_	
217-26	36492-36493	)	_	_	
217-27	36493-36494	]	_	_	
217-28	36494-36495	(	_	_	
217-29	36495-36500	https	_	_	
217-30	36500-36501	:	_	_	
217-31	36501-36502	/	_	_	
217-32	36502-36503	/	_	_	
217-33	36503-36511	keras.io	_	_	
217-33.1	36503-36508	keras	*	SOFTWARE	
217-34	36511-36512	/	_	_	
217-35	36512-36518	guides	_	_	
217-36	36518-36519	/	_	_	
217-37	36519-36535	sequential_model	_	_	
217-38	36535-36536	/	_	_	
217-39	36536-36537	)	_	_	
217-40	36538-36541	and	_	_	
217-41	36542-36545	the	_	_	
217-42	36546-36547	[	_	_	
217-43	36547-36559	Scikit-Learn	*	SOFTWARE	
217-44	36560-36563	API	_	_	
217-45	36564-36567	doc	_	_	
217-46	36568-36569	(	_	_	
217-47	36569-36579	regression	_	_	
217-48	36579-36580	)	_	_	
217-49	36580-36581	]	_	_	
217-50	36581-36582	(	_	_	
217-51	36582-36587	https	_	_	
217-52	36587-36588	:	_	_	
217-53	36588-36589	/	_	_	
217-54	36589-36590	/	_	_	
217-55	36590-36606	scikit-learn.org	_	_	
217-55.1	36590-36602	scikit-learn	*	SOFTWARE	
217-56	36606-36607	/	_	_	
217-57	36607-36613	stable	_	_	
217-58	36613-36614	/	_	_	
217-59	36614-36621	modules	_	_	
217-60	36621-36622	/	_	_	
217-61	36622-36631	generated	_	_	
217-62	36631-36632	/	_	_	
217-63	36632-36672	sklearn.neural_network.MLPRegressor.html	_	_	
217-64	36672-36673	)	_	_	
217-65	36674-36675	/	_	_	
217-66	36676-36677	[	_	_	
217-67	36677-36689	Scikit-Learn	*	SOFTWARE	
217-68	36690-36693	API	_	_	
217-69	36694-36697	doc	_	_	
217-70	36698-36699	(	_	_	
217-71	36699-36713	classification	_	_	
217-72	36713-36714	)	_	_	
217-73	36714-36715	]	_	_	
217-74	36715-36716	(	_	_	
217-75	36716-36721	https	_	_	
217-76	36721-36722	:	_	_	
217-77	36722-36723	/	_	_	
217-78	36723-36724	/	_	_	
217-79	36724-36740	scikit-learn.org	_	_	
217-79.1	36724-36736	scikit-learn	*	SOFTWARE	
217-80	36740-36741	/	_	_	
217-81	36741-36747	stable	_	_	
217-82	36747-36748	/	_	_	
217-83	36748-36755	modules	_	_	
217-84	36755-36756	/	_	_	
217-85	36756-36765	generated	_	_	
217-86	36765-36766	/	_	_	
217-87	36766-36807	sklearn.neural_network.MLPClassifier.html	_	_	
217-88	36807-36808	)	_	_	
217-89	36808-36809	.	_	_	

#Text=**For unsupervised ML:**\r
#Text=1.
218-1	36813-36814	*	_	_	
218-2	36814-36815	*	_	_	
218-3	36815-36818	For	_	_	
218-4	36819-36831	unsupervised	_	_	
218-5	36832-36834	ML	_	_	
218-6	36834-36835	:	_	_	
218-7	36835-36836	*	_	_	
218-8	36836-36837	*	_	_	
218-9	36839-36840	1	_	_	
218-10	36840-36841	.	_	_	

#Text=K-Means, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html)\r
#Text=2.
219-1	36842-36849	K-Means	_	_	
219-2	36849-36850	,	_	_	
219-3	36851-36854	see	_	_	
219-4	36855-36858	the	_	_	
219-5	36859-36860	[	_	_	
219-6	36860-36872	Scikit-Learn	*	SOFTWARE	
219-7	36873-36876	API	_	_	
219-8	36877-36880	doc	_	_	
219-9	36880-36881	]	_	_	
219-10	36881-36882	(	_	_	
219-11	36882-36887	https	_	_	
219-12	36887-36888	:	_	_	
219-13	36888-36889	/	_	_	
219-14	36889-36890	/	_	_	
219-15	36890-36906	scikit-learn.org	_	_	
219-15.1	36890-36902	scikit-learn	*	SOFTWARE	
219-16	36906-36907	/	_	_	
219-17	36907-36913	stable	_	_	
219-18	36913-36914	/	_	_	
219-19	36914-36921	modules	_	_	
219-20	36921-36922	/	_	_	
219-21	36922-36931	generated	_	_	
219-22	36931-36932	/	_	_	
219-23	36932-36959	sklearn.cluster.KMeans.html	_	_	
219-24	36959-36960	)	_	_	
219-25	36962-36963	2	_	_	
219-26	36963-36964	.	_	_	

#Text=Mini-Batch K-Means, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.MiniBatchKMeans.html)\r
#Text=3.
220-1	36965-36975	Mini-Batch	_	_	
220-2	36976-36983	K-Means	_	_	
220-3	36983-36984	,	_	_	
220-4	36985-36988	see	_	_	
220-5	36989-36992	the	_	_	
220-6	36993-36994	[	_	_	
220-7	36994-37006	Scikit-Learn	*	SOFTWARE	
220-8	37007-37010	API	_	_	
220-9	37011-37014	doc	_	_	
220-10	37014-37015	]	_	_	
220-11	37015-37016	(	_	_	
220-12	37016-37021	https	_	_	
220-13	37021-37022	:	_	_	
220-14	37022-37023	/	_	_	
220-15	37023-37024	/	_	_	
220-16	37024-37040	scikit-learn.org	_	_	
220-16.1	37024-37036	scikit-learn	*	SOFTWARE	
220-17	37040-37041	/	_	_	
220-18	37041-37047	stable	_	_	
220-19	37047-37048	/	_	_	
220-20	37048-37055	modules	_	_	
220-21	37055-37056	/	_	_	
220-22	37056-37065	generated	_	_	
220-23	37065-37066	/	_	_	
220-24	37066-37102	sklearn.cluster.MiniBatchKMeans.html	_	_	
220-25	37102-37103	)	_	_	
220-26	37105-37106	3	_	_	
220-27	37106-37107	.	_	_	

#Text=DB-SCAN, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html)\r
#Text=4.
221-1	37108-37115	DB-SCAN	_	_	
221-2	37115-37116	,	_	_	
221-3	37117-37120	see	_	_	
221-4	37121-37124	the	_	_	
221-5	37125-37126	[	_	_	
221-6	37126-37138	Scikit-Learn	*	SOFTWARE	
221-7	37139-37142	API	_	_	
221-8	37143-37146	doc	_	_	
221-9	37146-37147	]	_	_	
221-10	37147-37148	(	_	_	
221-11	37148-37153	https	_	_	
221-12	37153-37154	:	_	_	
221-13	37154-37155	/	_	_	
221-14	37155-37156	/	_	_	
221-15	37156-37172	scikit-learn.org	_	_	
221-15.1	37156-37168	scikit-learn	*	SOFTWARE	
221-16	37172-37173	/	_	_	
221-17	37173-37179	stable	_	_	
221-18	37179-37180	/	_	_	
221-19	37180-37187	modules	_	_	
221-20	37187-37188	/	_	_	
221-21	37188-37197	generated	_	_	
221-22	37197-37198	/	_	_	
221-23	37198-37225	sklearn.cluster.DBSCAN.html	_	_	
221-24	37225-37226	)	_	_	
221-25	37228-37229	4	_	_	
221-26	37229-37230	.	_	_	

#Text=Spectral Clustering, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html)\r
#Text=5.
222-1	37231-37239	Spectral	_	_	
222-2	37240-37250	Clustering	_	_	
222-3	37250-37251	,	_	_	
222-4	37252-37255	see	_	_	
222-5	37256-37259	the	_	_	
222-6	37260-37261	[	_	_	
222-7	37261-37273	Scikit-Learn	*	SOFTWARE	
222-8	37274-37277	API	_	_	
222-9	37278-37281	doc	_	_	
222-10	37281-37282	]	_	_	
222-11	37282-37283	(	_	_	
222-12	37283-37288	https	_	_	
222-13	37288-37289	:	_	_	
222-14	37289-37290	/	_	_	
222-15	37290-37291	/	_	_	
222-16	37291-37307	scikit-learn.org	_	_	
222-16.1	37291-37303	scikit-learn	*	SOFTWARE	
222-17	37307-37308	/	_	_	
222-18	37308-37314	stable	_	_	
222-19	37314-37315	/	_	_	
222-20	37315-37322	modules	_	_	
222-21	37322-37323	/	_	_	
222-22	37323-37332	generated	_	_	
222-23	37332-37333	/	_	_	
222-24	37333-37372	sklearn.cluster.SpectralClustering.html	_	_	
222-25	37372-37373	)	_	_	
222-26	37375-37376	5	_	_	
222-27	37376-37377	.	_	_	

#Text=Gaussian Mixture Model, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html)\r
#Text=\r
#Text=**For semi-supervised ML:**\r
#Text=1.
223-1	37378-37386	Gaussian	_	_	
223-2	37387-37394	Mixture	_	_	
223-3	37395-37400	Model	_	_	
223-4	37400-37401	,	_	_	
223-5	37402-37405	see	_	_	
223-6	37406-37409	the	_	_	
223-7	37410-37411	[	_	_	
223-8	37411-37423	Scikit-Learn	*	SOFTWARE	
223-9	37424-37427	API	_	_	
223-10	37428-37431	doc	_	_	
223-11	37431-37432	]	_	_	
223-12	37432-37433	(	_	_	
223-13	37433-37438	https	_	_	
223-14	37438-37439	:	_	_	
223-15	37439-37440	/	_	_	
223-16	37440-37441	/	_	_	
223-17	37441-37457	scikit-learn.org	_	_	
223-17.1	37441-37453	scikit-learn	*	SOFTWARE	
223-18	37457-37458	/	_	_	
223-19	37458-37464	stable	_	_	
223-20	37464-37465	/	_	_	
223-21	37465-37472	modules	_	_	
223-22	37472-37473	/	_	_	
223-23	37473-37482	generated	_	_	
223-24	37482-37483	/	_	_	
223-25	37483-37519	sklearn.mixture.GaussianMixture.html	_	_	
223-26	37519-37520	)	_	_	
223-27	37524-37525	*	_	_	
223-28	37525-37526	*	_	_	
223-29	37526-37529	For	_	_	
223-30	37530-37545	semi-supervised	_	_	
223-31	37546-37548	ML	_	_	
223-32	37548-37549	:	_	_	
223-33	37549-37550	*	_	_	
223-34	37550-37551	*	_	_	
223-35	37553-37554	1	_	_	
223-36	37554-37555	.	_	_	

#Text=Self-Training, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.html)\r
#Text=2.
224-1	37556-37569	Self-Training	_	_	
224-2	37569-37570	,	_	_	
224-3	37571-37574	see	_	_	
224-4	37575-37578	the	_	_	
224-5	37579-37580	[	_	_	
224-6	37580-37592	Scikit-Learn	*	SOFTWARE	
224-7	37593-37596	API	_	_	
224-8	37597-37600	doc	_	_	
224-9	37600-37601	]	_	_	
224-10	37601-37602	(	_	_	
224-11	37602-37607	https	_	_	
224-12	37607-37608	:	_	_	
224-13	37608-37609	/	_	_	
224-14	37609-37610	/	_	_	
224-15	37610-37626	scikit-learn.org	_	_	
224-15.1	37610-37622	scikit-learn	*	SOFTWARE	
224-16	37626-37627	/	_	_	
224-17	37627-37633	stable	_	_	
224-18	37633-37634	/	_	_	
224-19	37634-37641	modules	_	_	
224-20	37641-37642	/	_	_	
224-21	37642-37651	generated	_	_	
224-22	37651-37652	/	_	_	
224-23	37652-37703	sklearn.semi_supervised.SelfTrainingClassifier.html	_	_	
224-24	37703-37704	)	_	_	
224-25	37706-37707	2	_	_	
224-26	37707-37708	.	_	_	

#Text=Label Propagation, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.LabelPropagation.html)\r
#Text=3.
225-1	37709-37714	Label	_	_	
225-2	37715-37726	Propagation	_	_	
225-3	37726-37727	,	_	_	
225-4	37728-37731	see	_	_	
225-5	37732-37735	the	_	_	
225-6	37736-37737	[	_	_	
225-7	37737-37749	Scikit-Learn	*	SOFTWARE	
225-8	37750-37753	API	_	_	
225-9	37754-37757	doc	_	_	
225-10	37757-37758	]	_	_	
225-11	37758-37759	(	_	_	
225-12	37759-37764	https	_	_	
225-13	37764-37765	:	_	_	
225-14	37765-37766	/	_	_	
225-15	37766-37767	/	_	_	
225-16	37767-37783	scikit-learn.org	_	_	
225-16.1	37767-37779	scikit-learn	*	SOFTWARE	
225-17	37783-37784	/	_	_	
225-18	37784-37790	stable	_	_	
225-19	37790-37791	/	_	_	
225-20	37791-37798	modules	_	_	
225-21	37798-37799	/	_	_	
225-22	37799-37808	generated	_	_	
225-23	37808-37809	/	_	_	
225-24	37809-37854	sklearn.semi_supervised.LabelPropagation.html	_	_	
225-25	37854-37855	)	_	_	
225-26	37857-37858	3	_	_	
225-27	37858-37859	.	_	_	

#Text=Label Spreading, see the [Scikit-Learn API doc](https://scikit-learn.org/stable/modules/generated/sklearn.semi_supervised.LabelSpreading.html)\r
#Text=\r
#Text=Here is an example for the DAML model_algorithm (i.e., the DAML method):\r
#Text=\r
#Text=model_algorithm k_means my_k_means(n_clusters 2, random_state 10)\r
#Text=\r
#Text=**Note:** Obviously, not every ML method (model_algorithm) is implemented in every ML library/framework.
226-1	37860-37865	Label	_	_	
226-2	37866-37875	Spreading	_	_	
226-3	37875-37876	,	_	_	
226-4	37877-37880	see	_	_	
226-5	37881-37884	the	_	_	
226-6	37885-37886	[	_	_	
226-7	37886-37898	Scikit-Learn	*	SOFTWARE	
226-8	37899-37902	API	_	_	
226-9	37903-37906	doc	_	_	
226-10	37906-37907	]	_	_	
226-11	37907-37908	(	_	_	
226-12	37908-37913	https	_	_	
226-13	37913-37914	:	_	_	
226-14	37914-37915	/	_	_	
226-15	37915-37916	/	_	_	
226-16	37916-37932	scikit-learn.org	_	_	
226-16.1	37916-37928	scikit-learn	*	SOFTWARE	
226-17	37932-37933	/	_	_	
226-18	37933-37939	stable	_	_	
226-19	37939-37940	/	_	_	
226-20	37940-37947	modules	_	_	
226-21	37947-37948	/	_	_	
226-22	37948-37957	generated	_	_	
226-23	37957-37958	/	_	_	
226-24	37958-38001	sklearn.semi_supervised.LabelSpreading.html	_	_	
226-25	38001-38002	)	_	_	
226-26	38006-38010	Here	_	_	
226-27	38011-38013	is	_	_	
226-28	38014-38016	an	_	_	
226-29	38017-38024	example	_	_	
226-30	38025-38028	for	_	_	
226-31	38029-38032	the	_	_	
226-32	38033-38037	DAML	_	_	
226-33	38038-38053	model_algorithm	_	_	
226-34	38054-38055	(	_	_	
226-35	38055-38058	i.e	_	_	
226-36	38058-38059	.	_	_	
226-37	38059-38060	,	_	_	
226-38	38061-38064	the	_	_	
226-39	38065-38069	DAML	_	_	
226-40	38070-38076	method	_	_	
226-41	38076-38077	)	_	_	
226-42	38077-38078	:	_	_	
226-43	38082-38097	model_algorithm	_	_	
226-44	38098-38105	k_means	_	_	
226-45	38106-38116	my_k_means	_	_	
226-46	38116-38117	(	_	_	
226-47	38117-38127	n_clusters	_	_	
226-48	38128-38129	2	_	_	
226-49	38129-38130	,	_	_	
226-50	38131-38143	random_state	_	_	
226-51	38144-38146	10	_	_	
226-52	38146-38147	)	_	_	
226-53	38151-38152	*	_	_	
226-54	38152-38153	*	_	_	
226-55	38153-38157	Note	_	_	
226-56	38157-38158	:	_	_	
226-57	38158-38159	*	_	_	
226-58	38159-38160	*	_	_	
226-59	38161-38170	Obviously	_	_	
226-60	38170-38171	,	_	_	
226-61	38172-38175	not	_	_	
226-62	38176-38181	every	_	_	
226-63	38182-38184	ML	_	_	
226-64	38185-38191	method	_	_	
226-65	38192-38193	(	_	_	
226-66	38193-38208	model_algorithm	_	_	
226-67	38208-38209	)	_	_	
226-68	38210-38212	is	_	_	
226-69	38213-38224	implemented	_	_	
226-70	38225-38227	in	_	_	
226-71	38228-38233	every	_	_	
226-72	38234-38236	ML	_	_	
226-73	38237-38244	library	_	_	
226-74	38244-38245	/	_	_	
226-75	38245-38254	framework	_	_	
226-76	38254-38255	.	_	_	

#Text=The ML libraries/frameworks, which are supported for the code generation for each of the above-mentioned choices for the ML model_algorithm are mentioned in front of them as links (see above).
227-1	38256-38259	The	_	_	
227-2	38260-38262	ML	_	_	
227-3	38263-38272	libraries	_	_	
227-4	38272-38273	/	_	_	
227-5	38273-38283	frameworks	_	_	
227-6	38283-38284	,	_	_	
227-7	38285-38290	which	_	_	
227-8	38291-38294	are	_	_	
227-9	38295-38304	supported	_	_	
227-10	38305-38308	for	_	_	
227-11	38309-38312	the	_	_	
227-12	38313-38317	code	_	_	
227-13	38318-38328	generation	_	_	
227-14	38329-38332	for	_	_	
227-15	38333-38337	each	_	_	
227-16	38338-38340	of	_	_	
227-17	38341-38344	the	_	_	
227-18	38345-38360	above-mentioned	_	_	
227-19	38361-38368	choices	_	_	
227-20	38369-38372	for	_	_	
227-21	38373-38376	the	_	_	
227-22	38377-38379	ML	_	_	
227-23	38380-38395	model_algorithm	_	_	
227-24	38396-38399	are	_	_	
227-25	38400-38409	mentioned	_	_	
227-26	38410-38412	in	_	_	
227-27	38413-38418	front	_	_	
227-28	38419-38421	of	_	_	
227-29	38422-38426	them	_	_	
227-30	38427-38429	as	_	_	
227-31	38430-38435	links	_	_	
227-32	38436-38437	(	_	_	
227-33	38437-38440	see	_	_	
227-34	38441-38446	above	_	_	
227-35	38446-38447	)	_	_	
227-36	38447-38448	.	_	_	

#Text=Hence, you should either avoid mentioning the annotation @dalib, so that the default choice for the ML model_algorithm is set (see the default option for the ML library/framework marked as "(default)", e.g., for the Multi-Layer Perceptron (MLP) above), or you should set the annotation @dalib to the auto mode: @dalib "auto", or you should specify the correct choice, e.g., in the case of the Multi-Layer Perceptron (MLP) the annotation can be set to either @dalib "scikit-learn" or @dalib "keras-tensorflow".
228-1	38449-38454	Hence	_	_	
228-2	38454-38455	,	_	_	
228-3	38456-38459	you	_	_	
228-4	38460-38466	should	_	_	
228-5	38467-38473	either	_	_	
228-6	38474-38479	avoid	_	_	
228-7	38480-38490	mentioning	_	_	
228-8	38491-38494	the	_	_	
228-9	38495-38505	annotation	_	_	
228-10	38506-38507	@	_	_	
228-11	38507-38512	dalib	_	_	
228-12	38512-38513	,	_	_	
228-13	38514-38516	so	_	_	
228-14	38517-38521	that	_	_	
228-15	38522-38525	the	_	_	
228-16	38526-38533	default	_	_	
228-17	38534-38540	choice	_	_	
228-18	38541-38544	for	_	_	
228-19	38545-38548	the	_	_	
228-20	38549-38551	ML	_	_	
228-21	38552-38567	model_algorithm	_	_	
228-22	38568-38570	is	_	_	
228-23	38571-38574	set	_	_	
228-24	38575-38576	(	_	_	
228-25	38576-38579	see	_	_	
228-26	38580-38583	the	_	_	
228-27	38584-38591	default	_	_	
228-28	38592-38598	option	_	_	
228-29	38599-38602	for	_	_	
228-30	38603-38606	the	_	_	
228-31	38607-38609	ML	_	_	
228-32	38610-38617	library	_	_	
228-33	38617-38618	/	_	_	
228-34	38618-38627	framework	_	_	
228-35	38628-38634	marked	_	_	
228-36	38635-38637	as	_	_	
228-37	38638-38639	"	_	_	
228-38	38639-38640	(	_	_	
228-39	38640-38647	default	_	_	
228-40	38647-38648	)	_	_	
228-41	38648-38649	"	_	_	
228-42	38649-38650	,	_	_	
228-43	38651-38654	e.g	_	_	
228-44	38654-38655	.	_	_	
228-45	38655-38656	,	_	_	
228-46	38657-38660	for	_	_	
228-47	38661-38664	the	_	_	
228-48	38665-38676	Multi-Layer	_	_	
228-49	38677-38687	Perceptron	_	_	
228-50	38688-38689	(	_	_	
228-51	38689-38692	MLP	_	_	
228-52	38692-38693	)	_	_	
228-53	38694-38699	above	_	_	
228-54	38699-38700	)	_	_	
228-55	38700-38701	,	_	_	
228-56	38702-38704	or	_	_	
228-57	38705-38708	you	_	_	
228-58	38709-38715	should	_	_	
228-59	38716-38719	set	_	_	
228-60	38720-38723	the	_	_	
228-61	38724-38734	annotation	_	_	
228-62	38735-38736	@	_	_	
228-63	38736-38741	dalib	_	_	
228-64	38742-38744	to	_	_	
228-65	38745-38748	the	_	_	
228-66	38749-38753	auto	_	_	
228-67	38754-38758	mode	_	_	
228-68	38758-38759	:	_	_	
228-69	38760-38761	@	_	_	
228-70	38761-38766	dalib	_	_	
228-71	38767-38768	"	_	_	
228-72	38768-38772	auto	_	_	
228-73	38772-38773	"	_	_	
228-74	38773-38774	,	_	_	
228-75	38775-38777	or	_	_	
228-76	38778-38781	you	_	_	
228-77	38782-38788	should	_	_	
228-78	38789-38796	specify	_	_	
228-79	38797-38800	the	_	_	
228-80	38801-38808	correct	_	_	
228-81	38809-38815	choice	_	_	
228-82	38815-38816	,	_	_	
228-83	38817-38820	e.g	_	_	
228-84	38820-38821	.	_	_	
228-85	38821-38822	,	_	_	
228-86	38823-38825	in	_	_	
228-87	38826-38829	the	_	_	
228-88	38830-38834	case	_	_	
228-89	38835-38837	of	_	_	
228-90	38838-38841	the	_	_	
228-91	38842-38853	Multi-Layer	_	_	
228-92	38854-38864	Perceptron	_	_	
228-93	38865-38866	(	_	_	
228-94	38866-38869	MLP	_	_	
228-95	38869-38870	)	_	_	
228-96	38871-38874	the	_	_	
228-97	38875-38885	annotation	_	_	
228-98	38886-38889	can	_	_	
228-99	38890-38892	be	_	_	
228-100	38893-38896	set	_	_	
228-101	38897-38899	to	_	_	
228-102	38900-38906	either	_	_	
228-103	38907-38908	@	_	_	
228-104	38908-38913	dalib	_	_	
228-105	38914-38915	"	_	_	
228-106	38915-38927	scikit-learn	*	SOFTWARE	
228-107	38927-38928	"	_	_	
228-108	38929-38931	or	_	_	
228-109	38932-38933	@	_	_	
228-110	38933-38938	dalib	_	_	
228-111	38939-38940	"	_	_	
228-112	38940-38956	keras-tensorflow	_	_	
228-112.1	38940-38945	keras	*	SOFTWARE	
228-112.2	38946-38956	tensorflow	*	SOFTWARE	
228-113	38956-38957	"	_	_	
228-114	38957-38958	.	_	_	

#Text=If you are not certain, please do not specify any library/framework manually.
229-1	38959-38961	If	_	_	
229-2	38962-38965	you	_	_	
229-3	38966-38969	are	_	_	
229-4	38970-38973	not	_	_	
229-5	38974-38981	certain	_	_	
229-6	38981-38982	,	_	_	
229-7	38983-38989	please	_	_	
229-8	38990-38992	do	_	_	
229-9	38993-38996	not	_	_	
229-10	38997-39004	specify	_	_	
229-11	39005-39008	any	_	_	
229-12	39009-39016	library	_	_	
229-13	39016-39017	/	_	_	
229-14	39017-39026	framework	_	_	
229-15	39027-39035	manually	_	_	
229-16	39035-39036	.	_	_	

#Text=(xv) **training_results:** This parameter sets the path to the text file that shall log the training and the possible re-trainings of the ML model.
230-1	39040-39041	(	_	_	
230-2	39041-39043	xv	_	_	
230-3	39043-39044	)	_	_	
230-4	39045-39046	*	_	_	
230-5	39046-39047	*	_	_	
230-6	39047-39063	training_results	_	_	
230-7	39063-39064	:	_	_	
230-8	39064-39065	*	_	_	
230-9	39065-39066	*	_	_	
230-10	39067-39071	This	_	_	
230-11	39072-39081	parameter	_	_	
230-12	39082-39086	sets	_	_	
230-13	39087-39090	the	_	_	
230-14	39091-39095	path	_	_	
230-15	39096-39098	to	_	_	
230-16	39099-39102	the	_	_	
230-17	39103-39107	text	_	_	
230-18	39108-39112	file	_	_	
230-19	39113-39117	that	_	_	
230-20	39118-39123	shall	_	_	
230-21	39124-39127	log	_	_	
230-22	39128-39131	the	_	_	
230-23	39132-39140	training	_	_	
230-24	39141-39144	and	_	_	
230-25	39145-39148	the	_	_	
230-26	39149-39157	possible	_	_	
230-27	39158-39170	re-trainings	_	_	
230-28	39171-39173	of	_	_	
230-29	39174-39177	the	_	_	
230-30	39178-39180	ML	_	_	
230-31	39181-39186	model	_	_	
230-32	39186-39187	.	_	_	

#Text=It is recommended to start the path with "data/", so that the training log text file is created in the data directory.
231-1	39188-39190	It	_	_	
231-2	39191-39193	is	_	_	
231-3	39194-39205	recommended	_	_	
231-4	39206-39208	to	_	_	
231-5	39209-39214	start	_	_	
231-6	39215-39218	the	_	_	
231-7	39219-39223	path	_	_	
231-8	39224-39228	with	_	_	
231-9	39229-39230	"	_	_	
231-10	39230-39234	data	_	_	
231-11	39234-39235	/	_	_	
231-12	39235-39236	"	_	_	
231-13	39236-39237	,	_	_	
231-14	39238-39240	so	_	_	
231-15	39241-39245	that	_	_	
231-16	39246-39249	the	_	_	
231-17	39250-39258	training	_	_	
231-18	39259-39262	log	_	_	
231-19	39263-39267	text	_	_	
231-20	39268-39272	file	_	_	
231-21	39273-39275	is	_	_	
231-22	39276-39283	created	_	_	
231-23	39284-39286	in	_	_	
231-24	39287-39290	the	_	_	
231-25	39291-39295	data	_	_	
231-26	39296-39305	directory	_	_	
231-27	39305-39306	.	_	_	

#Text=Note that the serialized objects (e.g., the trained ML models) are stored in a directory, called "pickles" under src/python-scripts/ (in the case of the python_java code generator) or "objects" under src/ (in the case of the pure java code generator).
232-1	39307-39311	Note	_	_	
232-2	39312-39316	that	_	_	
232-3	39317-39320	the	_	_	
232-4	39321-39331	serialized	_	_	
232-5	39332-39339	objects	_	_	
232-6	39340-39341	(	_	_	
232-7	39341-39344	e.g	_	_	
232-8	39344-39345	.	_	_	
232-9	39345-39346	,	_	_	
232-10	39347-39350	the	_	_	
232-11	39351-39358	trained	_	_	
232-12	39359-39361	ML	_	_	
232-13	39362-39368	models	_	_	
232-14	39368-39369	)	_	_	
232-15	39370-39373	are	_	_	
232-16	39374-39380	stored	_	_	
232-17	39381-39383	in	_	_	
232-18	39384-39385	a	_	_	
232-19	39386-39395	directory	_	_	
232-20	39395-39396	,	_	_	
232-21	39397-39403	called	_	_	
232-22	39404-39405	"	_	_	
232-23	39405-39412	pickles	_	_	
232-24	39412-39413	"	_	_	
232-25	39414-39419	under	_	_	
232-26	39420-39423	src	_	_	
232-27	39423-39424	/	_	_	
232-28	39424-39438	python-scripts	_	_	
232-28.1	39424-39430	python	*	PROGLANG	
232-29	39438-39439	/	_	_	
232-30	39440-39441	(	_	_	
232-31	39441-39443	in	_	_	
232-32	39444-39447	the	_	_	
232-33	39448-39452	case	_	_	
232-34	39453-39455	of	_	_	
232-35	39456-39459	the	_	_	
232-36	39460-39471	python_java	_	_	
232-36.1	39460-39466	python	*	PROGLANG	
232-36.2	39467-39471	java	*	PROGLANG	
232-37	39472-39476	code	_	_	
232-38	39477-39486	generator	_	_	
232-39	39486-39487	)	_	_	
232-40	39488-39490	or	_	_	
232-41	39491-39492	"	_	_	
232-42	39492-39499	objects	_	_	
232-43	39499-39500	"	_	_	
232-44	39501-39506	under	_	_	
232-45	39507-39510	src	_	_	
232-46	39510-39511	/	_	_	
232-47	39512-39513	(	_	_	
232-48	39513-39515	in	_	_	
232-49	39516-39519	the	_	_	
232-50	39520-39524	case	_	_	
232-51	39525-39527	of	_	_	
232-52	39528-39531	the	_	_	
232-53	39532-39536	pure	_	_	
232-54	39537-39541	java	*	PROGLANG	
232-55	39542-39546	code	_	_	
232-56	39547-39556	generator	_	_	
232-57	39556-39557	)	_	_	
232-58	39557-39558	.	_	_	

#Text=The majority of them have the Python Pickle or the Java Byte Stream types, respectively.
233-1	39559-39562	The	_	_	
233-2	39563-39571	majority	_	_	
233-3	39572-39574	of	_	_	
233-4	39575-39579	them	_	_	
233-5	39580-39584	have	_	_	
233-6	39585-39588	the	_	_	
233-7	39589-39595	Python	*	PROGLANG	
233-8	39596-39602	Pickle	_	_	
233-9	39603-39605	or	_	_	
233-10	39606-39609	the	_	_	
233-11	39610-39614	Java	*	PROGLANG	
233-12	39615-39619	Byte	_	_	
233-13	39620-39626	Stream	_	_	
233-14	39627-39632	types	_	_	
233-15	39632-39633	,	_	_	
233-16	39634-39646	respectively	_	_	
233-17	39646-39647	.	_	_	

#Text=However, some of them are in other formats.
234-1	39648-39655	However	_	_	
234-2	39655-39656	,	_	_	
234-3	39657-39661	some	_	_	
234-4	39662-39664	of	_	_	
234-5	39665-39669	them	_	_	
234-6	39670-39673	are	_	_	
234-7	39674-39676	in	_	_	
234-8	39677-39682	other	_	_	
234-9	39683-39690	formats	_	_	
234-10	39690-39691	.	_	_	

#Text=For instance, the weights of the Keras ML model parameters are stored in the Hierarchical Data Format (HDF) version 5 (HDF5) with the .h5 file name extension.
235-1	39692-39695	For	_	_	
235-2	39696-39704	instance	_	_	
235-3	39704-39705	,	_	_	
235-4	39706-39709	the	_	_	
235-5	39710-39717	weights	_	_	
235-6	39718-39720	of	_	_	
235-7	39721-39724	the	_	_	
235-8	39725-39730	Keras	*	SOFTWARE	
235-9	39731-39733	ML	_	_	
235-10	39734-39739	model	_	_	
235-11	39740-39750	parameters	_	_	
235-12	39751-39754	are	_	_	
235-13	39755-39761	stored	_	_	
235-14	39762-39764	in	_	_	
235-15	39765-39768	the	_	_	
235-16	39769-39781	Hierarchical	_	_	
235-17	39782-39786	Data	_	_	
235-18	39787-39793	Format	_	_	
235-19	39794-39795	(	_	_	
235-20	39795-39798	HDF	_	_	
235-21	39798-39799	)	_	_	
235-22	39800-39807	version	_	_	
235-23	39808-39809	5	_	_	
235-24	39810-39811	(	_	_	
235-25	39811-39815	HDF5	_	_	
235-26	39815-39816	)	_	_	
235-27	39817-39821	with	_	_	
235-28	39822-39825	the	_	_	
235-29	39826-39827	.	_	_	
235-30	39827-39829	h5	_	_	
235-31	39830-39834	file	_	_	
235-32	39835-39839	name	_	_	
235-33	39840-39849	extension	_	_	
235-34	39849-39850	.	_	_	

#Text=If you want to completely restart an IoT service and remove all its stored data and configurations, you must delete all the files in the pickles/objects directory, which resides in the **src** directory (not in the **target** directory) in the Maven root.
236-1	39851-39853	If	_	_	
236-2	39854-39857	you	_	_	
236-3	39858-39862	want	_	_	
236-4	39863-39865	to	_	_	
236-5	39866-39876	completely	_	_	
236-6	39877-39884	restart	_	_	
236-7	39885-39887	an	_	_	
236-8	39888-39891	IoT	_	_	
236-9	39892-39899	service	_	_	
236-10	39900-39903	and	_	_	
236-11	39904-39910	remove	_	_	
236-12	39911-39914	all	_	_	
236-13	39915-39918	its	_	_	
236-14	39919-39925	stored	_	_	
236-15	39926-39930	data	_	_	
236-16	39931-39934	and	_	_	
236-17	39935-39949	configurations	_	_	
236-18	39949-39950	,	_	_	
236-19	39951-39954	you	_	_	
236-20	39955-39959	must	_	_	
236-21	39960-39966	delete	_	_	
236-22	39967-39970	all	_	_	
236-23	39971-39974	the	_	_	
236-24	39975-39980	files	_	_	
236-25	39981-39983	in	_	_	
236-26	39984-39987	the	_	_	
236-27	39988-39995	pickles	_	_	
236-28	39995-39996	/	_	_	
236-29	39996-40003	objects	_	_	
236-30	40004-40013	directory	_	_	
236-31	40013-40014	,	_	_	
236-32	40015-40020	which	_	_	
236-33	40021-40028	resides	_	_	
236-34	40029-40031	in	_	_	
236-35	40032-40035	the	_	_	
236-36	40036-40037	*	_	_	
236-37	40037-40038	*	_	_	
236-38	40038-40041	src	_	_	
236-39	40041-40042	*	_	_	
236-40	40042-40043	*	_	_	
236-41	40044-40053	directory	_	_	
236-42	40054-40055	(	_	_	
236-43	40055-40058	not	_	_	
236-44	40059-40061	in	_	_	
236-45	40062-40065	the	_	_	
236-46	40066-40067	*	_	_	
236-47	40067-40068	*	_	_	
236-48	40068-40074	target	_	_	
236-49	40074-40075	*	_	_	
236-50	40075-40076	*	_	_	
236-51	40077-40086	directory	_	_	
236-52	40086-40087	)	_	_	
236-53	40088-40090	in	_	_	
236-54	40091-40094	the	_	_	
236-55	40095-40100	Maven	*	SOFTWARE	
236-56	40101-40105	root	_	_	
236-57	40105-40106	.	_	_	

#Text=Note that running "mvn clean" will not affect the contents of the src directory of Maven, but only the target directory.
237-1	40107-40111	Note	_	_	
237-2	40112-40116	that	_	_	
237-3	40117-40124	running	_	_	
237-4	40125-40126	"	_	_	
237-5	40126-40129	mvn	_	_	
237-6	40130-40135	clean	_	_	
237-7	40135-40136	"	_	_	
237-8	40137-40141	will	_	_	
237-9	40142-40145	not	_	_	
237-10	40146-40152	affect	_	_	
237-11	40153-40156	the	_	_	
237-12	40157-40165	contents	_	_	
237-13	40166-40168	of	_	_	
237-14	40169-40172	the	_	_	
237-15	40173-40176	src	_	_	
237-16	40177-40186	directory	_	_	
237-17	40187-40189	of	_	_	
237-18	40190-40195	Maven	*	SOFTWARE	
237-19	40195-40196	,	_	_	
237-20	40197-40200	but	_	_	
237-21	40201-40205	only	_	_	
237-22	40206-40209	the	_	_	
237-23	40210-40216	target	_	_	
237-24	40217-40226	directory	_	_	
237-25	40226-40227	.	_	_	

#Text=(xvi) **blackbox_ml:** If this Boolean parameter is set to true, it means the practitioner is not willing to take a pure MDSE approach.
238-1	40231-40232	(	_	_	
238-2	40232-40235	xvi	_	_	
238-3	40235-40236	)	_	_	
238-4	40237-40238	*	_	_	
238-5	40238-40239	*	_	_	
238-6	40239-40250	blackbox_ml	_	_	
238-7	40250-40251	:	_	_	
238-8	40251-40252	*	_	_	
238-9	40252-40253	*	_	_	
238-10	40254-40256	If	_	_	
238-11	40257-40261	this	_	_	
238-12	40262-40269	Boolean	_	_	
238-13	40270-40279	parameter	_	_	
238-14	40280-40282	is	_	_	
238-15	40283-40286	set	_	_	
238-16	40287-40289	to	_	_	
238-17	40290-40294	true	_	_	
238-18	40294-40295	,	_	_	
238-19	40296-40298	it	_	_	
238-20	40299-40304	means	_	_	
238-21	40305-40308	the	_	_	
238-22	40309-40321	practitioner	_	_	
238-23	40322-40324	is	_	_	
238-24	40325-40328	not	_	_	
238-25	40329-40336	willing	_	_	
238-26	40337-40339	to	_	_	
238-27	40340-40344	take	_	_	
238-28	40345-40346	a	_	_	
238-29	40347-40351	pure	_	_	
238-30	40352-40356	MDSE	_	_	
238-31	40357-40365	approach	_	_	
238-32	40365-40366	.	_	_	

#Text=Instead, the blackbox-ML mode, also known as the hybrid/mixed MDSE/Non-MDSE mode is desired.
239-1	40367-40374	Instead	_	_	
239-2	40374-40375	,	_	_	
239-3	40376-40379	the	_	_	
239-4	40380-40391	blackbox-ML	_	_	
239-5	40392-40396	mode	_	_	
239-6	40396-40397	,	_	_	
239-7	40398-40402	also	_	_	
239-8	40403-40408	known	_	_	
239-9	40409-40411	as	_	_	
239-10	40412-40415	the	_	_	
239-11	40416-40422	hybrid	_	_	
239-12	40422-40423	/	_	_	
239-13	40423-40428	mixed	_	_	
239-14	40429-40433	MDSE	_	_	
239-15	40433-40434	/	_	_	
239-16	40434-40442	Non-MDSE	_	_	
239-17	40443-40447	mode	_	_	
239-18	40448-40450	is	_	_	
239-19	40451-40458	desired	_	_	
239-20	40458-40459	.	_	_	

#Text=Therefore, a pre-trained ML model shall be provided (see below).
240-1	40460-40469	Therefore	_	_	
240-2	40469-40470	,	_	_	
240-3	40471-40472	a	_	_	
240-4	40473-40484	pre-trained	_	_	
240-5	40485-40487	ML	_	_	
240-6	40488-40493	model	_	_	
240-7	40494-40499	shall	_	_	
240-8	40500-40502	be	_	_	
240-9	40503-40511	provided	_	_	
240-10	40512-40513	(	_	_	
240-11	40513-40516	see	_	_	
240-12	40517-40522	below	_	_	
240-13	40522-40523	)	_	_	
240-14	40523-40524	.	_	_	

#Text=(xvii) **blackbox_ml_model:** This parameter is specific to the blackbox-ML mode, as its name suggests.
241-1	40528-40529	(	_	_	
241-2	40529-40533	xvii	_	_	
241-3	40533-40534	)	_	_	
241-4	40535-40536	*	_	_	
241-5	40536-40537	*	_	_	
241-6	40537-40554	blackbox_ml_model	_	_	
241-7	40554-40555	:	_	_	
241-8	40555-40556	*	_	_	
241-9	40556-40557	*	_	_	
241-10	40558-40562	This	_	_	
241-11	40563-40572	parameter	_	_	
241-12	40573-40575	is	_	_	
241-13	40576-40584	specific	_	_	
241-14	40585-40587	to	_	_	
241-15	40588-40591	the	_	_	
241-16	40592-40603	blackbox-ML	_	_	
241-17	40604-40608	mode	_	_	
241-18	40608-40609	,	_	_	
241-19	40610-40612	as	_	_	
241-20	40613-40616	its	_	_	
241-21	40617-40621	name	_	_	
241-22	40622-40630	suggests	_	_	
241-23	40630-40631	.	_	_	

#Text=It specifies the path to the pre-trained ML model that shall be deployed for the predictions.
242-1	40632-40634	It	_	_	
242-2	40635-40644	specifies	_	_	
242-3	40645-40648	the	_	_	
242-4	40649-40653	path	_	_	
242-5	40654-40656	to	_	_	
242-6	40657-40660	the	_	_	
242-7	40661-40672	pre-trained	_	_	
242-8	40673-40675	ML	_	_	
242-9	40676-40681	model	_	_	
242-10	40682-40686	that	_	_	
242-11	40687-40692	shall	_	_	
242-12	40693-40695	be	_	_	
242-13	40696-40704	deployed	_	_	
242-14	40705-40708	for	_	_	
242-15	40709-40712	the	_	_	
242-16	40713-40724	predictions	_	_	
242-17	40724-40725	.	_	_	

#Text=(xviii): **blackbox_import_algorithm:** In order to use the stated pre-trained ML model (see above), the corresponding ML method/algorithm must be imported from the respective ML library.
243-1	40729-40730	(	_	_	
243-2	40730-40735	xviii	_	_	
243-3	40735-40736	)	_	_	
243-4	40736-40737	:	_	_	
243-5	40738-40739	*	_	_	
243-6	40739-40740	*	_	_	
243-7	40740-40765	blackbox_import_algorithm	_	_	
243-8	40765-40766	:	_	_	
243-9	40766-40767	*	_	_	
243-10	40767-40768	*	_	_	
243-11	40769-40771	In	_	_	
243-12	40772-40777	order	_	_	
243-13	40778-40780	to	_	_	
243-14	40781-40784	use	_	_	
243-15	40785-40788	the	_	_	
243-16	40789-40795	stated	_	_	
243-17	40796-40807	pre-trained	_	_	
243-18	40808-40810	ML	_	_	
243-19	40811-40816	model	_	_	
243-20	40817-40818	(	_	_	
243-21	40818-40821	see	_	_	
243-22	40822-40827	above	_	_	
243-23	40827-40828	)	_	_	
243-24	40828-40829	,	_	_	
243-25	40830-40833	the	_	_	
243-26	40834-40847	corresponding	_	_	
243-27	40848-40850	ML	_	_	
243-28	40851-40857	method	_	_	
243-29	40857-40858	/	_	_	
243-30	40858-40867	algorithm	_	_	
243-31	40868-40872	must	_	_	
243-32	40873-40875	be	_	_	
243-33	40876-40884	imported	_	_	
243-34	40885-40889	from	_	_	
243-35	40890-40893	the	_	_	
243-36	40894-40904	respective	_	_	
243-37	40905-40907	ML	_	_	
243-38	40908-40915	library	_	_	
243-39	40915-40916	.	_	_	

#Text=This shall be specified here.
244-1	40917-40921	This	_	_	
244-2	40922-40927	shall	_	_	
244-3	40928-40930	be	_	_	
244-4	40931-40940	specified	_	_	
244-5	40941-40945	here	_	_	
244-6	40945-40946	.	_	_	

#Text=The syntax must match the syntax of the target programming language, e.g., Python.
245-1	40947-40950	The	_	_	
245-2	40951-40957	syntax	_	_	
245-3	40958-40962	must	_	_	
245-4	40963-40968	match	_	_	
245-5	40969-40972	the	_	_	
245-6	40973-40979	syntax	_	_	
245-7	40980-40982	of	_	_	
245-8	40983-40986	the	_	_	
245-9	40987-40993	target	_	_	
245-10	40994-41005	programming	_	_	
245-11	41006-41014	language	_	_	
245-12	41014-41015	,	_	_	
245-13	41016-41019	e.g	_	_	
245-14	41019-41020	.	_	_	
245-15	41020-41021	,	_	_	
245-16	41022-41028	Python	*	PROGLANG	
245-17	41028-41029	.	_	_	

#Text=See "from sklearn.neural_network import MLPClassifier" in the example above.
246-1	41030-41033	See	_	_	
246-2	41034-41035	"	_	_	
246-3	41035-41039	from	_	_	
246-4	41040-41062	sklearn.neural_network	_	_	
246-4.1	41040-41047	sklearn	*	SOFTWARE	
246-5	41063-41069	import	_	_	
246-6	41070-41083	MLPClassifier	_	_	
246-7	41083-41084	"	_	_	
246-8	41085-41087	in	_	_	
246-9	41088-41091	the	_	_	
246-10	41092-41099	example	_	_	
246-11	41100-41105	above	_	_	
246-12	41105-41106	.	_	_	

#Text=(xix): **blackbox_label_encoder:** This is currently disabled in the above-mentioned sample.
247-1	41110-41111	(	_	_	
247-2	41111-41114	xix	_	_	
247-3	41114-41115	)	_	_	
247-4	41115-41116	:	_	_	
247-5	41117-41118	*	_	_	
247-6	41118-41119	*	_	_	
247-7	41119-41141	blackbox_label_encoder	_	_	
247-8	41141-41142	:	_	_	
247-9	41142-41143	*	_	_	
247-10	41143-41144	*	_	_	
247-11	41145-41149	This	_	_	
247-12	41150-41152	is	_	_	
247-13	41153-41162	currently	_	_	
247-14	41163-41171	disabled	_	_	
247-15	41172-41174	in	_	_	
247-16	41175-41178	the	_	_	
247-17	41179-41194	above-mentioned	_	_	
247-18	41195-41201	sample	_	_	
247-19	41201-41202	.	_	_	

#Text=However, in the blackbox-ML mode, if there exist categorical labels that had been transformed to one-hot-encoding via the Label Encoder in Python (Scikit-Learn), the path to the serialized Label Encoder object must be provided here.
248-1	41203-41210	However	_	_	
248-2	41210-41211	,	_	_	
248-3	41212-41214	in	_	_	
248-4	41215-41218	the	_	_	
248-5	41219-41230	blackbox-ML	_	_	
248-6	41231-41235	mode	_	_	
248-7	41235-41236	,	_	_	
248-8	41237-41239	if	_	_	
248-9	41240-41245	there	_	_	
248-10	41246-41251	exist	_	_	
248-11	41252-41263	categorical	_	_	
248-12	41264-41270	labels	_	_	
248-13	41271-41275	that	_	_	
248-14	41276-41279	had	_	_	
248-15	41280-41284	been	_	_	
248-16	41285-41296	transformed	_	_	
248-17	41297-41299	to	_	_	
248-18	41300-41316	one-hot-encoding	_	_	
248-19	41317-41320	via	_	_	
248-20	41321-41324	the	_	_	
248-21	41325-41330	Label	_	_	
248-22	41331-41338	Encoder	_	_	
248-23	41339-41341	in	_	_	
248-24	41342-41348	Python	*	PROGLANG	
248-25	41349-41350	(	_	_	
248-26	41350-41362	Scikit-Learn	*	SOFTWARE	
248-27	41362-41363	)	_	_	
248-28	41363-41364	,	_	_	
248-29	41365-41368	the	_	_	
248-30	41369-41373	path	_	_	
248-31	41374-41376	to	_	_	
248-32	41377-41380	the	_	_	
248-33	41381-41391	serialized	_	_	
248-34	41392-41397	Label	_	_	
248-35	41398-41405	Encoder	_	_	
248-36	41406-41412	object	_	_	
248-37	41413-41417	must	_	_	
248-38	41418-41420	be	_	_	
248-39	41421-41429	provided	_	_	
248-40	41430-41434	here	_	_	
248-41	41434-41435	.	_	_	

#Text=This way, the predictions of the ML model can be transformed back into the original categorical format.
249-1	41436-41440	This	_	_	
249-2	41441-41444	way	_	_	
249-3	41444-41445	,	_	_	
249-4	41446-41449	the	_	_	
249-5	41450-41461	predictions	_	_	
249-6	41462-41464	of	_	_	
249-7	41465-41468	the	_	_	
249-8	41469-41471	ML	_	_	
249-9	41472-41477	model	_	_	
249-10	41478-41481	can	_	_	
249-11	41482-41484	be	_	_	
249-12	41485-41496	transformed	_	_	
249-13	41497-41501	back	_	_	
249-14	41502-41506	into	_	_	
249-15	41507-41510	the	_	_	
249-16	41511-41519	original	_	_	
249-17	41520-41531	categorical	_	_	
249-18	41532-41538	format	_	_	
249-19	41538-41539	.	_	_	

#Text=(xx): **}:** Finally, please do not forget to close the braces (curly brackets) as shown above.\r
#Text=\r
#Text=###### Subsection 3.3: Statechart\r
#Text=The keywords of this subsection of the model instances are highlighted in **red** in the textual model editor of ML2.
250-1	41543-41544	(	_	_	
250-2	41544-41546	xx	_	_	
250-3	41546-41547	)	_	_	
250-4	41547-41548	:	_	_	
250-5	41549-41550	*	_	_	
250-6	41550-41551	*	_	_	
250-7	41551-41552	}	_	_	
250-8	41552-41553	:	_	_	
250-9	41553-41554	*	_	_	
250-10	41554-41555	*	_	_	
250-11	41556-41563	Finally	_	_	
250-12	41563-41564	,	_	_	
250-13	41565-41571	please	_	_	
250-14	41572-41574	do	_	_	
250-15	41575-41578	not	_	_	
250-16	41579-41585	forget	_	_	
250-17	41586-41588	to	_	_	
250-18	41589-41594	close	_	_	
250-19	41595-41598	the	_	_	
250-20	41599-41605	braces	_	_	
250-21	41606-41607	(	_	_	
250-22	41607-41612	curly	_	_	
250-23	41613-41621	brackets	_	_	
250-24	41621-41622	)	_	_	
250-25	41623-41625	as	_	_	
250-26	41626-41631	shown	_	_	
250-27	41632-41637	above	_	_	
250-28	41637-41638	.	_	_	
250-29	41642-41643	#	_	_	
250-30	41643-41644	#	_	_	
250-31	41644-41645	#	_	_	
250-32	41645-41646	#	_	_	
250-33	41646-41647	#	_	_	
250-34	41647-41648	#	_	_	
250-35	41649-41659	Subsection	_	_	
250-36	41660-41663	3.3	_	_	
250-37	41663-41664	:	_	_	
250-38	41665-41675	Statechart	_	_	
250-39	41677-41680	The	_	_	
250-40	41681-41689	keywords	_	_	
250-41	41690-41692	of	_	_	
250-42	41693-41697	this	_	_	
250-43	41698-41708	subsection	_	_	
250-44	41709-41711	of	_	_	
250-45	41712-41715	the	_	_	
250-46	41716-41721	model	_	_	
250-47	41722-41731	instances	_	_	
250-48	41732-41735	are	_	_	
250-49	41736-41747	highlighted	_	_	
250-50	41748-41750	in	_	_	
250-51	41751-41752	*	_	_	
250-52	41752-41753	*	_	_	
250-53	41753-41756	red	_	_	
250-54	41756-41757	*	_	_	
250-55	41757-41758	*	_	_	
250-56	41759-41761	in	_	_	
250-57	41762-41765	the	_	_	
250-58	41766-41773	textual	_	_	
250-59	41774-41779	model	_	_	
250-60	41780-41786	editor	_	_	
250-61	41787-41789	of	_	_	
250-62	41790-41793	ML2	*	SOFTWARE	
250-63	41793-41794	.	_	_	

#Text=One statechart, i.e., state machine or more precisely Finite-State Machine (FSM), is required for each thing in order to model its behavior.
251-1	41795-41798	One	_	_	
251-2	41799-41809	statechart	_	_	
251-3	41809-41810	,	_	_	
251-4	41811-41814	i.e	_	_	
251-5	41814-41815	.	_	_	
251-6	41815-41816	,	_	_	
251-7	41817-41822	state	_	_	
251-8	41823-41830	machine	_	_	
251-9	41831-41833	or	_	_	
251-10	41834-41838	more	_	_	
251-11	41839-41848	precisely	_	_	
251-12	41849-41861	Finite-State	_	_	
251-13	41862-41869	Machine	_	_	
251-14	41870-41871	(	_	_	
251-15	41871-41874	FSM	_	_	
251-16	41874-41875	)	_	_	
251-17	41875-41876	,	_	_	
251-18	41877-41879	is	_	_	
251-19	41880-41888	required	_	_	
251-20	41889-41892	for	_	_	
251-21	41893-41897	each	_	_	
251-22	41898-41903	thing	_	_	
251-23	41904-41906	in	_	_	
251-24	41907-41912	order	_	_	
251-25	41913-41915	to	_	_	
251-26	41916-41921	model	_	_	
251-27	41922-41925	its	_	_	
251-28	41926-41934	behavior	_	_	
251-29	41934-41935	.	_	_	

#Text=Trivially, a statechart might only have one state, such as Active or Init and simply remain in that state forever.
252-1	41936-41945	Trivially	_	_	
252-2	41945-41946	,	_	_	
252-3	41947-41948	a	_	_	
252-4	41949-41959	statechart	_	_	
252-5	41960-41965	might	_	_	
252-6	41966-41970	only	_	_	
252-7	41971-41975	have	_	_	
252-8	41976-41979	one	_	_	
252-9	41980-41985	state	_	_	
252-10	41985-41986	,	_	_	
252-11	41987-41991	such	_	_	
252-12	41992-41994	as	_	_	
252-13	41995-42001	Active	_	_	
252-14	42002-42004	or	_	_	
252-15	42005-42009	Init	_	_	
252-16	42010-42013	and	_	_	
252-17	42014-42020	simply	_	_	
252-18	42021-42027	remain	_	_	
252-19	42028-42030	in	_	_	
252-20	42031-42035	that	_	_	
252-21	42036-42041	state	_	_	
252-22	42042-42049	forever	_	_	
252-23	42049-42050	.	_	_	

#Text=However, often the behavior of a thing is modeled through several states, e.g., in the case of our provided sample [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml), the behavior of thing PingPongDataAnalytics is modeled via the following states: Preprocess, Train, Ready and Predict.
253-1	42051-42058	However	_	_	
253-2	42058-42059	,	_	_	
253-3	42060-42065	often	_	_	
253-4	42066-42069	the	_	_	
253-5	42070-42078	behavior	_	_	
253-6	42079-42081	of	_	_	
253-7	42082-42083	a	_	_	
253-8	42084-42089	thing	_	_	
253-9	42090-42092	is	_	_	
253-10	42093-42100	modeled	_	_	
253-11	42101-42108	through	_	_	
253-12	42109-42116	several	_	_	
253-13	42117-42123	states	_	_	
253-14	42123-42124	,	_	_	
253-15	42125-42128	e.g	_	_	
253-16	42128-42129	.	_	_	
253-17	42129-42130	,	_	_	
253-18	42131-42133	in	_	_	
253-19	42134-42137	the	_	_	
253-20	42138-42142	case	_	_	
253-21	42143-42145	of	_	_	
253-22	42146-42149	our	_	_	
253-23	42150-42158	provided	_	_	
253-24	42159-42165	sample	_	_	
253-25	42166-42167	[	_	_	
253-26	42167-42170	ML2	_	_	
253-27	42170-42171	_	_	_	
253-28	42171-42192	Demo_PingPong.thingml	_	_	
253-29	42192-42193	]	_	_	
253-30	42193-42194	(	_	_	
253-31	42194-42199	https	_	_	
253-32	42199-42200	:	_	_	
253-33	42200-42201	/	_	_	
253-34	42201-42202	/	_	_	
253-35	42202-42212	github.com	_	_	
253-36	42212-42213	/	_	_	
253-37	42213-42222	arminmoin	_	_	
253-38	42222-42223	/	_	_	
253-39	42223-42233	ML-Quadrat	_	_	
253-40	42233-42234	/	_	_	
253-41	42234-42238	blob	_	_	
253-42	42238-42239	/	_	_	
253-43	42239-42245	master	_	_	
253-44	42245-42246	/	_	_	
253-45	42246-42249	ML2	_	_	
253-46	42249-42250	/	_	_	
253-47	42250-42269	org.thingml.samples	_	_	
253-48	42269-42270	/	_	_	
253-49	42270-42273	src	_	_	
253-50	42273-42274	/	_	_	
253-51	42274-42278	main	_	_	
253-52	42278-42279	/	_	_	
253-53	42279-42286	thingml	_	_	
253-54	42286-42287	/	_	_	
253-55	42287-42290	ML2	_	_	
253-56	42290-42291	_	_	_	
253-57	42291-42312	Demo_PingPong.thingml	_	_	
253-58	42312-42313	)	_	_	
253-59	42313-42314	,	_	_	
253-60	42315-42318	the	_	_	
253-61	42319-42327	behavior	_	_	
253-62	42328-42330	of	_	_	
253-63	42331-42336	thing	_	_	
253-64	42337-42358	PingPongDataAnalytics	_	_	
253-65	42359-42361	is	_	_	
253-66	42362-42369	modeled	_	_	
253-67	42370-42373	via	_	_	
253-68	42374-42377	the	_	_	
253-69	42378-42387	following	_	_	
253-70	42388-42394	states	_	_	
253-71	42394-42395	:	_	_	
253-72	42396-42406	Preprocess	_	_	
253-73	42406-42407	,	_	_	
253-74	42408-42413	Train	_	_	
253-75	42413-42414	,	_	_	
253-76	42415-42420	Ready	_	_	
253-77	42421-42424	and	_	_	
253-78	42425-42432	Predict	_	_	
253-79	42432-42433	.	_	_	

#Text=A **platform-independent imperative action language** is adopted and adapted from the DSML of [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project).
254-1	42437-42438	A	_	_	
254-2	42439-42440	*	_	_	
254-3	42440-42441	*	_	_	
254-4	42441-42461	platform-independent	_	_	
254-5	42462-42472	imperative	_	_	
254-6	42473-42479	action	_	_	
254-7	42480-42488	language	_	_	
254-8	42488-42489	*	_	_	
254-9	42489-42490	*	_	_	
254-10	42491-42493	is	_	_	
254-11	42494-42501	adopted	_	_	
254-12	42502-42505	and	_	_	
254-13	42506-42513	adapted	_	_	
254-14	42514-42518	from	_	_	
254-15	42519-42522	the	_	_	
254-16	42523-42527	DSML	_	_	
254-17	42528-42530	of	_	_	
254-18	42531-42532	[	_	_	
254-19	42532-42539	ThingML	*	PROJECT	
254-20	42539-42540	]	_	_	
254-21	42540-42541	(	_	_	
254-22	42541-42546	https	_	_	
254-23	42546-42547	:	_	_	
254-24	42547-42548	/	_	_	
254-25	42548-42549	/	_	_	
254-26	42549-42559	github.com	_	_	
254-27	42559-42560	/	_	_	
254-28	42560-42568	TelluIoT	_	_	
254-29	42568-42569	/	_	_	
254-30	42569-42576	ThingML	*	PROJECT	
254-31	42576-42577	)	_	_	
254-32	42578-42579	/	_	_	
254-33	42580-42581	[	_	_	
254-34	42581-42586	HEADS	*	PROJECT	
254-35	42586-42587	]	_	_	
254-36	42587-42588	(	_	_	
254-37	42588-42593	https	_	_	
254-38	42593-42594	:	_	_	
254-39	42594-42595	/	_	_	
254-40	42595-42596	/	_	_	
254-41	42596-42606	github.com	_	_	
254-42	42606-42607	/	_	_	
254-43	42607-42620	HEADS-project	_	_	
254-43.1	42607-42612	HEADS	*	PROJECT	
254-44	42620-42621	)	_	_	
254-45	42621-42622	.	_	_	

#Text=This action language enables the Event-Driven Programming (EDP) paradigm in the state machines.
255-1	42623-42627	This	_	_	
255-2	42628-42634	action	_	_	
255-3	42635-42643	language	_	_	
255-4	42644-42651	enables	_	_	
255-5	42652-42655	the	_	_	
255-6	42656-42668	Event-Driven	_	_	
255-7	42669-42680	Programming	_	_	
255-8	42681-42682	(	_	_	
255-9	42682-42685	EDP	_	_	
255-10	42685-42686	)	_	_	
255-11	42687-42695	paradigm	_	_	
255-12	42696-42698	in	_	_	
255-13	42699-42702	the	_	_	
255-14	42703-42708	state	_	_	
255-15	42709-42717	machines	_	_	
255-16	42717-42718	.	_	_	

#Text=For instance, using this langauge the practitioner may specify which concrete action must be taken if a certain event occurs, e.g., if a particular message is received on a certain port.
256-1	42719-42722	For	_	_	
256-2	42723-42731	instance	_	_	
256-3	42731-42732	,	_	_	
256-4	42733-42738	using	_	_	
256-5	42739-42743	this	_	_	
256-6	42744-42752	langauge	_	_	
256-7	42753-42756	the	_	_	
256-8	42757-42769	practitioner	_	_	
256-9	42770-42773	may	_	_	
256-10	42774-42781	specify	_	_	
256-11	42782-42787	which	_	_	
256-12	42788-42796	concrete	_	_	
256-13	42797-42803	action	_	_	
256-14	42804-42808	must	_	_	
256-15	42809-42811	be	_	_	
256-16	42812-42817	taken	_	_	
256-17	42818-42820	if	_	_	
256-18	42821-42822	a	_	_	
256-19	42823-42830	certain	_	_	
256-20	42831-42836	event	_	_	
256-21	42837-42843	occurs	_	_	
256-22	42843-42844	,	_	_	
256-23	42845-42848	e.g	_	_	
256-24	42848-42849	.	_	_	
256-25	42849-42850	,	_	_	
256-26	42851-42853	if	_	_	
256-27	42854-42855	a	_	_	
256-28	42856-42866	particular	_	_	
256-29	42867-42874	message	_	_	
256-30	42875-42877	is	_	_	
256-31	42878-42886	received	_	_	
256-32	42887-42889	on	_	_	
256-33	42890-42891	a	_	_	
256-34	42892-42899	certain	_	_	
256-35	42900-42904	port	_	_	
256-36	42904-42905	.	_	_	

#Text=The action can be as simple as printing to the standard output or sending a new message to the sender or to another thing.
257-1	42906-42909	The	_	_	
257-2	42910-42916	action	_	_	
257-3	42917-42920	can	_	_	
257-4	42921-42923	be	_	_	
257-5	42924-42926	as	_	_	
257-6	42927-42933	simple	_	_	
257-7	42934-42936	as	_	_	
257-8	42937-42945	printing	_	_	
257-9	42946-42948	to	_	_	
257-10	42949-42952	the	_	_	
257-11	42953-42961	standard	_	_	
257-12	42962-42968	output	_	_	
257-13	42969-42971	or	_	_	
257-14	42972-42979	sending	_	_	
257-15	42980-42981	a	_	_	
257-16	42982-42985	new	_	_	
257-17	42986-42993	message	_	_	
257-18	42994-42996	to	_	_	
257-19	42997-43000	the	_	_	
257-20	43001-43007	sender	_	_	
257-21	43008-43010	or	_	_	
257-22	43011-43013	to	_	_	
257-23	43014-43021	another	_	_	
257-24	43022-43027	thing	_	_	
257-25	43027-43028	.	_	_	

#Text=However, another key innovation of ML2, compared to [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project) is the extension of this action language to support using the DAML components (explained above) in the state machines.
258-1	43029-43036	However	_	_	
258-2	43036-43037	,	_	_	
258-3	43038-43045	another	_	_	
258-4	43046-43049	key	_	_	
258-5	43050-43060	innovation	_	_	
258-6	43061-43063	of	_	_	
258-7	43064-43067	ML2	*	PROJECT	
258-8	43067-43068	,	_	_	
258-9	43069-43077	compared	_	_	
258-10	43078-43080	to	_	_	
258-11	43081-43082	[	_	_	
258-12	43082-43089	ThingML	*	PROJECT	
258-13	43089-43090	]	_	_	
258-14	43090-43091	(	_	_	
258-15	43091-43096	https	_	_	
258-16	43096-43097	:	_	_	
258-17	43097-43098	/	_	_	
258-18	43098-43099	/	_	_	
258-19	43099-43109	github.com	_	_	
258-20	43109-43110	/	_	_	
258-21	43110-43118	TelluIoT	_	_	
258-22	43118-43119	/	_	_	
258-23	43119-43126	ThingML	*	PROJECT	
258-24	43126-43127	)	_	_	
258-25	43128-43129	/	_	_	
258-26	43130-43131	[	_	_	
258-27	43131-43136	HEADS	*	PROJECT	
258-28	43136-43137	]	_	_	
258-29	43137-43138	(	_	_	
258-30	43138-43143	https	_	_	
258-31	43143-43144	:	_	_	
258-32	43144-43145	/	_	_	
258-33	43145-43146	/	_	_	
258-34	43146-43156	github.com	_	_	
258-35	43156-43157	/	_	_	
258-36	43157-43170	HEADS-project	_	_	
258-36.1	43157-43162	HEADS	*	PROJECT	
258-37	43170-43171	)	_	_	
258-38	43172-43174	is	_	_	
258-39	43175-43178	the	_	_	
258-40	43179-43188	extension	_	_	
258-41	43189-43191	of	_	_	
258-42	43192-43196	this	_	_	
258-43	43197-43203	action	_	_	
258-44	43204-43212	language	_	_	
258-45	43213-43215	to	_	_	
258-46	43216-43223	support	_	_	
258-47	43224-43229	using	_	_	
258-48	43230-43233	the	_	_	
258-49	43234-43238	DAML	_	_	
258-50	43239-43249	components	_	_	
258-51	43250-43251	(	_	_	
258-52	43251-43260	explained	_	_	
258-53	43261-43266	above	_	_	
258-54	43266-43267	)	_	_	
258-55	43268-43270	in	_	_	
258-56	43271-43274	the	_	_	
258-57	43275-43280	state	_	_	
258-58	43281-43289	machines	_	_	
258-59	43289-43290	.	_	_	

#Text=For instance, in the case of the said example [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml), statechart PingPongDataAnalyticsBehavior has the "da_preprocess da1" action in its Preprocess state, the "da_train da1" action in its Train state, as well as the "da_predict da1(...)" and the "da_save da1" actions in its Predict state.
259-1	43291-43294	For	_	_	
259-2	43295-43303	instance	_	_	
259-3	43303-43304	,	_	_	
259-4	43305-43307	in	_	_	
259-5	43308-43311	the	_	_	
259-6	43312-43316	case	_	_	
259-7	43317-43319	of	_	_	
259-8	43320-43323	the	_	_	
259-9	43324-43328	said	_	_	
259-10	43329-43336	example	_	_	
259-11	43337-43338	[	_	_	
259-12	43338-43341	ML2	_	_	
259-13	43341-43342	_	_	_	
259-14	43342-43363	Demo_PingPong.thingml	_	_	
259-15	43363-43364	]	_	_	
259-16	43364-43365	(	_	_	
259-17	43365-43370	https	_	_	
259-18	43370-43371	:	_	_	
259-19	43371-43372	/	_	_	
259-20	43372-43373	/	_	_	
259-21	43373-43383	github.com	_	_	
259-22	43383-43384	/	_	_	
259-23	43384-43393	arminmoin	_	_	
259-24	43393-43394	/	_	_	
259-25	43394-43404	ML-Quadrat	_	_	
259-26	43404-43405	/	_	_	
259-27	43405-43409	blob	_	_	
259-28	43409-43410	/	_	_	
259-29	43410-43416	master	_	_	
259-30	43416-43417	/	_	_	
259-31	43417-43420	ML2	_	_	
259-32	43420-43421	/	_	_	
259-33	43421-43440	org.thingml.samples	_	_	
259-34	43440-43441	/	_	_	
259-35	43441-43444	src	_	_	
259-36	43444-43445	/	_	_	
259-37	43445-43449	main	_	_	
259-38	43449-43450	/	_	_	
259-39	43450-43457	thingml	_	_	
259-40	43457-43458	/	_	_	
259-41	43458-43461	ML2	_	_	
259-42	43461-43462	_	_	_	
259-43	43462-43483	Demo_PingPong.thingml	_	_	
259-44	43483-43484	)	_	_	
259-45	43484-43485	,	_	_	
259-46	43486-43496	statechart	_	_	
259-47	43497-43526	PingPongDataAnalyticsBehavior	_	_	
259-48	43527-43530	has	_	_	
259-49	43531-43534	the	_	_	
259-50	43535-43536	"	_	_	
259-51	43536-43549	da_preprocess	_	_	
259-52	43550-43553	da1	_	_	
259-53	43553-43554	"	_	_	
259-54	43555-43561	action	_	_	
259-55	43562-43564	in	_	_	
259-56	43565-43568	its	_	_	
259-57	43569-43579	Preprocess	_	_	
259-58	43580-43585	state	_	_	
259-59	43585-43586	,	_	_	
259-60	43587-43590	the	_	_	
259-61	43591-43592	"	_	_	
259-62	43592-43600	da_train	_	_	
259-63	43601-43604	da1	_	_	
259-64	43604-43605	"	_	_	
259-65	43606-43612	action	_	_	
259-66	43613-43615	in	_	_	
259-67	43616-43619	its	_	_	
259-68	43620-43625	Train	_	_	
259-69	43626-43631	state	_	_	
259-70	43631-43632	,	_	_	
259-71	43633-43635	as	_	_	
259-72	43636-43640	well	_	_	
259-73	43641-43643	as	_	_	
259-74	43644-43647	the	_	_	
259-75	43648-43649	"	_	_	
259-76	43649-43659	da_predict	_	_	
259-77	43660-43663	da1	_	_	
259-78	43663-43664	(	_	_	
259-79	43664-43665	.	_	_	
259-80	43665-43666	.	_	_	
259-81	43666-43667	.	_	_	
259-82	43667-43668	)	_	_	
259-83	43668-43669	"	_	_	
259-84	43670-43673	and	_	_	
259-85	43674-43677	the	_	_	
259-86	43678-43679	"	_	_	
259-87	43679-43686	da_save	_	_	
259-88	43687-43690	da1	_	_	
259-89	43690-43691	"	_	_	
259-90	43692-43699	actions	_	_	
259-91	43700-43702	in	_	_	
259-92	43703-43706	its	_	_	
259-93	43707-43714	Predict	_	_	
259-94	43715-43720	state	_	_	
259-95	43720-43721	.	_	_	

#Text=Below, we briefly explain the new action types that are introduced in ML2, but did not exist in [ThingML](https://github.com/TelluIoT/ThingML) / [HEADS](https://github.com/HEADS-project):\r
#Text=\r
#Text=1.
260-1	43726-43731	Below	_	_	
260-2	43731-43732	,	_	_	
260-3	43733-43735	we	_	_	
260-4	43736-43743	briefly	_	_	
260-5	43744-43751	explain	_	_	
260-6	43752-43755	the	_	_	
260-7	43756-43759	new	_	_	
260-8	43760-43766	action	_	_	
260-9	43767-43772	types	_	_	
260-10	43773-43777	that	_	_	
260-11	43778-43781	are	_	_	
260-12	43782-43792	introduced	_	_	
260-13	43793-43795	in	_	_	
260-14	43796-43799	ML2	*	PROJECT	
260-15	43799-43800	,	_	_	
260-16	43801-43804	but	_	_	
260-17	43805-43808	did	_	_	
260-18	43809-43812	not	_	_	
260-19	43813-43818	exist	_	_	
260-20	43819-43821	in	_	_	
260-21	43822-43823	[	_	_	
260-22	43823-43830	ThingML	*	PROJECT	
260-23	43830-43831	]	_	_	
260-24	43831-43832	(	_	_	
260-25	43832-43837	https	_	_	
260-26	43837-43838	:	_	_	
260-27	43838-43839	/	_	_	
260-28	43839-43840	/	_	_	
260-29	43840-43850	github.com	_	_	
260-30	43850-43851	/	_	_	
260-31	43851-43859	TelluIoT	_	_	
260-32	43859-43860	/	_	_	
260-33	43860-43867	ThingML	*	PROJECT	
260-34	43867-43868	)	_	_	
260-35	43869-43870	/	_	_	
260-36	43871-43872	[	_	_	
260-37	43872-43877	HEADS	*	PROJECT	
260-38	43877-43878	]	_	_	
260-39	43878-43879	(	_	_	
260-40	43879-43884	https	_	_	
260-41	43884-43885	:	_	_	
260-42	43885-43886	/	_	_	
260-43	43886-43887	/	_	_	
260-44	43887-43897	github.com	_	_	
260-45	43897-43898	/	_	_	
260-46	43898-43911	HEADS-project	_	_	
260-46.1	43898-43903	HEADS	*	PROJECT	
260-47	43911-43912	)	_	_	
260-48	43912-43913	:	_	_	
260-49	43917-43918	1	_	_	
260-50	43918-43919	.	_	_	

#Text=**da_save:** This optional "action" enables appending the predictions of the ML model to the provided dataset.
261-1	43921-43922	*	_	_	
261-2	43922-43923	*	_	_	
261-3	43923-43930	da_save	_	_	
261-4	43930-43931	:	_	_	
261-5	43931-43932	*	_	_	
261-6	43932-43933	*	_	_	
261-7	43934-43938	This	_	_	
261-8	43939-43947	optional	_	_	
261-9	43948-43949	"	_	_	
261-10	43949-43955	action	_	_	
261-11	43955-43956	"	_	_	
261-12	43957-43964	enables	_	_	
261-13	43965-43974	appending	_	_	
261-14	43975-43978	the	_	_	
261-15	43979-43990	predictions	_	_	
261-16	43991-43993	of	_	_	
261-17	43994-43997	the	_	_	
261-18	43998-44000	ML	_	_	
261-19	44001-44006	model	_	_	
261-20	44007-44009	to	_	_	
261-21	44010-44013	the	_	_	
261-22	44014-44022	provided	_	_	
261-23	44023-44030	dataset	_	_	
261-24	44030-44031	.	_	_	

#Text=Currently, it is only supported in the pure MDSE mode since in the blackbox-ML mode no CSV dataset needs to be provided.
262-1	44032-44041	Currently	_	_	
262-2	44041-44042	,	_	_	
262-3	44043-44045	it	_	_	
262-4	44046-44048	is	_	_	
262-5	44049-44053	only	_	_	
262-6	44054-44063	supported	_	_	
262-7	44064-44066	in	_	_	
262-8	44067-44070	the	_	_	
262-9	44071-44075	pure	_	_	
262-10	44076-44080	MDSE	_	_	
262-11	44081-44085	mode	_	_	
262-12	44086-44091	since	_	_	
262-13	44092-44094	in	_	_	
262-14	44095-44098	the	_	_	
262-15	44099-44110	blackbox-ML	_	_	
262-16	44111-44115	mode	_	_	
262-17	44116-44118	no	_	_	
262-18	44119-44122	CSV	_	_	
262-19	44123-44130	dataset	_	_	
262-20	44131-44136	needs	_	_	
262-21	44137-44139	to	_	_	
262-22	44140-44142	be	_	_	
262-23	44143-44151	provided	_	_	
262-24	44151-44152	.	_	_	

#Text=The "action" must be followed by the name of the respective data analytics block that contains the dataset path, e.g, da1 in the case of the above-mentioned example.\r
#Text=2.
263-1	44153-44156	The	_	_	
263-2	44157-44158	"	_	_	
263-3	44158-44164	action	_	_	
263-4	44164-44165	"	_	_	
263-5	44166-44170	must	_	_	
263-6	44171-44173	be	_	_	
263-7	44174-44182	followed	_	_	
263-8	44183-44185	by	_	_	
263-9	44186-44189	the	_	_	
263-10	44190-44194	name	_	_	
263-11	44195-44197	of	_	_	
263-12	44198-44201	the	_	_	
263-13	44202-44212	respective	_	_	
263-14	44213-44217	data	_	_	
263-15	44218-44227	analytics	_	_	
263-16	44228-44233	block	_	_	
263-17	44234-44238	that	_	_	
263-18	44239-44247	contains	_	_	
263-19	44248-44251	the	_	_	
263-20	44252-44259	dataset	_	_	
263-21	44260-44264	path	_	_	
263-22	44264-44265	,	_	_	
263-23	44266-44269	e.g	_	_	
263-24	44269-44270	,	_	_	
263-25	44271-44274	da1	_	_	
263-26	44275-44277	in	_	_	
263-27	44278-44281	the	_	_	
263-28	44282-44286	case	_	_	
263-29	44287-44289	of	_	_	
263-30	44290-44293	the	_	_	
263-31	44294-44309	above-mentioned	_	_	
263-32	44310-44317	example	_	_	
263-33	44317-44318	.	_	_	
263-34	44320-44321	2	_	_	
263-35	44321-44322	.	_	_	

#Text=**da_preprocess:** This "action" executes an automated data preparation pipeline/workflow, which comprises the necessary data preprocessing tasks before training the ML model, such as standardization/normalization (see preprocess_feature_scaler and preprocess_sample_normalizer above), and one-hot-encoding for categorical labels.
264-1	44323-44324	*	_	_	
264-2	44324-44325	*	_	_	
264-3	44325-44338	da_preprocess	_	_	
264-4	44338-44339	:	_	_	
264-5	44339-44340	*	_	_	
264-6	44340-44341	*	_	_	
264-7	44342-44346	This	_	_	
264-8	44347-44348	"	_	_	
264-9	44348-44354	action	_	_	
264-10	44354-44355	"	_	_	
264-11	44356-44364	executes	_	_	
264-12	44365-44367	an	_	_	
264-13	44368-44377	automated	_	_	
264-14	44378-44382	data	_	_	
264-15	44383-44394	preparation	_	_	
264-16	44395-44403	pipeline	_	_	
264-17	44403-44404	/	_	_	
264-18	44404-44412	workflow	_	_	
264-19	44412-44413	,	_	_	
264-20	44414-44419	which	_	_	
264-21	44420-44429	comprises	_	_	
264-22	44430-44433	the	_	_	
264-23	44434-44443	necessary	_	_	
264-24	44444-44448	data	_	_	
264-25	44449-44462	preprocessing	_	_	
264-26	44463-44468	tasks	_	_	
264-27	44469-44475	before	_	_	
264-28	44476-44484	training	_	_	
264-29	44485-44488	the	_	_	
264-30	44489-44491	ML	_	_	
264-31	44492-44497	model	_	_	
264-32	44497-44498	,	_	_	
264-33	44499-44503	such	_	_	
264-34	44504-44506	as	_	_	
264-35	44507-44522	standardization	_	_	
264-36	44522-44523	/	_	_	
264-37	44523-44536	normalization	_	_	
264-38	44537-44538	(	_	_	
264-39	44538-44541	see	_	_	
264-40	44542-44567	preprocess_feature_scaler	_	_	
264-41	44568-44571	and	_	_	
264-42	44572-44600	preprocess_sample_normalizer	_	_	
264-43	44601-44606	above	_	_	
264-44	44606-44607	)	_	_	
264-45	44607-44608	,	_	_	
264-46	44609-44612	and	_	_	
264-47	44613-44629	one-hot-encoding	_	_	
264-48	44630-44633	for	_	_	
264-49	44634-44645	categorical	_	_	
264-50	44646-44652	labels	_	_	
264-51	44652-44653	.	_	_	

#Text=The prepared data will be serialized and saved as pickle (in the case of the python_java code generator) or byte stream (in the case of the pure java code generator) on the disk to be fed later to the training script (see below).
265-1	44654-44657	The	_	_	
265-2	44658-44666	prepared	_	_	
265-3	44667-44671	data	_	_	
265-4	44672-44676	will	_	_	
265-5	44677-44679	be	_	_	
265-6	44680-44690	serialized	_	_	
265-7	44691-44694	and	_	_	
265-8	44695-44700	saved	_	_	
265-9	44701-44703	as	_	_	
265-10	44704-44710	pickle	_	_	
265-11	44711-44712	(	_	_	
265-12	44712-44714	in	_	_	
265-13	44715-44718	the	_	_	
265-14	44719-44723	case	_	_	
265-15	44724-44726	of	_	_	
265-16	44727-44730	the	_	_	
265-17	44731-44742	python_java	_	_	
265-17.1	44731-44737	python	*	PROGLANG	
265-17.2	44738-44742	java	*	PROGLANG	
265-18	44743-44747	code	_	_	
265-19	44748-44757	generator	_	_	
265-20	44757-44758	)	_	_	
265-21	44759-44761	or	_	_	
265-22	44762-44766	byte	_	_	
265-23	44767-44773	stream	_	_	
265-24	44774-44775	(	_	_	
265-25	44775-44777	in	_	_	
265-26	44778-44781	the	_	_	
265-27	44782-44786	case	_	_	
265-28	44787-44789	of	_	_	
265-29	44790-44793	the	_	_	
265-30	44794-44798	pure	_	_	
265-31	44799-44803	java	_	_	
265-32	44804-44808	code	_	_	
265-33	44809-44818	generator	_	_	
265-34	44818-44819	)	_	_	
265-35	44820-44822	on	_	_	
265-36	44823-44826	the	_	_	
265-37	44827-44831	disk	_	_	
265-38	44832-44834	to	_	_	
265-39	44835-44837	be	_	_	
265-40	44838-44841	fed	_	_	
265-41	44842-44847	later	_	_	
265-42	44848-44850	to	_	_	
265-43	44851-44854	the	_	_	
265-44	44855-44863	training	_	_	
265-45	44864-44870	script	_	_	
265-46	44871-44872	(	_	_	
265-47	44872-44875	see	_	_	
265-48	44876-44881	below	_	_	
265-49	44881-44882	)	_	_	
265-50	44882-44883	.	_	_	

#Text=This "action" must also be followed by the name of the respective data analytics block, e.g., da1 in the case of the shown example above.\r
#Text=3.
266-1	44884-44888	This	_	_	
266-2	44889-44890	"	_	_	
266-3	44890-44896	action	_	_	
266-4	44896-44897	"	_	_	
266-5	44898-44902	must	_	_	
266-6	44903-44907	also	_	_	
266-7	44908-44910	be	_	_	
266-8	44911-44919	followed	_	_	
266-9	44920-44922	by	_	_	
266-10	44923-44926	the	_	_	
266-11	44927-44931	name	_	_	
266-12	44932-44934	of	_	_	
266-13	44935-44938	the	_	_	
266-14	44939-44949	respective	_	_	
266-15	44950-44954	data	_	_	
266-16	44955-44964	analytics	_	_	
266-17	44965-44970	block	_	_	
266-18	44970-44971	,	_	_	
266-19	44972-44975	e.g	_	_	
266-20	44975-44976	.	_	_	
266-21	44976-44977	,	_	_	
266-22	44978-44981	da1	_	_	
266-23	44982-44984	in	_	_	
266-24	44985-44988	the	_	_	
266-25	44989-44993	case	_	_	
266-26	44994-44996	of	_	_	
266-27	44997-45000	the	_	_	
266-28	45001-45006	shown	_	_	
266-29	45007-45014	example	_	_	
266-30	45015-45020	above	_	_	
266-31	45020-45021	.	_	_	
266-32	45023-45024	3	_	_	
266-33	45024-45025	.	_	_	

#Text=**da_train:** This "action" deploys the specified ML method (see model_algorithm above) in order to train the respective ML model using the appropriate learning algorithm.
267-1	45026-45027	*	_	_	
267-2	45027-45028	*	_	_	
267-3	45028-45036	da_train	_	_	
267-4	45036-45037	:	_	_	
267-5	45037-45038	*	_	_	
267-6	45038-45039	*	_	_	
267-7	45040-45044	This	_	_	
267-8	45045-45046	"	_	_	
267-9	45046-45052	action	_	_	
267-10	45052-45053	"	_	_	
267-11	45054-45061	deploys	_	_	
267-12	45062-45065	the	_	_	
267-13	45066-45075	specified	_	_	
267-14	45076-45078	ML	_	_	
267-15	45079-45085	method	_	_	
267-16	45086-45087	(	_	_	
267-17	45087-45090	see	_	_	
267-18	45091-45106	model_algorithm	_	_	
267-19	45107-45112	above	_	_	
267-20	45112-45113	)	_	_	
267-21	45114-45116	in	_	_	
267-22	45117-45122	order	_	_	
267-23	45123-45125	to	_	_	
267-24	45126-45131	train	_	_	
267-25	45132-45135	the	_	_	
267-26	45136-45146	respective	_	_	
267-27	45147-45149	ML	_	_	
267-28	45150-45155	model	_	_	
267-29	45156-45161	using	_	_	
267-30	45162-45165	the	_	_	
267-31	45166-45177	appropriate	_	_	
267-32	45178-45186	learning	_	_	
267-33	45187-45196	algorithm	_	_	
267-34	45196-45197	.	_	_	

#Text=The trained ML model will be serialized and saved.
268-1	45198-45201	The	_	_	
268-2	45202-45209	trained	_	_	
268-3	45210-45212	ML	_	_	
268-4	45213-45218	model	_	_	
268-5	45219-45223	will	_	_	
268-6	45224-45226	be	_	_	
268-7	45227-45237	serialized	_	_	
268-8	45238-45241	and	_	_	
268-9	45242-45247	saved	_	_	
268-10	45247-45248	.	_	_	

#Text=As stated before, the format is typically the Python Pickle or the Java Byte Stream.
269-1	45249-45251	As	_	_	
269-2	45252-45258	stated	_	_	
269-3	45259-45265	before	_	_	
269-4	45265-45266	,	_	_	
269-5	45267-45270	the	_	_	
269-6	45271-45277	format	_	_	
269-7	45278-45280	is	_	_	
269-8	45281-45290	typically	_	_	
269-9	45291-45294	the	_	_	
269-10	45295-45301	Python	*	PROGLANG	
269-11	45302-45308	Pickle	_	_	
269-12	45309-45311	or	_	_	
269-13	45312-45315	the	_	_	
269-14	45316-45320	Java	*	PROGLANG	
269-15	45321-45325	Byte	_	_	
269-16	45326-45332	Stream	_	_	
269-17	45332-45333	.	_	_	

#Text=However, e.g., in the case of the Keras library/framework, in addition to the Pickles, the weights of the ML model parameters are saved in HDF5 (.h5).
270-1	45334-45341	However	_	_	
270-2	45341-45342	,	_	_	
270-3	45343-45346	e.g	_	_	
270-4	45346-45347	.	_	_	
270-5	45347-45348	,	_	_	
270-6	45349-45351	in	_	_	
270-7	45352-45355	the	_	_	
270-8	45356-45360	case	_	_	
270-9	45361-45363	of	_	_	
270-10	45364-45367	the	_	_	
270-11	45368-45373	Keras	*	SOFTWARE	
270-12	45374-45381	library	_	_	
270-13	45381-45382	/	_	_	
270-14	45382-45391	framework	_	_	
270-15	45391-45392	,	_	_	
270-16	45393-45395	in	_	_	
270-17	45396-45404	addition	_	_	
270-18	45405-45407	to	_	_	
270-19	45408-45411	the	_	_	
270-20	45412-45419	Pickles	_	_	
270-21	45419-45420	,	_	_	
270-22	45421-45424	the	_	_	
270-23	45425-45432	weights	_	_	
270-24	45433-45435	of	_	_	
270-25	45436-45439	the	_	_	
270-26	45440-45442	ML	_	_	
270-27	45443-45448	model	_	_	
270-28	45449-45459	parameters	_	_	
270-29	45460-45463	are	_	_	
270-30	45464-45469	saved	_	_	
270-31	45470-45472	in	_	_	
270-32	45473-45477	HDF5	_	_	
270-33	45478-45479	(	_	_	
270-34	45479-45480	.	_	_	
270-35	45480-45482	h5	_	_	
270-36	45482-45483	)	_	_	
270-37	45483-45484	.	_	_	

#Text=Also, this "action" must be followed by the name of the respective data analytics block, e.g., da1 in the case of the shown example above.\r
#Text=4.
271-1	45485-45489	Also	_	_	
271-2	45489-45490	,	_	_	
271-3	45491-45495	this	_	_	
271-4	45496-45497	"	_	_	
271-5	45497-45503	action	_	_	
271-6	45503-45504	"	_	_	
271-7	45505-45509	must	_	_	
271-8	45510-45512	be	_	_	
271-9	45513-45521	followed	_	_	
271-10	45522-45524	by	_	_	
271-11	45525-45528	the	_	_	
271-12	45529-45533	name	_	_	
271-13	45534-45536	of	_	_	
271-14	45537-45540	the	_	_	
271-15	45541-45551	respective	_	_	
271-16	45552-45556	data	_	_	
271-17	45557-45566	analytics	_	_	
271-18	45567-45572	block	_	_	
271-19	45572-45573	,	_	_	
271-20	45574-45577	e.g	_	_	
271-21	45577-45578	.	_	_	
271-22	45578-45579	,	_	_	
271-23	45580-45583	da1	_	_	
271-24	45584-45586	in	_	_	
271-25	45587-45590	the	_	_	
271-26	45591-45595	case	_	_	
271-27	45596-45598	of	_	_	
271-28	45599-45602	the	_	_	
271-29	45603-45608	shown	_	_	
271-30	45609-45616	example	_	_	
271-31	45617-45622	above	_	_	
271-32	45622-45623	.	_	_	
271-33	45625-45626	4	_	_	
271-34	45626-45627	.	_	_	

#Text=**da_predict:** This "action" triggers a query to the trained ML model for its predictions and storing the predictions in the specified local variable (i.e., property) of the thing (see prediction_results above).
272-1	45628-45629	*	_	_	
272-2	45629-45630	*	_	_	
272-3	45630-45640	da_predict	_	_	
272-4	45640-45641	:	_	_	
272-5	45641-45642	*	_	_	
272-6	45642-45643	*	_	_	
272-7	45644-45648	This	_	_	
272-8	45649-45650	"	_	_	
272-9	45650-45656	action	_	_	
272-10	45656-45657	"	_	_	
272-11	45658-45666	triggers	_	_	
272-12	45667-45668	a	_	_	
272-13	45669-45674	query	_	_	
272-14	45675-45677	to	_	_	
272-15	45678-45681	the	_	_	
272-16	45682-45689	trained	_	_	
272-17	45690-45692	ML	_	_	
272-18	45693-45698	model	_	_	
272-19	45699-45702	for	_	_	
272-20	45703-45706	its	_	_	
272-21	45707-45718	predictions	_	_	
272-22	45719-45722	and	_	_	
272-23	45723-45730	storing	_	_	
272-24	45731-45734	the	_	_	
272-25	45735-45746	predictions	_	_	
272-26	45747-45749	in	_	_	
272-27	45750-45753	the	_	_	
272-28	45754-45763	specified	_	_	
272-29	45764-45769	local	_	_	
272-30	45770-45778	variable	_	_	
272-31	45779-45780	(	_	_	
272-32	45780-45783	i.e	_	_	
272-33	45783-45784	.	_	_	
272-34	45784-45785	,	_	_	
272-35	45786-45794	property	_	_	
272-36	45794-45795	)	_	_	
272-37	45796-45798	of	_	_	
272-38	45799-45802	the	_	_	
272-39	45803-45808	thing	_	_	
272-40	45809-45810	(	_	_	
272-41	45810-45813	see	_	_	
272-42	45814-45832	prediction_results	_	_	
272-43	45833-45838	above	_	_	
272-44	45838-45839	)	_	_	
272-45	45839-45840	.	_	_	

#Text=Further, this "action" must be followed by the name of the respective data analytics block, e.g., da1 in the case of the shown example above.
273-1	45841-45848	Further	_	_	
273-2	45848-45849	,	_	_	
273-3	45850-45854	this	_	_	
273-4	45855-45856	"	_	_	
273-5	45856-45862	action	_	_	
273-6	45862-45863	"	_	_	
273-7	45864-45868	must	_	_	
273-8	45869-45871	be	_	_	
273-9	45872-45880	followed	_	_	
273-10	45881-45883	by	_	_	
273-11	45884-45887	the	_	_	
273-12	45888-45892	name	_	_	
273-13	45893-45895	of	_	_	
273-14	45896-45899	the	_	_	
273-15	45900-45910	respective	_	_	
273-16	45911-45915	data	_	_	
273-17	45916-45925	analytics	_	_	
273-18	45926-45931	block	_	_	
273-19	45931-45932	,	_	_	
273-20	45933-45936	e.g	_	_	
273-21	45936-45937	.	_	_	
273-22	45937-45938	,	_	_	
273-23	45939-45942	da1	_	_	
273-24	45943-45945	in	_	_	
273-25	45946-45949	the	_	_	
273-26	45950-45954	case	_	_	
273-27	45955-45957	of	_	_	
273-28	45958-45961	the	_	_	
273-29	45962-45967	shown	_	_	
273-30	45968-45975	example	_	_	
273-31	45976-45981	above	_	_	
273-32	45981-45982	.	_	_	

#Text=Additionally, this "action" requires the local variables (i.e., properties) corresponding to the ML features/attributes as arguments (See "da_predict da1(client_ip_address, client_code)" in the provided example [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml)).\r
#Text=5.
274-1	45983-45995	Additionally	_	_	
274-2	45995-45996	,	_	_	
274-3	45997-46001	this	_	_	
274-4	46002-46003	"	_	_	
274-5	46003-46009	action	_	_	
274-6	46009-46010	"	_	_	
274-7	46011-46019	requires	_	_	
274-8	46020-46023	the	_	_	
274-9	46024-46029	local	_	_	
274-10	46030-46039	variables	_	_	
274-11	46040-46041	(	_	_	
274-12	46041-46044	i.e	_	_	
274-13	46044-46045	.	_	_	
274-14	46045-46046	,	_	_	
274-15	46047-46057	properties	_	_	
274-16	46057-46058	)	_	_	
274-17	46059-46072	corresponding	_	_	
274-18	46073-46075	to	_	_	
274-19	46076-46079	the	_	_	
274-20	46080-46082	ML	_	_	
274-21	46083-46091	features	_	_	
274-22	46091-46092	/	_	_	
274-23	46092-46102	attributes	_	_	
274-24	46103-46105	as	_	_	
274-25	46106-46115	arguments	_	_	
274-26	46116-46117	(	_	_	
274-27	46117-46120	See	_	_	
274-28	46121-46122	"	_	_	
274-29	46122-46132	da_predict	_	_	
274-30	46133-46136	da1	_	_	
274-31	46136-46137	(	_	_	
274-32	46137-46154	client_ip_address	_	_	
274-33	46154-46155	,	_	_	
274-34	46156-46167	client_code	_	_	
274-35	46167-46168	)	_	_	
274-36	46168-46169	"	_	_	
274-37	46170-46172	in	_	_	
274-38	46173-46176	the	_	_	
274-39	46177-46185	provided	_	_	
274-40	46186-46193	example	_	_	
274-41	46194-46195	[	_	_	
274-42	46195-46198	ML2	_	_	
274-43	46198-46199	_	_	_	
274-44	46199-46220	Demo_PingPong.thingml	_	_	
274-45	46220-46221	]	_	_	
274-46	46221-46222	(	_	_	
274-47	46222-46227	https	_	_	
274-48	46227-46228	:	_	_	
274-49	46228-46229	/	_	_	
274-50	46229-46230	/	_	_	
274-51	46230-46240	github.com	_	_	
274-52	46240-46241	/	_	_	
274-53	46241-46250	arminmoin	_	_	
274-54	46250-46251	/	_	_	
274-55	46251-46261	ML-Quadrat	_	_	
274-56	46261-46262	/	_	_	
274-57	46262-46266	blob	_	_	
274-58	46266-46267	/	_	_	
274-59	46267-46273	master	_	_	
274-60	46273-46274	/	_	_	
274-61	46274-46277	ML2	_	_	
274-62	46277-46278	/	_	_	
274-63	46278-46297	org.thingml.samples	_	_	
274-64	46297-46298	/	_	_	
274-65	46298-46301	src	_	_	
274-66	46301-46302	/	_	_	
274-67	46302-46306	main	_	_	
274-68	46306-46307	/	_	_	
274-69	46307-46314	thingml	_	_	
274-70	46314-46315	/	_	_	
274-71	46315-46318	ML2	_	_	
274-72	46318-46319	_	_	_	
274-73	46319-46340	Demo_PingPong.thingml	_	_	
274-74	46340-46341	)	_	_	
274-75	46341-46342	)	_	_	
274-76	46342-46343	.	_	_	
274-77	46345-46346	5	_	_	
274-78	46346-46347	.	_	_	

#Text=**da_pre_trained_predict:** In the blackbox-ML mode, none of the above-mentioned "actions" is useful.
275-1	46348-46349	*	_	_	
275-2	46349-46350	*	_	_	
275-3	46350-46372	da_pre_trained_predict	_	_	
275-4	46372-46373	:	_	_	
275-5	46373-46374	*	_	_	
275-6	46374-46375	*	_	_	
275-7	46376-46378	In	_	_	
275-8	46379-46382	the	_	_	
275-9	46383-46394	blackbox-ML	_	_	
275-10	46395-46399	mode	_	_	
275-11	46399-46400	,	_	_	
275-12	46401-46405	none	_	_	
275-13	46406-46408	of	_	_	
275-14	46409-46412	the	_	_	
275-15	46413-46428	above-mentioned	_	_	
275-16	46429-46430	"	_	_	
275-17	46430-46437	actions	_	_	
275-18	46437-46438	"	_	_	
275-19	46439-46441	is	_	_	
275-20	46442-46448	useful	_	_	
275-21	46448-46449	.	_	_	

#Text=Instead, this "action" loads the provided pre-trained ML model into the main memory and asks it to make the predictions.
276-1	46450-46457	Instead	_	_	
276-2	46457-46458	,	_	_	
276-3	46459-46463	this	_	_	
276-4	46464-46465	"	_	_	
276-5	46465-46471	action	_	_	
276-6	46471-46472	"	_	_	
276-7	46473-46478	loads	_	_	
276-8	46479-46482	the	_	_	
276-9	46483-46491	provided	_	_	
276-10	46492-46503	pre-trained	_	_	
276-11	46504-46506	ML	_	_	
276-12	46507-46512	model	_	_	
276-13	46513-46517	into	_	_	
276-14	46518-46521	the	_	_	
276-15	46522-46526	main	_	_	
276-16	46527-46533	memory	_	_	
276-17	46534-46537	and	_	_	
276-18	46538-46542	asks	_	_	
276-19	46543-46545	it	_	_	
276-20	46546-46548	to	_	_	
276-21	46549-46553	make	_	_	
276-22	46554-46557	the	_	_	
276-23	46558-46569	predictions	_	_	
276-24	46569-46570	.	_	_	

#Text=Similarly, this "action" must be followed by the name of the respective data analytics block, e.g., da1 in the case of the shown blackbox-ML example above.
277-1	46571-46580	Similarly	_	_	
277-2	46580-46581	,	_	_	
277-3	46582-46586	this	_	_	
277-4	46587-46588	"	_	_	
277-5	46588-46594	action	_	_	
277-6	46594-46595	"	_	_	
277-7	46596-46600	must	_	_	
277-8	46601-46603	be	_	_	
277-9	46604-46612	followed	_	_	
277-10	46613-46615	by	_	_	
277-11	46616-46619	the	_	_	
277-12	46620-46624	name	_	_	
277-13	46625-46627	of	_	_	
277-14	46628-46631	the	_	_	
277-15	46632-46642	respective	_	_	
277-16	46643-46647	data	_	_	
277-17	46648-46657	analytics	_	_	
277-18	46658-46663	block	_	_	
277-19	46663-46664	,	_	_	
277-20	46665-46668	e.g	_	_	
277-21	46668-46669	.	_	_	
277-22	46669-46670	,	_	_	
277-23	46671-46674	da1	_	_	
277-24	46675-46677	in	_	_	
277-25	46678-46681	the	_	_	
277-26	46682-46686	case	_	_	
277-27	46687-46689	of	_	_	
277-28	46690-46693	the	_	_	
277-29	46694-46699	shown	_	_	
277-30	46700-46711	blackbox-ML	_	_	
277-31	46712-46719	example	_	_	
277-32	46720-46725	above	_	_	
277-33	46725-46726	.	_	_	

#Text=Additionally, this "action" requires the local variables (i.e., properties) corresponding to the ML features/attributes as arguments (See "da_pre_trained_predict da1(client_ip_address, client_code)" in the provided blackbox-ML example [ML2_Demo_PingPong_Blackbox.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong_Blackbox.thingml)).\r
#Text=\r
#Text=#### Section 4.
278-1	46727-46739	Additionally	_	_	
278-2	46739-46740	,	_	_	
278-3	46741-46745	this	_	_	
278-4	46746-46747	"	_	_	
278-5	46747-46753	action	_	_	
278-6	46753-46754	"	_	_	
278-7	46755-46763	requires	_	_	
278-8	46764-46767	the	_	_	
278-9	46768-46773	local	_	_	
278-10	46774-46783	variables	_	_	
278-11	46784-46785	(	_	_	
278-12	46785-46788	i.e	_	_	
278-13	46788-46789	.	_	_	
278-14	46789-46790	,	_	_	
278-15	46791-46801	properties	_	_	
278-16	46801-46802	)	_	_	
278-17	46803-46816	corresponding	_	_	
278-18	46817-46819	to	_	_	
278-19	46820-46823	the	_	_	
278-20	46824-46826	ML	_	_	
278-21	46827-46835	features	_	_	
278-22	46835-46836	/	_	_	
278-23	46836-46846	attributes	_	_	
278-24	46847-46849	as	_	_	
278-25	46850-46859	arguments	_	_	
278-26	46860-46861	(	_	_	
278-27	46861-46864	See	_	_	
278-28	46865-46866	"	_	_	
278-29	46866-46888	da_pre_trained_predict	_	_	
278-30	46889-46892	da1	_	_	
278-31	46892-46893	(	_	_	
278-32	46893-46910	client_ip_address	_	_	
278-33	46910-46911	,	_	_	
278-34	46912-46923	client_code	_	_	
278-35	46923-46924	)	_	_	
278-36	46924-46925	"	_	_	
278-37	46926-46928	in	_	_	
278-38	46929-46932	the	_	_	
278-39	46933-46941	provided	_	_	
278-40	46942-46953	blackbox-ML	_	_	
278-41	46954-46961	example	_	_	
278-42	46962-46963	[	_	_	
278-43	46963-46966	ML2	_	_	
278-44	46966-46967	_	_	_	
278-45	46967-46997	Demo_PingPong_Blackbox.thingml	_	_	
278-46	46997-46998	]	_	_	
278-47	46998-46999	(	_	_	
278-48	46999-47004	https	_	_	
278-49	47004-47005	:	_	_	
278-50	47005-47006	/	_	_	
278-51	47006-47007	/	_	_	
278-52	47007-47017	github.com	_	_	
278-53	47017-47018	/	_	_	
278-54	47018-47027	arminmoin	_	_	
278-55	47027-47028	/	_	_	
278-56	47028-47038	ML-Quadrat	_	_	
278-57	47038-47039	/	_	_	
278-58	47039-47043	blob	_	_	
278-59	47043-47044	/	_	_	
278-60	47044-47050	master	_	_	
278-61	47050-47051	/	_	_	
278-62	47051-47054	ML2	_	_	
278-63	47054-47055	/	_	_	
278-64	47055-47074	org.thingml.samples	_	_	
278-65	47074-47075	/	_	_	
278-66	47075-47078	src	_	_	
278-67	47078-47079	/	_	_	
278-68	47079-47083	main	_	_	
278-69	47083-47084	/	_	_	
278-70	47084-47091	thingml	_	_	
278-71	47091-47092	/	_	_	
278-72	47092-47095	ML2	_	_	
278-73	47095-47096	_	_	_	
278-74	47096-47126	Demo_PingPong_Blackbox.thingml	_	_	
278-75	47126-47127	)	_	_	
278-76	47127-47128	)	_	_	
278-77	47128-47129	.	_	_	
278-78	47133-47134	#	_	_	
278-79	47134-47135	#	_	_	
278-80	47135-47136	#	_	_	
278-81	47136-47137	#	_	_	
278-82	47138-47145	Section	_	_	
278-83	47146-47147	4	_	_	
278-84	47147-47148	.	_	_	

#Text=Configuration\r
#Text=The keywords of this subsection of the model instances are highlighted in **green** in the textual model editor of ML2.
279-1	47149-47162	Configuration	_	_	
279-2	47164-47167	The	_	_	
279-3	47168-47176	keywords	_	_	
279-4	47177-47179	of	_	_	
279-5	47180-47184	this	_	_	
279-6	47185-47195	subsection	_	_	
279-7	47196-47198	of	_	_	
279-8	47199-47202	the	_	_	
279-9	47203-47208	model	_	_	
279-10	47209-47218	instances	_	_	
279-11	47219-47222	are	_	_	
279-12	47223-47234	highlighted	_	_	
279-13	47235-47237	in	_	_	
279-14	47238-47239	*	_	_	
279-15	47239-47240	*	_	_	
279-16	47240-47245	green	_	_	
279-17	47245-47246	*	_	_	
279-18	47246-47247	*	_	_	
279-19	47248-47250	in	_	_	
279-20	47251-47254	the	_	_	
279-21	47255-47262	textual	_	_	
279-22	47263-47268	model	_	_	
279-23	47269-47275	editor	_	_	
279-24	47276-47278	of	_	_	
279-25	47279-47282	ML2	*	SOFTWARE	
279-26	47282-47283	.	_	_	

#Text=As long as a model instance is valid (i.e., conforms to the meta-model/grammar of the DSML of ML2), and is complete, we can use a model-to-code transformation (code generator/"compiler") of ML2 to gnerate the entire source code of the target (smart) IoT service out of it in a fully automated manner, provided that it has a configuration section at the end.
280-1	47284-47286	As	_	_	
280-2	47287-47291	long	_	_	
280-3	47292-47294	as	_	_	
280-4	47295-47296	a	_	_	
280-5	47297-47302	model	_	_	
280-6	47303-47311	instance	_	_	
280-7	47312-47314	is	_	_	
280-8	47315-47320	valid	_	_	
280-9	47321-47322	(	_	_	
280-10	47322-47325	i.e	_	_	
280-11	47325-47326	.	_	_	
280-12	47326-47327	,	_	_	
280-13	47328-47336	conforms	_	_	
280-14	47337-47339	to	_	_	
280-15	47340-47343	the	_	_	
280-16	47344-47354	meta-model	_	_	
280-17	47354-47355	/	_	_	
280-18	47355-47362	grammar	_	_	
280-19	47363-47365	of	_	_	
280-20	47366-47369	the	_	_	
280-21	47370-47374	DSML	_	_	
280-22	47375-47377	of	_	_	
280-23	47378-47381	ML2	*	SOFTWARE	
280-24	47381-47382	)	_	_	
280-25	47382-47383	,	_	_	
280-26	47384-47387	and	_	_	
280-27	47388-47390	is	_	_	
280-28	47391-47399	complete	_	_	
280-29	47399-47400	,	_	_	
280-30	47401-47403	we	_	_	
280-31	47404-47407	can	_	_	
280-32	47408-47411	use	_	_	
280-33	47412-47413	a	_	_	
280-34	47414-47427	model-to-code	_	_	
280-35	47428-47442	transformation	_	_	
280-36	47443-47444	(	_	_	
280-37	47444-47448	code	_	_	
280-38	47449-47458	generator	_	_	
280-39	47458-47459	/	_	_	
280-40	47459-47460	"	_	_	
280-41	47460-47468	compiler	_	_	
280-42	47468-47469	"	_	_	
280-43	47469-47470	)	_	_	
280-44	47471-47473	of	_	_	
280-45	47474-47477	ML2	*	SOFTWARE	
280-46	47478-47480	to	_	_	
280-47	47481-47488	gnerate	_	_	
280-48	47489-47492	the	_	_	
280-49	47493-47499	entire	_	_	
280-50	47500-47506	source	_	_	
280-51	47507-47511	code	_	_	
280-52	47512-47514	of	_	_	
280-53	47515-47518	the	_	_	
280-54	47519-47525	target	_	_	
280-55	47526-47527	(	_	_	
280-56	47527-47532	smart	_	_	
280-57	47532-47533	)	_	_	
280-58	47534-47537	IoT	_	_	
280-59	47538-47545	service	_	_	
280-60	47546-47549	out	_	_	
280-61	47550-47552	of	_	_	
280-62	47553-47555	it	_	_	
280-63	47556-47558	in	_	_	
280-64	47559-47560	a	_	_	
280-65	47561-47566	fully	_	_	
280-66	47567-47576	automated	_	_	
280-67	47577-47583	manner	_	_	
280-68	47583-47584	,	_	_	
280-69	47585-47593	provided	_	_	
280-70	47594-47598	that	_	_	
280-71	47599-47601	it	_	_	
280-72	47602-47605	has	_	_	
280-73	47606-47607	a	_	_	
280-74	47608-47621	configuration	_	_	
280-75	47622-47629	section	_	_	
280-76	47630-47632	at	_	_	
280-77	47633-47636	the	_	_	
280-78	47637-47640	end	_	_	
280-79	47640-47641	.	_	_	

#Text=If we have a PIM instance, such as the provided example [ML2_Demo_NIALM_PIM.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_NIALM_PIM.thingml), it reasonably does not include any configuration.
281-1	47642-47644	If	_	_	
281-2	47645-47647	we	_	_	
281-3	47648-47652	have	_	_	
281-4	47653-47654	a	_	_	
281-5	47655-47658	PIM	_	_	
281-6	47659-47667	instance	_	_	
281-7	47667-47668	,	_	_	
281-8	47669-47673	such	_	_	
281-9	47674-47676	as	_	_	
281-10	47677-47680	the	_	_	
281-11	47681-47689	provided	_	_	
281-12	47690-47697	example	_	_	
281-13	47698-47699	[	_	_	
281-14	47699-47702	ML2	_	_	
281-15	47702-47703	_	_	_	
281-16	47703-47725	Demo_NIALM_PIM.thingml	_	_	
281-17	47725-47726	]	_	_	
281-18	47726-47727	(	_	_	
281-19	47727-47732	https	_	_	
281-20	47732-47733	:	_	_	
281-21	47733-47734	/	_	_	
281-22	47734-47735	/	_	_	
281-23	47735-47745	github.com	_	_	
281-24	47745-47746	/	_	_	
281-25	47746-47755	arminmoin	_	_	
281-26	47755-47756	/	_	_	
281-27	47756-47766	ML-Quadrat	_	_	
281-28	47766-47767	/	_	_	
281-29	47767-47771	blob	_	_	
281-30	47771-47772	/	_	_	
281-31	47772-47778	master	_	_	
281-32	47778-47779	/	_	_	
281-33	47779-47782	ML2	_	_	
281-34	47782-47783	/	_	_	
281-35	47783-47802	org.thingml.samples	_	_	
281-36	47802-47803	/	_	_	
281-37	47803-47806	src	_	_	
281-38	47806-47807	/	_	_	
281-39	47807-47811	main	_	_	
281-40	47811-47812	/	_	_	
281-41	47812-47819	thingml	_	_	
281-42	47819-47820	/	_	_	
281-43	47820-47823	ML2	_	_	
281-44	47823-47824	_	_	_	
281-45	47824-47846	Demo_NIALM_PIM.thingml	_	_	
281-46	47846-47847	)	_	_	
281-47	47847-47848	,	_	_	
281-48	47849-47851	it	_	_	
281-49	47852-47862	reasonably	_	_	
281-50	47863-47867	does	_	_	
281-51	47868-47871	not	_	_	
281-52	47872-47879	include	_	_	
281-53	47880-47883	any	_	_	
281-54	47884-47897	configuration	_	_	
281-55	47897-47898	.	_	_	

#Text=However, the PSM instances, e.g., [ML2_Demo_NIALM_PSM_Java.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_NIALM_PSM_Java.thingml) must contain the configuration.
282-1	47899-47906	However	_	_	
282-2	47906-47907	,	_	_	
282-3	47908-47911	the	_	_	
282-4	47912-47915	PSM	_	_	
282-5	47916-47925	instances	_	_	
282-6	47925-47926	,	_	_	
282-7	47927-47930	e.g	_	_	
282-8	47930-47931	.	_	_	
282-9	47931-47932	,	_	_	
282-10	47933-47934	[	_	_	
282-11	47934-47937	ML2	_	_	
282-12	47937-47938	_	_	_	
282-13	47938-47965	Demo_NIALM_PSM_Java.thingml	_	_	
282-13.1	47953-47957	Java	*	PROGLANG	
282-14	47965-47966	]	_	_	
282-15	47966-47967	(	_	_	
282-16	47967-47972	https	_	_	
282-17	47972-47973	:	_	_	
282-18	47973-47974	/	_	_	
282-19	47974-47975	/	_	_	
282-20	47975-47985	github.com	_	_	
282-21	47985-47986	/	_	_	
282-22	47986-47995	arminmoin	_	_	
282-23	47995-47996	/	_	_	
282-24	47996-48006	ML-Quadrat	_	_	
282-25	48006-48007	/	_	_	
282-26	48007-48011	blob	_	_	
282-27	48011-48012	/	_	_	
282-28	48012-48018	master	_	_	
282-29	48018-48019	/	_	_	
282-30	48019-48022	ML2	_	_	
282-31	48022-48023	/	_	_	
282-32	48023-48042	org.thingml.samples	_	_	
282-33	48042-48043	/	_	_	
282-34	48043-48046	src	_	_	
282-35	48046-48047	/	_	_	
282-36	48047-48051	main	_	_	
282-37	48051-48052	/	_	_	
282-38	48052-48059	thingml	_	_	
282-39	48059-48060	/	_	_	
282-40	48060-48063	ML2	_	_	
282-41	48063-48064	_	_	_	
282-42	48064-48091	Demo_NIALM_PSM_Java.thingml	_	_	
282-42.1	48079-48083	Java	*	PROGLANG	
282-43	48091-48092	)	_	_	
282-44	48093-48097	must	_	_	
282-45	48098-48105	contain	_	_	
282-46	48106-48109	the	_	_	
282-47	48110-48123	configuration	_	_	
282-48	48123-48124	.	_	_	

#Text=Here is the sample configuration of the above-mentioned example [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml):\r
#Text=\r
#Text=```\r
#Text=configuration ML2_Demo_PingPong_Cfg @compiler "python_java" {\t\r
#Text=    \tinstance pingClient : PingClient\r
#Text=    \tinstance pingServer : PingServer\r
#Text=    \tinstance pingPongDataAnalytics : PingPongDataAnalytics\r
#Text=    \tconnector pingClient.ping_service => pingServer.ping_service\r
#Text=    \tconnector pingServer.da_service => pingPongDataAnalytics.da_service    \r
#Text=}\r
#Text=```\r
#Text=\r
#Text=The configuration subsection has typically 3 parts:\r
#Text=\r
#Text=1.
283-1	48125-48129	Here	_	_	
283-2	48130-48132	is	_	_	
283-3	48133-48136	the	_	_	
283-4	48137-48143	sample	_	_	
283-5	48144-48157	configuration	_	_	
283-6	48158-48160	of	_	_	
283-7	48161-48164	the	_	_	
283-8	48165-48180	above-mentioned	_	_	
283-9	48181-48188	example	_	_	
283-10	48189-48190	[	_	_	
283-11	48190-48193	ML2	_	_	
283-12	48193-48194	_	_	_	
283-13	48194-48215	Demo_PingPong.thingml	_	_	
283-14	48215-48216	]	_	_	
283-15	48216-48217	(	_	_	
283-16	48217-48222	https	_	_	
283-17	48222-48223	:	_	_	
283-18	48223-48224	/	_	_	
283-19	48224-48225	/	_	_	
283-20	48225-48235	github.com	_	_	
283-21	48235-48236	/	_	_	
283-22	48236-48245	arminmoin	_	_	
283-23	48245-48246	/	_	_	
283-24	48246-48256	ML-Quadrat	_	_	
283-25	48256-48257	/	_	_	
283-26	48257-48261	blob	_	_	
283-27	48261-48262	/	_	_	
283-28	48262-48268	master	_	_	
283-29	48268-48269	/	_	_	
283-30	48269-48272	ML2	_	_	
283-31	48272-48273	/	_	_	
283-32	48273-48292	org.thingml.samples	_	_	
283-33	48292-48293	/	_	_	
283-34	48293-48296	src	_	_	
283-35	48296-48297	/	_	_	
283-36	48297-48301	main	_	_	
283-37	48301-48302	/	_	_	
283-38	48302-48309	thingml	_	_	
283-39	48309-48310	/	_	_	
283-40	48310-48313	ML2	_	_	
283-41	48313-48314	_	_	_	
283-42	48314-48335	Demo_PingPong.thingml	_	_	
283-43	48335-48336	)	_	_	
283-44	48336-48337	:	_	_	
283-45	48341-48342	`	_	_	
283-46	48342-48343	`	_	_	
283-47	48343-48344	`	_	_	
283-48	48346-48359	configuration	_	_	
283-49	48360-48363	ML2	_	_	
283-50	48363-48364	_	_	_	
283-51	48364-48381	Demo_PingPong_Cfg	_	_	
283-52	48382-48383	@	_	_	
283-53	48383-48391	compiler	_	_	
283-54	48392-48393	"	_	_	
283-55	48393-48404	python_java	_	_	
283-55.1	48393-48399	python	*	PROGLANG	
283-55.2	48400-48404	java	*	PROGLANG	
283-56	48404-48405	"	_	_	
283-57	48406-48407	{	_	_	
283-58	48415-48423	instance	_	_	
283-59	48424-48434	pingClient	_	_	
283-60	48435-48436	:	_	_	
283-61	48437-48447	PingClient	_	_	
283-62	48454-48462	instance	_	_	
283-63	48463-48473	pingServer	_	_	
283-64	48474-48475	:	_	_	
283-65	48476-48486	PingServer	_	_	
283-66	48493-48501	instance	_	_	
283-67	48502-48523	pingPongDataAnalytics	_	_	
283-68	48524-48525	:	_	_	
283-69	48526-48547	PingPongDataAnalytics	_	_	
283-70	48554-48563	connector	_	_	
283-71	48564-48587	pingClient.ping_service	_	_	
283-72	48588-48589	=	_	_	
283-73	48589-48590	>	_	_	
283-74	48591-48614	pingServer.ping_service	_	_	
283-75	48621-48630	connector	_	_	
283-76	48631-48652	pingServer.da_service	_	_	
283-77	48653-48654	=	_	_	
283-78	48654-48655	>	_	_	
283-79	48656-48688	pingPongDataAnalytics.da_service	_	_	
283-80	48694-48695	}	_	_	
283-81	48697-48698	`	_	_	
283-82	48698-48699	`	_	_	
283-83	48699-48700	`	_	_	
283-84	48704-48707	The	_	_	
283-85	48708-48721	configuration	_	_	
283-86	48722-48732	subsection	_	_	
283-87	48733-48736	has	_	_	
283-88	48737-48746	typically	_	_	
283-89	48747-48748	3	_	_	
283-90	48749-48754	parts	_	_	
283-91	48754-48755	:	_	_	
283-92	48759-48760	1	_	_	
283-93	48760-48761	.	_	_	

#Text=Optionally, it has the annotation @compiler, determining the particular model-to-code transformation (code generator/"compiler") that needs to be deployed, e.g., @compiler "python_java" for the Python and Java code generator, or @compiler "java" for the pure Java code generator.
284-1	48762-48772	Optionally	_	_	
284-2	48772-48773	,	_	_	
284-3	48774-48776	it	_	_	
284-4	48777-48780	has	_	_	
284-5	48781-48784	the	_	_	
284-6	48785-48795	annotation	_	_	
284-7	48796-48797	@	_	_	
284-8	48797-48805	compiler	_	_	
284-9	48805-48806	,	_	_	
284-10	48807-48818	determining	_	_	
284-11	48819-48822	the	_	_	
284-12	48823-48833	particular	_	_	
284-13	48834-48847	model-to-code	_	_	
284-14	48848-48862	transformation	_	_	
284-15	48863-48864	(	_	_	
284-16	48864-48868	code	_	_	
284-17	48869-48878	generator	_	_	
284-18	48878-48879	/	_	_	
284-19	48879-48880	"	_	_	
284-20	48880-48888	compiler	_	_	
284-21	48888-48889	"	_	_	
284-22	48889-48890	)	_	_	
284-23	48891-48895	that	_	_	
284-24	48896-48901	needs	_	_	
284-25	48902-48904	to	_	_	
284-26	48905-48907	be	_	_	
284-27	48908-48916	deployed	_	_	
284-28	48916-48917	,	_	_	
284-29	48918-48921	e.g	_	_	
284-30	48921-48922	.	_	_	
284-31	48922-48923	,	_	_	
284-32	48924-48925	@	_	_	
284-33	48925-48933	compiler	_	_	
284-34	48934-48935	"	_	_	
284-35	48935-48946	python_java	_	_	
284-35.1	48935-48941	python	*	PROGLANG	
284-35.2	48942-48946	java	*	PROGLANG	
284-36	48946-48947	"	_	_	
284-37	48948-48951	for	_	_	
284-38	48952-48955	the	_	_	
284-39	48956-48962	Python	*	PROGLANG	
284-40	48963-48966	and	_	_	
284-41	48967-48971	Java	*	PROGLANG	
284-42	48972-48976	code	_	_	
284-43	48977-48986	generator	_	_	
284-44	48986-48987	,	_	_	
284-45	48988-48990	or	_	_	
284-46	48991-48992	@	_	_	
284-47	48992-49000	compiler	_	_	
284-48	49001-49002	"	_	_	
284-49	49002-49006	java	*	PROGLANG	
284-50	49006-49007	"	_	_	
284-51	49008-49011	for	_	_	
284-52	49012-49015	the	_	_	
284-53	49016-49020	pure	_	_	
284-54	49021-49025	Java	*	PROGLANG	
284-55	49026-49030	code	_	_	
284-56	49031-49040	generator	_	_	
284-57	49040-49041	.	_	_	

#Text=This is required if the practitioner wants to later use the "-c auto" option for the code generation.
285-1	49042-49046	This	_	_	
285-2	49047-49049	is	_	_	
285-3	49050-49058	required	_	_	
285-4	49059-49061	if	_	_	
285-5	49062-49065	the	_	_	
285-6	49066-49078	practitioner	_	_	
285-7	49079-49084	wants	_	_	
285-8	49085-49087	to	_	_	
285-9	49088-49093	later	_	_	
285-10	49094-49097	use	_	_	
285-11	49098-49101	the	_	_	
285-12	49102-49103	"	_	_	
285-13	49103-49104	-	_	_	
285-14	49104-49105	c	_	_	
285-15	49106-49110	auto	_	_	
285-16	49110-49111	"	_	_	
285-17	49112-49118	option	_	_	
285-18	49119-49122	for	_	_	
285-19	49123-49126	the	_	_	
285-20	49127-49131	code	_	_	
285-21	49132-49142	generation	_	_	
285-22	49142-49143	.	_	_	

#Text=Otherwise, if it is not specified in the configuration, the practitioner may later use the "-c" option in the code generation to determine the target model-to-code transformation (code generator/"compiler") that shall be deployed, e.g., "-c python_java" for the Python and Java code generator, or "-c java" for the pure Java code generator.
286-1	49144-49153	Otherwise	_	_	
286-2	49153-49154	,	_	_	
286-3	49155-49157	if	_	_	
286-4	49158-49160	it	_	_	
286-5	49161-49163	is	_	_	
286-6	49164-49167	not	_	_	
286-7	49168-49177	specified	_	_	
286-8	49178-49180	in	_	_	
286-9	49181-49184	the	_	_	
286-10	49185-49198	configuration	_	_	
286-11	49198-49199	,	_	_	
286-12	49200-49203	the	_	_	
286-13	49204-49216	practitioner	_	_	
286-14	49217-49220	may	_	_	
286-15	49221-49226	later	_	_	
286-16	49227-49230	use	_	_	
286-17	49231-49234	the	_	_	
286-18	49235-49236	"	_	_	
286-19	49236-49237	-	_	_	
286-20	49237-49238	c	_	_	
286-21	49238-49239	"	_	_	
286-22	49240-49246	option	_	_	
286-23	49247-49249	in	_	_	
286-24	49250-49253	the	_	_	
286-25	49254-49258	code	_	_	
286-26	49259-49269	generation	_	_	
286-27	49270-49272	to	_	_	
286-28	49273-49282	determine	_	_	
286-29	49283-49286	the	_	_	
286-30	49287-49293	target	_	_	
286-31	49294-49307	model-to-code	_	_	
286-32	49308-49322	transformation	_	_	
286-33	49323-49324	(	_	_	
286-34	49324-49328	code	_	_	
286-35	49329-49338	generator	_	_	
286-36	49338-49339	/	_	_	
286-37	49339-49340	"	_	_	
286-38	49340-49348	compiler	_	_	
286-39	49348-49349	"	_	_	
286-40	49349-49350	)	_	_	
286-41	49351-49355	that	_	_	
286-42	49356-49361	shall	_	_	
286-43	49362-49364	be	_	_	
286-44	49365-49373	deployed	_	_	
286-45	49373-49374	,	_	_	
286-46	49375-49378	e.g	_	_	
286-47	49378-49379	.	_	_	
286-48	49379-49380	,	_	_	
286-49	49381-49382	"	_	_	
286-50	49382-49383	-	_	_	
286-51	49383-49384	c	_	_	
286-52	49385-49396	python_java	_	_	
286-52.1	49385-49391	python	*	PROGLANG	
286-52.2	49392-49396	java	*	PROGLANG	
286-53	49396-49397	"	_	_	
286-54	49398-49401	for	_	_	
286-55	49402-49405	the	_	_	
286-56	49406-49412	Python	*	PROGLANG	
286-57	49413-49416	and	_	_	
286-58	49417-49421	Java	*	PROGLANG	
286-59	49422-49426	code	_	_	
286-60	49427-49436	generator	_	_	
286-61	49436-49437	,	_	_	
286-62	49438-49440	or	_	_	
286-63	49441-49442	"	_	_	
286-64	49442-49443	-	_	_	
286-65	49443-49444	c	_	_	
286-66	49445-49449	java	*	PROGLANG	
286-67	49449-49450	"	_	_	
286-68	49451-49454	for	_	_	
286-69	49455-49458	the	_	_	
286-70	49459-49463	pure	_	_	
286-71	49464-49468	Java	*	PROGLANG	
286-72	49469-49473	code	_	_	
286-73	49474-49483	generator	_	_	
286-74	49483-49484	.	_	_	

#Text=**Note 1:** Currently, the @compiler annotation supports in principle [every model-to-code transformation/code generator/"compiler" that is available in the compilers module/subproject](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/compilers).
287-1	49486-49487	*	_	_	
287-2	49487-49488	*	_	_	
287-3	49488-49492	Note	_	_	
287-4	49493-49494	1	_	_	
287-5	49494-49495	:	_	_	
287-6	49495-49496	*	_	_	
287-7	49496-49497	*	_	_	
287-8	49498-49507	Currently	_	_	
287-9	49507-49508	,	_	_	
287-10	49509-49512	the	_	_	
287-11	49513-49514	@	_	_	
287-12	49514-49522	compiler	_	_	
287-13	49523-49533	annotation	_	_	
287-14	49534-49542	supports	_	_	
287-15	49543-49545	in	_	_	
287-16	49546-49555	principle	_	_	
287-17	49556-49557	[	_	_	
287-18	49557-49562	every	_	_	
287-19	49563-49576	model-to-code	_	_	
287-20	49577-49591	transformation	_	_	
287-21	49591-49592	/	_	_	
287-22	49592-49596	code	_	_	
287-23	49597-49606	generator	_	_	
287-24	49606-49607	/	_	_	
287-25	49607-49608	"	_	_	
287-26	49608-49616	compiler	_	_	
287-27	49616-49617	"	_	_	
287-28	49618-49622	that	_	_	
287-29	49623-49625	is	_	_	
287-30	49626-49635	available	_	_	
287-31	49636-49638	in	_	_	
287-32	49639-49642	the	_	_	
287-33	49643-49652	compilers	_	_	
287-34	49653-49659	module	_	_	
287-35	49659-49660	/	_	_	
287-36	49660-49670	subproject	_	_	
287-37	49670-49671	]	_	_	
287-38	49671-49672	(	_	_	
287-39	49672-49677	https	_	_	
287-40	49677-49678	:	_	_	
287-41	49678-49679	/	_	_	
287-42	49679-49680	/	_	_	
287-43	49680-49690	github.com	_	_	
287-44	49690-49691	/	_	_	
287-45	49691-49700	arminmoin	_	_	
287-46	49700-49701	/	_	_	
287-47	49701-49711	ML-Quadrat	_	_	
287-48	49711-49712	/	_	_	
287-49	49712-49716	tree	_	_	
287-50	49716-49717	/	_	_	
287-51	49717-49723	master	_	_	
287-52	49723-49724	/	_	_	
287-53	49724-49727	ML2	_	_	
287-54	49727-49728	/	_	_	
287-55	49728-49737	compilers	_	_	
287-56	49737-49738	)	_	_	
287-57	49738-49739	.	_	_	

#Text=However, if you want to develop a **smart** IoT service, i.e., with AI, specifically DAML capabilities, you need to choose a model-to-code transformation/code generator/"compiler" that is capable of that.
288-1	49740-49747	However	_	_	
288-2	49747-49748	,	_	_	
288-3	49749-49751	if	_	_	
288-4	49752-49755	you	_	_	
288-5	49756-49760	want	_	_	
288-6	49761-49763	to	_	_	
288-7	49764-49771	develop	_	_	
288-8	49772-49773	a	_	_	
288-9	49774-49775	*	_	_	
288-10	49775-49776	*	_	_	
288-11	49776-49781	smart	_	_	
288-12	49781-49782	*	_	_	
288-13	49782-49783	*	_	_	
288-14	49784-49787	IoT	_	_	
288-15	49788-49795	service	_	_	
288-16	49795-49796	,	_	_	
288-17	49797-49800	i.e	_	_	
288-18	49800-49801	.	_	_	
288-19	49801-49802	,	_	_	
288-20	49803-49807	with	_	_	
288-21	49808-49810	AI	_	_	
288-22	49810-49811	,	_	_	
288-23	49812-49824	specifically	_	_	
288-24	49825-49829	DAML	_	_	
288-25	49830-49842	capabilities	_	_	
288-26	49842-49843	,	_	_	
288-27	49844-49847	you	_	_	
288-28	49848-49852	need	_	_	
288-29	49853-49855	to	_	_	
288-30	49856-49862	choose	_	_	
288-31	49863-49864	a	_	_	
288-32	49865-49878	model-to-code	_	_	
288-33	49879-49893	transformation	_	_	
288-34	49893-49894	/	_	_	
288-35	49894-49898	code	_	_	
288-36	49899-49908	generator	_	_	
288-37	49908-49909	/	_	_	
288-38	49909-49910	"	_	_	
288-39	49910-49918	compiler	_	_	
288-40	49918-49919	"	_	_	
288-41	49920-49924	that	_	_	
288-42	49925-49927	is	_	_	
288-43	49928-49935	capable	_	_	
288-44	49936-49938	of	_	_	
288-45	49939-49943	that	_	_	
288-46	49943-49944	.	_	_	

#Text=Currently, only the [Python and Java ("python_java") code generator](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/compilers/python_java) supports DAML out-of-the-box.
289-1	49945-49954	Currently	_	_	
289-2	49954-49955	,	_	_	
289-3	49956-49960	only	_	_	
289-4	49961-49964	the	_	_	
289-5	49965-49966	[	_	_	
289-6	49966-49972	Python	*	PROGLANG	
289-7	49973-49976	and	_	_	
289-8	49977-49981	Java	*	PROGLANG	
289-9	49982-49983	(	_	_	
289-10	49983-49984	"	_	_	
289-11	49984-49995	python_java	_	_	
289-11.1	49984-49990	python	*	PROGLANG	
289-11.2	49991-49995	java	*	PROGLANG	
289-12	49995-49996	"	_	_	
289-13	49996-49997	)	_	_	
289-14	49998-50002	code	_	_	
289-15	50003-50012	generator	_	_	
289-16	50012-50013	]	_	_	
289-17	50013-50014	(	_	_	
289-18	50014-50019	https	_	_	
289-19	50019-50020	:	_	_	
289-20	50020-50021	/	_	_	
289-21	50021-50022	/	_	_	
289-22	50022-50032	github.com	_	_	
289-23	50032-50033	/	_	_	
289-24	50033-50042	arminmoin	_	_	
289-25	50042-50043	/	_	_	
289-26	50043-50053	ML-Quadrat	_	_	
289-27	50053-50054	/	_	_	
289-28	50054-50058	tree	_	_	
289-29	50058-50059	/	_	_	
289-30	50059-50065	master	_	_	
289-31	50065-50066	/	_	_	
289-32	50066-50069	ML2	_	_	
289-33	50069-50070	/	_	_	
289-34	50070-50079	compilers	_	_	
289-35	50079-50080	/	_	_	
289-36	50080-50091	python_java	_	_	
289-37	50091-50092	)	_	_	
289-38	50093-50101	supports	_	_	
289-39	50102-50106	DAML	_	_	
289-40	50107-50121	out-of-the-box	_	_	
289-41	50121-50122	.	_	_	

#Text=This code generator generates Python and Java code.
290-1	50123-50127	This	_	_	
290-2	50128-50132	code	_	_	
290-3	50133-50142	generator	_	_	
290-4	50143-50152	generates	_	_	
290-5	50153-50159	Python	*	PROGLANG	
290-6	50160-50163	and	_	_	
290-7	50164-50168	Java	*	PROGLANG	
290-8	50169-50173	code	_	_	
290-9	50173-50174	.	_	_	

#Text=The Python code is responsible for the DAML functions, whereas the rest is implemented in Java.
291-1	50175-50178	The	_	_	
291-2	50179-50185	Python	*	PROGLANG	
291-3	50186-50190	code	_	_	
291-4	50191-50193	is	_	_	
291-5	50194-50205	responsible	_	_	
291-6	50206-50209	for	_	_	
291-7	50210-50213	the	_	_	
291-8	50214-50218	DAML	_	_	
291-9	50219-50228	functions	_	_	
291-10	50228-50229	,	_	_	
291-11	50230-50237	whereas	_	_	
291-12	50238-50241	the	_	_	
291-13	50242-50246	rest	_	_	
291-14	50247-50249	is	_	_	
291-15	50250-50261	implemented	_	_	
291-16	50262-50264	in	_	_	
291-17	50265-50269	Java	*	PROGLANG	
291-18	50269-50270	.	_	_	

#Text=The Python and Java codes are already seamlessly integrated using the Java Process Builder API.
292-1	50271-50274	The	_	_	
292-2	50275-50281	Python	*	PROGLANG	
292-3	50282-50285	and	_	_	
292-4	50286-50290	Java	*	PROGLANG	
292-5	50291-50296	codes	_	_	
292-6	50297-50300	are	_	_	
292-7	50301-50308	already	_	_	
292-8	50309-50319	seamlessly	_	_	
292-9	50320-50330	integrated	_	_	
292-10	50331-50336	using	_	_	
292-11	50337-50340	the	_	_	
292-12	50341-50345	Java	*	PROGLANG	
292-13	50346-50353	Process	_	_	
292-14	50354-50361	Builder	_	_	
292-15	50362-50365	API	_	_	
292-16	50365-50366	.	_	_	

#Text=However, enabling more code generators to support DAML out-of-the-box, such as the [pure Java ("java") code generator](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/compilers/java) is currently in progress.
293-1	50367-50374	However	_	_	
293-2	50374-50375	,	_	_	
293-3	50376-50384	enabling	_	_	
293-4	50385-50389	more	_	_	
293-5	50390-50394	code	_	_	
293-6	50395-50405	generators	_	_	
293-7	50406-50408	to	_	_	
293-8	50409-50416	support	_	_	
293-9	50417-50421	DAML	_	_	
293-10	50422-50436	out-of-the-box	_	_	
293-11	50436-50437	,	_	_	
293-12	50438-50442	such	_	_	
293-13	50443-50445	as	_	_	
293-14	50446-50449	the	_	_	
293-15	50450-50451	[	_	_	
293-16	50451-50455	pure	_	_	
293-17	50456-50460	Java	*	PROGLANG	
293-18	50461-50462	(	_	_	
293-19	50462-50463	"	_	_	
293-20	50463-50467	java	*	PROGLANG	
293-21	50467-50468	"	_	_	
293-22	50468-50469	)	_	_	
293-23	50470-50474	code	_	_	
293-24	50475-50484	generator	_	_	
293-25	50484-50485	]	_	_	
293-26	50485-50486	(	_	_	
293-27	50486-50491	https	_	_	
293-28	50491-50492	:	_	_	
293-29	50492-50493	/	_	_	
293-30	50493-50494	/	_	_	
293-31	50494-50504	github.com	_	_	
293-32	50504-50505	/	_	_	
293-33	50505-50514	arminmoin	_	_	
293-34	50514-50515	/	_	_	
293-35	50515-50525	ML-Quadrat	_	_	
293-36	50525-50526	/	_	_	
293-37	50526-50530	tree	_	_	
293-38	50530-50531	/	_	_	
293-39	50531-50537	master	_	_	
293-40	50537-50538	/	_	_	
293-41	50538-50541	ML2	_	_	
293-42	50541-50542	/	_	_	
293-43	50542-50551	compilers	_	_	
293-44	50551-50552	/	_	_	
293-45	50552-50556	java	*	SOFTWARE	
293-46	50556-50557	)	_	_	
293-47	50558-50560	is	_	_	
293-48	50561-50570	currently	_	_	
293-49	50571-50573	in	_	_	
293-50	50574-50582	progress	_	_	
293-51	50582-50583	.	_	_	

#Text=**Note 2:** You should either avoid mentioning the annotation @dalib in the data analytics subsection (Subsection 3.2) or you should ensure that the selected ML library/framework is compatible with the choice of the model-to-code transformation here.
294-1	50585-50586	*	_	_	
294-2	50586-50587	*	_	_	
294-3	50587-50591	Note	_	_	
294-4	50592-50593	2	_	_	
294-5	50593-50594	:	_	_	
294-6	50594-50595	*	_	_	
294-7	50595-50596	*	_	_	
294-8	50597-50600	You	_	_	
294-9	50601-50607	should	_	_	
294-10	50608-50614	either	_	_	
294-11	50615-50620	avoid	_	_	
294-12	50621-50631	mentioning	_	_	
294-13	50632-50635	the	_	_	
294-14	50636-50646	annotation	_	_	
294-15	50647-50648	@	_	_	
294-16	50648-50653	dalib	_	_	
294-17	50654-50656	in	_	_	
294-18	50657-50660	the	_	_	
294-19	50661-50665	data	_	_	
294-20	50666-50675	analytics	_	_	
294-21	50676-50686	subsection	_	_	
294-22	50687-50688	(	_	_	
294-23	50688-50698	Subsection	_	_	
294-24	50699-50702	3.2	_	_	
294-25	50702-50703	)	_	_	
294-26	50704-50706	or	_	_	
294-27	50707-50710	you	_	_	
294-28	50711-50717	should	_	_	
294-29	50718-50724	ensure	_	_	
294-30	50725-50729	that	_	_	
294-31	50730-50733	the	_	_	
294-32	50734-50742	selected	_	_	
294-33	50743-50745	ML	_	_	
294-34	50746-50753	library	_	_	
294-35	50753-50754	/	_	_	
294-36	50754-50763	framework	_	_	
294-37	50764-50766	is	_	_	
294-38	50767-50777	compatible	_	_	
294-39	50778-50782	with	_	_	
294-40	50783-50786	the	_	_	
294-41	50787-50793	choice	_	_	
294-42	50794-50796	of	_	_	
294-43	50797-50800	the	_	_	
294-44	50801-50814	model-to-code	_	_	
294-45	50815-50829	transformation	_	_	
294-46	50830-50834	here	_	_	
294-47	50834-50835	.	_	_	

#Text=For example, if you have already set @dalib "scikit-learn" or @dalib "keras-tensorflow", then you must choose the python_java code generator, not the pure Java code generator, as Scikit-learn/Keras are Python libraries.
295-1	50836-50839	For	_	_	
295-2	50840-50847	example	_	_	
295-3	50847-50848	,	_	_	
295-4	50849-50851	if	_	_	
295-5	50852-50855	you	_	_	
295-6	50856-50860	have	_	_	
295-7	50861-50868	already	_	_	
295-8	50869-50872	set	_	_	
295-9	50873-50874	@	_	_	
295-10	50874-50879	dalib	_	_	
295-11	50880-50881	"	_	_	
295-12	50881-50893	scikit-learn	*	SOFTWARE	
295-13	50893-50894	"	_	_	
295-14	50895-50897	or	_	_	
295-15	50898-50899	@	_	_	
295-16	50899-50904	dalib	_	_	
295-17	50905-50906	"	_	_	
295-18	50906-50922	keras-tensorflow	_	_	
295-18.1	50906-50911	keras	*	SOFTWARE	
295-18.2	50912-50922	tensorflow	*	SOFTWARE	
295-19	50922-50923	"	_	_	
295-20	50923-50924	,	_	_	
295-21	50925-50929	then	_	_	
295-22	50930-50933	you	_	_	
295-23	50934-50938	must	_	_	
295-24	50939-50945	choose	_	_	
295-25	50946-50949	the	_	_	
295-26	50950-50961	python_java	_	_	
295-26.1	50950-50956	python	*	PROGLANG	
295-26.2	50957-50961	java	*	PROGLANG	
295-27	50962-50966	code	_	_	
295-28	50967-50976	generator	_	_	
295-29	50976-50977	,	_	_	
295-30	50978-50981	not	_	_	
295-31	50982-50985	the	_	_	
295-32	50986-50990	pure	_	_	
295-33	50991-50995	Java	_	_	
295-34	50996-51000	code	_	_	
295-35	51001-51010	generator	_	_	
295-36	51010-51011	,	_	_	
295-37	51012-51014	as	_	_	
295-38	51015-51027	Scikit-learn	*	SOFTWARE	
295-39	51027-51028	/	_	_	
295-40	51028-51033	Keras	*	SOFTWARE	
295-41	51034-51037	are	_	_	
295-42	51038-51044	Python	*	PROGLANG	
295-43	51045-51054	libraries	_	_	
295-44	51054-51055	.	_	_	

#Text=Similarly, if you have already set @dalib "weka", then you must choose the pure Java code generator here.
296-1	51056-51065	Similarly	_	_	
296-2	51065-51066	,	_	_	
296-3	51067-51069	if	_	_	
296-4	51070-51073	you	_	_	
296-5	51074-51078	have	_	_	
296-6	51079-51086	already	_	_	
296-7	51087-51090	set	_	_	
296-8	51091-51092	@	_	_	
296-9	51092-51097	dalib	_	_	
296-10	51098-51099	"	_	_	
296-11	51099-51103	weka	*	SOFTWARE	
296-12	51103-51104	"	_	_	
296-13	51104-51105	,	_	_	
296-14	51106-51110	then	_	_	
296-15	51111-51114	you	_	_	
296-16	51115-51119	must	_	_	
296-17	51120-51126	choose	_	_	
296-18	51127-51130	the	_	_	
296-19	51131-51135	pure	_	_	
296-20	51136-51140	Java	*	PROGLANG	
296-21	51141-51145	code	_	_	
296-22	51146-51155	generator	_	_	
296-23	51156-51160	here	_	_	
296-24	51160-51161	.	_	_	

#Text=If you are not certain, please do not specify any ML library/framework manually through @dalib.\r
#Text=2.
297-1	51162-51164	If	_	_	
297-2	51165-51168	you	_	_	
297-3	51169-51172	are	_	_	
297-4	51173-51176	not	_	_	
297-5	51177-51184	certain	_	_	
297-6	51184-51185	,	_	_	
297-7	51186-51192	please	_	_	
297-8	51193-51195	do	_	_	
297-9	51196-51199	not	_	_	
297-10	51200-51207	specify	_	_	
297-11	51208-51211	any	_	_	
297-12	51212-51214	ML	_	_	
297-13	51215-51222	library	_	_	
297-14	51222-51223	/	_	_	
297-15	51223-51232	framework	_	_	
297-16	51233-51241	manually	_	_	
297-17	51242-51249	through	_	_	
297-18	51250-51251	@	_	_	
297-19	51251-51256	dalib	_	_	
297-20	51256-51257	.	_	_	
297-21	51259-51260	2	_	_	
297-22	51260-51261	.	_	_	

#Text=As mentioned before, Things are analogues to the "Classes" in the Object-Oriented Programming (OOP) paradigm.
298-1	51262-51264	As	_	_	
298-2	51265-51274	mentioned	_	_	
298-3	51275-51281	before	_	_	
298-4	51281-51282	,	_	_	
298-5	51283-51289	Things	_	_	
298-6	51290-51293	are	_	_	
298-7	51294-51303	analogues	_	_	
298-8	51304-51306	to	_	_	
298-9	51307-51310	the	_	_	
298-10	51311-51312	"	_	_	
298-11	51312-51319	Classes	_	_	
298-12	51319-51320	"	_	_	
298-13	51321-51323	in	_	_	
298-14	51324-51327	the	_	_	
298-15	51328-51343	Object-Oriented	_	_	
298-16	51344-51355	Programming	_	_	
298-17	51356-51357	(	_	_	
298-18	51357-51360	OOP	_	_	
298-19	51360-51361	)	_	_	
298-20	51362-51370	paradigm	_	_	
298-21	51370-51371	.	_	_	

#Text=Similarly, instances are analogues to the "Objects" in the OOP paradigm.
299-1	51372-51381	Similarly	_	_	
299-2	51381-51382	,	_	_	
299-3	51383-51392	instances	_	_	
299-4	51393-51396	are	_	_	
299-5	51397-51406	analogues	_	_	
299-6	51407-51409	to	_	_	
299-7	51410-51413	the	_	_	
299-8	51414-51415	"	_	_	
299-9	51415-51422	Objects	_	_	
299-10	51422-51423	"	_	_	
299-11	51424-51426	in	_	_	
299-12	51427-51430	the	_	_	
299-13	51431-51434	OOP	_	_	
299-14	51435-51443	paradigm	_	_	
299-15	51443-51444	.	_	_	

#Text=Therefore, the concrete instances of the things defined above must be instantiated here.
300-1	51445-51454	Therefore	_	_	
300-2	51454-51455	,	_	_	
300-3	51456-51459	the	_	_	
300-4	51460-51468	concrete	_	_	
300-5	51469-51478	instances	_	_	
300-6	51479-51481	of	_	_	
300-7	51482-51485	the	_	_	
300-8	51486-51492	things	_	_	
300-9	51493-51500	defined	_	_	
300-10	51501-51506	above	_	_	
300-11	51507-51511	must	_	_	
300-12	51512-51514	be	_	_	
300-13	51515-51527	instantiated	_	_	
300-14	51528-51532	here	_	_	
300-15	51532-51533	.	_	_	

#Text=In the shown example above, we see the instances ("objects") pingClient, pingServer and pingPongDataAnalytics that are instaces of the things("classes") PingClient, PingServer and PingPongDataAnalytics, respectively.\r
#Text=3.
301-1	51534-51536	In	_	_	
301-2	51537-51540	the	_	_	
301-3	51541-51546	shown	_	_	
301-4	51547-51554	example	_	_	
301-5	51555-51560	above	_	_	
301-6	51560-51561	,	_	_	
301-7	51562-51564	we	_	_	
301-8	51565-51568	see	_	_	
301-9	51569-51572	the	_	_	
301-10	51573-51582	instances	_	_	
301-11	51583-51584	(	_	_	
301-12	51584-51585	"	_	_	
301-13	51585-51592	objects	_	_	
301-14	51592-51593	"	_	_	
301-15	51593-51594	)	_	_	
301-16	51595-51605	pingClient	_	_	
301-17	51605-51606	,	_	_	
301-18	51607-51617	pingServer	_	_	
301-19	51618-51621	and	_	_	
301-20	51622-51643	pingPongDataAnalytics	_	_	
301-21	51644-51648	that	_	_	
301-22	51649-51652	are	_	_	
301-23	51653-51661	instaces	_	_	
301-24	51662-51664	of	_	_	
301-25	51665-51668	the	_	_	
301-26	51669-51675	things	_	_	
301-27	51675-51676	(	_	_	
301-28	51676-51677	"	_	_	
301-29	51677-51684	classes	_	_	
301-30	51684-51685	"	_	_	
301-31	51685-51686	)	_	_	
301-32	51687-51697	PingClient	_	_	
301-33	51697-51698	,	_	_	
301-34	51699-51709	PingServer	_	_	
301-35	51710-51713	and	_	_	
301-36	51714-51735	PingPongDataAnalytics	_	_	
301-37	51735-51736	,	_	_	
301-38	51737-51749	respectively	_	_	
301-39	51749-51750	.	_	_	
301-40	51752-51753	3	_	_	
301-41	51753-51754	.	_	_	

#Text=The connections between the ports of the defined things must be specified here using the connector keyword as illustrated above.
302-1	51755-51758	The	_	_	
302-2	51759-51770	connections	_	_	
302-3	51771-51778	between	_	_	
302-4	51779-51782	the	_	_	
302-5	51783-51788	ports	_	_	
302-6	51789-51791	of	_	_	
302-7	51792-51795	the	_	_	
302-8	51796-51803	defined	_	_	
302-9	51804-51810	things	_	_	
302-10	51811-51815	must	_	_	
302-11	51816-51818	be	_	_	
302-12	51819-51828	specified	_	_	
302-13	51829-51833	here	_	_	
302-14	51834-51839	using	_	_	
302-15	51840-51843	the	_	_	
302-16	51844-51853	connector	_	_	
302-17	51854-51861	keyword	_	_	
302-18	51862-51864	as	_	_	
302-19	51865-51876	illustrated	_	_	
302-20	51877-51882	above	_	_	
302-21	51882-51883	.	_	_	

#Text=Without this, there will be no communication between the things' instances at the runtime!
303-1	51884-51891	Without	_	_	
303-2	51892-51896	this	_	_	
303-3	51896-51897	,	_	_	
303-4	51898-51903	there	_	_	
303-5	51904-51908	will	_	_	
303-6	51909-51911	be	_	_	
303-7	51912-51914	no	_	_	
303-8	51915-51928	communication	_	_	
303-9	51929-51936	between	_	_	
303-10	51937-51940	the	_	_	
303-11	51941-51947	things	_	_	
303-12	51947-51948	'	_	_	
303-13	51949-51958	instances	_	_	
303-14	51959-51961	at	_	_	
303-15	51962-51965	the	_	_	
303-16	51966-51973	runtime	_	_	
303-17	51973-51974	!	_	_	

#Text=### How to have the ML models re-trained automatically and periodically?
304-1	51978-51979	#	_	_	
304-2	51979-51980	#	_	_	
304-3	51980-51981	#	_	_	
304-4	51982-51985	How	_	_	
304-5	51986-51988	to	_	_	
304-6	51989-51993	have	_	_	
304-7	51994-51997	the	_	_	
304-8	51998-52000	ML	_	_	
304-9	52001-52007	models	_	_	
304-10	52008-52018	re-trained	_	_	
304-11	52019-52032	automatically	_	_	
304-12	52033-52036	and	_	_	
304-13	52037-52049	periodically	_	_	
304-14	52049-52050	?	_	_	

#Text=See, e.g., thing NIALMDataAnalytics in the provided sample model instance [ML2_Demo_NIALM_PIM.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_NIALM_PIM.thingml).
305-1	52052-52055	See	_	_	
305-2	52055-52056	,	_	_	
305-3	52057-52060	e.g	_	_	
305-4	52060-52061	.	_	_	
305-5	52061-52062	,	_	_	
305-6	52063-52068	thing	_	_	
305-7	52069-52087	NIALMDataAnalytics	_	_	
305-8	52088-52090	in	_	_	
305-9	52091-52094	the	_	_	
305-10	52095-52103	provided	_	_	
305-11	52104-52110	sample	_	_	
305-12	52111-52116	model	_	_	
305-13	52117-52125	instance	_	_	
305-14	52126-52127	[	_	_	
305-15	52127-52130	ML2	_	_	
305-16	52130-52131	_	_	_	
305-17	52131-52153	Demo_NIALM_PIM.thingml	_	_	
305-18	52153-52154	]	_	_	
305-19	52154-52155	(	_	_	
305-20	52155-52160	https	_	_	
305-21	52160-52161	:	_	_	
305-22	52161-52162	/	_	_	
305-23	52162-52163	/	_	_	
305-24	52163-52173	github.com	_	_	
305-25	52173-52174	/	_	_	
305-26	52174-52183	arminmoin	_	_	
305-27	52183-52184	/	_	_	
305-28	52184-52194	ML-Quadrat	_	_	
305-29	52194-52195	/	_	_	
305-30	52195-52199	blob	_	_	
305-31	52199-52200	/	_	_	
305-32	52200-52206	master	_	_	
305-33	52206-52207	/	_	_	
305-34	52207-52210	ML2	_	_	
305-35	52210-52211	/	_	_	
305-36	52211-52230	org.thingml.samples	_	_	
305-37	52230-52231	/	_	_	
305-38	52231-52234	src	_	_	
305-39	52234-52235	/	_	_	
305-40	52235-52239	main	_	_	
305-41	52239-52240	/	_	_	
305-42	52240-52247	thingml	_	_	
305-43	52247-52248	/	_	_	
305-44	52248-52251	ML2	_	_	
305-45	52251-52252	_	_	_	
305-46	52252-52274	Demo_NIALM_PIM.thingml	_	_	
305-47	52274-52275	)	_	_	
305-48	52275-52276	.	_	_	

#Text=As we can see in the Ready state of the NIALMDataAnalyticsBehavior statechart, the last_training_timer port is used for this purpose.
306-1	52277-52279	As	_	_	
306-2	52280-52282	we	_	_	
306-3	52283-52286	can	_	_	
306-4	52287-52290	see	_	_	
306-5	52291-52293	in	_	_	
306-6	52294-52297	the	_	_	
306-7	52298-52303	Ready	_	_	
306-8	52304-52309	state	_	_	
306-9	52310-52312	of	_	_	
306-10	52313-52316	the	_	_	
306-11	52317-52343	NIALMDataAnalyticsBehavior	_	_	
306-12	52344-52354	statechart	_	_	
306-13	52354-52355	,	_	_	
306-14	52356-52359	the	_	_	
306-15	52360-52379	last_training_timer	_	_	
306-16	52380-52384	port	_	_	
306-17	52385-52387	is	_	_	
306-18	52388-52392	used	_	_	
306-19	52393-52396	for	_	_	
306-20	52397-52401	this	_	_	
306-21	52402-52409	purpose	_	_	
306-22	52409-52410	.	_	_	

#Text=Note that the time is in milliseconds:\r
#Text=\r
#Text=last_training_timer!
307-1	52411-52415	Note	_	_	
307-2	52416-52420	that	_	_	
307-3	52421-52424	the	_	_	
307-4	52425-52429	time	_	_	
307-5	52430-52432	is	_	_	
307-6	52433-52435	in	_	_	
307-7	52436-52448	milliseconds	_	_	
307-8	52448-52449	:	_	_	
307-9	52453-52472	last_training_timer	_	_	
307-10	52472-52473	!	_	_	

#Text=timer_start(3600000)\r
#Text=\r
#Text=Hence, in this case, every 60 mins the event timer_timeout occurs on the last_training_timer port, leading to the transition of the statechart from the Ready state to the Train state, thus re-training the ML model.
308-1	52473-52484	timer_start	_	_	
308-2	52484-52485	(	_	_	
308-3	52485-52492	3600000	_	_	
308-4	52492-52493	)	_	_	
308-5	52497-52502	Hence	_	_	
308-6	52502-52503	,	_	_	
308-7	52504-52506	in	_	_	
308-8	52507-52511	this	_	_	
308-9	52512-52516	case	_	_	
308-10	52516-52517	,	_	_	
308-11	52518-52523	every	_	_	
308-12	52524-52526	60	_	_	
308-13	52527-52531	mins	_	_	
308-14	52532-52535	the	_	_	
308-15	52536-52541	event	_	_	
308-16	52542-52555	timer_timeout	_	_	
308-17	52556-52562	occurs	_	_	
308-18	52563-52565	on	_	_	
308-19	52566-52569	the	_	_	
308-20	52570-52589	last_training_timer	_	_	
308-21	52590-52594	port	_	_	
308-22	52594-52595	,	_	_	
308-23	52596-52603	leading	_	_	
308-24	52604-52606	to	_	_	
308-25	52607-52610	the	_	_	
308-26	52611-52621	transition	_	_	
308-27	52622-52624	of	_	_	
308-28	52625-52628	the	_	_	
308-29	52629-52639	statechart	_	_	
308-30	52640-52644	from	_	_	
308-31	52645-52648	the	_	_	
308-32	52649-52654	Ready	_	_	
308-33	52655-52660	state	_	_	
308-34	52661-52663	to	_	_	
308-35	52664-52667	the	_	_	
308-36	52668-52673	Train	_	_	
308-37	52674-52679	state	_	_	
308-38	52679-52680	,	_	_	
308-39	52681-52685	thus	_	_	
308-40	52686-52697	re-training	_	_	
308-41	52698-52701	the	_	_	
308-42	52702-52704	ML	_	_	
308-43	52705-52710	model	_	_	
308-44	52710-52711	.	_	_	

#Text=[Back to top](#toc)\r
#Text=\r
#Text=<a name="maven"></a>\r
#Text=## 5.
309-1	52715-52716	[	_	_	
309-2	52716-52720	Back	_	_	
309-3	52721-52723	to	_	_	
309-4	52724-52727	top	_	_	
309-5	52727-52728	]	_	_	
309-6	52728-52729	(	_	_	
309-7	52729-52730	#	_	_	
309-8	52730-52733	toc	_	_	
309-9	52733-52734	)	_	_	
309-10	52738-52739	<	_	_	
309-11	52739-52740	a	_	_	
309-12	52741-52745	name	_	_	
309-13	52745-52746	=	_	_	
309-14	52746-52747	"	_	_	
309-15	52747-52752	maven	_	_	
309-16	52752-52753	"	_	_	
309-17	52753-52754	>	_	_	
309-18	52754-52755	<	_	_	
309-19	52755-52756	/	_	_	
309-20	52756-52757	a	_	_	
309-21	52757-52758	>	_	_	
309-22	52760-52761	#	_	_	
309-23	52761-52762	#	_	_	
309-24	52763-52764	5	_	_	
309-25	52764-52765	.	_	_	

#Text=Maven Artifacts\r
#Text=You can find the Maven artifacts of ML2 at https://oss.sonatype.org (e.g., search for the groupid: io.github.arminmoin).
310-1	52766-52771	Maven	*	SOFTWARE	
310-2	52772-52781	Artifacts	_	_	
310-3	52783-52786	You	_	_	
310-4	52787-52790	can	_	_	
310-5	52791-52795	find	_	_	
310-6	52796-52799	the	_	_	
310-7	52800-52805	Maven	*	SOFTWARE	
310-8	52806-52815	artifacts	_	_	
310-9	52816-52818	of	_	_	
310-10	52819-52822	ML2	*	PROJECT	
310-11	52823-52825	at	_	_	
310-12	52826-52831	https	_	_	
310-13	52831-52832	:	_	_	
310-14	52832-52833	/	_	_	
310-15	52833-52834	/	_	_	
310-16	52834-52850	oss.sonatype.org	_	_	
310-17	52851-52852	(	_	_	
310-18	52852-52855	e.g	_	_	
310-19	52855-52856	.	_	_	
310-20	52856-52857	,	_	_	
310-21	52858-52864	search	_	_	
310-22	52865-52868	for	_	_	
310-23	52869-52872	the	_	_	
310-24	52873-52880	groupid	_	_	
310-25	52880-52881	:	_	_	
310-26	52882-52901	io.github.arminmoin	_	_	
310-27	52901-52902	)	_	_	
310-28	52902-52903	.	_	_	

#Text=You may add the dependencies to your pom.xml file.
311-1	52904-52907	You	_	_	
311-2	52908-52911	may	_	_	
311-3	52912-52915	add	_	_	
311-4	52916-52919	the	_	_	
311-5	52920-52932	dependencies	_	_	
311-6	52933-52935	to	_	_	
311-7	52936-52940	your	_	_	
311-8	52941-52948	pom.xml	_	_	
311-9	52949-52953	file	_	_	
311-10	52953-52954	.	_	_	

#Text=For instance, add the following to your pom.xml:\r
#Text=\r
#Text=```\r
#Text=<dependency>\r
#Text=  <groupId>io.github.arminmoin</groupId>\r
#Text=  <artifactId>mlquadrat</artifactId>\r
#Text=  <version>2.0.0-SNAPSHOT</version>\r
#Text=  <type>pom</type>\r
#Text=</dependency>\r
#Text=```\r
#Text=\r
#Text=[Back to top](#toc)\r
#Text=\r
#Text=<a name="dev-doc"></a>\r
#Text=## 6.
312-1	52955-52958	For	_	_	
312-2	52959-52967	instance	_	_	
312-3	52967-52968	,	_	_	
312-4	52969-52972	add	_	_	
312-5	52973-52976	the	_	_	
312-6	52977-52986	following	_	_	
312-7	52987-52989	to	_	_	
312-8	52990-52994	your	_	_	
312-9	52995-53002	pom.xml	_	_	
312-10	53002-53003	:	_	_	
312-11	53007-53008	`	_	_	
312-12	53008-53009	`	_	_	
312-13	53009-53010	`	_	_	
312-14	53012-53013	<	_	_	
312-15	53013-53023	dependency	_	_	
312-16	53023-53024	>	_	_	
312-17	53028-53029	<	_	_	
312-18	53029-53036	groupId	_	_	
312-19	53036-53037	>	_	_	
312-20	53037-53056	io.github.arminmoin	_	_	
312-21	53056-53057	<	_	_	
312-22	53057-53058	/	_	_	
312-23	53058-53065	groupId	_	_	
312-24	53065-53066	>	_	_	
312-25	53070-53071	<	_	_	
312-26	53071-53081	artifactId	_	_	
312-27	53081-53082	>	_	_	
312-28	53082-53091	mlquadrat	_	_	
312-29	53091-53092	<	_	_	
312-30	53092-53093	/	_	_	
312-31	53093-53103	artifactId	_	_	
312-32	53103-53104	>	_	_	
312-33	53108-53109	<	_	_	
312-34	53109-53116	version	_	_	
312-35	53116-53117	>	_	_	
312-36	53117-53122	2.0.0	_	_	
312-37	53122-53123	-	_	_	
312-38	53123-53131	SNAPSHOT	_	_	
312-39	53131-53132	<	_	_	
312-40	53132-53133	/	_	_	
312-41	53133-53140	version	_	_	
312-42	53140-53141	>	_	_	
312-43	53145-53146	<	_	_	
312-44	53146-53150	type	_	_	
312-45	53150-53151	>	_	_	
312-46	53151-53154	pom	_	_	
312-47	53154-53155	<	_	_	
312-48	53155-53156	/	_	_	
312-49	53156-53160	type	_	_	
312-50	53160-53161	>	_	_	
312-51	53163-53164	<	_	_	
312-52	53164-53165	/	_	_	
312-53	53165-53175	dependency	_	_	
312-54	53175-53176	>	_	_	
312-55	53178-53179	`	_	_	
312-56	53179-53180	`	_	_	
312-57	53180-53181	`	_	_	
312-58	53185-53186	[	_	_	
312-59	53186-53190	Back	_	_	
312-60	53191-53193	to	_	_	
312-61	53194-53197	top	_	_	
312-62	53197-53198	]	_	_	
312-63	53198-53199	(	_	_	
312-64	53199-53200	#	_	_	
312-65	53200-53203	toc	_	_	
312-66	53203-53204	)	_	_	
312-67	53208-53209	<	_	_	
312-68	53209-53210	a	_	_	
312-69	53211-53215	name	_	_	
312-70	53215-53216	=	_	_	
312-71	53216-53217	"	_	_	
312-72	53217-53224	dev-doc	_	_	
312-73	53224-53225	"	_	_	
312-74	53225-53226	>	_	_	
312-75	53226-53227	<	_	_	
312-76	53227-53228	/	_	_	
312-77	53228-53229	a	_	_	
312-78	53229-53230	>	_	_	
312-79	53232-53233	#	_	_	
312-80	53233-53234	#	_	_	
312-81	53235-53236	6	_	_	
312-82	53236-53237	.	_	_	

#Text=Developers' Documentation (for Contributors)\r
#Text=If you are going to contribute to this project, please read the developers' documentation below.
313-1	53238-53248	Developers	_	_	
313-2	53248-53249	'	_	_	
313-3	53250-53263	Documentation	_	_	
313-4	53264-53265	(	_	_	
313-5	53265-53268	for	_	_	
313-6	53269-53281	Contributors	_	_	
313-7	53281-53282	)	_	_	
313-8	53284-53286	If	_	_	
313-9	53287-53290	you	_	_	
313-10	53291-53294	are	_	_	
313-11	53295-53300	going	_	_	
313-12	53301-53303	to	_	_	
313-13	53304-53314	contribute	_	_	
313-14	53315-53317	to	_	_	
313-15	53318-53322	this	_	_	
313-16	53323-53330	project	_	_	
313-17	53330-53331	,	_	_	
313-18	53332-53338	please	_	_	
313-19	53339-53343	read	_	_	
313-20	53344-53347	the	_	_	
313-21	53348-53358	developers	_	_	
313-22	53358-53359	'	_	_	
313-23	53360-53373	documentation	_	_	
313-24	53374-53379	below	_	_	
313-25	53379-53380	.	_	_	

#Text=Basically, there exist 4 main extensio points: (i) The abstract syntax of the modeling langauge, i.e., the [Xtext grammar](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/language/thingml/src/org/thingml/xtext/ThingML.xtext) (which also implicitly means the Ecore meta-model since the latter is generated automatically out of the former as stated before).
314-1	53381-53390	Basically	_	_	
314-2	53390-53391	,	_	_	
314-3	53392-53397	there	_	_	
314-4	53398-53403	exist	_	_	
314-5	53404-53405	4	_	_	
314-6	53406-53410	main	_	_	
314-7	53411-53419	extensio	_	_	
314-8	53420-53426	points	_	_	
314-9	53426-53427	:	_	_	
314-10	53428-53429	(	_	_	
314-11	53429-53430	i	_	_	
314-12	53430-53431	)	_	_	
314-13	53432-53435	The	_	_	
314-14	53436-53444	abstract	_	_	
314-15	53445-53451	syntax	_	_	
314-16	53452-53454	of	_	_	
314-17	53455-53458	the	_	_	
314-18	53459-53467	modeling	_	_	
314-19	53468-53476	langauge	_	_	
314-20	53476-53477	,	_	_	
314-21	53478-53481	i.e	_	_	
314-22	53481-53482	.	_	_	
314-23	53482-53483	,	_	_	
314-24	53484-53487	the	_	_	
314-25	53488-53489	[	_	_	
314-26	53489-53494	Xtext	*	SOFTWARE	
314-27	53495-53502	grammar	_	_	
314-28	53502-53503	]	_	_	
314-29	53503-53504	(	_	_	
314-30	53504-53509	https	_	_	
314-31	53509-53510	:	_	_	
314-32	53510-53511	/	_	_	
314-33	53511-53512	/	_	_	
314-34	53512-53522	github.com	_	_	
314-35	53522-53523	/	_	_	
314-36	53523-53532	arminmoin	_	_	
314-37	53532-53533	/	_	_	
314-38	53533-53543	ML-Quadrat	_	_	
314-39	53543-53544	/	_	_	
314-40	53544-53548	blob	_	_	
314-41	53548-53549	/	_	_	
314-42	53549-53555	master	_	_	
314-43	53555-53556	/	_	_	
314-44	53556-53559	ML2	_	_	
314-45	53559-53560	/	_	_	
314-46	53560-53568	language	_	_	
314-47	53568-53569	/	_	_	
314-48	53569-53576	thingml	_	_	
314-49	53576-53577	/	_	_	
314-50	53577-53580	src	_	_	
314-51	53580-53581	/	_	_	
314-52	53581-53584	org	_	_	
314-53	53584-53585	/	_	_	
314-54	53585-53592	thingml	_	_	
314-55	53592-53593	/	_	_	
314-56	53593-53598	xtext	*	SOFTWARE	
314-57	53598-53599	/	_	_	
314-58	53599-53612	ThingML.xtext	_	_	
314-59	53612-53613	)	_	_	
314-60	53614-53615	(	_	_	
314-61	53615-53620	which	_	_	
314-62	53621-53625	also	_	_	
314-63	53626-53636	implicitly	_	_	
314-64	53637-53642	means	_	_	
314-65	53643-53646	the	_	_	
314-66	53647-53652	Ecore	_	_	
314-67	53653-53663	meta-model	_	_	
314-68	53664-53669	since	_	_	
314-69	53670-53673	the	_	_	
314-70	53674-53680	latter	_	_	
314-71	53681-53683	is	_	_	
314-72	53684-53693	generated	_	_	
314-73	53694-53707	automatically	_	_	
314-74	53708-53711	out	_	_	
314-75	53712-53714	of	_	_	
314-76	53715-53718	the	_	_	
314-77	53719-53725	former	_	_	
314-78	53726-53728	as	_	_	
314-79	53729-53735	stated	_	_	
314-80	53736-53742	before	_	_	
314-81	53742-53743	)	_	_	
314-82	53743-53744	.	_	_	

#Text=(ii) The concrete syntax of the modeling language, e.g., the textual model editor.
315-1	53745-53746	(	_	_	
315-2	53746-53748	ii	_	_	
315-3	53748-53749	)	_	_	
315-4	53750-53753	The	_	_	
315-5	53754-53762	concrete	_	_	
315-6	53763-53769	syntax	_	_	
315-7	53770-53772	of	_	_	
315-8	53773-53776	the	_	_	
315-9	53777-53785	modeling	_	_	
315-10	53786-53794	language	_	_	
315-11	53794-53795	,	_	_	
315-12	53796-53799	e.g	_	_	
315-13	53799-53800	.	_	_	
315-14	53800-53801	,	_	_	
315-15	53802-53805	the	_	_	
315-16	53806-53813	textual	_	_	
315-17	53814-53819	model	_	_	
315-18	53820-53826	editor	_	_	
315-19	53826-53827	.	_	_	

#Text=(iii) The semantics realized through the Xtext framework, e.g., in the Java/Xtend classes at [ML2/language/thingml/src/org/thingml](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/language/thingml/src/org/thingml).
316-1	53828-53829	(	_	_	
316-2	53829-53832	iii	_	_	
316-3	53832-53833	)	_	_	
316-4	53834-53837	The	_	_	
316-5	53838-53847	semantics	_	_	
316-6	53848-53856	realized	_	_	
316-7	53857-53864	through	_	_	
316-8	53865-53868	the	_	_	
316-9	53869-53874	Xtext	*	SOFTWARE	
316-10	53875-53884	framework	_	_	
316-11	53884-53885	,	_	_	
316-12	53886-53889	e.g	_	_	
316-13	53889-53890	.	_	_	
316-14	53890-53891	,	_	_	
316-15	53892-53894	in	_	_	
316-16	53895-53898	the	_	_	
316-17	53899-53903	Java	*	PROGLANG	
316-18	53903-53904	/	_	_	
316-19	53904-53909	Xtend	*	PROGLANG	
316-20	53910-53917	classes	_	_	
316-21	53918-53920	at	_	_	
316-22	53921-53922	[	_	_	
316-23	53922-53925	ML2	_	_	
316-24	53925-53926	/	_	_	
316-25	53926-53934	language	_	_	
316-26	53934-53935	/	_	_	
316-27	53935-53942	thingml	_	_	
316-28	53942-53943	/	_	_	
316-29	53943-53946	src	_	_	
316-30	53946-53947	/	_	_	
316-31	53947-53950	org	_	_	
316-32	53950-53951	/	_	_	
316-33	53951-53958	thingml	_	_	
316-34	53958-53959	]	_	_	
316-35	53959-53960	(	_	_	
316-36	53960-53965	https	_	_	
316-37	53965-53966	:	_	_	
316-38	53966-53967	/	_	_	
316-39	53967-53968	/	_	_	
316-40	53968-53978	github.com	_	_	
316-41	53978-53979	/	_	_	
316-42	53979-53988	arminmoin	_	_	
316-43	53988-53989	/	_	_	
316-44	53989-53999	ML-Quadrat	_	_	
316-45	53999-54000	/	_	_	
316-46	54000-54004	tree	_	_	
316-47	54004-54005	/	_	_	
316-48	54005-54011	master	_	_	
316-49	54011-54012	/	_	_	
316-50	54012-54015	ML2	_	_	
316-51	54015-54016	/	_	_	
316-52	54016-54024	language	_	_	
316-53	54024-54025	/	_	_	
316-54	54025-54032	thingml	_	_	
316-55	54032-54033	/	_	_	
316-56	54033-54036	src	_	_	
316-57	54036-54037	/	_	_	
316-58	54037-54040	org	_	_	
316-59	54040-54041	/	_	_	
316-60	54041-54048	thingml	_	_	
316-61	54048-54049	)	_	_	
316-62	54049-54050	.	_	_	

#Text=(iv) The semantics implemented in the model-to-code transformations (code generators/"compilers") at [ML2/compilers](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/compilers).
317-1	54051-54052	(	_	_	
317-2	54052-54054	iv	_	_	
317-3	54054-54055	)	_	_	
317-4	54056-54059	The	_	_	
317-5	54060-54069	semantics	_	_	
317-6	54070-54081	implemented	_	_	
317-7	54082-54084	in	_	_	
317-8	54085-54088	the	_	_	
317-9	54089-54102	model-to-code	_	_	
317-10	54103-54118	transformations	_	_	
317-11	54119-54120	(	_	_	
317-12	54120-54124	code	_	_	
317-13	54125-54135	generators	_	_	
317-14	54135-54136	/	_	_	
317-15	54136-54137	"	_	_	
317-16	54137-54146	compilers	_	_	
317-17	54146-54147	"	_	_	
317-18	54147-54148	)	_	_	
317-19	54149-54151	at	_	_	
317-20	54152-54153	[	_	_	
317-21	54153-54156	ML2	_	_	
317-22	54156-54157	/	_	_	
317-23	54157-54166	compilers	_	_	
317-24	54166-54167	]	_	_	
317-25	54167-54168	(	_	_	
317-26	54168-54173	https	_	_	
317-27	54173-54174	:	_	_	
317-28	54174-54175	/	_	_	
317-29	54175-54176	/	_	_	
317-30	54176-54186	github.com	_	_	
317-31	54186-54187	/	_	_	
317-32	54187-54196	arminmoin	_	_	
317-33	54196-54197	/	_	_	
317-34	54197-54207	ML-Quadrat	_	_	
317-35	54207-54208	/	_	_	
317-36	54208-54212	tree	_	_	
317-37	54212-54213	/	_	_	
317-38	54213-54219	master	_	_	
317-39	54219-54220	/	_	_	
317-40	54220-54223	ML2	_	_	
317-41	54223-54224	/	_	_	
317-42	54224-54233	compilers	_	_	
317-43	54233-54234	)	_	_	
317-44	54234-54235	.	_	_	

#Text=Below, we briefly explain each of them.\r
#Text=\r
#Text=### Contributing to the Grammar/Meta-model of the DSML\r
#Text=\r
#Text=The Xtext grammar is the core of the DSML of ML2.
318-1	54236-54241	Below	_	_	
318-2	54241-54242	,	_	_	
318-3	54243-54245	we	_	_	
318-4	54246-54253	briefly	_	_	
318-5	54254-54261	explain	_	_	
318-6	54262-54266	each	_	_	
318-7	54267-54269	of	_	_	
318-8	54270-54274	them	_	_	
318-9	54274-54275	.	_	_	
318-10	54279-54280	#	_	_	
318-11	54280-54281	#	_	_	
318-12	54281-54282	#	_	_	
318-13	54283-54295	Contributing	_	_	
318-14	54296-54298	to	_	_	
318-15	54299-54302	the	_	_	
318-16	54303-54310	Grammar	_	_	
318-17	54310-54311	/	_	_	
318-18	54311-54321	Meta-model	_	_	
318-19	54322-54324	of	_	_	
318-20	54325-54328	the	_	_	
318-21	54329-54333	DSML	_	_	
318-22	54337-54340	The	_	_	
318-23	54341-54346	Xtext	*	SOFTWARE	
318-24	54347-54354	grammar	_	_	
318-25	54355-54357	is	_	_	
318-26	54358-54361	the	_	_	
318-27	54362-54366	core	_	_	
318-28	54367-54369	of	_	_	
318-29	54370-54373	the	_	_	
318-30	54374-54378	DSML	_	_	
318-31	54379-54381	of	_	_	
318-32	54382-54385	ML2	*	PROJECT	
318-33	54385-54386	.	_	_	

#Text=If you are not already familiar with the Xtext framework for DSML/DSL/programming language creation, please read the documentation here: https://www.eclipse.org/Xtext/documentation/index.html\r
#Text=\r
#Text=**Note:** In some cases, the enforced scoping rules might prevent you from making the desired modifications working.
319-1	54387-54389	If	_	_	
319-2	54390-54393	you	_	_	
319-3	54394-54397	are	_	_	
319-4	54398-54401	not	_	_	
319-5	54402-54409	already	_	_	
319-6	54410-54418	familiar	_	_	
319-7	54419-54423	with	_	_	
319-8	54424-54427	the	_	_	
319-9	54428-54433	Xtext	*	SOFTWARE	
319-10	54434-54443	framework	_	_	
319-11	54444-54447	for	_	_	
319-12	54448-54452	DSML	_	_	
319-13	54452-54453	/	_	_	
319-14	54453-54456	DSL	_	_	
319-15	54456-54457	/	_	_	
319-16	54457-54468	programming	_	_	
319-17	54469-54477	language	_	_	
319-18	54478-54486	creation	_	_	
319-19	54486-54487	,	_	_	
319-20	54488-54494	please	_	_	
319-21	54495-54499	read	_	_	
319-22	54500-54503	the	_	_	
319-23	54504-54517	documentation	_	_	
319-24	54518-54522	here	_	_	
319-25	54522-54523	:	_	_	
319-26	54524-54529	https	_	_	
319-27	54529-54530	:	_	_	
319-28	54530-54531	/	_	_	
319-29	54531-54532	/	_	_	
319-30	54532-54547	www.eclipse.org	_	_	
319-31	54547-54548	/	_	_	
319-32	54548-54553	Xtext	*	SOFTWARE	
319-33	54553-54554	/	_	_	
319-34	54554-54567	documentation	_	_	
319-35	54567-54568	/	_	_	
319-36	54568-54578	index.html	_	_	
319-37	54582-54583	*	_	_	
319-38	54583-54584	*	_	_	
319-39	54584-54588	Note	_	_	
319-40	54588-54589	:	_	_	
319-41	54589-54590	*	_	_	
319-42	54590-54591	*	_	_	
319-43	54592-54594	In	_	_	
319-44	54595-54599	some	_	_	
319-45	54600-54605	cases	_	_	
319-46	54605-54606	,	_	_	
319-47	54607-54610	the	_	_	
319-48	54611-54619	enforced	_	_	
319-49	54620-54627	scoping	_	_	
319-50	54628-54633	rules	_	_	
319-51	54634-54639	might	_	_	
319-52	54640-54647	prevent	_	_	
319-53	54648-54651	you	_	_	
319-54	54652-54656	from	_	_	
319-55	54657-54663	making	_	_	
319-56	54664-54667	the	_	_	
319-57	54668-54675	desired	_	_	
319-58	54676-54689	modifications	_	_	
319-59	54690-54697	working	_	_	
319-60	54697-54698	.	_	_	

#Text=For instance, you might want to allow the practitioner to use a certain concept, such as the message parameters in a (sub)section of the model instances that was not possible so far.
320-1	54699-54702	For	_	_	
320-2	54703-54711	instance	_	_	
320-3	54711-54712	,	_	_	
320-4	54713-54716	you	_	_	
320-5	54717-54722	might	_	_	
320-6	54723-54727	want	_	_	
320-7	54728-54730	to	_	_	
320-8	54731-54736	allow	_	_	
320-9	54737-54740	the	_	_	
320-10	54741-54753	practitioner	_	_	
320-11	54754-54756	to	_	_	
320-12	54757-54760	use	_	_	
320-13	54761-54762	a	_	_	
320-14	54763-54770	certain	_	_	
320-15	54771-54778	concept	_	_	
320-16	54778-54779	,	_	_	
320-17	54780-54784	such	_	_	
320-18	54785-54787	as	_	_	
320-19	54788-54791	the	_	_	
320-20	54792-54799	message	_	_	
320-21	54800-54810	parameters	_	_	
320-22	54811-54813	in	_	_	
320-23	54814-54815	a	_	_	
320-24	54816-54817	(	_	_	
320-25	54817-54820	sub	_	_	
320-26	54820-54821	)	_	_	
320-27	54821-54828	section	_	_	
320-28	54829-54831	of	_	_	
320-29	54832-54835	the	_	_	
320-30	54836-54841	model	_	_	
320-31	54842-54851	instances	_	_	
320-32	54852-54856	that	_	_	
320-33	54857-54860	was	_	_	
320-34	54861-54864	not	_	_	
320-35	54865-54873	possible	_	_	
320-36	54874-54876	so	_	_	
320-37	54877-54880	far	_	_	
320-38	54880-54881	.	_	_	

#Text=If that is the case, you might find the [ThingMLScopeProvider Xtend class](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/language/thingml/src/org/thingml/xtext/scoping/ThingMLScopeProvider.xtend) helpful.
321-1	54882-54884	If	_	_	
321-2	54885-54889	that	_	_	
321-3	54890-54892	is	_	_	
321-4	54893-54896	the	_	_	
321-5	54897-54901	case	_	_	
321-6	54901-54902	,	_	_	
321-7	54903-54906	you	_	_	
321-8	54907-54912	might	_	_	
321-9	54913-54917	find	_	_	
321-10	54918-54921	the	_	_	
321-11	54922-54923	[	_	_	
321-12	54923-54943	ThingMLScopeProvider	_	_	
321-13	54944-54949	Xtend	_	_	
321-14	54950-54955	class	_	_	
321-15	54955-54956	]	_	_	
321-16	54956-54957	(	_	_	
321-17	54957-54962	https	_	_	
321-18	54962-54963	:	_	_	
321-19	54963-54964	/	_	_	
321-20	54964-54965	/	_	_	
321-21	54965-54975	github.com	_	_	
321-22	54975-54976	/	_	_	
321-23	54976-54985	arminmoin	_	_	
321-24	54985-54986	/	_	_	
321-25	54986-54996	ML-Quadrat	_	_	
321-26	54996-54997	/	_	_	
321-27	54997-55001	blob	_	_	
321-28	55001-55002	/	_	_	
321-29	55002-55008	master	_	_	
321-30	55008-55009	/	_	_	
321-31	55009-55012	ML2	_	_	
321-32	55012-55013	/	_	_	
321-33	55013-55021	language	_	_	
321-34	55021-55022	/	_	_	
321-35	55022-55029	thingml	_	_	
321-36	55029-55030	/	_	_	
321-37	55030-55033	src	_	_	
321-38	55033-55034	/	_	_	
321-39	55034-55037	org	_	_	
321-40	55037-55038	/	_	_	
321-41	55038-55045	thingml	_	_	
321-42	55045-55046	/	_	_	
321-43	55046-55051	xtext	_	_	
321-44	55051-55052	/	_	_	
321-45	55052-55059	scoping	_	_	
321-46	55059-55060	/	_	_	
321-47	55060-55086	ThingMLScopeProvider.xtend	_	_	
321-48	55086-55087	)	_	_	
321-49	55088-55095	helpful	_	_	
321-50	55095-55096	.	_	_	

#Text=After any modifications, please build the entire project again using Maven in the terminal as follows:\r
#Text=\r
#Text=```bash\r
#Text=cd ML-Quadrat\r
#Text=mvn clean install -X\r
#Text=cd ML2/language\r
#Text=mvn clean install -X\r
#Text=```\r
#Text=The -X option is optional and enables the debugging mode, thus resulting in a more detailed output.
322-1	55100-55105	After	_	_	
322-2	55106-55109	any	_	_	
322-3	55110-55123	modifications	_	_	
322-4	55123-55124	,	_	_	
322-5	55125-55131	please	_	_	
322-6	55132-55137	build	_	_	
322-7	55138-55141	the	_	_	
322-8	55142-55148	entire	_	_	
322-9	55149-55156	project	_	_	
322-10	55157-55162	again	_	_	
322-11	55163-55168	using	_	_	
322-12	55169-55174	Maven	*	SOFTWARE	
322-13	55175-55177	in	_	_	
322-14	55178-55181	the	_	_	
322-15	55182-55190	terminal	_	_	
322-16	55191-55193	as	_	_	
322-17	55194-55201	follows	_	_	
322-18	55201-55202	:	_	_	
322-19	55206-55207	`	_	_	
322-20	55207-55208	`	_	_	
322-21	55208-55209	`	_	_	
322-22	55209-55213	bash	*	PROGLANG	
322-23	55215-55217	cd	_	_	
322-24	55218-55228	ML-Quadrat	*	PROJECT	
322-25	55230-55233	mvn	_	_	
322-26	55234-55239	clean	_	_	
322-27	55240-55247	install	_	_	
322-28	55248-55249	-	_	_	
322-29	55249-55250	X	_	_	
322-30	55252-55254	cd	_	_	
322-31	55255-55258	ML2	_	_	
322-32	55258-55259	/	_	_	
322-33	55259-55267	language	_	_	
322-34	55269-55272	mvn	_	_	
322-35	55273-55278	clean	_	_	
322-36	55279-55286	install	_	_	
322-37	55287-55288	-	_	_	
322-38	55288-55289	X	_	_	
322-39	55291-55292	`	_	_	
322-40	55292-55293	`	_	_	
322-41	55293-55294	`	_	_	
322-42	55296-55299	The	_	_	
322-43	55300-55301	-	_	_	
322-44	55301-55302	X	_	_	
322-45	55303-55309	option	_	_	
322-46	55310-55312	is	_	_	
322-47	55313-55321	optional	_	_	
322-48	55322-55325	and	_	_	
322-49	55326-55333	enables	_	_	
322-50	55334-55337	the	_	_	
322-51	55338-55347	debugging	_	_	
322-52	55348-55352	mode	_	_	
322-53	55352-55353	,	_	_	
322-54	55354-55358	thus	_	_	
322-55	55359-55368	resulting	_	_	
322-56	55369-55371	in	_	_	
322-57	55372-55373	a	_	_	
322-58	55374-55378	more	_	_	
322-59	55379-55387	detailed	_	_	
322-60	55388-55394	output	_	_	
322-61	55394-55395	.	_	_	

#Text=Now, we see that the Ecore meta-model is also automatically generated and resides in thingml -> model -> generated.
323-1	55399-55402	Now	_	_	
323-2	55402-55403	,	_	_	
323-3	55404-55406	we	_	_	
323-4	55407-55410	see	_	_	
323-5	55411-55415	that	_	_	
323-6	55416-55419	the	_	_	
323-7	55420-55425	Ecore	_	_	
323-8	55426-55436	meta-model	_	_	
323-9	55437-55439	is	_	_	
323-10	55440-55444	also	_	_	
323-11	55445-55458	automatically	_	_	
323-12	55459-55468	generated	_	_	
323-13	55469-55472	and	_	_	
323-14	55473-55480	resides	_	_	
323-15	55481-55483	in	_	_	
323-16	55484-55491	thingml	_	_	
323-17	55492-55493	-	_	_	
323-18	55493-55494	>	_	_	
323-19	55495-55500	model	_	_	
323-20	55501-55502	-	_	_	
323-21	55502-55503	>	_	_	
323-22	55504-55513	generated	_	_	
323-23	55513-55514	.	_	_	

#Text=Moreover, you need to re-generate the graphical EMF tree-based model editor in the Eclipse IDE by following these steps:\r
#Text=\r
#Text=1.
324-1	55518-55526	Moreover	_	_	
324-2	55526-55527	,	_	_	
324-3	55528-55531	you	_	_	
324-4	55532-55536	need	_	_	
324-5	55537-55539	to	_	_	
324-6	55540-55551	re-generate	_	_	
324-7	55552-55555	the	_	_	
324-8	55556-55565	graphical	_	_	
324-9	55566-55569	EMF	_	_	
324-10	55570-55580	tree-based	_	_	
324-11	55581-55586	model	_	_	
324-12	55587-55593	editor	_	_	
324-13	55594-55596	in	_	_	
324-14	55597-55600	the	_	_	
324-15	55601-55608	Eclipse	*[31]	SOFTWARE[31]	
324-16	55609-55612	IDE	*[31]	SOFTWARE[31]	
324-17	55613-55615	by	_	_	
324-18	55616-55625	following	_	_	
324-19	55626-55631	these	_	_	
324-20	55632-55637	steps	_	_	
324-21	55637-55638	:	_	_	
324-22	55642-55643	1	_	_	
324-23	55643-55644	.	_	_	

#Text=Open ThingML.genmodel that resides in the project called "thingml" in the workspace at model -> generated. \r
#Text=2.
325-1	55645-55649	Open	_	_	
325-2	55650-55666	ThingML.genmodel	_	_	
325-2.1	55650-55657	ThingML	*	PROJECT	
325-3	55667-55671	that	_	_	
325-4	55672-55679	resides	_	_	
325-5	55680-55682	in	_	_	
325-6	55683-55686	the	_	_	
325-7	55687-55694	project	_	_	
325-8	55695-55701	called	_	_	
325-9	55702-55703	"	_	_	
325-10	55703-55710	thingml	_	_	
325-11	55710-55711	"	_	_	
325-12	55712-55714	in	_	_	
325-13	55715-55718	the	_	_	
325-14	55719-55728	workspace	_	_	
325-15	55729-55731	at	_	_	
325-16	55732-55737	model	_	_	
325-17	55738-55739	-	_	_	
325-18	55739-55740	>	_	_	
325-19	55741-55750	generated	_	_	
325-20	55750-55751	.	_	_	
325-21	55754-55755	2	_	_	
325-22	55755-55756	.	_	_	

#Text=Right-click on ThingML and select the options **Generate Model Code**, **Generate Edit Code** and **Generate Editor Code** one after another.
326-1	55757-55768	Right-click	_	_	
326-2	55769-55771	on	_	_	
326-3	55772-55779	ThingML	*	PROJECT	
326-4	55780-55783	and	_	_	
326-5	55784-55790	select	_	_	
326-6	55791-55794	the	_	_	
326-7	55795-55802	options	_	_	
326-8	55803-55804	*	_	_	
326-9	55804-55805	*	_	_	
326-10	55805-55813	Generate	_	_	
326-11	55814-55819	Model	_	_	
326-12	55820-55824	Code	_	_	
326-13	55824-55825	*	_	_	
326-14	55825-55826	*	_	_	
326-15	55826-55827	,	_	_	
326-16	55828-55829	*	_	_	
326-17	55829-55830	*	_	_	
326-18	55830-55838	Generate	_	_	
326-19	55839-55843	Edit	_	_	
326-20	55844-55848	Code	_	_	
326-21	55848-55849	*	_	_	
326-22	55849-55850	*	_	_	
326-23	55851-55854	and	_	_	
326-24	55855-55856	*	_	_	
326-25	55856-55857	*	_	_	
326-26	55857-55865	Generate	_	_	
326-27	55866-55872	Editor	_	_	
326-28	55873-55877	Code	_	_	
326-29	55877-55878	*	_	_	
326-30	55878-55879	*	_	_	
326-31	55880-55883	one	_	_	
326-32	55884-55889	after	_	_	
326-33	55890-55897	another	_	_	
326-34	55897-55898	.	_	_	

#Text=Last but not least, as mentioned before, you must run the [GenerateThingML.mwe2](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/language/thingml/src/org/thingml/xtext/GenerateThingML.mwe2) workflow, which resides in the thingml project in the workspace (under src -> org.thingml.xtext) from within the Eclipse IDE by right-clicking on it and choosing Run as -> MWE2 Workflow from the context menu.
327-1	55902-55906	Last	_	_	
327-2	55907-55910	but	_	_	
327-3	55911-55914	not	_	_	
327-4	55915-55920	least	_	_	
327-5	55920-55921	,	_	_	
327-6	55922-55924	as	_	_	
327-7	55925-55934	mentioned	_	_	
327-8	55935-55941	before	_	_	
327-9	55941-55942	,	_	_	
327-10	55943-55946	you	_	_	
327-11	55947-55951	must	_	_	
327-12	55952-55955	run	_	_	
327-13	55956-55959	the	_	_	
327-14	55960-55961	[	_	_	
327-15	55961-55981	GenerateThingML.mwe2	_	_	
327-16	55981-55982	]	_	_	
327-17	55982-55983	(	_	_	
327-18	55983-55988	https	_	_	
327-19	55988-55989	:	_	_	
327-20	55989-55990	/	_	_	
327-21	55990-55991	/	_	_	
327-22	55991-56001	github.com	_	_	
327-23	56001-56002	/	_	_	
327-24	56002-56011	arminmoin	_	_	
327-25	56011-56012	/	_	_	
327-26	56012-56022	ML-Quadrat	_	_	
327-27	56022-56023	/	_	_	
327-28	56023-56027	blob	_	_	
327-29	56027-56028	/	_	_	
327-30	56028-56034	master	_	_	
327-31	56034-56035	/	_	_	
327-32	56035-56038	ML2	_	_	
327-33	56038-56039	/	_	_	
327-34	56039-56047	language	_	_	
327-35	56047-56048	/	_	_	
327-36	56048-56055	thingml	_	_	
327-37	56055-56056	/	_	_	
327-38	56056-56059	src	_	_	
327-39	56059-56060	/	_	_	
327-40	56060-56063	org	_	_	
327-41	56063-56064	/	_	_	
327-42	56064-56071	thingml	_	_	
327-43	56071-56072	/	_	_	
327-44	56072-56077	xtext	_	_	
327-45	56077-56078	/	_	_	
327-46	56078-56098	GenerateThingML.mwe2	_	_	
327-47	56098-56099	)	_	_	
327-48	56100-56108	workflow	_	_	
327-49	56108-56109	,	_	_	
327-50	56110-56115	which	_	_	
327-51	56116-56123	resides	_	_	
327-52	56124-56126	in	_	_	
327-53	56127-56130	the	_	_	
327-54	56131-56138	thingml	_	_	
327-55	56139-56146	project	_	_	
327-56	56147-56149	in	_	_	
327-57	56150-56153	the	_	_	
327-58	56154-56163	workspace	_	_	
327-59	56164-56165	(	_	_	
327-60	56165-56170	under	_	_	
327-61	56171-56174	src	_	_	
327-62	56175-56176	-	_	_	
327-63	56176-56177	>	_	_	
327-64	56178-56195	org.thingml.xtext	_	_	
327-65	56195-56196	)	_	_	
327-66	56197-56201	from	_	_	
327-67	56202-56208	within	_	_	
327-68	56209-56212	the	_	_	
327-69	56213-56220	Eclipse	*[32]	SOFTWARE[32]	
327-70	56221-56224	IDE	*[32]	SOFTWARE[32]	
327-71	56225-56227	by	_	_	
327-72	56228-56242	right-clicking	_	_	
327-73	56243-56245	on	_	_	
327-74	56246-56248	it	_	_	
327-75	56249-56252	and	_	_	
327-76	56253-56261	choosing	_	_	
327-77	56262-56265	Run	_	_	
327-78	56266-56268	as	_	_	
327-79	56269-56270	-	_	_	
327-80	56270-56271	>	_	_	
327-81	56272-56276	MWE2	_	_	
327-82	56277-56285	Workflow	_	_	
327-83	56286-56290	from	_	_	
327-84	56291-56294	the	_	_	
327-85	56295-56302	context	_	_	
327-86	56303-56307	menu	_	_	
327-87	56307-56308	.	_	_	

#Text=This shall deploy the [Xtext ANTLR plugin](https://download.itemis.de/updates/releases/2.1.1/) that we installed before.
328-1	56309-56313	This	_	_	
328-2	56314-56319	shall	_	_	
328-3	56320-56326	deploy	_	_	
328-4	56327-56330	the	_	_	
328-5	56331-56332	[	_	_	
328-6	56332-56337	Xtext	*[33]	SOFTWARE[33]	
328-7	56338-56343	ANTLR	*[33]	SOFTWARE[33]	
328-8	56344-56350	plugin	_	_	
328-9	56350-56351	]	_	_	
328-10	56351-56352	(	_	_	
328-11	56352-56357	https	_	_	
328-12	56357-56358	:	_	_	
328-13	56358-56359	/	_	_	
328-14	56359-56360	/	_	_	
328-15	56360-56378	download.itemis.de	_	_	
328-16	56378-56379	/	_	_	
328-17	56379-56386	updates	_	_	
328-18	56386-56387	/	_	_	
328-19	56387-56395	releases	_	_	
328-20	56395-56396	/	_	_	
328-21	56396-56401	2.1.1	_	_	
328-22	56401-56402	/	_	_	
328-23	56402-56403	)	_	_	
328-24	56404-56408	that	_	_	
328-25	56409-56411	we	_	_	
328-26	56412-56421	installed	_	_	
328-27	56422-56428	before	_	_	
328-28	56428-56429	.	_	_	

#Text=This way, the customized textual model editor will also work properly.\r
#Text=\r
#Text=### Contributing to the Concrete Syntax of the DSML\r
#Text=If you want to introduce new keywords and let the features of the textual model editor, such as syntax highlighting work for them, please add the keywords to the [ThingMLAntlrTokenToAttributeIdMapper Java class](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/language/thingml.ui/src/org/thingml/xtext/ui/ThingMLAntlrTokenToAttributeIdMapper.java).\r
#Text=\r
#Text=### Contributing to the Semantics of the DSML at the Modeling Layer\r
#Text=If you want to adapt or extend the model checking constraints, validation rules, etc., please check out the Java/Xtend classes here: [ML2/language/thingml/src/org/thingml](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/language/thingml/src/org/thingml).\r
#Text=\r
#Text=### Contributing to the Semantics of the DSML at the Model-to-Code Transformations Layer\r
#Text=Please check out the existing model-to-code transformations (code generators/"compilers") at [ML2/compilers](https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/compilers).
329-1	56430-56434	This	_	_	
329-2	56435-56438	way	_	_	
329-3	56438-56439	,	_	_	
329-4	56440-56443	the	_	_	
329-5	56444-56454	customized	_	_	
329-6	56455-56462	textual	_	_	
329-7	56463-56468	model	_	_	
329-8	56469-56475	editor	_	_	
329-9	56476-56480	will	_	_	
329-10	56481-56485	also	_	_	
329-11	56486-56490	work	_	_	
329-12	56491-56499	properly	_	_	
329-13	56499-56500	.	_	_	
329-14	56504-56505	#	_	_	
329-15	56505-56506	#	_	_	
329-16	56506-56507	#	_	_	
329-17	56508-56520	Contributing	_	_	
329-18	56521-56523	to	_	_	
329-19	56524-56527	the	_	_	
329-20	56528-56536	Concrete	_	_	
329-21	56537-56543	Syntax	_	_	
329-22	56544-56546	of	_	_	
329-23	56547-56550	the	_	_	
329-24	56551-56555	DSML	_	_	
329-25	56557-56559	If	_	_	
329-26	56560-56563	you	_	_	
329-27	56564-56568	want	_	_	
329-28	56569-56571	to	_	_	
329-29	56572-56581	introduce	_	_	
329-30	56582-56585	new	_	_	
329-31	56586-56594	keywords	_	_	
329-32	56595-56598	and	_	_	
329-33	56599-56602	let	_	_	
329-34	56603-56606	the	_	_	
329-35	56607-56615	features	_	_	
329-36	56616-56618	of	_	_	
329-37	56619-56622	the	_	_	
329-38	56623-56630	textual	_	_	
329-39	56631-56636	model	_	_	
329-40	56637-56643	editor	_	_	
329-41	56643-56644	,	_	_	
329-42	56645-56649	such	_	_	
329-43	56650-56652	as	_	_	
329-44	56653-56659	syntax	_	_	
329-45	56660-56672	highlighting	_	_	
329-46	56673-56677	work	_	_	
329-47	56678-56681	for	_	_	
329-48	56682-56686	them	_	_	
329-49	56686-56687	,	_	_	
329-50	56688-56694	please	_	_	
329-51	56695-56698	add	_	_	
329-52	56699-56702	the	_	_	
329-53	56703-56711	keywords	_	_	
329-54	56712-56714	to	_	_	
329-55	56715-56718	the	_	_	
329-56	56719-56720	[	_	_	
329-57	56720-56756	ThingMLAntlrTokenToAttributeIdMapper	_	_	
329-58	56757-56761	Java	*	PROGLANG	
329-59	56762-56767	class	_	_	
329-60	56767-56768	]	_	_	
329-61	56768-56769	(	_	_	
329-62	56769-56774	https	_	_	
329-63	56774-56775	:	_	_	
329-64	56775-56776	/	_	_	
329-65	56776-56777	/	_	_	
329-66	56777-56787	github.com	_	_	
329-67	56787-56788	/	_	_	
329-68	56788-56797	arminmoin	_	_	
329-69	56797-56798	/	_	_	
329-70	56798-56808	ML-Quadrat	_	_	
329-71	56808-56809	/	_	_	
329-72	56809-56813	blob	_	_	
329-73	56813-56814	/	_	_	
329-74	56814-56820	master	_	_	
329-75	56820-56821	/	_	_	
329-76	56821-56824	ML2	_	_	
329-77	56824-56825	/	_	_	
329-78	56825-56833	language	_	_	
329-79	56833-56834	/	_	_	
329-80	56834-56844	thingml.ui	_	_	
329-81	56844-56845	/	_	_	
329-82	56845-56848	src	_	_	
329-83	56848-56849	/	_	_	
329-84	56849-56852	org	_	_	
329-85	56852-56853	/	_	_	
329-86	56853-56860	thingml	_	_	
329-87	56860-56861	/	_	_	
329-88	56861-56866	xtext	_	_	
329-89	56866-56867	/	_	_	
329-90	56867-56869	ui	_	_	
329-91	56869-56870	/	_	_	
329-92	56870-56911	ThingMLAntlrTokenToAttributeIdMapper.java	_	_	
329-93	56911-56912	)	_	_	
329-94	56912-56913	.	_	_	
329-95	56917-56918	#	_	_	
329-96	56918-56919	#	_	_	
329-97	56919-56920	#	_	_	
329-98	56921-56933	Contributing	_	_	
329-99	56934-56936	to	_	_	
329-100	56937-56940	the	_	_	
329-101	56941-56950	Semantics	_	_	
329-102	56951-56953	of	_	_	
329-103	56954-56957	the	_	_	
329-104	56958-56962	DSML	_	_	
329-105	56963-56965	at	_	_	
329-106	56966-56969	the	_	_	
329-107	56970-56978	Modeling	_	_	
329-108	56979-56984	Layer	_	_	
329-109	56986-56988	If	_	_	
329-110	56989-56992	you	_	_	
329-111	56993-56997	want	_	_	
329-112	56998-57000	to	_	_	
329-113	57001-57006	adapt	_	_	
329-114	57007-57009	or	_	_	
329-115	57010-57016	extend	_	_	
329-116	57017-57020	the	_	_	
329-117	57021-57026	model	_	_	
329-118	57027-57035	checking	_	_	
329-119	57036-57047	constraints	_	_	
329-120	57047-57048	,	_	_	
329-121	57049-57059	validation	_	_	
329-122	57060-57065	rules	_	_	
329-123	57065-57066	,	_	_	
329-124	57067-57070	etc	_	_	
329-125	57070-57071	.	_	_	
329-126	57071-57072	,	_	_	
329-127	57073-57079	please	_	_	
329-128	57080-57085	check	_	_	
329-129	57086-57089	out	_	_	
329-130	57090-57093	the	_	_	
329-131	57094-57098	Java	*	PROGLANG	
329-132	57098-57099	/	_	_	
329-133	57099-57104	Xtend	*	PROGLANG	
329-134	57105-57112	classes	_	_	
329-135	57113-57117	here	_	_	
329-136	57117-57118	:	_	_	
329-137	57119-57120	[	_	_	
329-138	57120-57123	ML2	_	_	
329-139	57123-57124	/	_	_	
329-140	57124-57132	language	_	_	
329-141	57132-57133	/	_	_	
329-142	57133-57140	thingml	_	_	
329-143	57140-57141	/	_	_	
329-144	57141-57144	src	_	_	
329-145	57144-57145	/	_	_	
329-146	57145-57148	org	_	_	
329-147	57148-57149	/	_	_	
329-148	57149-57156	thingml	_	_	
329-149	57156-57157	]	_	_	
329-150	57157-57158	(	_	_	
329-151	57158-57163	https	_	_	
329-152	57163-57164	:	_	_	
329-153	57164-57165	/	_	_	
329-154	57165-57166	/	_	_	
329-155	57166-57176	github.com	_	_	
329-156	57176-57177	/	_	_	
329-157	57177-57186	arminmoin	_	_	
329-158	57186-57187	/	_	_	
329-159	57187-57197	ML-Quadrat	_	_	
329-160	57197-57198	/	_	_	
329-161	57198-57202	tree	_	_	
329-162	57202-57203	/	_	_	
329-163	57203-57209	master	_	_	
329-164	57209-57210	/	_	_	
329-165	57210-57213	ML2	_	_	
329-166	57213-57214	/	_	_	
329-167	57214-57222	language	_	_	
329-168	57222-57223	/	_	_	
329-169	57223-57230	thingml	_	_	
329-170	57230-57231	/	_	_	
329-171	57231-57234	src	_	_	
329-172	57234-57235	/	_	_	
329-173	57235-57238	org	_	_	
329-174	57238-57239	/	_	_	
329-175	57239-57246	thingml	_	_	
329-176	57246-57247	)	_	_	
329-177	57247-57248	.	_	_	
329-178	57252-57253	#	_	_	
329-179	57253-57254	#	_	_	
329-180	57254-57255	#	_	_	
329-181	57256-57268	Contributing	_	_	
329-182	57269-57271	to	_	_	
329-183	57272-57275	the	_	_	
329-184	57276-57285	Semantics	_	_	
329-185	57286-57288	of	_	_	
329-186	57289-57292	the	_	_	
329-187	57293-57297	DSML	_	_	
329-188	57298-57300	at	_	_	
329-189	57301-57304	the	_	_	
329-190	57305-57318	Model-to-Code	_	_	
329-191	57319-57334	Transformations	_	_	
329-192	57335-57340	Layer	_	_	
329-193	57342-57348	Please	_	_	
329-194	57349-57354	check	_	_	
329-195	57355-57358	out	_	_	
329-196	57359-57362	the	_	_	
329-197	57363-57371	existing	_	_	
329-198	57372-57385	model-to-code	_	_	
329-199	57386-57401	transformations	_	_	
329-200	57402-57403	(	_	_	
329-201	57403-57407	code	_	_	
329-202	57408-57418	generators	_	_	
329-203	57418-57419	/	_	_	
329-204	57419-57420	"	_	_	
329-205	57420-57429	compilers	_	_	
329-206	57429-57430	"	_	_	
329-207	57430-57431	)	_	_	
329-208	57432-57434	at	_	_	
329-209	57435-57436	[	_	_	
329-210	57436-57439	ML2	_	_	
329-211	57439-57440	/	_	_	
329-212	57440-57449	compilers	_	_	
329-213	57449-57450	]	_	_	
329-214	57450-57451	(	_	_	
329-215	57451-57456	https	_	_	
329-216	57456-57457	:	_	_	
329-217	57457-57458	/	_	_	
329-218	57458-57459	/	_	_	
329-219	57459-57469	github.com	_	_	
329-220	57469-57470	/	_	_	
329-221	57470-57479	arminmoin	_	_	
329-222	57479-57480	/	_	_	
329-223	57480-57490	ML-Quadrat	_	_	
329-224	57490-57491	/	_	_	
329-225	57491-57495	tree	_	_	
329-226	57495-57496	/	_	_	
329-227	57496-57502	master	_	_	
329-228	57502-57503	/	_	_	
329-229	57503-57506	ML2	_	_	
329-230	57506-57507	/	_	_	
329-231	57507-57516	compilers	_	_	
329-232	57516-57517	)	_	_	
329-233	57517-57518	.	_	_	

#Text=Let's say you want to adapt/extend the Python and Java code generator (python_java).
330-1	57519-57524	Let's	_	_	
330-2	57525-57528	say	_	_	
330-3	57529-57532	you	_	_	
330-4	57533-57537	want	_	_	
330-5	57538-57540	to	_	_	
330-6	57541-57546	adapt	_	_	
330-7	57546-57547	/	_	_	
330-8	57547-57553	extend	_	_	
330-9	57554-57557	the	_	_	
330-10	57558-57564	Python	*	PROGLANG	
330-11	57565-57568	and	_	_	
330-12	57569-57573	Java	*	PROGLANG	
330-13	57574-57578	code	_	_	
330-14	57579-57588	generator	_	_	
330-15	57589-57590	(	_	_	
330-16	57590-57601	python_java	_	_	
330-16.1	57590-57596	python	*	PROGLANG	
330-16.2	57597-57601	java	*	PROGLANG	
330-17	57601-57602	)	_	_	
330-18	57602-57603	.	_	_	

#Text=For example, suppose that you want to enable a new ML method out-of-the-box, i.e., in the pure MDSE mode.
331-1	57604-57607	For	_	_	
331-2	57608-57615	example	_	_	
331-3	57615-57616	,	_	_	
331-4	57617-57624	suppose	_	_	
331-5	57625-57629	that	_	_	
331-6	57630-57633	you	_	_	
331-7	57634-57638	want	_	_	
331-8	57639-57641	to	_	_	
331-9	57642-57648	enable	_	_	
331-10	57649-57650	a	_	_	
331-11	57651-57654	new	_	_	
331-12	57655-57657	ML	_	_	
331-13	57658-57664	method	_	_	
331-14	57665-57679	out-of-the-box	_	_	
331-15	57679-57680	,	_	_	
331-16	57681-57684	i.e	_	_	
331-17	57684-57685	.	_	_	
331-18	57685-57686	,	_	_	
331-19	57687-57689	in	_	_	
331-20	57690-57693	the	_	_	
331-21	57694-57698	pure	_	_	
331-22	57699-57703	MDSE	_	_	
331-23	57704-57708	mode	_	_	
331-24	57708-57709	.	_	_	

#Text=To this aim, please adapt/extend the [PythonJavaThingActionCompiler Java class](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/compilers/python_java/src/main/java/org/thingml/compilers/python_java/PythonJavaThingActionCompiler.java).
332-1	57710-57712	To	_	_	
332-2	57713-57717	this	_	_	
332-3	57718-57721	aim	_	_	
332-4	57721-57722	,	_	_	
332-5	57723-57729	please	_	_	
332-6	57730-57735	adapt	_	_	
332-7	57735-57736	/	_	_	
332-8	57736-57742	extend	_	_	
332-9	57743-57746	the	_	_	
332-10	57747-57748	[	_	_	
332-11	57748-57777	PythonJavaThingActionCompiler	_	_	
332-12	57778-57782	Java	_	_	
332-13	57783-57788	class	_	_	
332-14	57788-57789	]	_	_	
332-15	57789-57790	(	_	_	
332-16	57790-57795	https	_	_	
332-17	57795-57796	:	_	_	
332-18	57796-57797	/	_	_	
332-19	57797-57798	/	_	_	
332-20	57798-57808	github.com	_	_	
332-21	57808-57809	/	_	_	
332-22	57809-57818	arminmoin	_	_	
332-23	57818-57819	/	_	_	
332-24	57819-57829	ML-Quadrat	_	_	
332-25	57829-57830	/	_	_	
332-26	57830-57834	blob	_	_	
332-27	57834-57835	/	_	_	
332-28	57835-57841	master	_	_	
332-29	57841-57842	/	_	_	
332-30	57842-57845	ML2	_	_	
332-31	57845-57846	/	_	_	
332-32	57846-57855	compilers	_	_	
332-33	57855-57856	/	_	_	
332-34	57856-57867	python_java	_	_	
332-35	57867-57868	/	_	_	
332-36	57868-57871	src	_	_	
332-37	57871-57872	/	_	_	
332-38	57872-57876	main	_	_	
332-39	57876-57877	/	_	_	
332-40	57877-57881	java	_	_	
332-41	57881-57882	/	_	_	
332-42	57882-57885	org	_	_	
332-43	57885-57886	/	_	_	
332-44	57886-57893	thingml	_	_	
332-45	57893-57894	/	_	_	
332-46	57894-57903	compilers	_	_	
332-47	57903-57904	/	_	_	
332-48	57904-57915	python_java	_	_	
332-49	57915-57916	/	_	_	
332-50	57916-57950	PythonJavaThingActionCompiler.java	_	_	
332-51	57950-57951	)	_	_	
332-52	57951-57952	.	_	_	

#Text=**Note:** You may add any new Java packages that must be included among the imported Java packages in the generated Java code to the Helper Java class, e.g., in the case of the python_java code generator to the [PythonJavaHelper Java class](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/compilers/python_java/src/main/java/org/thingml/compilers/python_java/PythonJavaHelper.java).
333-1	57956-57957	*	_	_	
333-2	57957-57958	*	_	_	
333-3	57958-57962	Note	_	_	
333-4	57962-57963	:	_	_	
333-5	57963-57964	*	_	_	
333-6	57964-57965	*	_	_	
333-7	57966-57969	You	_	_	
333-8	57970-57973	may	_	_	
333-9	57974-57977	add	_	_	
333-10	57978-57981	any	_	_	
333-11	57982-57985	new	_	_	
333-12	57986-57990	Java	*	PROGLANG	
333-13	57991-57999	packages	_	_	
333-14	58000-58004	that	_	_	
333-15	58005-58009	must	_	_	
333-16	58010-58012	be	_	_	
333-17	58013-58021	included	_	_	
333-18	58022-58027	among	_	_	
333-19	58028-58031	the	_	_	
333-20	58032-58040	imported	_	_	
333-21	58041-58045	Java	*	PROGLANG	
333-22	58046-58054	packages	_	_	
333-23	58055-58057	in	_	_	
333-24	58058-58061	the	_	_	
333-25	58062-58071	generated	_	_	
333-26	58072-58076	Java	*	PROGLANG	
333-27	58077-58081	code	_	_	
333-28	58082-58084	to	_	_	
333-29	58085-58088	the	_	_	
333-30	58089-58095	Helper	_	_	
333-31	58096-58100	Java	*	PROGLANG	
333-32	58101-58106	class	_	_	
333-33	58106-58107	,	_	_	
333-34	58108-58111	e.g	_	_	
333-35	58111-58112	.	_	_	
333-36	58112-58113	,	_	_	
333-37	58114-58116	in	_	_	
333-38	58117-58120	the	_	_	
333-39	58121-58125	case	_	_	
333-40	58126-58128	of	_	_	
333-41	58129-58132	the	_	_	
333-42	58133-58144	python_java	_	_	
333-42.1	58133-58139	python	*	PROGLANG	
333-42.2	58140-58144	java	*	PROGLANG	
333-43	58145-58149	code	_	_	
333-44	58150-58159	generator	_	_	
333-45	58160-58162	to	_	_	
333-46	58163-58166	the	_	_	
333-47	58167-58168	[	_	_	
333-48	58168-58184	PythonJavaHelper	_	_	
333-49	58185-58189	Java	*	PROGLANG	
333-50	58190-58195	class	_	_	
333-51	58195-58196	]	_	_	
333-52	58196-58197	(	_	_	
333-53	58197-58202	https	_	_	
333-54	58202-58203	:	_	_	
333-55	58203-58204	/	_	_	
333-56	58204-58205	/	_	_	
333-57	58205-58215	github.com	_	_	
333-58	58215-58216	/	_	_	
333-59	58216-58225	arminmoin	_	_	
333-60	58225-58226	/	_	_	
333-61	58226-58236	ML-Quadrat	_	_	
333-62	58236-58237	/	_	_	
333-63	58237-58241	blob	_	_	
333-64	58241-58242	/	_	_	
333-65	58242-58248	master	_	_	
333-66	58248-58249	/	_	_	
333-67	58249-58252	ML2	_	_	
333-68	58252-58253	/	_	_	
333-69	58253-58262	compilers	_	_	
333-70	58262-58263	/	_	_	
333-71	58263-58274	python_java	_	_	
333-72	58274-58275	/	_	_	
333-73	58275-58278	src	_	_	
333-74	58278-58279	/	_	_	
333-75	58279-58283	main	_	_	
333-76	58283-58284	/	_	_	
333-77	58284-58288	java	_	_	
333-78	58288-58289	/	_	_	
333-79	58289-58292	org	_	_	
333-80	58292-58293	/	_	_	
333-81	58293-58300	thingml	_	_	
333-82	58300-58301	/	_	_	
333-83	58301-58310	compilers	_	_	
333-84	58310-58311	/	_	_	
333-85	58311-58322	python_java	_	_	
333-86	58322-58323	/	_	_	
333-87	58323-58344	PythonJavaHelper.java	_	_	
333-88	58344-58345	)	_	_	
333-89	58345-58346	.	_	_	

#Text=After any modifications, please build the corresponding projects again using Maven in the terminal as follows (e.g., for the python_java case):\r
#Text=\r
#Text=```bash\r
#Text=cd ML-Quadrat/ML2/compilers/python_java\r
#Text=mvn clean install -X\r
#Text=cd ML-Quadrat/ML2/compilers/registry\r
#Text=mvn clean install -X\r
#Text=```\r
#Text=The -X option is optional and enables the debugging mode, thus resulting in a more detailed output.
334-1	58350-58355	After	_	_	
334-2	58356-58359	any	_	_	
334-3	58360-58373	modifications	_	_	
334-4	58373-58374	,	_	_	
334-5	58375-58381	please	_	_	
334-6	58382-58387	build	_	_	
334-7	58388-58391	the	_	_	
334-8	58392-58405	corresponding	_	_	
334-9	58406-58414	projects	_	_	
334-10	58415-58420	again	_	_	
334-11	58421-58426	using	_	_	
334-12	58427-58432	Maven	*	SOFTWARE	
334-13	58433-58435	in	_	_	
334-14	58436-58439	the	_	_	
334-15	58440-58448	terminal	_	_	
334-16	58449-58451	as	_	_	
334-17	58452-58459	follows	_	_	
334-18	58460-58461	(	_	_	
334-19	58461-58464	e.g	_	_	
334-20	58464-58465	.	_	_	
334-21	58465-58466	,	_	_	
334-22	58467-58470	for	_	_	
334-23	58471-58474	the	_	_	
334-24	58475-58486	python_java	_	_	
334-24.1	58475-58481	python	*	PROGLANG	
334-24.2	58482-58486	java	*	PROGLANG	
334-25	58487-58491	case	_	_	
334-26	58491-58492	)	_	_	
334-27	58492-58493	:	_	_	
334-28	58497-58498	`	_	_	
334-29	58498-58499	`	_	_	
334-30	58499-58500	`	_	_	
334-31	58500-58504	bash	*	PROGLANG	
334-32	58506-58508	cd	_	_	
334-33	58509-58519	ML-Quadrat	_	_	
334-34	58519-58520	/	_	_	
334-35	58520-58523	ML2	_	_	
334-36	58523-58524	/	_	_	
334-37	58524-58533	compilers	_	_	
334-38	58533-58534	/	_	_	
334-39	58534-58545	python_java	_	_	
334-40	58547-58550	mvn	_	_	
334-41	58551-58556	clean	_	_	
334-42	58557-58564	install	_	_	
334-43	58565-58566	-	_	_	
334-44	58566-58567	X	_	_	
334-45	58569-58571	cd	_	_	
334-46	58572-58582	ML-Quadrat	_	_	
334-47	58582-58583	/	_	_	
334-48	58583-58586	ML2	_	_	
334-49	58586-58587	/	_	_	
334-50	58587-58596	compilers	_	_	
334-51	58596-58597	/	_	_	
334-52	58597-58605	registry	_	_	
334-53	58607-58610	mvn	_	_	
334-54	58611-58616	clean	_	_	
334-55	58617-58624	install	_	_	
334-56	58625-58626	-	_	_	
334-57	58626-58627	X	_	_	
334-58	58629-58630	`	_	_	
334-59	58630-58631	`	_	_	
334-60	58631-58632	`	_	_	
334-61	58634-58637	The	_	_	
334-62	58638-58639	-	_	_	
334-63	58639-58640	X	_	_	
334-64	58641-58647	option	_	_	
334-65	58648-58650	is	_	_	
334-66	58651-58659	optional	_	_	
334-67	58660-58663	and	_	_	
334-68	58664-58671	enables	_	_	
334-69	58672-58675	the	_	_	
334-70	58676-58685	debugging	_	_	
334-71	58686-58690	mode	_	_	
334-72	58690-58691	,	_	_	
334-73	58692-58696	thus	_	_	
334-74	58697-58706	resulting	_	_	
334-75	58707-58709	in	_	_	
334-76	58710-58711	a	_	_	
334-77	58712-58716	more	_	_	
334-78	58717-58725	detailed	_	_	
334-79	58726-58732	output	_	_	
334-80	58732-58733	.	_	_	

#Text=[Back to top](#toc)\r
#Text=\r
#Text=<a name="exploitation"></a>\r
#Text=## 7.
335-1	58737-58738	[	_	_	
335-2	58738-58742	Back	_	_	
335-3	58743-58745	to	_	_	
335-4	58746-58749	top	_	_	
335-5	58749-58750	]	_	_	
335-6	58750-58751	(	_	_	
335-7	58751-58752	#	_	_	
335-8	58752-58755	toc	_	_	
335-9	58755-58756	)	_	_	
335-10	58760-58761	<	_	_	
335-11	58761-58762	a	_	_	
335-12	58763-58767	name	_	_	
335-13	58767-58768	=	_	_	
335-14	58768-58769	"	_	_	
335-15	58769-58781	exploitation	_	_	
335-16	58781-58782	"	_	_	
335-17	58782-58783	>	_	_	
335-18	58783-58784	<	_	_	
335-19	58784-58785	/	_	_	
335-20	58785-58786	a	_	_	
335-21	58786-58787	>	_	_	
335-22	58789-58790	#	_	_	
335-23	58790-58791	#	_	_	
335-24	58792-58793	7	_	_	
335-25	58793-58794	.	_	_	

#Text=Exploitation & Industry Adoption\r
#Text=\r
#Text=[DriotData](https://arxiv.org/abs/2107.02692) provides citizen data scientists and citizen / end-user software developers with a web-based "Low-Code" platform that has a graphical drag-and-drop dashboard, so that they can easily create their desired smart IoT services without extensive knowledge and skills in Software Engineering or Artificial Intelligence (AI).
336-1	58795-58807	Exploitation	_	_	
336-2	58808-58809	&	_	_	
336-3	58810-58818	Industry	_	_	
336-4	58819-58827	Adoption	_	_	
336-5	58831-58832	[	_	_	
336-6	58832-58841	DriotData	_	_	
336-7	58841-58842	]	_	_	
336-8	58842-58843	(	_	_	
336-9	58843-58848	https	_	_	
336-10	58848-58849	:	_	_	
336-11	58849-58850	/	_	_	
336-12	58850-58851	/	_	_	
336-13	58851-58860	arxiv.org	_	_	
336-14	58860-58861	/	_	_	
336-15	58861-58864	abs	_	_	
336-16	58864-58865	/	_	_	
336-17	58865-58875	2107.02692	_	_	
336-18	58875-58876	)	_	_	
336-19	58877-58885	provides	_	_	
336-20	58886-58893	citizen	_	_	
336-21	58894-58898	data	_	_	
336-22	58899-58909	scientists	_	_	
336-23	58910-58913	and	_	_	
336-24	58914-58921	citizen	_	_	
336-25	58922-58923	/	_	_	
336-26	58924-58932	end-user	_	_	
336-27	58933-58941	software	_	_	
336-28	58942-58952	developers	_	_	
336-29	58953-58957	with	_	_	
336-30	58958-58959	a	_	_	
336-31	58960-58969	web-based	_	_	
336-32	58970-58971	"	_	_	
336-33	58971-58979	Low-Code	_	_	
336-34	58979-58980	"	_	_	
336-35	58981-58989	platform	_	_	
336-36	58990-58994	that	_	_	
336-37	58995-58998	has	_	_	
336-38	58999-59000	a	_	_	
336-39	59001-59010	graphical	_	_	
336-40	59011-59024	drag-and-drop	_	_	
336-41	59025-59034	dashboard	_	_	
336-42	59034-59035	,	_	_	
336-43	59036-59038	so	_	_	
336-44	59039-59043	that	_	_	
336-45	59044-59048	they	_	_	
336-46	59049-59052	can	_	_	
336-47	59053-59059	easily	_	_	
336-48	59060-59066	create	_	_	
336-49	59067-59072	their	_	_	
336-50	59073-59080	desired	_	_	
336-51	59081-59086	smart	_	_	
336-52	59087-59090	IoT	_	_	
336-53	59091-59099	services	_	_	
336-54	59100-59107	without	_	_	
336-55	59108-59117	extensive	_	_	
336-56	59118-59127	knowledge	_	_	
336-57	59128-59131	and	_	_	
336-58	59132-59138	skills	_	_	
336-59	59139-59141	in	_	_	
336-60	59142-59150	Software	_	_	
336-61	59151-59162	Engineering	_	_	
336-62	59163-59165	or	_	_	
336-63	59166-59176	Artificial	_	_	
336-64	59177-59189	Intelligence	_	_	
336-65	59190-59191	(	_	_	
336-66	59191-59193	AI	_	_	
336-67	59193-59194	)	_	_	
336-68	59194-59195	.	_	_	
