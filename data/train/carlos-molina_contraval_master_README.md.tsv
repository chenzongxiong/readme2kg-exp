#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=This repository hosts **epromela** ---a tool for
#Text=building models of smart contracts that can
#Text=be validated by the Spin model checker.
1-1	0-4	This	_	_	
1-2	5-15	repository	_	_	
1-3	16-21	hosts	_	_	
1-4	22-23	*	_	_	
1-5	23-24	*	_	_	
1-6	24-32	epromela	*	SOFTWARE	
1-7	32-33	*	_	_	
1-8	33-34	*	_	_	
1-9	35-36	-	_	_	
1-10	36-37	-	_	_	
1-11	37-38	-	_	_	
1-12	38-39	a	_	_	
1-13	40-44	tool	_	_	
1-14	45-48	for	_	_	
1-15	49-57	building	_	_	
1-16	58-64	models	_	_	
1-17	65-67	of	_	_	
1-18	68-73	smart	_	_	
1-19	74-83	contracts	_	_	
1-20	84-88	that	_	_	
1-21	89-92	can	_	_	
1-22	93-95	be	_	_	
1-23	96-105	validated	_	_	
1-24	106-108	by	_	_	
1-25	109-112	the	_	_	
1-26	113-117	Spin	*	SOFTWARE	
1-27	118-123	model	_	_	
1-28	124-131	checker	_	_	
1-29	131-132	.	_	_	

#Text=<br/>
#Text=
#Text=
#Text=# 1.- How to build reliable smart contracts
#Text=
#Text=
#Text=### Is your smart contract reliable?
2-1	133-134	<	_	_	
2-2	134-136	br	_	_	
2-3	136-137	/	_	_	
2-4	137-138	>	_	_	
2-5	141-142	#	_	_	
2-6	143-144	1	_	_	
2-7	144-145	.	_	_	
2-8	145-146	-	_	_	
2-9	147-150	How	_	_	
2-10	151-153	to	_	_	
2-11	154-159	build	_	_	
2-12	160-168	reliable	_	_	
2-13	169-174	smart	_	_	
2-14	175-184	contracts	_	_	
2-15	187-188	#	_	_	
2-16	188-189	#	_	_	
2-17	189-190	#	_	_	
2-18	191-193	Is	_	_	
2-19	194-198	your	_	_	
2-20	199-204	smart	_	_	
2-21	205-213	contract	_	_	
2-22	214-222	reliable	_	_	
2-23	222-223	?	_	_	

#Text=Reliability is an attribute of a system, of a 
#Text=smart contract in this discussion, and defines
#Text=its continuity of correct service.
3-1	224-235	Reliability	_	_	
3-2	236-238	is	_	_	
3-3	239-241	an	_	_	
3-4	242-251	attribute	_	_	
3-5	252-254	of	_	_	
3-6	255-256	a	_	_	
3-7	257-263	system	_	_	
3-8	263-264	,	_	_	
3-9	265-267	of	_	_	
3-10	268-269	a	_	_	
3-11	271-276	smart	_	_	
3-12	277-285	contract	_	_	
3-13	286-288	in	_	_	
3-14	289-293	this	_	_	
3-15	294-304	discussion	_	_	
3-16	304-305	,	_	_	
3-17	306-309	and	_	_	
3-18	310-317	defines	_	_	
3-19	318-321	its	_	_	
3-20	322-332	continuity	_	_	
3-21	333-335	of	_	_	
3-22	336-343	correct	_	_	
3-23	344-351	service	_	_	
3-24	351-352	.	_	_	

#Text=Thus my smart
#Text=contract is reliable if it is capable of 
#Text=monitoring or enforcing  
#Text=contractual interactions continuously
#Text=and correctly.
4-1	353-357	Thus	_	_	
4-2	358-360	my	_	_	
4-3	361-366	smart	_	_	
4-4	367-375	contract	_	_	
4-5	376-378	is	_	_	
4-6	379-387	reliable	_	_	
4-7	388-390	if	_	_	
4-8	391-393	it	_	_	
4-9	394-396	is	_	_	
4-10	397-404	capable	_	_	
4-11	405-407	of	_	_	
4-12	409-419	monitoring	_	_	
4-13	420-422	or	_	_	
4-14	423-432	enforcing	_	_	
4-15	435-446	contractual	_	_	
4-16	447-459	interactions	_	_	
4-17	460-472	continuously	_	_	
4-18	473-476	and	_	_	
4-19	477-486	correctly	_	_	
4-20	486-487	.	_	_	

#Text=This means that a realiable smart
#Text=contract does not crash or produce incorrect
#Text=verdicts.
#Text=
#Text=### What can go wrong with a smart contract?
5-1	488-492	This	_	_	
5-2	493-498	means	_	_	
5-3	499-503	that	_	_	
5-4	504-505	a	_	_	
5-5	506-515	realiable	_	_	
5-6	516-521	smart	_	_	
5-7	522-530	contract	_	_	
5-8	531-535	does	_	_	
5-9	536-539	not	_	_	
5-10	540-545	crash	_	_	
5-11	546-548	or	_	_	
5-12	549-556	produce	_	_	
5-13	557-566	incorrect	_	_	
5-14	567-575	verdicts	_	_	
5-15	575-576	.	_	_	
5-16	578-579	#	_	_	
5-17	579-580	#	_	_	
5-18	580-581	#	_	_	
5-19	582-586	What	_	_	
5-20	587-590	can	_	_	
5-21	591-593	go	_	_	
5-22	594-599	wrong	_	_	
5-23	600-604	with	_	_	
5-24	605-606	a	_	_	
5-25	607-612	smart	_	_	
5-26	613-621	contract	_	_	
5-27	621-622	?	_	_	

#Text=Smart contracts are complex systems and as such
#Text=are likely to contain design and implementation
#Text=faults that will eventually 
#Text=manifiest as run--time errors.
6-1	623-628	Smart	_	_	
6-2	629-638	contracts	_	_	
6-3	639-642	are	_	_	
6-4	643-650	complex	_	_	
6-5	651-658	systems	_	_	
6-6	659-662	and	_	_	
6-7	663-665	as	_	_	
6-8	666-670	such	_	_	
6-9	671-674	are	_	_	
6-10	675-681	likely	_	_	
6-11	682-684	to	_	_	
6-12	685-692	contain	_	_	
6-13	693-699	design	_	_	
6-14	700-703	and	_	_	
6-15	704-718	implementation	_	_	
6-16	719-725	faults	_	_	
6-17	726-730	that	_	_	
6-18	731-735	will	_	_	
6-19	736-746	eventually	_	_	
6-20	748-757	manifiest	_	_	
6-21	758-760	as	_	_	
6-22	761-764	run	_	_	
6-23	764-765	-	_	_	
6-24	765-766	-	_	_	
6-25	766-770	time	_	_	
6-26	771-777	errors	_	_	
6-27	777-778	.	_	_	

#Text=These errors will 
#Text=derail the smart contracts from its normal expected 
#Text=behaviour or crash it.
7-1	779-784	These	_	_	
7-2	785-791	errors	_	_	
7-3	792-796	will	_	_	
7-4	798-804	derail	_	_	
7-5	805-808	the	_	_	
7-6	809-814	smart	_	_	
7-7	815-824	contracts	_	_	
7-8	825-829	from	_	_	
7-9	830-833	its	_	_	
7-10	834-840	normal	_	_	
7-11	841-849	expected	_	_	
7-12	851-860	behaviour	_	_	
7-13	861-863	or	_	_	
7-14	864-869	crash	_	_	
7-15	870-872	it	_	_	
7-16	872-873	.	_	_	

#Text=**Errors and faults:** To follow precise terminology (see for example,
#Text=[Basic Concepts and Taxonomy of Dependable
#Text=and Secure Computing, Algirdas et. al.]
8-1	875-876	*	_	_	
8-2	876-877	*	_	_	
8-3	877-883	Errors	_	_	
8-4	884-887	and	_	_	
8-5	888-894	faults	_	_	
8-6	894-895	:	_	_	
8-7	895-896	*	_	_	
8-8	896-897	*	_	_	
8-9	898-900	To	_	_	
8-10	901-907	follow	_	_	
8-11	908-915	precise	_	_	
8-12	916-927	terminology	_	_	
8-13	928-929	(	_	_	
8-14	929-932	see	_	_	
8-15	933-936	for	_	_	
8-16	937-944	example	_	_	
8-17	944-945	,	_	_	
8-18	946-947	[	_	_	
8-19	947-952	Basic	*[1]	PUBLICATION[1]	
8-20	953-961	Concepts	*[1]	PUBLICATION[1]	
8-21	962-965	and	*[1]	PUBLICATION[1]	
8-22	966-974	Taxonomy	*[1]	PUBLICATION[1]	
8-23	975-977	of	*[1]	PUBLICATION[1]	
8-24	978-988	Dependable	*[1]	PUBLICATION[1]	
8-25	989-992	and	*[1]	PUBLICATION[1]	
8-26	993-999	Secure	*[1]	PUBLICATION[1]	
8-27	1000-1009	Computing	*[1]	PUBLICATION[1]	
8-28	1009-1010	,	_	_	
8-29	1011-1019	Algirdas	_	_	
8-30	1020-1022	et	_	_	
8-31	1022-1023	.	_	_	
8-32	1024-1026	al	_	_	
8-33	1026-1027	.	_	_	
8-34	1027-1028	]	_	_	

#Text=(http://www.cs.ncl.ac.uk/research/pubs/articles/papers/666.pdf "Brian Randell paper at Ncl"))
#Text=I should distinguish between faults and errors; however, since the 
#Text=use of the two terms as synonymous is widely spread,
#Text=I will not insist in the distintion, except where
#Text=strictly necessary.
9-1	1028-1029	(	_	_	
9-2	1029-1033	http	_	_	
9-3	1033-1034	:	_	_	
9-4	1034-1035	/	_	_	
9-5	1035-1036	/	_	_	
9-6	1036-1052	www.cs.ncl.ac.uk	_	_	
9-7	1052-1053	/	_	_	
9-8	1053-1061	research	_	_	
9-9	1061-1062	/	_	_	
9-10	1062-1066	pubs	_	_	
9-11	1066-1067	/	_	_	
9-12	1067-1075	articles	_	_	
9-13	1075-1076	/	_	_	
9-14	1076-1082	papers	_	_	
9-15	1082-1083	/	_	_	
9-16	1083-1086	666	_	_	
9-17	1086-1087	.	_	_	
9-18	1087-1090	pdf	_	_	
9-19	1091-1092	"	_	_	
9-20	1092-1097	Brian	_	_	
9-21	1098-1105	Randell	_	_	
9-22	1106-1111	paper	_	_	
9-23	1112-1114	at	_	_	
9-24	1115-1118	Ncl	_	_	
9-25	1118-1119	"	_	_	
9-26	1119-1120	)	_	_	
9-27	1120-1121	)	_	_	
9-28	1122-1123	I	_	_	
9-29	1124-1130	should	_	_	
9-30	1131-1142	distinguish	_	_	
9-31	1143-1150	between	_	_	
9-32	1151-1157	faults	_	_	
9-33	1158-1161	and	_	_	
9-34	1162-1168	errors	_	_	
9-35	1168-1169	;	_	_	
9-36	1170-1177	however	_	_	
9-37	1177-1178	,	_	_	
9-38	1179-1184	since	_	_	
9-39	1185-1188	the	_	_	
9-40	1190-1193	use	_	_	
9-41	1194-1196	of	_	_	
9-42	1197-1200	the	_	_	
9-43	1201-1204	two	_	_	
9-44	1205-1210	terms	_	_	
9-45	1211-1213	as	_	_	
9-46	1214-1224	synonymous	_	_	
9-47	1225-1227	is	_	_	
9-48	1228-1234	widely	_	_	
9-49	1235-1241	spread	_	_	
9-50	1241-1242	,	_	_	
9-51	1243-1244	I	_	_	
9-52	1245-1249	will	_	_	
9-53	1250-1253	not	_	_	
9-54	1254-1260	insist	_	_	
9-55	1261-1263	in	_	_	
9-56	1264-1267	the	_	_	
9-57	1268-1278	distintion	_	_	
9-58	1278-1279	,	_	_	
9-59	1280-1286	except	_	_	
9-60	1287-1292	where	_	_	
9-61	1293-1301	strictly	_	_	
9-62	1302-1311	necessary	_	_	
9-63	1311-1312	.	_	_	

#Text=Intuitively speaking, a fault
#Text=is a dormant error, for example,
#Text=an erroneous line of the Java code that has not
#Text=been activated in the execution because some 
#Text=if-conditions have not been satisfied yet.
10-1	1313-1324	Intuitively	_	_	
10-2	1325-1333	speaking	_	_	
10-3	1333-1334	,	_	_	
10-4	1335-1336	a	_	_	
10-5	1337-1342	fault	_	_	
10-6	1343-1345	is	_	_	
10-7	1346-1347	a	_	_	
10-8	1348-1355	dormant	_	_	
10-9	1356-1361	error	_	_	
10-10	1361-1362	,	_	_	
10-11	1363-1366	for	_	_	
10-12	1367-1374	example	_	_	
10-13	1374-1375	,	_	_	
10-14	1376-1378	an	_	_	
10-15	1379-1388	erroneous	_	_	
10-16	1389-1393	line	_	_	
10-17	1394-1396	of	_	_	
10-18	1397-1400	the	_	_	
10-19	1401-1405	Java	*	PROGLANG	
10-20	1406-1410	code	_	_	
10-21	1411-1415	that	_	_	
10-22	1416-1419	has	_	_	
10-23	1420-1423	not	_	_	
10-24	1424-1428	been	_	_	
10-25	1429-1438	activated	_	_	
10-26	1439-1441	in	_	_	
10-27	1442-1445	the	_	_	
10-28	1446-1455	execution	_	_	
10-29	1456-1463	because	_	_	
10-30	1464-1468	some	_	_	
10-31	1470-1483	if-conditions	_	_	
10-32	1484-1488	have	_	_	
10-33	1489-1492	not	_	_	
10-34	1493-1497	been	_	_	
10-35	1498-1507	satisfied	_	_	
10-36	1508-1511	yet	_	_	
10-37	1511-1512	.	_	_	

#Text=</br>
#Text=
#Text=#### Where do errors come from?
11-1	1513-1514	<	_	_	
11-2	1514-1515	/	_	_	
11-3	1515-1517	br	_	_	
11-4	1517-1518	>	_	_	
11-5	1520-1521	#	_	_	
11-6	1521-1522	#	_	_	
11-7	1522-1523	#	_	_	
11-8	1523-1524	#	_	_	
11-9	1525-1530	Where	_	_	
11-10	1531-1533	do	_	_	
11-11	1534-1540	errors	_	_	
11-12	1541-1545	come	_	_	
11-13	1546-1550	from	_	_	
11-14	1550-1551	?	_	_	

#Text=Smart contracts are impacted by several errors that
#Text=we clasified into design, implementation and mapping 
#Text=errors
12-1	1554-1559	Smart	_	_	
12-2	1560-1569	contracts	_	_	
12-3	1570-1573	are	_	_	
12-4	1574-1582	impacted	_	_	
12-5	1583-1585	by	_	_	
12-6	1586-1593	several	_	_	
12-7	1594-1600	errors	_	_	
12-8	1601-1605	that	_	_	
12-9	1606-1608	we	_	_	
12-10	1609-1618	clasified	_	_	
12-11	1619-1623	into	_	_	
12-12	1624-1630	design	_	_	
12-13	1630-1631	,	_	_	
12-14	1632-1646	implementation	_	_	
12-15	1647-1650	and	_	_	
12-16	1651-1658	mapping	_	_	
12-17	1660-1666	errors	_	_	

#Text=.
13-1	1666-1667	.	_	_	

#Text=- **Design time errors:** They are accidently introduced 
#Text=  during the development phase by the humans responsible 
#Text=  for designing the smart contract
14-1	1669-1670	-	_	_	
14-2	1671-1672	*	_	_	
14-3	1672-1673	*	_	_	
14-4	1673-1679	Design	_	_	
14-5	1680-1684	time	_	_	
14-6	1685-1691	errors	_	_	
14-7	1691-1692	:	_	_	
14-8	1692-1693	*	_	_	
14-9	1693-1694	*	_	_	
14-10	1695-1699	They	_	_	
14-11	1700-1703	are	_	_	
14-12	1704-1714	accidently	_	_	
14-13	1715-1725	introduced	_	_	
14-14	1729-1735	during	_	_	
14-15	1736-1739	the	_	_	
14-16	1740-1751	development	_	_	
14-17	1752-1757	phase	_	_	
14-18	1758-1760	by	_	_	
14-19	1761-1764	the	_	_	
14-20	1765-1771	humans	_	_	
14-21	1772-1783	responsible	_	_	
14-22	1787-1790	for	_	_	
14-23	1791-1800	designing	_	_	
14-24	1801-1804	the	_	_	
14-25	1805-1810	smart	_	_	
14-26	1811-1819	contract	_	_	

#Text=.
15-1	1819-1820	.	_	_	

#Text=- **Implementation errors:** They are introduced by the
#Text=  humans responsible for coding the smart contract,
#Text=  for example, in Solidity language
16-1	1822-1823	-	_	_	
16-2	1824-1825	*	_	_	
16-3	1825-1826	*	_	_	
16-4	1826-1840	Implementation	_	_	
16-5	1841-1847	errors	_	_	
16-6	1847-1848	:	_	_	
16-7	1848-1849	*	_	_	
16-8	1849-1850	*	_	_	
16-9	1851-1855	They	_	_	
16-10	1856-1859	are	_	_	
16-11	1860-1870	introduced	_	_	
16-12	1871-1873	by	_	_	
16-13	1874-1877	the	_	_	
16-14	1880-1886	humans	_	_	
16-15	1887-1898	responsible	_	_	
16-16	1899-1902	for	_	_	
16-17	1903-1909	coding	_	_	
16-18	1910-1913	the	_	_	
16-19	1914-1919	smart	_	_	
16-20	1920-1928	contract	_	_	
16-21	1928-1929	,	_	_	
16-22	1932-1935	for	_	_	
16-23	1936-1943	example	_	_	
16-24	1943-1944	,	_	_	
16-25	1945-1947	in	_	_	
16-26	1948-1956	Solidity	*	PROGLANG	
16-27	1957-1965	language	_	_	

#Text=.
17-1	1965-1966	.	_	_	

#Text=- **Mapping errors:** They are introduced by the
#Text=  humans responsible for mapping design into
#Text=  implementation.
18-1	1968-1969	-	_	_	
18-2	1970-1971	*	_	_	
18-3	1971-1972	*	_	_	
18-4	1972-1979	Mapping	_	_	
18-5	1980-1986	errors	_	_	
18-6	1986-1987	:	_	_	
18-7	1987-1988	*	_	_	
18-8	1988-1989	*	_	_	
18-9	1990-1994	They	_	_	
18-10	1995-1998	are	_	_	
18-11	1999-2009	introduced	_	_	
18-12	2010-2012	by	_	_	
18-13	2013-2016	the	_	_	
18-14	2019-2025	humans	_	_	
18-15	2026-2037	responsible	_	_	
18-16	2038-2041	for	_	_	
18-17	2042-2049	mapping	_	_	
18-18	2050-2056	design	_	_	
18-19	2057-2061	into	_	_	
18-20	2064-2078	implementation	_	_	
18-21	2078-2079	.	_	_	

#Text=These types of errors are hard to avoid unless
#Text=a rigorous approach to validate the smart contract
#Text=is taken.
19-1	2081-2086	These	_	_	
19-2	2087-2092	types	_	_	
19-3	2093-2095	of	_	_	
19-4	2096-2102	errors	_	_	
19-5	2103-2106	are	_	_	
19-6	2107-2111	hard	_	_	
19-7	2112-2114	to	_	_	
19-8	2115-2120	avoid	_	_	
19-9	2121-2127	unless	_	_	
19-10	2128-2129	a	_	_	
19-11	2130-2138	rigorous	_	_	
19-12	2139-2147	approach	_	_	
19-13	2148-2150	to	_	_	
19-14	2151-2159	validate	_	_	
19-15	2160-2163	the	_	_	
19-16	2164-2169	smart	_	_	
19-17	2170-2178	contract	_	_	
19-18	2179-2181	is	_	_	
19-19	2182-2187	taken	_	_	
19-20	2187-2188	.	_	_	

#Text=</br>
#Text=Ideal smart contracts, that is, smart contracts that
#Text=always follow normal execution paths are relatively
#Text=simple to build and examine.
20-1	2191-2192	<	_	_	
20-2	2192-2193	/	_	_	
20-3	2193-2195	br	_	_	
20-4	2195-2196	>	_	_	
20-5	2197-2202	Ideal	_	_	
20-6	2203-2208	smart	_	_	
20-7	2209-2218	contracts	_	_	
20-8	2218-2219	,	_	_	
20-9	2220-2224	that	_	_	
20-10	2225-2227	is	_	_	
20-11	2227-2228	,	_	_	
20-12	2229-2234	smart	_	_	
20-13	2235-2244	contracts	_	_	
20-14	2245-2249	that	_	_	
20-15	2250-2256	always	_	_	
20-16	2257-2263	follow	_	_	
20-17	2264-2270	normal	_	_	
20-18	2271-2280	execution	_	_	
20-19	2281-2286	paths	_	_	
20-20	2287-2290	are	_	_	
20-21	2291-2301	relatively	_	_	
20-22	2302-2308	simple	_	_	
20-23	2309-2311	to	_	_	
20-24	2312-2317	build	_	_	
20-25	2318-2321	and	_	_	
20-26	2322-2329	examine	_	_	
20-27	2329-2330	.	_	_	

#Text=However, realistic smart contracts
#Text=are remarkably intricate.
21-1	2331-2338	However	_	_	
21-2	2338-2339	,	_	_	
21-3	2340-2349	realistic	_	_	
21-4	2350-2355	smart	_	_	
21-5	2356-2365	contracts	_	_	
21-6	2366-2369	are	_	_	
21-7	2370-2380	remarkably	_	_	
21-8	2381-2390	intricate	_	_	
21-9	2390-2391	.	_	_	

#Text=Complexity is due to
#Text=fact that they are distributed systems executed
#Text=by two or more parties interacting is a loosely
#Text=coupled manner over the conventional Internet.
22-1	2392-2402	Complexity	_	_	
22-2	2403-2405	is	_	_	
22-3	2406-2409	due	_	_	
22-4	2410-2412	to	_	_	
22-5	2413-2417	fact	_	_	
22-6	2418-2422	that	_	_	
22-7	2423-2427	they	_	_	
22-8	2428-2431	are	_	_	
22-9	2432-2443	distributed	_	_	
22-10	2444-2451	systems	_	_	
22-11	2452-2460	executed	_	_	
22-12	2461-2463	by	_	_	
22-13	2464-2467	two	_	_	
22-14	2468-2470	or	_	_	
22-15	2471-2475	more	_	_	
22-16	2476-2483	parties	_	_	
22-17	2484-2495	interacting	_	_	
22-18	2496-2498	is	_	_	
22-19	2499-2500	a	_	_	
22-20	2501-2508	loosely	_	_	
22-21	2509-2516	coupled	_	_	
22-22	2517-2523	manner	_	_	
22-23	2524-2528	over	_	_	
22-24	2529-2532	the	_	_	
22-25	2533-2545	conventional	_	_	
22-26	2546-2554	Internet	_	_	
22-27	2554-2555	.	_	_	

#Text=Consequently,
#Text=at runtime, smart contracts are likely to be impacted
#Text=by human, infrastructure (software, hardware and
#Text=network) and application behaviours:
#Text=
#Text=- Human behaviour: for example, the person responsible 
#Text=   for authorizing a payment might accidentaly or deliberately 
#Text=   delay it and make the smart contract fail
23-1	2556-2568	Consequently	_	_	
23-2	2568-2569	,	_	_	
23-3	2570-2572	at	_	_	
23-4	2573-2580	runtime	_	_	
23-5	2580-2581	,	_	_	
23-6	2582-2587	smart	_	_	
23-7	2588-2597	contracts	_	_	
23-8	2598-2601	are	_	_	
23-9	2602-2608	likely	_	_	
23-10	2609-2611	to	_	_	
23-11	2612-2614	be	_	_	
23-12	2615-2623	impacted	_	_	
23-13	2624-2626	by	_	_	
23-14	2627-2632	human	_	_	
23-15	2632-2633	,	_	_	
23-16	2634-2648	infrastructure	_	_	
23-17	2649-2650	(	_	_	
23-18	2650-2658	software	_	_	
23-19	2658-2659	,	_	_	
23-20	2660-2668	hardware	_	_	
23-21	2669-2672	and	_	_	
23-22	2673-2680	network	_	_	
23-23	2680-2681	)	_	_	
23-24	2682-2685	and	_	_	
23-25	2686-2697	application	_	_	
23-26	2698-2708	behaviours	_	_	
23-27	2708-2709	:	_	_	
23-28	2711-2712	-	_	_	
23-29	2713-2718	Human	_	_	
23-30	2719-2728	behaviour	_	_	
23-31	2728-2729	:	_	_	
23-32	2730-2733	for	_	_	
23-33	2734-2741	example	_	_	
23-34	2741-2742	,	_	_	
23-35	2743-2746	the	_	_	
23-36	2747-2753	person	_	_	
23-37	2754-2765	responsible	_	_	
23-38	2770-2773	for	_	_	
23-39	2774-2785	authorizing	_	_	
23-40	2786-2787	a	_	_	
23-41	2788-2795	payment	_	_	
23-42	2796-2801	might	_	_	
23-43	2802-2813	accidentaly	_	_	
23-44	2814-2816	or	_	_	
23-45	2817-2829	deliberately	_	_	
23-46	2834-2839	delay	_	_	
23-47	2840-2842	it	_	_	
23-48	2843-2846	and	_	_	
23-49	2847-2851	make	_	_	
23-50	2852-2855	the	_	_	
23-51	2856-2861	smart	_	_	
23-52	2862-2870	contract	_	_	
23-53	2871-2875	fail	_	_	

#Text=.
24-1	2875-2876	.	_	_	

#Text=- Infrastructure behaviour: for example 
#Text=   unpredictable message delays, clock skews
#Text=   and network breakdowns might delay a payment message
#Text=   beyond its deadline
25-1	2879-2880	-	_	_	
25-2	2881-2895	Infrastructure	_	_	
25-3	2896-2905	behaviour	_	_	
25-4	2905-2906	:	_	_	
25-5	2907-2910	for	_	_	
25-6	2911-2918	example	_	_	
25-7	2923-2936	unpredictable	_	_	
25-8	2937-2944	message	_	_	
25-9	2945-2951	delays	_	_	
25-10	2951-2952	,	_	_	
25-11	2953-2958	clock	_	_	
25-12	2959-2964	skews	_	_	
25-13	2968-2971	and	_	_	
25-14	2972-2979	network	_	_	
25-15	2980-2990	breakdowns	_	_	
25-16	2991-2996	might	_	_	
25-17	2997-3002	delay	_	_	
25-18	3003-3004	a	_	_	
25-19	3005-3012	payment	_	_	
25-20	3013-3020	message	_	_	
25-21	3024-3030	beyond	_	_	
25-22	3031-3034	its	_	_	
25-23	3035-3043	deadline	_	_	

#Text=.
26-1	3043-3044	.	_	_	

#Text=- Application behaviour: for example,  
#Text=   the application might send a message incorrectly formatted, 
#Text=   include a delivery addresses
#Text=   that cannot be found, take a delivery as
#Text=   complete when the corresponding item has been delivered to the
#Text=   wrong address, try charge a bank account that does not have
#Text=   sufficient funds, and so on.
27-1	3047-3048	-	_	_	
27-2	3049-3060	Application	_	_	
27-3	3061-3070	behaviour	_	_	
27-4	3070-3071	:	_	_	
27-5	3072-3075	for	_	_	
27-6	3076-3083	example	_	_	
27-7	3083-3084	,	_	_	
27-8	3090-3093	the	_	_	
27-9	3094-3105	application	_	_	
27-10	3106-3111	might	_	_	
27-11	3112-3116	send	_	_	
27-12	3117-3118	a	_	_	
27-13	3119-3126	message	_	_	
27-14	3127-3138	incorrectly	_	_	
27-15	3139-3148	formatted	_	_	
27-16	3148-3149	,	_	_	
27-17	3154-3161	include	_	_	
27-18	3162-3163	a	_	_	
27-19	3164-3172	delivery	_	_	
27-20	3173-3182	addresses	_	_	
27-21	3186-3190	that	_	_	
27-22	3191-3197	cannot	_	_	
27-23	3198-3200	be	_	_	
27-24	3201-3206	found	_	_	
27-25	3206-3207	,	_	_	
27-26	3208-3212	take	_	_	
27-27	3213-3214	a	_	_	
27-28	3215-3223	delivery	_	_	
27-29	3224-3226	as	_	_	
27-30	3230-3238	complete	_	_	
27-31	3239-3243	when	_	_	
27-32	3244-3247	the	_	_	
27-33	3248-3261	corresponding	_	_	
27-34	3262-3266	item	_	_	
27-35	3267-3270	has	_	_	
27-36	3271-3275	been	_	_	
27-37	3276-3285	delivered	_	_	
27-38	3286-3288	to	_	_	
27-39	3289-3292	the	_	_	
27-40	3296-3301	wrong	_	_	
27-41	3302-3309	address	_	_	
27-42	3309-3310	,	_	_	
27-43	3311-3314	try	_	_	
27-44	3315-3321	charge	_	_	
27-45	3322-3323	a	_	_	
27-46	3324-3328	bank	_	_	
27-47	3329-3336	account	_	_	
27-48	3337-3341	that	_	_	
27-49	3342-3346	does	_	_	
27-50	3347-3350	not	_	_	
27-51	3351-3355	have	_	_	
27-52	3359-3369	sufficient	_	_	
27-53	3370-3375	funds	_	_	
27-54	3375-3376	,	_	_	
27-55	3377-3380	and	_	_	
27-56	3381-3383	so	_	_	
27-57	3384-3386	on	_	_	
27-58	3386-3387	.	_	_	

#Text=A smart contract that is meant to be reliable
#Text=needs to include mechanisms for
#Text=tolerating these abnormal (and undesirable) situations 
#Text=that will sooner or later materialize.
28-1	3393-3394	A	_	_	
28-2	3395-3400	smart	_	_	
28-3	3401-3409	contract	_	_	
28-4	3410-3414	that	_	_	
28-5	3415-3417	is	_	_	
28-6	3418-3423	meant	_	_	
28-7	3424-3426	to	_	_	
28-8	3427-3429	be	_	_	
28-9	3430-3438	reliable	_	_	
28-10	3439-3444	needs	_	_	
28-11	3445-3447	to	_	_	
28-12	3448-3455	include	_	_	
28-13	3456-3466	mechanisms	_	_	
28-14	3467-3470	for	_	_	
28-15	3471-3481	tolerating	_	_	
28-16	3482-3487	these	_	_	
28-17	3488-3496	abnormal	_	_	
28-18	3497-3498	(	_	_	
28-19	3498-3501	and	_	_	
28-20	3502-3513	undesirable	_	_	
28-21	3513-3514	)	_	_	
28-22	3515-3525	situations	_	_	
28-23	3527-3531	that	_	_	
28-24	3532-3536	will	_	_	
28-25	3537-3543	sooner	_	_	
28-26	3544-3546	or	_	_	
28-27	3547-3552	later	_	_	
28-28	3553-3564	materialize	_	_	
28-29	3564-3565	.	_	_	

#Text=Thus the smart contract code that deals
#Text=with the normal (ideal) execution needs to be complemented with
#Text=code that deals with abnormal (exceptional)
#Text=executions.
29-1	3567-3571	Thus	_	_	
29-2	3572-3575	the	_	_	
29-3	3576-3581	smart	_	_	
29-4	3582-3590	contract	_	_	
29-5	3591-3595	code	_	_	
29-6	3596-3600	that	_	_	
29-7	3601-3606	deals	_	_	
29-8	3607-3611	with	_	_	
29-9	3612-3615	the	_	_	
29-10	3616-3622	normal	_	_	
29-11	3623-3624	(	_	_	
29-12	3624-3629	ideal	_	_	
29-13	3629-3630	)	_	_	
29-14	3631-3640	execution	_	_	
29-15	3641-3646	needs	_	_	
29-16	3647-3649	to	_	_	
29-17	3650-3652	be	_	_	
29-18	3653-3665	complemented	_	_	
29-19	3666-3670	with	_	_	
29-20	3671-3675	code	_	_	
29-21	3676-3680	that	_	_	
29-22	3681-3686	deals	_	_	
29-23	3687-3691	with	_	_	
29-24	3692-3700	abnormal	_	_	
29-25	3701-3702	(	_	_	
29-26	3702-3713	exceptional	_	_	
29-27	3713-3714	)	_	_	
29-28	3715-3725	executions	_	_	
29-29	3725-3726	.	_	_	

#Text=That is, the smart contract need
#Text=to be able to follow **plan B** (contingency)
#Text=when **plan A** does not work.
30-1	3727-3731	That	_	_	
30-2	3732-3734	is	_	_	
30-3	3734-3735	,	_	_	
30-4	3736-3739	the	_	_	
30-5	3740-3745	smart	_	_	
30-6	3746-3754	contract	_	_	
30-7	3755-3759	need	_	_	
30-8	3760-3762	to	_	_	
30-9	3763-3765	be	_	_	
30-10	3766-3770	able	_	_	
30-11	3771-3773	to	_	_	
30-12	3774-3780	follow	_	_	
30-13	3781-3782	*	_	_	
30-14	3782-3783	*	_	_	
30-15	3783-3787	plan	_	_	
30-16	3788-3789	B	_	_	
30-17	3789-3790	*	_	_	
30-18	3790-3791	*	_	_	
30-19	3792-3793	(	_	_	
30-20	3793-3804	contingency	_	_	
30-21	3804-3805	)	_	_	
30-22	3806-3810	when	_	_	
30-23	3811-3812	*	_	_	
30-24	3812-3813	*	_	_	
30-25	3813-3817	plan	_	_	
30-26	3818-3819	A	_	_	
30-27	3819-3820	*	_	_	
30-28	3820-3821	*	_	_	
30-29	3822-3826	does	_	_	
30-30	3827-3830	not	_	_	
30-31	3831-3835	work	_	_	
30-32	3835-3836	.	_	_	

#Text=</br>
#Text=
#Text=Accounting for exceptional situation is a
#Text=necessary step towards building realiable
#Text=contracts, however, it is not enough.
31-1	3838-3839	<	_	_	
31-2	3839-3840	/	_	_	
31-3	3840-3842	br	_	_	
31-4	3842-3843	>	_	_	
31-5	3845-3855	Accounting	_	_	
31-6	3856-3859	for	_	_	
31-7	3860-3871	exceptional	_	_	
31-8	3872-3881	situation	_	_	
31-9	3882-3884	is	_	_	
31-10	3885-3886	a	_	_	
31-11	3887-3896	necessary	_	_	
31-12	3897-3901	step	_	_	
31-13	3902-3909	towards	_	_	
31-14	3910-3918	building	_	_	
31-15	3919-3928	realiable	_	_	
31-16	3929-3938	contracts	_	_	
31-17	3938-3939	,	_	_	
31-18	3940-3947	however	_	_	
31-19	3947-3948	,	_	_	
31-20	3949-3951	it	_	_	
31-21	3952-3954	is	_	_	
31-22	3955-3958	not	_	_	
31-23	3959-3965	enough	_	_	
31-24	3965-3966	.	_	_	

#Text=The 
#Text=problem with bringing exceptions into the
#Text=design of smart contracts is that they 
#Text=become populated by intricate executions that are
#Text=hard to examine and reason about for
#Text=correctness.
32-1	3967-3970	The	_	_	
32-2	3972-3979	problem	_	_	
32-3	3980-3984	with	_	_	
32-4	3985-3993	bringing	_	_	
32-5	3994-4004	exceptions	_	_	
32-6	4005-4009	into	_	_	
32-7	4010-4013	the	_	_	
32-8	4014-4020	design	_	_	
32-9	4021-4023	of	_	_	
32-10	4024-4029	smart	_	_	
32-11	4030-4039	contracts	_	_	
32-12	4040-4042	is	_	_	
32-13	4043-4047	that	_	_	
32-14	4048-4052	they	_	_	
32-15	4054-4060	become	_	_	
32-16	4061-4070	populated	_	_	
32-17	4071-4073	by	_	_	
32-18	4074-4083	intricate	_	_	
32-19	4084-4094	executions	_	_	
32-20	4095-4099	that	_	_	
32-21	4100-4103	are	_	_	
32-22	4104-4108	hard	_	_	
32-23	4109-4111	to	_	_	
32-24	4112-4119	examine	_	_	
32-25	4120-4123	and	_	_	
32-26	4124-4130	reason	_	_	
32-27	4131-4136	about	_	_	
32-28	4137-4140	for	_	_	
32-29	4141-4152	correctness	_	_	
32-30	4152-4153	.	_	_	

#Text=The designer can address the
#Text=problem only with the assitance of mechanical 
#Text=tools that help in systematic validation 
#Text=of the smart contract. 
#Text=
#Text=
#Text=
#Text=### Smart contract models 
#Text=To appreciate validation,
#Text=it is worth bearing in mind that a smart contract
#Text=is a model of the original legal contract
#Text=signed between the contracting parties.
33-1	4154-4157	The	_	_	
33-2	4158-4166	designer	_	_	
33-3	4167-4170	can	_	_	
33-4	4171-4178	address	_	_	
33-5	4179-4182	the	_	_	
33-6	4183-4190	problem	_	_	
33-7	4191-4195	only	_	_	
33-8	4196-4200	with	_	_	
33-9	4201-4204	the	_	_	
33-10	4205-4214	assitance	_	_	
33-11	4215-4217	of	_	_	
33-12	4218-4228	mechanical	_	_	
33-13	4230-4235	tools	_	_	
33-14	4236-4240	that	_	_	
33-15	4241-4245	help	_	_	
33-16	4246-4248	in	_	_	
33-17	4249-4259	systematic	_	_	
33-18	4260-4270	validation	_	_	
33-19	4272-4274	of	_	_	
33-20	4275-4278	the	_	_	
33-21	4279-4284	smart	_	_	
33-22	4285-4293	contract	_	_	
33-23	4293-4294	.	_	_	
33-24	4299-4300	#	_	_	
33-25	4300-4301	#	_	_	
33-26	4301-4302	#	_	_	
33-27	4303-4308	Smart	_	_	
33-28	4309-4317	contract	_	_	
33-29	4318-4324	models	_	_	
33-30	4326-4328	To	_	_	
33-31	4329-4339	appreciate	_	_	
33-32	4340-4350	validation	_	_	
33-33	4350-4351	,	_	_	
33-34	4352-4354	it	_	_	
33-35	4355-4357	is	_	_	
33-36	4358-4363	worth	_	_	
33-37	4364-4371	bearing	_	_	
33-38	4372-4374	in	_	_	
33-39	4375-4379	mind	_	_	
33-40	4380-4384	that	_	_	
33-41	4385-4386	a	_	_	
33-42	4387-4392	smart	_	_	
33-43	4393-4401	contract	_	_	
33-44	4402-4404	is	_	_	
33-45	4405-4406	a	_	_	
33-46	4407-4412	model	_	_	
33-47	4413-4415	of	_	_	
33-48	4416-4419	the	_	_	
33-49	4420-4428	original	_	_	
33-50	4429-4434	legal	_	_	
33-51	4435-4443	contract	_	_	
33-52	4444-4450	signed	_	_	
33-53	4451-4458	between	_	_	
33-54	4459-4462	the	_	_	
33-55	4463-4474	contracting	_	_	
33-56	4475-4482	parties	_	_	
33-57	4482-4483	.	_	_	

#Text=Such
#Text=a model is expressed at different levels of
#Text=abstractions ranging from high level normative
#Text=statements to execution code, such as Ethereum EVM
#Text=bytecode.
34-1	4484-4488	Such	_	_	
34-2	4489-4490	a	_	_	
34-3	4491-4496	model	_	_	
34-4	4497-4499	is	_	_	
34-5	4500-4509	expressed	_	_	
34-6	4510-4512	at	_	_	
34-7	4513-4522	different	_	_	
34-8	4523-4529	levels	_	_	
34-9	4530-4532	of	_	_	
34-10	4533-4545	abstractions	_	_	
34-11	4546-4553	ranging	_	_	
34-12	4554-4558	from	_	_	
34-13	4559-4563	high	_	_	
34-14	4564-4569	level	_	_	
34-15	4570-4579	normative	_	_	
34-16	4580-4590	statements	_	_	
34-17	4591-4593	to	_	_	
34-18	4594-4603	execution	_	_	
34-19	4604-4608	code	_	_	
34-20	4608-4609	,	_	_	
34-21	4610-4614	such	_	_	
34-22	4615-4617	as	_	_	
34-23	4618-4626	Ethereum	_	_	
34-24	4627-4630	EVM	_	_	
34-25	4631-4639	bytecode	_	_	
34-26	4639-4640	.	_	_	

#Text=Each model (strictly speaking, each
#Text=version of the model) is liable to errors that
#Text=correspond to its level of abstraction.
35-1	4641-4645	Each	_	_	
35-2	4646-4651	model	_	_	
35-3	4652-4653	(	_	_	
35-4	4653-4661	strictly	_	_	
35-5	4662-4670	speaking	_	_	
35-6	4670-4671	,	_	_	
35-7	4672-4676	each	_	_	
35-8	4677-4684	version	_	_	
35-9	4685-4687	of	_	_	
35-10	4688-4691	the	_	_	
35-11	4692-4697	model	_	_	
35-12	4697-4698	)	_	_	
35-13	4699-4701	is	_	_	
35-14	4702-4708	liable	_	_	
35-15	4709-4711	to	_	_	
35-16	4712-4718	errors	_	_	
35-17	4719-4723	that	_	_	
35-18	4724-4734	correspond	_	_	
35-19	4735-4737	to	_	_	
35-20	4738-4741	its	_	_	
35-21	4742-4747	level	_	_	
35-22	4748-4750	of	_	_	
35-23	4751-4762	abstraction	_	_	
35-24	4762-4763	.	_	_	

#Text=**Design time models:** a design time model is liable
#Text=to errors included in the contractual clauses:
#Text=conflicting clauses, duplicated clauses, missing
#Text=clauses and so on.
36-1	4766-4767	*	_	_	
36-2	4767-4768	*	_	_	
36-3	4768-4774	Design	_	_	
36-4	4775-4779	time	_	_	
36-5	4780-4786	models	_	_	
36-6	4786-4787	:	_	_	
36-7	4787-4788	*	_	_	
36-8	4788-4789	*	_	_	
36-9	4790-4791	a	_	_	
36-10	4792-4798	design	_	_	
36-11	4799-4803	time	_	_	
36-12	4804-4809	model	_	_	
36-13	4810-4812	is	_	_	
36-14	4813-4819	liable	_	_	
36-15	4820-4822	to	_	_	
36-16	4823-4829	errors	_	_	
36-17	4830-4838	included	_	_	
36-18	4839-4841	in	_	_	
36-19	4842-4845	the	_	_	
36-20	4846-4857	contractual	_	_	
36-21	4858-4865	clauses	_	_	
36-22	4865-4866	:	_	_	
36-23	4867-4878	conflicting	_	_	
36-24	4879-4886	clauses	_	_	
36-25	4886-4887	,	_	_	
36-26	4888-4898	duplicated	_	_	
36-27	4899-4906	clauses	_	_	
36-28	4906-4907	,	_	_	
36-29	4908-4915	missing	_	_	
36-30	4916-4923	clauses	_	_	
36-31	4924-4927	and	_	_	
36-32	4928-4930	so	_	_	
36-33	4931-4933	on	_	_	
36-34	4933-4934	.	_	_	

#Text=See for example,
#Text=[Model Checking Correctness Properties of a Middleware Service for Contract Compliance, Carlos Molina-Jimenez, et.al.]
37-1	4935-4938	See	_	_	
37-2	4939-4942	for	_	_	
37-3	4943-4950	example	_	_	
37-4	4950-4951	,	_	_	
37-5	4952-4953	[	_	_	
37-6	4953-4958	Model	*[2]	PUBLICATION[2]	
37-7	4959-4967	Checking	*[2]	PUBLICATION[2]	
37-8	4968-4979	Correctness	*[2]	PUBLICATION[2]	
37-9	4980-4990	Properties	*[2]	PUBLICATION[2]	
37-10	4991-4993	of	*[2]	PUBLICATION[2]	
37-11	4994-4995	a	*[2]	PUBLICATION[2]	
37-12	4996-5006	Middleware	*[2]	PUBLICATION[2]	
37-13	5007-5014	Service	*[2]	PUBLICATION[2]	
37-14	5015-5018	for	*[2]	PUBLICATION[2]	
37-15	5019-5027	Contract	*[2]	PUBLICATION[2]	
37-16	5028-5038	Compliance	*[2]	PUBLICATION[2]	
37-17	5038-5039	,	_	_	
37-18	5040-5046	Carlos	_	_	
37-19	5047-5061	Molina-Jimenez	_	_	
37-20	5061-5062	,	_	_	
37-21	5063-5068	et.al	_	_	
37-22	5068-5069	.	_	_	
37-23	5069-5070	]	_	_	

#Text=(http://delivery.acm.org/10.1145/1660000/1657758/p13-molina-jimenez.pdf "model checking paper").
38-1	5070-5071	(	_	_	
38-2	5071-5075	http	_	_	
38-3	5075-5076	:	_	_	
38-4	5076-5077	/	_	_	
38-5	5077-5078	/	_	_	
38-6	5078-5094	delivery.acm.org	_	_	
38-7	5094-5095	/	_	_	
38-8	5095-5102	10.1145	_	_	
38-9	5102-5103	/	_	_	
38-10	5103-5110	1660000	_	_	
38-11	5110-5111	/	_	_	
38-12	5111-5118	1657758	_	_	
38-13	5118-5119	/	_	_	
38-14	5119-5122	p13	_	_	
38-15	5122-5123	-	_	_	
38-16	5123-5141	molina-jimenez.pdf	_	_	
38-17	5142-5143	"	_	_	
38-18	5143-5148	model	_	_	
38-19	5149-5157	checking	_	_	
38-20	5158-5163	paper	_	_	
38-21	5163-5164	"	_	_	
38-22	5164-5165	)	_	_	
38-23	5165-5166	.	_	_	

#Text=**Implementation time models:** an implementation
#Text=time model is liable to errors related to the implementation 
#Text=language and to the mapping that the programmer implements
#Text=to convert the abstract model of the smart contract into
#Text=executable code.
39-1	5169-5170	*	_	_	
39-2	5170-5171	*	_	_	
39-3	5171-5185	Implementation	_	_	
39-4	5186-5190	time	_	_	
39-5	5191-5197	models	_	_	
39-6	5197-5198	:	_	_	
39-7	5198-5199	*	_	_	
39-8	5199-5200	*	_	_	
39-9	5201-5203	an	_	_	
39-10	5204-5218	implementation	_	_	
39-11	5219-5223	time	_	_	
39-12	5224-5229	model	_	_	
39-13	5230-5232	is	_	_	
39-14	5233-5239	liable	_	_	
39-15	5240-5242	to	_	_	
39-16	5243-5249	errors	_	_	
39-17	5250-5257	related	_	_	
39-18	5258-5260	to	_	_	
39-19	5261-5264	the	_	_	
39-20	5265-5279	implementation	_	_	
39-21	5281-5289	language	_	_	
39-22	5290-5293	and	_	_	
39-23	5294-5296	to	_	_	
39-24	5297-5300	the	_	_	
39-25	5301-5308	mapping	_	_	
39-26	5309-5313	that	_	_	
39-27	5314-5317	the	_	_	
39-28	5318-5328	programmer	_	_	
39-29	5329-5339	implements	_	_	
39-30	5340-5342	to	_	_	
39-31	5343-5350	convert	_	_	
39-32	5351-5354	the	_	_	
39-33	5355-5363	abstract	_	_	
39-34	5364-5369	model	_	_	
39-35	5370-5372	of	_	_	
39-36	5373-5376	the	_	_	
39-37	5377-5382	smart	_	_	
39-38	5383-5391	contract	_	_	
39-39	5392-5396	into	_	_	
39-40	5397-5407	executable	_	_	
39-41	5408-5412	code	_	_	
39-42	5412-5413	.	_	_	

#Text=The programmer needs skill to interprete the
#Text=abstract model of the smart contract correctly and to
#Text=map it accurately.
40-1	5414-5417	The	_	_	
40-2	5418-5428	programmer	_	_	
40-3	5429-5434	needs	_	_	
40-4	5435-5440	skill	_	_	
40-5	5441-5443	to	_	_	
40-6	5444-5454	interprete	_	_	
40-7	5455-5458	the	_	_	
40-8	5459-5467	abstract	_	_	
40-9	5468-5473	model	_	_	
40-10	5474-5476	of	_	_	
40-11	5477-5480	the	_	_	
40-12	5481-5486	smart	_	_	
40-13	5487-5495	contract	_	_	
40-14	5496-5505	correctly	_	_	
40-15	5506-5509	and	_	_	
40-16	5510-5512	to	_	_	
40-17	5513-5516	map	_	_	
40-18	5517-5519	it	_	_	
40-19	5520-5530	accurately	_	_	
40-20	5530-5531	.	_	_	

#Text=For example, smart contracts implemented 
#Text=in Solidity language are known to be at risk of being
#Text=afflicted by reentrancy, unchecked send, integer
#Text=overflow, and other language related errors.
41-1	5533-5536	For	_	_	
41-2	5537-5544	example	_	_	
41-3	5544-5545	,	_	_	
41-4	5546-5551	smart	_	_	
41-5	5552-5561	contracts	_	_	
41-6	5562-5573	implemented	_	_	
41-7	5575-5577	in	_	_	
41-8	5578-5586	Solidity	*	PROGLANG	
41-9	5587-5595	language	_	_	
41-10	5596-5599	are	_	_	
41-11	5600-5605	known	_	_	
41-12	5606-5608	to	_	_	
41-13	5609-5611	be	_	_	
41-14	5612-5614	at	_	_	
41-15	5615-5619	risk	_	_	
41-16	5620-5622	of	_	_	
41-17	5623-5628	being	_	_	
41-18	5629-5638	afflicted	_	_	
41-19	5639-5641	by	_	_	
41-20	5642-5652	reentrancy	_	_	
41-21	5652-5653	,	_	_	
41-22	5654-5663	unchecked	_	_	
41-23	5664-5668	send	_	_	
41-24	5668-5669	,	_	_	
41-25	5670-5677	integer	_	_	
41-26	5678-5686	overflow	_	_	
41-27	5686-5687	,	_	_	
41-28	5688-5691	and	_	_	
41-29	5692-5697	other	_	_	
41-30	5698-5706	language	_	_	
41-31	5707-5714	related	_	_	
41-32	5715-5721	errors	_	_	
41-33	5721-5722	.	_	_	

#Text=See for example,
#Text=[ZEUS: Analyzing Safety of Smart Contracts, Sukrit at. al.]
42-1	5723-5726	See	_	_	
42-2	5727-5730	for	_	_	
42-3	5731-5738	example	_	_	
42-4	5738-5739	,	_	_	
42-5	5740-5741	[	_	_	
42-6	5741-5745	ZEUS	*[3]	PUBLICATION[3]	
42-7	5745-5746	:	*[3]	PUBLICATION[3]	
42-8	5747-5756	Analyzing	*[3]	PUBLICATION[3]	
42-9	5757-5763	Safety	*[3]	PUBLICATION[3]	
42-10	5764-5766	of	*[3]	PUBLICATION[3]	
42-11	5767-5772	Smart	*[3]	PUBLICATION[3]	
42-12	5773-5782	Contracts	*[3]	PUBLICATION[3]	
42-13	5782-5783	,	_	_	
42-14	5784-5790	Sukrit	_	_	
42-15	5791-5793	at	_	_	
42-16	5793-5794	.	_	_	
42-17	5795-5797	al	_	_	
42-18	5797-5798	.	_	_	
42-19	5798-5799	]	_	_	

#Text=(http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_09-1_Kalra_paper.pdf "ZEUS paper").
43-1	5799-5800	(	_	_	
43-2	5800-5804	http	_	_	
43-3	5804-5805	:	_	_	
43-4	5805-5806	/	_	_	
43-5	5806-5807	/	_	_	
43-6	5807-5829	wp.internetsociety.org	_	_	
43-7	5829-5830	/	_	_	
43-8	5830-5834	ndss	_	_	
43-9	5834-5835	/	_	_	
43-10	5835-5845	wp-content	_	_	
43-11	5845-5846	/	_	_	
43-12	5846-5853	uploads	_	_	
43-13	5853-5854	/	_	_	
43-14	5854-5859	sites	_	_	
43-15	5859-5860	/	_	_	
43-16	5860-5862	25	_	_	
43-17	5862-5863	/	_	_	
43-18	5863-5867	2018	_	_	
43-19	5867-5868	/	_	_	
43-20	5868-5870	02	_	_	
43-21	5870-5871	/	_	_	
43-22	5871-5879	ndss2018	_	_	
43-23	5879-5880	_	_	_	
43-24	5880-5882	09	_	_	
43-25	5882-5883	-	_	_	
43-26	5883-5884	1	_	_	
43-27	5884-5885	_	_	_	
43-28	5885-5900	Kalra_paper.pdf	_	_	
43-29	5901-5902	"	_	_	
43-30	5902-5906	ZEUS	_	_	
43-31	5907-5912	paper	_	_	
43-32	5912-5913	"	_	_	
43-33	5913-5914	)	_	_	
43-34	5914-5915	.	_	_	

#Text=**Mapping from model into model*** Errors (precisely faults) 
#Text=  are likely to be included during the building of the  models 
#Text=  themselves and during the conversion (mapping) from one model into the
#Text=  next model below.
44-1	5918-5919	*	_	_	
44-2	5919-5920	*	_	_	
44-3	5920-5927	Mapping	_	_	
44-4	5928-5932	from	_	_	
44-5	5933-5938	model	_	_	
44-6	5939-5943	into	_	_	
44-7	5944-5949	model	_	_	
44-8	5949-5950	*	_	_	
44-9	5950-5951	*	_	_	
44-10	5951-5952	*	_	_	
44-11	5953-5959	Errors	_	_	
44-12	5960-5961	(	_	_	
44-13	5961-5970	precisely	_	_	
44-14	5971-5977	faults	_	_	
44-15	5977-5978	)	_	_	
44-16	5982-5985	are	_	_	
44-17	5986-5992	likely	_	_	
44-18	5993-5995	to	_	_	
44-19	5996-5998	be	_	_	
44-20	5999-6007	included	_	_	
44-21	6008-6014	during	_	_	
44-22	6015-6018	the	_	_	
44-23	6019-6027	building	_	_	
44-24	6028-6030	of	_	_	
44-25	6031-6034	the	_	_	
44-26	6036-6042	models	_	_	
44-27	6046-6056	themselves	_	_	
44-28	6057-6060	and	_	_	
44-29	6061-6067	during	_	_	
44-30	6068-6071	the	_	_	
44-31	6072-6082	conversion	_	_	
44-32	6083-6084	(	_	_	
44-33	6084-6091	mapping	_	_	
44-34	6091-6092	)	_	_	
44-35	6093-6097	from	_	_	
44-36	6098-6101	one	_	_	
44-37	6102-6107	model	_	_	
44-38	6108-6112	into	_	_	
44-39	6113-6116	the	_	_	
44-40	6119-6123	next	_	_	
44-41	6124-6129	model	_	_	
44-42	6130-6135	below	_	_	
44-43	6135-6136	.	_	_	

#Text=This is due to the semantic
#Text=  gap between models represented at different levels
#Text=  of abstractions; mapping from one statement at
#Text=  a given model to the next model below is not one-to-one,
#Text=  but many-to-many.
45-1	6137-6141	This	_	_	
45-2	6142-6144	is	_	_	
45-3	6145-6148	due	_	_	
45-4	6149-6151	to	_	_	
45-5	6152-6155	the	_	_	
45-6	6156-6164	semantic	_	_	
45-7	6167-6170	gap	_	_	
45-8	6171-6178	between	_	_	
45-9	6179-6185	models	_	_	
45-10	6186-6197	represented	_	_	
45-11	6198-6200	at	_	_	
45-12	6201-6210	different	_	_	
45-13	6211-6217	levels	_	_	
45-14	6220-6222	of	_	_	
45-15	6223-6235	abstractions	_	_	
45-16	6235-6236	;	_	_	
45-17	6237-6244	mapping	_	_	
45-18	6245-6249	from	_	_	
45-19	6250-6253	one	_	_	
45-20	6254-6263	statement	_	_	
45-21	6264-6266	at	_	_	
45-22	6269-6270	a	_	_	
45-23	6271-6276	given	_	_	
45-24	6277-6282	model	_	_	
45-25	6283-6285	to	_	_	
45-26	6286-6289	the	_	_	
45-27	6290-6294	next	_	_	
45-28	6295-6300	model	_	_	
45-29	6301-6306	below	_	_	
45-30	6307-6309	is	_	_	
45-31	6310-6313	not	_	_	
45-32	6314-6324	one-to-one	_	_	
45-33	6324-6325	,	_	_	
45-34	6328-6331	but	_	_	
45-35	6332-6344	many-to-many	_	_	
45-36	6344-6345	.	_	_	

#Text=See for example,
#Text=  [Establishing Conformance Between Contracts and Choreographies, Carlos Molina-Jimenez, at. al.]
46-1	6346-6349	See	_	_	
46-2	6350-6353	for	_	_	
46-3	6354-6361	example	_	_	
46-4	6361-6362	,	_	_	
46-5	6365-6366	[	_	_	
46-6	6366-6378	Establishing	*[4]	PUBLICATION[4]	
46-7	6379-6390	Conformance	*[4]	PUBLICATION[4]	
46-8	6391-6398	Between	*[4]	PUBLICATION[4]	
46-9	6399-6408	Contracts	*[4]	PUBLICATION[4]	
46-10	6409-6412	and	*[4]	PUBLICATION[4]	
46-11	6413-6427	Choreographies	*[4]	PUBLICATION[4]	
46-12	6427-6428	,	_	_	
46-13	6429-6435	Carlos	_	_	
46-14	6436-6450	Molina-Jimenez	_	_	
46-15	6450-6451	,	_	_	
46-16	6452-6454	at	_	_	
46-17	6454-6455	.	_	_	
46-18	6456-6458	al	_	_	
46-19	6458-6459	.	_	_	
46-20	6459-6460	]	_	_	

#Text=(https://ieeexplore.ieee.org/stamp/stamp.jsp?
47-1	6460-6461	(	_	_	
47-2	6461-6466	https	_	_	
47-3	6466-6467	:	_	_	
47-4	6467-6468	/	_	_	
47-5	6468-6469	/	_	_	
47-6	6469-6488	ieeexplore.ieee.org	_	_	
47-7	6488-6489	/	_	_	
47-8	6489-6494	stamp	_	_	
47-9	6494-6495	/	_	_	
47-10	6495-6504	stamp.jsp	_	_	
47-11	6504-6505	?	_	_	

#Text=tp=&arnumber=6642860 "Vienna paper").
48-1	6505-6507	tp	_	_	
48-2	6507-6508	=	_	_	
48-3	6508-6509	&	_	_	
48-4	6509-6517	arnumber	_	_	
48-5	6517-6518	=	_	_	
48-6	6518-6525	6642860	_	_	
48-7	6526-6527	"	_	_	
48-8	6527-6533	Vienna	_	_	
48-9	6534-6539	paper	_	_	
48-10	6539-6540	"	_	_	
48-11	6540-6541	)	_	_	
48-12	6541-6542	.	_	_	

#Text=Even if the mapping is correct, 
#Text=  sometimes it becomes relevant to learn, how did the
#Text=  programmer map a given statement into implementation
#Text=  code, out of several correct alternatives?
49-1	6543-6547	Even	_	_	
49-2	6548-6550	if	_	_	
49-3	6551-6554	the	_	_	
49-4	6555-6562	mapping	_	_	
49-5	6563-6565	is	_	_	
49-6	6566-6573	correct	_	_	
49-7	6573-6574	,	_	_	
49-8	6578-6587	sometimes	_	_	
49-9	6588-6590	it	_	_	
49-10	6591-6598	becomes	_	_	
49-11	6599-6607	relevant	_	_	
49-12	6608-6610	to	_	_	
49-13	6611-6616	learn	_	_	
49-14	6616-6617	,	_	_	
49-15	6618-6621	how	_	_	
49-16	6622-6625	did	_	_	
49-17	6626-6629	the	_	_	
49-18	6632-6642	programmer	_	_	
49-19	6643-6646	map	_	_	
49-20	6647-6648	a	_	_	
49-21	6649-6654	given	_	_	
49-22	6655-6664	statement	_	_	
49-23	6665-6669	into	_	_	
49-24	6670-6684	implementation	_	_	
49-25	6687-6691	code	_	_	
49-26	6691-6692	,	_	_	
49-27	6693-6696	out	_	_	
49-28	6697-6699	of	_	_	
49-29	6700-6707	several	_	_	
49-30	6708-6715	correct	_	_	
49-31	6716-6728	alternatives	_	_	
49-32	6728-6729	?	_	_	

#Text=If you are a developer interested in building
#Text=realiable smart contracts, we suggest the following approach:
#Text=
#Text=1.
50-1	6732-6734	If	_	_	
50-2	6735-6738	you	_	_	
50-3	6739-6742	are	_	_	
50-4	6743-6744	a	_	_	
50-5	6745-6754	developer	_	_	
50-6	6755-6765	interested	_	_	
50-7	6766-6768	in	_	_	
50-8	6769-6777	building	_	_	
50-9	6778-6787	realiable	_	_	
50-10	6788-6793	smart	_	_	
50-11	6794-6803	contracts	_	_	
50-12	6803-6804	,	_	_	
50-13	6805-6807	we	_	_	
50-14	6808-6815	suggest	_	_	
50-15	6816-6819	the	_	_	
50-16	6820-6829	following	_	_	
50-17	6830-6838	approach	_	_	
50-18	6838-6839	:	_	_	
50-19	6841-6842	1	_	_	
50-20	6842-6843	.	_	_	

#Text=Include exception handling in the design of the smart contract
#Text=   under development.
51-1	6844-6851	Include	_	_	
51-2	6852-6861	exception	_	_	
51-3	6862-6870	handling	_	_	
51-4	6871-6873	in	_	_	
51-5	6874-6877	the	_	_	
51-6	6878-6884	design	_	_	
51-7	6885-6887	of	_	_	
51-8	6888-6891	the	_	_	
51-9	6892-6897	smart	_	_	
51-10	6898-6906	contract	_	_	
51-11	6910-6915	under	_	_	
51-12	6916-6927	development	_	_	
51-13	6927-6928	.	_	_	

#Text=Exception handling should be central to 
#Text=   your design rather than an afterthought component.  
#Text=2.
52-1	6929-6938	Exception	_	_	
52-2	6939-6947	handling	_	_	
52-3	6948-6954	should	_	_	
52-4	6955-6957	be	_	_	
52-5	6958-6965	central	_	_	
52-6	6966-6968	to	_	_	
52-7	6973-6977	your	_	_	
52-8	6978-6984	design	_	_	
52-9	6985-6991	rather	_	_	
52-10	6992-6996	than	_	_	
52-11	6997-6999	an	_	_	
52-12	7000-7012	afterthought	_	_	
52-13	7013-7022	component	_	_	
52-14	7022-7023	.	_	_	
52-15	7026-7027	2	_	_	
52-16	7027-7028	.	_	_	

#Text=Build an abstract model of the smart contract and model
#Text=   check it with your favourite model checker, with one
#Text=   that has been specifically designed (or tuned to) for model checking
#Text=   smart contracts--if you have one.
53-1	7029-7034	Build	_	_	
53-2	7035-7037	an	_	_	
53-3	7038-7046	abstract	_	_	
53-4	7047-7052	model	_	_	
53-5	7053-7055	of	_	_	
53-6	7056-7059	the	_	_	
53-7	7060-7065	smart	_	_	
53-8	7066-7074	contract	_	_	
53-9	7075-7078	and	_	_	
53-10	7079-7084	model	_	_	
53-11	7088-7093	check	_	_	
53-12	7094-7096	it	_	_	
53-13	7097-7101	with	_	_	
53-14	7102-7106	your	_	_	
53-15	7107-7116	favourite	_	_	
53-16	7117-7122	model	_	_	
53-17	7123-7130	checker	_	_	
53-18	7130-7131	,	_	_	
53-19	7132-7136	with	_	_	
53-20	7137-7140	one	_	_	
53-21	7144-7148	that	_	_	
53-22	7149-7152	has	_	_	
53-23	7153-7157	been	_	_	
53-24	7158-7170	specifically	_	_	
53-25	7171-7179	designed	_	_	
53-26	7180-7181	(	_	_	
53-27	7181-7183	or	_	_	
53-28	7184-7189	tuned	_	_	
53-29	7190-7192	to	_	_	
53-30	7192-7193	)	_	_	
53-31	7194-7197	for	_	_	
53-32	7198-7203	model	_	_	
53-33	7204-7212	checking	_	_	
53-34	7216-7221	smart	_	_	
53-35	7222-7231	contracts	_	_	
53-36	7231-7232	-	_	_	
53-37	7232-7233	-	_	_	
53-38	7233-7235	if	_	_	
53-39	7236-7239	you	_	_	
53-40	7240-7244	have	_	_	
53-41	7245-7248	one	_	_	
53-42	7248-7249	.	_	_	

#Text=This is the stage where you need to verify that you 
#Text=   have not forgotten execution paths and that you have included
#Text=   logic to react to both normal and abnormal (exceptional)
#Text=   situations.
54-1	7253-7257	This	_	_	
54-2	7258-7260	is	_	_	
54-3	7261-7264	the	_	_	
54-4	7265-7270	stage	_	_	
54-5	7271-7276	where	_	_	
54-6	7277-7280	you	_	_	
54-7	7281-7285	need	_	_	
54-8	7286-7288	to	_	_	
54-9	7289-7295	verify	_	_	
54-10	7296-7300	that	_	_	
54-11	7301-7304	you	_	_	
54-12	7309-7313	have	_	_	
54-13	7314-7317	not	_	_	
54-14	7318-7327	forgotten	_	_	
54-15	7328-7337	execution	_	_	
54-16	7338-7343	paths	_	_	
54-17	7344-7347	and	_	_	
54-18	7348-7352	that	_	_	
54-19	7353-7356	you	_	_	
54-20	7357-7361	have	_	_	
54-21	7362-7370	included	_	_	
54-22	7374-7379	logic	_	_	
54-23	7380-7382	to	_	_	
54-24	7383-7388	react	_	_	
54-25	7389-7391	to	_	_	
54-26	7392-7396	both	_	_	
54-27	7397-7403	normal	_	_	
54-28	7404-7407	and	_	_	
54-29	7408-7416	abnormal	_	_	
54-30	7417-7418	(	_	_	
54-31	7418-7429	exceptional	_	_	
54-32	7429-7430	)	_	_	
54-33	7434-7444	situations	_	_	
54-34	7444-7445	.	_	_	

#Text=For example, check that if a cancellation
#Text=   takes place, the smart contract will not complete before
#Text=   the buyer is refunded.
55-1	7446-7449	For	_	_	
55-2	7450-7457	example	_	_	
55-3	7457-7458	,	_	_	
55-4	7459-7464	check	_	_	
55-5	7465-7469	that	_	_	
55-6	7470-7472	if	_	_	
55-7	7473-7474	a	_	_	
55-8	7475-7487	cancellation	_	_	
55-9	7491-7496	takes	_	_	
55-10	7497-7502	place	_	_	
55-11	7502-7503	,	_	_	
55-12	7504-7507	the	_	_	
55-13	7508-7513	smart	_	_	
55-14	7514-7522	contract	_	_	
55-15	7523-7527	will	_	_	
55-16	7528-7531	not	_	_	
55-17	7532-7540	complete	_	_	
55-18	7541-7547	before	_	_	
55-19	7551-7554	the	_	_	
55-20	7555-7560	buyer	_	_	
55-21	7561-7563	is	_	_	
55-22	7564-7572	refunded	_	_	
55-23	7572-7573	.	_	_	

#Text=Check that the smart contract
#Text=   does not allow the seller to double charge the buyer
#Text=   or that the latter does not get items for free.
#Text=3.
56-1	7574-7579	Check	_	_	
56-2	7580-7584	that	_	_	
56-3	7585-7588	the	_	_	
56-4	7589-7594	smart	_	_	
56-5	7595-7603	contract	_	_	
56-6	7607-7611	does	_	_	
56-7	7612-7615	not	_	_	
56-8	7616-7621	allow	_	_	
56-9	7622-7625	the	_	_	
56-10	7626-7632	seller	_	_	
56-11	7633-7635	to	_	_	
56-12	7636-7642	double	_	_	
56-13	7643-7649	charge	_	_	
56-14	7650-7653	the	_	_	
56-15	7654-7659	buyer	_	_	
56-16	7663-7665	or	_	_	
56-17	7666-7670	that	_	_	
56-18	7671-7674	the	_	_	
56-19	7675-7681	latter	_	_	
56-20	7682-7686	does	_	_	
56-21	7687-7690	not	_	_	
56-22	7691-7694	get	_	_	
56-23	7695-7700	items	_	_	
56-24	7701-7704	for	_	_	
56-25	7705-7709	free	_	_	
56-26	7709-7710	.	_	_	
56-27	7711-7712	3	_	_	
56-28	7712-7713	.	_	_	

#Text=Build the executable model of your smart contract and
#Text=   test it.
57-1	7714-7719	Build	_	_	
57-2	7720-7723	the	_	_	
57-3	7724-7734	executable	_	_	
57-4	7735-7740	model	_	_	
57-5	7741-7743	of	_	_	
57-6	7744-7748	your	_	_	
57-7	7749-7754	smart	_	_	
57-8	7755-7763	contract	_	_	
57-9	7764-7767	and	_	_	
57-10	7771-7775	test	_	_	
57-11	7776-7778	it	_	_	
57-12	7778-7779	.	_	_	

#Text=There are other techniques that can be used
#Text=   for verification of executable code (for example,
#Text=   symbolic execution) but we are following 
#Text=   testing here.
58-1	7780-7785	There	_	_	
58-2	7786-7789	are	_	_	
58-3	7790-7795	other	_	_	
58-4	7796-7806	techniques	_	_	
58-5	7807-7811	that	_	_	
58-6	7812-7815	can	_	_	
58-7	7816-7818	be	_	_	
58-8	7819-7823	used	_	_	
58-9	7827-7830	for	_	_	
58-10	7831-7843	verification	_	_	
58-11	7844-7846	of	_	_	
58-12	7847-7857	executable	_	_	
58-13	7858-7862	code	_	_	
58-14	7863-7864	(	_	_	
58-15	7864-7867	for	_	_	
58-16	7868-7875	example	_	_	
58-17	7875-7876	,	_	_	
58-18	7880-7888	symbolic	_	_	
58-19	7889-7898	execution	_	_	
58-20	7898-7899	)	_	_	
58-21	7900-7903	but	_	_	
58-22	7904-7906	we	_	_	
58-23	7907-7910	are	_	_	
58-24	7911-7920	following	_	_	
58-25	7925-7932	testing	_	_	
58-26	7933-7937	here	_	_	
58-27	7937-7938	.	_	_	

#Text=Test (exercise) the actual 
#Text=   implementation deployed in the actual infrastructure.
59-1	7939-7943	Test	_	_	
59-2	7944-7945	(	_	_	
59-3	7945-7953	exercise	_	_	
59-4	7953-7954	)	_	_	
59-5	7955-7958	the	_	_	
59-6	7959-7965	actual	_	_	
59-7	7970-7984	implementation	_	_	
59-8	7985-7993	deployed	_	_	
59-9	7994-7996	in	_	_	
59-10	7997-8000	the	_	_	
59-11	8001-8007	actual	_	_	
59-12	8008-8022	infrastructure	_	_	
59-13	8022-8023	.	_	_	

#Text=If
#Text=   possible, exercise all the executions sequences encoded
#Text=   in the smart contract--this is perfectly possible for 
#Text=   small contracts.
60-1	8024-8026	If	_	_	
60-2	8030-8038	possible	_	_	
60-3	8038-8039	,	_	_	
60-4	8040-8048	exercise	_	_	
60-5	8049-8052	all	_	_	
60-6	8053-8056	the	_	_	
60-7	8057-8067	executions	_	_	
60-8	8068-8077	sequences	_	_	
60-9	8078-8085	encoded	_	_	
60-10	8089-8091	in	_	_	
60-11	8092-8095	the	_	_	
60-12	8096-8101	smart	_	_	
60-13	8102-8110	contract	_	_	
60-14	8110-8111	-	_	_	
60-15	8111-8112	-	_	_	
60-16	8112-8116	this	_	_	
60-17	8117-8119	is	_	_	
60-18	8120-8129	perfectly	_	_	
60-19	8130-8138	possible	_	_	
60-20	8139-8142	for	_	_	
60-21	8147-8152	small	_	_	
60-22	8153-8162	contracts	_	_	
60-23	8162-8163	.	_	_	

#Text=Do not forget to verify that the executable smart
#Text=   contract conforms to the highest model of the
#Text=   smart contract--likely to be in plain English business
#Text=   language.
61-1	8167-8169	Do	_	_	
61-2	8170-8173	not	_	_	
61-3	8174-8180	forget	_	_	
61-4	8181-8183	to	_	_	
61-5	8184-8190	verify	_	_	
61-6	8191-8195	that	_	_	
61-7	8196-8199	the	_	_	
61-8	8200-8210	executable	_	_	
61-9	8211-8216	smart	_	_	
61-10	8220-8228	contract	_	_	
61-11	8229-8237	conforms	_	_	
61-12	8238-8240	to	_	_	
61-13	8241-8244	the	_	_	
61-14	8245-8252	highest	_	_	
61-15	8253-8258	model	_	_	
61-16	8259-8261	of	_	_	
61-17	8262-8265	the	_	_	
61-18	8269-8274	smart	_	_	
61-19	8275-8283	contract	_	_	
61-20	8283-8284	-	_	_	
61-21	8284-8285	-	_	_	
61-22	8285-8291	likely	_	_	
61-23	8292-8294	to	_	_	
61-24	8295-8297	be	_	_	
61-25	8298-8300	in	_	_	
61-26	8301-8306	plain	_	_	
61-27	8307-8314	English	_	_	
61-28	8315-8323	business	_	_	
61-29	8327-8335	language	_	_	
61-30	8335-8336	.	_	_	

#Text=It is worth clarifying that these are standard software
#Text=engineering techniques for building reliable systems
#Text=and are referred to as fault-tolerance techniques.
62-1	8339-8341	It	_	_	
62-2	8342-8344	is	_	_	
62-3	8345-8350	worth	_	_	
62-4	8351-8361	clarifying	_	_	
62-5	8362-8366	that	_	_	
62-6	8367-8372	these	_	_	
62-7	8373-8376	are	_	_	
62-8	8377-8385	standard	_	_	
62-9	8386-8394	software	_	_	
62-10	8395-8406	engineering	_	_	
62-11	8407-8417	techniques	_	_	
62-12	8418-8421	for	_	_	
62-13	8422-8430	building	_	_	
62-14	8431-8439	reliable	_	_	
62-15	8440-8447	systems	_	_	
62-16	8448-8451	and	_	_	
62-17	8452-8455	are	_	_	
62-18	8456-8464	referred	_	_	
62-19	8465-8467	to	_	_	
62-20	8468-8470	as	_	_	
62-21	8471-8486	fault-tolerance	_	_	
62-22	8487-8497	techniques	_	_	
62-23	8497-8498	.	_	_	

#Text=However, perhaps due to the novelty of blockchain-based
#Text=applications, they have been largely ignored by developers
#Text=of smart contracts.
63-1	8499-8506	However	_	_	
63-2	8506-8507	,	_	_	
63-3	8508-8515	perhaps	_	_	
63-4	8516-8519	due	_	_	
63-5	8520-8522	to	_	_	
63-6	8523-8526	the	_	_	
63-7	8527-8534	novelty	_	_	
63-8	8535-8537	of	_	_	
63-9	8538-8554	blockchain-based	_	_	
63-10	8555-8567	applications	_	_	
63-11	8567-8568	,	_	_	
63-12	8569-8573	they	_	_	
63-13	8574-8578	have	_	_	
63-14	8579-8583	been	_	_	
63-15	8584-8591	largely	_	_	
63-16	8592-8599	ignored	_	_	
63-17	8600-8602	by	_	_	
63-18	8603-8613	developers	_	_	
63-19	8614-8616	of	_	_	
63-20	8617-8622	smart	_	_	
63-21	8623-8632	contracts	_	_	
63-22	8632-8633	.	_	_	

#Text=This comes as a surprise as a salient
#Text=particularity of smart contracts (in particular those
#Text=deployed on--blockchains) is that once deployed, they
#Text=are very hard to amend. 
#Text=
#Text=
#Text=
#Text=### Validation of smart contract models to remove faults
#Text=The approach that we are following in our research 
#Text=is shown in the figure.
64-1	8634-8638	This	_	_	
64-2	8639-8644	comes	_	_	
64-3	8645-8647	as	_	_	
64-4	8648-8649	a	_	_	
64-5	8650-8658	surprise	_	_	
64-6	8659-8661	as	_	_	
64-7	8662-8663	a	_	_	
64-8	8664-8671	salient	_	_	
64-9	8672-8685	particularity	_	_	
64-10	8686-8688	of	_	_	
64-11	8689-8694	smart	_	_	
64-12	8695-8704	contracts	_	_	
64-13	8705-8706	(	_	_	
64-14	8706-8708	in	_	_	
64-15	8709-8719	particular	_	_	
64-16	8720-8725	those	_	_	
64-17	8726-8734	deployed	_	_	
64-18	8735-8737	on	_	_	
64-19	8737-8738	-	_	_	
64-20	8738-8739	-	_	_	
64-21	8739-8750	blockchains	_	_	
64-22	8750-8751	)	_	_	
64-23	8752-8754	is	_	_	
64-24	8755-8759	that	_	_	
64-25	8760-8764	once	_	_	
64-26	8765-8773	deployed	_	_	
64-27	8773-8774	,	_	_	
64-28	8775-8779	they	_	_	
64-29	8780-8783	are	_	_	
64-30	8784-8788	very	_	_	
64-31	8789-8793	hard	_	_	
64-32	8794-8796	to	_	_	
64-33	8797-8802	amend	_	_	
64-34	8802-8803	.	_	_	
64-35	8808-8809	#	_	_	
64-36	8809-8810	#	_	_	
64-37	8810-8811	#	_	_	
64-38	8812-8822	Validation	_	_	
64-39	8823-8825	of	_	_	
64-40	8826-8831	smart	_	_	
64-41	8832-8840	contract	_	_	
64-42	8841-8847	models	_	_	
64-43	8848-8850	to	_	_	
64-44	8851-8857	remove	_	_	
64-45	8858-8864	faults	_	_	
64-46	8865-8868	The	_	_	
64-47	8869-8877	approach	_	_	
64-48	8878-8882	that	_	_	
64-49	8883-8885	we	_	_	
64-50	8886-8889	are	_	_	
64-51	8890-8899	following	_	_	
64-52	8900-8902	in	_	_	
64-53	8903-8906	our	_	_	
64-54	8907-8915	research	_	_	
64-55	8917-8919	is	_	_	
64-56	8920-8925	shown	_	_	
64-57	8926-8928	in	_	_	
64-58	8929-8932	the	_	_	
64-59	8933-8939	figure	_	_	
64-60	8939-8940	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
65-1	8942-8943	<	_	_	
65-2	8943-8944	p	_	_	
65-3	8945-8950	align	_	_	
65-4	8950-8951	=	_	_	
65-5	8951-8952	"	_	_	
65-6	8952-8958	center	_	_	
65-7	8958-8959	"	_	_	
65-8	8959-8960	>	_	_	
65-9	8963-8964	<	_	_	
65-10	8964-8967	img	_	_	
65-11	8968-8971	src	_	_	
65-12	8971-8972	=	_	_	
65-13	8972-8973	"	_	_	
65-14	8973-8974	.	_	_	

#Text=/figures/developmentOfReliableSmartContracts.png" 
#Text=   width="900" title="Development of reliable smart contracts
66-1	8974-8975	/	_	_	
66-2	8975-8982	figures	_	_	
66-3	8982-8983	/	_	_	
66-4	8983-9022	developmentOfReliableSmartContracts.png	_	_	
66-5	9022-9023	"	_	_	
66-6	9028-9033	width	_	_	
66-7	9033-9034	=	_	_	
66-8	9034-9035	"	_	_	
66-9	9035-9038	900	_	_	
66-10	9038-9039	"	_	_	
66-11	9040-9045	title	_	_	
66-12	9045-9046	=	_	_	
66-13	9046-9047	"	_	_	
66-14	9047-9058	Development	_	_	
66-15	9059-9061	of	_	_	
66-16	9062-9070	reliable	_	_	
66-17	9071-9076	smart	_	_	
66-18	9077-9086	contracts	_	_	

#Text=.
67-1	9086-9087	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=As shown in the figure,  we rely on exception handling
#Text=with formal validation of smart contracts.
68-1	9087-9088	"	_	_	
68-2	9088-9089	>	_	_	
68-3	9090-9091	<	_	_	
68-4	9091-9092	/	_	_	
68-5	9092-9093	p	_	_	
68-6	9093-9094	>	_	_	
68-7	9096-9098	As	_	_	
68-8	9099-9104	shown	_	_	
68-9	9105-9107	in	_	_	
68-10	9108-9111	the	_	_	
68-11	9112-9118	figure	_	_	
68-12	9118-9119	,	_	_	
68-13	9121-9123	we	_	_	
68-14	9124-9128	rely	_	_	
68-15	9129-9131	on	_	_	
68-16	9132-9141	exception	_	_	
68-17	9142-9150	handling	_	_	
68-18	9151-9155	with	_	_	
68-19	9156-9162	formal	_	_	
68-20	9163-9173	validation	_	_	
68-21	9174-9176	of	_	_	
68-22	9177-9182	smart	_	_	
68-23	9183-9192	contracts	_	_	
68-24	9192-9193	.	_	_	

#Text=Notice that
#Text=the box of the *exceptional smart contract behaviour* is
#Text=larger than the box of *normal smart contract behaviour*.
69-1	9194-9200	Notice	_	_	
69-2	9201-9205	that	_	_	
69-3	9206-9209	the	_	_	
69-4	9210-9213	box	_	_	
69-5	9214-9216	of	_	_	
69-6	9217-9220	the	_	_	
69-7	9221-9222	*	_	_	
69-8	9222-9233	exceptional	_	_	
69-9	9234-9239	smart	_	_	
69-10	9240-9248	contract	_	_	
69-11	9249-9258	behaviour	_	_	
69-12	9258-9259	*	_	_	
69-13	9260-9262	is	_	_	
69-14	9263-9269	larger	_	_	
69-15	9270-9274	than	_	_	
69-16	9275-9278	the	_	_	
69-17	9279-9282	box	_	_	
69-18	9283-9285	of	_	_	
69-19	9286-9287	*	_	_	
69-20	9287-9293	normal	_	_	
69-21	9294-9299	smart	_	_	
69-22	9300-9308	contract	_	_	
69-23	9309-9318	behaviour	_	_	
69-24	9318-9319	*	_	_	
69-25	9319-9320	.	_	_	

#Text=We
#Text=have drawn them like that to underline the fact that
#Text=exception handling code represents a large porcentage
#Text=of the whole code-some authors claim that it can be
#Text=as large as up to two-thirds.
70-1	9321-9323	We	_	_	
70-2	9324-9328	have	_	_	
70-3	9329-9334	drawn	_	_	
70-4	9335-9339	them	_	_	
70-5	9340-9344	like	_	_	
70-6	9345-9349	that	_	_	
70-7	9350-9352	to	_	_	
70-8	9353-9362	underline	_	_	
70-9	9363-9366	the	_	_	
70-10	9367-9371	fact	_	_	
70-11	9372-9376	that	_	_	
70-12	9377-9386	exception	_	_	
70-13	9387-9395	handling	_	_	
70-14	9396-9400	code	_	_	
70-15	9401-9411	represents	_	_	
70-16	9412-9413	a	_	_	
70-17	9414-9419	large	_	_	
70-18	9420-9430	porcentage	_	_	
70-19	9431-9433	of	_	_	
70-20	9434-9437	the	_	_	
70-21	9438-9443	whole	_	_	
70-22	9444-9453	code-some	_	_	
70-23	9454-9461	authors	_	_	
70-24	9462-9467	claim	_	_	
70-25	9468-9472	that	_	_	
70-26	9473-9475	it	_	_	
70-27	9476-9479	can	_	_	
70-28	9480-9482	be	_	_	
70-29	9483-9485	as	_	_	
70-30	9486-9491	large	_	_	
70-31	9492-9494	as	_	_	
70-32	9495-9497	up	_	_	
70-33	9498-9500	to	_	_	
70-34	9501-9511	two-thirds	_	_	
70-35	9511-9512	.	_	_	

#Text=Once the abstract model of the smart contract is
#Text=built, we model check and test it systematically to uncover and
#Text=remove faults.
71-1	9514-9518	Once	_	_	
71-2	9519-9522	the	_	_	
71-3	9523-9531	abstract	_	_	
71-4	9532-9537	model	_	_	
71-5	9538-9540	of	_	_	
71-6	9541-9544	the	_	_	
71-7	9545-9550	smart	_	_	
71-8	9551-9559	contract	_	_	
71-9	9560-9562	is	_	_	
71-10	9563-9568	built	_	_	
71-11	9568-9569	,	_	_	
71-12	9570-9572	we	_	_	
71-13	9573-9578	model	_	_	
71-14	9579-9584	check	_	_	
71-15	9585-9588	and	_	_	
71-16	9589-9593	test	_	_	
71-17	9594-9596	it	_	_	
71-18	9597-9611	systematically	_	_	
71-19	9612-9614	to	_	_	
71-20	9615-9622	uncover	_	_	
71-21	9623-9626	and	_	_	
71-22	9627-9633	remove	_	_	
71-23	9634-9640	faults	_	_	
71-24	9640-9641	.	_	_	

#Text=We stress that the programmer is
#Text=likely to produce an unreliable executable smart
#Text=contract out of a realiable abstract model.
72-1	9643-9645	We	_	_	
72-2	9646-9652	stress	_	_	
72-3	9653-9657	that	_	_	
72-4	9658-9661	the	_	_	
72-5	9662-9672	programmer	_	_	
72-6	9673-9675	is	_	_	
72-7	9676-9682	likely	_	_	
72-8	9683-9685	to	_	_	
72-9	9686-9693	produce	_	_	
72-10	9694-9696	an	_	_	
72-11	9697-9707	unreliable	_	_	
72-12	9708-9718	executable	_	_	
72-13	9719-9724	smart	_	_	
72-14	9725-9733	contract	_	_	
72-15	9734-9737	out	_	_	
72-16	9738-9740	of	_	_	
72-17	9741-9742	a	_	_	
72-18	9743-9752	realiable	_	_	
72-19	9753-9761	abstract	_	_	
72-20	9762-9767	model	_	_	
72-21	9767-9768	.	_	_	

#Text=We
#Text=introduce testing to uncover and remove potential
#Text=faults.
73-1	9769-9771	We	_	_	
73-2	9772-9781	introduce	_	_	
73-3	9782-9789	testing	_	_	
73-4	9790-9792	to	_	_	
73-5	9793-9800	uncover	_	_	
73-6	9801-9804	and	_	_	
73-7	9805-9811	remove	_	_	
73-8	9812-9821	potential	_	_	
73-9	9822-9828	faults	_	_	
73-10	9828-9829	.	_	_	

#Text=Though not shown in the figure, the *faults uncovered*
#Text=arrows are meant to trigger correction 
#Text=and re-examination of the corresponding models.
74-1	9830-9836	Though	_	_	
74-2	9837-9840	not	_	_	
74-3	9841-9846	shown	_	_	
74-4	9847-9849	in	_	_	
74-5	9850-9853	the	_	_	
74-6	9854-9860	figure	_	_	
74-7	9860-9861	,	_	_	
74-8	9862-9865	the	_	_	
74-9	9866-9867	*	_	_	
74-10	9867-9873	faults	_	_	
74-11	9874-9883	uncovered	_	_	
74-12	9883-9884	*	_	_	
74-13	9885-9891	arrows	_	_	
74-14	9892-9895	are	_	_	
74-15	9896-9901	meant	_	_	
74-16	9902-9904	to	_	_	
74-17	9905-9912	trigger	_	_	
74-18	9913-9923	correction	_	_	
74-19	9925-9928	and	_	_	
74-20	9929-9943	re-examination	_	_	
74-21	9944-9946	of	_	_	
74-22	9947-9950	the	_	_	
74-23	9951-9964	corresponding	_	_	
74-24	9965-9971	models	_	_	
74-25	9971-9972	.	_	_	

#Text=Central to the figure is the contraval
#Text=tools that we use at both, the model checking and
#Text=testing stages.
75-1	9976-9983	Central	_	_	
75-2	9984-9986	to	_	_	
75-3	9987-9990	the	_	_	
75-4	9991-9997	figure	_	_	
75-5	9998-10000	is	_	_	
75-6	10001-10004	the	_	_	
75-7	10005-10014	contraval	_	_	
75-8	10015-10020	tools	_	_	
75-9	10021-10025	that	_	_	
75-10	10026-10028	we	_	_	
75-11	10029-10032	use	_	_	
75-12	10033-10035	at	_	_	
75-13	10036-10040	both	_	_	
75-14	10040-10041	,	_	_	
75-15	10042-10045	the	_	_	
75-16	10046-10051	model	_	_	
75-17	10052-10060	checking	_	_	
75-18	10061-10064	and	_	_	
75-19	10065-10072	testing	_	_	
75-20	10073-10079	stages	_	_	
75-21	10079-10080	.	_	_	

#Text=Details of the contraval tool are 
#Text=explained next
76-1	10082-10089	Details	_	_	
76-2	10090-10092	of	_	_	
76-3	10093-10096	the	_	_	
76-4	10097-10106	contraval	*	SOFTWARE	
76-5	10107-10111	tool	_	_	
76-6	10112-10115	are	_	_	
76-7	10117-10126	explained	_	_	
76-8	10127-10131	next	_	_	

#Text=.
77-1	10131-10132	.	_	_	

#Text=# 2.
78-1	10135-10136	#	_	_	
78-2	10137-10138	2	_	_	
78-3	10138-10139	.	_	_	

#Text=Contraval (smart contract validation)
#Text=
#Text=### Validate your smart contracts before deployment
#Text=A particularity of smart contracts deployed on--blockchain 
#Text=is that because of their descentralisation and openess, 
#Text=they are hard to amend after deployment.
79-1	10140-10149	Contraval	*	SOFTWARE	
79-2	10150-10151	(	_	_	
79-3	10151-10156	smart	_	_	
79-4	10157-10165	contract	_	_	
79-5	10166-10176	validation	_	_	
79-6	10176-10177	)	_	_	
79-7	10179-10180	#	_	_	
79-8	10180-10181	#	_	_	
79-9	10181-10182	#	_	_	
79-10	10183-10191	Validate	_	_	
79-11	10192-10196	your	_	_	
79-12	10197-10202	smart	_	_	
79-13	10203-10212	contracts	_	_	
79-14	10213-10219	before	_	_	
79-15	10220-10230	deployment	_	_	
79-16	10231-10232	A	_	_	
79-17	10233-10246	particularity	_	_	
79-18	10247-10249	of	_	_	
79-19	10250-10255	smart	_	_	
79-20	10256-10265	contracts	_	_	
79-21	10266-10274	deployed	_	_	
79-22	10275-10277	on	_	_	
79-23	10277-10278	-	_	_	
79-24	10278-10279	-	_	_	
79-25	10279-10289	blockchain	_	_	
79-26	10291-10293	is	_	_	
79-27	10294-10298	that	_	_	
79-28	10299-10306	because	_	_	
79-29	10307-10309	of	_	_	
79-30	10310-10315	their	_	_	
79-31	10316-10333	descentralisation	_	_	
79-32	10334-10337	and	_	_	
79-33	10338-10345	openess	_	_	
79-34	10345-10346	,	_	_	
79-35	10348-10352	they	_	_	
79-36	10353-10356	are	_	_	
79-37	10357-10361	hard	_	_	
79-38	10362-10364	to	_	_	
79-39	10365-10370	amend	_	_	
79-40	10371-10376	after	_	_	
79-41	10377-10387	deployment	_	_	
79-42	10387-10388	.	_	_	

#Text=Therefore, we 
#Text=suggest that smart contracts are thoroughly validated 
#Text=(for example, using conventional model checking tools) 
#Text=to uncover potential logical inconsistencies of their clauses 
#Text=(omissions, contradictions, duplications, etc.).
80-1	10389-10398	Therefore	_	_	
80-2	10398-10399	,	_	_	
80-3	10400-10402	we	_	_	
80-4	10404-10411	suggest	_	_	
80-5	10412-10416	that	_	_	
80-6	10417-10422	smart	_	_	
80-7	10423-10432	contracts	_	_	
80-8	10433-10436	are	_	_	
80-9	10437-10447	thoroughly	_	_	
80-10	10448-10457	validated	_	_	
80-11	10459-10460	(	_	_	
80-12	10460-10463	for	_	_	
80-13	10464-10471	example	_	_	
80-14	10471-10472	,	_	_	
80-15	10473-10478	using	_	_	
80-16	10479-10491	conventional	_	_	
80-17	10492-10497	model	_	_	
80-18	10498-10506	checking	_	_	
80-19	10507-10512	tools	_	_	
80-20	10512-10513	)	_	_	
80-21	10515-10517	to	_	_	
80-22	10518-10525	uncover	_	_	
80-23	10526-10535	potential	_	_	
80-24	10536-10543	logical	_	_	
80-25	10544-10559	inconsistencies	_	_	
80-26	10560-10562	of	_	_	
80-27	10563-10568	their	_	_	
80-28	10569-10576	clauses	_	_	
80-29	10578-10579	(	_	_	
80-30	10579-10588	omissions	_	_	
80-31	10588-10589	,	_	_	
80-32	10590-10604	contradictions	_	_	
80-33	10604-10605	,	_	_	
80-34	10606-10618	duplications	_	_	
80-35	10618-10619	,	_	_	
80-36	10620-10623	etc	_	_	
80-37	10623-10624	.	_	_	
80-38	10624-10625	)	_	_	
80-39	10625-10626	.	_	_	

#Text=In addition, 
#Text=we suggest that the actual implementation is systematically 
#Text=tested before deployment.
81-1	10627-10629	In	_	_	
81-2	10630-10638	addition	_	_	
81-3	10638-10639	,	_	_	
81-4	10641-10643	we	_	_	
81-5	10644-10651	suggest	_	_	
81-6	10652-10656	that	_	_	
81-7	10657-10660	the	_	_	
81-8	10661-10667	actual	_	_	
81-9	10668-10682	implementation	_	_	
81-10	10683-10685	is	_	_	
81-11	10686-10700	systematically	_	_	
81-12	10702-10708	tested	_	_	
81-13	10709-10715	before	_	_	
81-14	10716-10726	deployment	_	_	
81-15	10726-10727	.	_	_	

#Text=In hybrid architectures 
#Text=(see for example,
#Text=[Implementation of Smart Contracts Using Hybrid Architectures with On- and Off-Blockchain Components](https://arxiv.org/pdf/1808.00093.pdf "implementation paper"))
#Text=that include on and off--blockchain components the risk of 
#Text=implementing buggy is exacerbated by the interaction between 
#Text=the the components.
82-1	10728-10730	In	_	_	
82-2	10731-10737	hybrid	_	_	
82-3	10738-10751	architectures	_	_	
82-4	10753-10754	(	_	_	
82-5	10754-10757	see	_	_	
82-6	10758-10761	for	_	_	
82-7	10762-10769	example	_	_	
82-8	10769-10770	,	_	_	
82-9	10771-10772	[	_	_	
82-10	10772-10786	Implementation	*[5]	PUBLICATION[5]	
82-11	10787-10789	of	*[5]	PUBLICATION[5]	
82-12	10790-10795	Smart	*[5]	PUBLICATION[5]	
82-13	10796-10805	Contracts	*[5]	PUBLICATION[5]	
82-14	10806-10811	Using	*[5]	PUBLICATION[5]	
82-15	10812-10818	Hybrid	*[5]	PUBLICATION[5]	
82-16	10819-10832	Architectures	*[5]	PUBLICATION[5]	
82-17	10833-10837	with	*[5]	PUBLICATION[5]	
82-18	10838-10840	On	*[5]	PUBLICATION[5]	
82-19	10840-10841	-	*[5]	PUBLICATION[5]	
82-20	10842-10845	and	*[5]	PUBLICATION[5]	
82-21	10846-10860	Off-Blockchain	*[5]	PUBLICATION[5]	
82-22	10861-10871	Components	*[5]	PUBLICATION[5]	
82-23	10871-10872	]	_	_	
82-24	10872-10873	(	_	_	
82-25	10873-10878	https	_	_	
82-26	10878-10879	:	_	_	
82-27	10879-10880	/	_	_	
82-28	10880-10881	/	_	_	
82-29	10881-10890	arxiv.org	_	_	
82-30	10890-10891	/	_	_	
82-31	10891-10894	pdf	_	_	
82-32	10894-10895	/	_	_	
82-33	10895-10905	1808.00093	_	_	
82-34	10905-10906	.	_	_	
82-35	10906-10909	pdf	_	_	
82-36	10910-10911	"	_	_	
82-37	10911-10925	implementation	_	_	
82-38	10926-10931	paper	_	_	
82-39	10931-10932	"	_	_	
82-40	10932-10933	)	_	_	
82-41	10933-10934	)	_	_	
82-42	10935-10939	that	_	_	
82-43	10940-10947	include	_	_	
82-44	10948-10950	on	_	_	
82-45	10951-10954	and	_	_	
82-46	10955-10958	off	_	_	
82-47	10958-10959	-	_	_	
82-48	10959-10960	-	_	_	
82-49	10960-10970	blockchain	_	_	
82-50	10971-10981	components	_	_	
82-51	10982-10985	the	_	_	
82-52	10986-10990	risk	_	_	
82-53	10991-10993	of	_	_	
82-54	10995-11007	implementing	_	_	
82-55	11008-11013	buggy	_	_	
82-56	11014-11016	is	_	_	
82-57	11017-11028	exacerbated	_	_	
82-58	11029-11031	by	_	_	
82-59	11032-11035	the	_	_	
82-60	11036-11047	interaction	_	_	
82-61	11048-11055	between	_	_	
82-62	11057-11060	the	_	_	
82-63	11061-11064	the	_	_	
82-64	11065-11075	components	_	_	
82-65	11075-11076	.	_	_	

#Text=<br/>
#Text=
#Text=Hello World Contract example: As an example, let as have a look
#Text=at a hello world contract example of a smart contract between
#Text=a buyer and a store: 
#Text=
#Text=```
#Text=1) The buyer is obliged to pay the store withing the
#Text=   next 3 days. 
#Text=2) The store is obliged to acknowledge the payment 
#Text=   withing 24 hrs after receiving it. 
#Text=3) The contract will be considered complete either
#Text= * normally when the store submits the acknowledge
83-1	11078-11079	<	_	_	
83-2	11079-11081	br	_	_	
83-3	11081-11082	/	_	_	
83-4	11082-11083	>	_	_	
83-5	11085-11090	Hello	_	_	
83-6	11091-11096	World	_	_	
83-7	11097-11105	Contract	_	_	
83-8	11106-11113	example	_	_	
83-9	11113-11114	:	_	_	
83-10	11115-11117	As	_	_	
83-11	11118-11120	an	_	_	
83-12	11121-11128	example	_	_	
83-13	11128-11129	,	_	_	
83-14	11130-11133	let	_	_	
83-15	11134-11136	as	_	_	
83-16	11137-11141	have	_	_	
83-17	11142-11143	a	_	_	
83-18	11144-11148	look	_	_	
83-19	11149-11151	at	_	_	
83-20	11152-11153	a	_	_	
83-21	11154-11159	hello	_	_	
83-22	11160-11165	world	_	_	
83-23	11166-11174	contract	_	_	
83-24	11175-11182	example	_	_	
83-25	11183-11185	of	_	_	
83-26	11186-11187	a	_	_	
83-27	11188-11193	smart	_	_	
83-28	11194-11202	contract	_	_	
83-29	11203-11210	between	_	_	
83-30	11211-11212	a	_	_	
83-31	11213-11218	buyer	_	_	
83-32	11219-11222	and	_	_	
83-33	11223-11224	a	_	_	
83-34	11225-11230	store	_	_	
83-35	11230-11231	:	_	_	
83-36	11234-11235	`	_	_	
83-37	11235-11236	`	_	_	
83-38	11236-11237	`	_	_	
83-39	11238-11239	1	_	_	
83-40	11239-11240	)	_	_	
83-41	11241-11244	The	_	_	
83-42	11245-11250	buyer	_	_	
83-43	11251-11253	is	_	_	
83-44	11254-11261	obliged	_	_	
83-45	11262-11264	to	_	_	
83-46	11265-11268	pay	_	_	
83-47	11269-11272	the	_	_	
83-48	11273-11278	store	_	_	
83-49	11279-11286	withing	_	_	
83-50	11287-11290	the	_	_	
83-51	11294-11298	next	_	_	
83-52	11299-11300	3	_	_	
83-53	11301-11305	days	_	_	
83-54	11305-11306	.	_	_	
83-55	11308-11309	2	_	_	
83-56	11309-11310	)	_	_	
83-57	11311-11314	The	_	_	
83-58	11315-11320	store	_	_	
83-59	11321-11323	is	_	_	
83-60	11324-11331	obliged	_	_	
83-61	11332-11334	to	_	_	
83-62	11335-11346	acknowledge	_	_	
83-63	11347-11350	the	_	_	
83-64	11351-11358	payment	_	_	
83-65	11363-11370	withing	_	_	
83-66	11371-11373	24	_	_	
83-67	11374-11377	hrs	_	_	
83-68	11378-11383	after	_	_	
83-69	11384-11393	receiving	_	_	
83-70	11394-11396	it	_	_	
83-71	11396-11397	.	_	_	
83-72	11399-11400	3	_	_	
83-73	11400-11401	)	_	_	
83-74	11402-11405	The	_	_	
83-75	11406-11414	contract	_	_	
83-76	11415-11419	will	_	_	
83-77	11420-11422	be	_	_	
83-78	11423-11433	considered	_	_	
83-79	11434-11442	complete	_	_	
83-80	11443-11449	either	_	_	
83-81	11451-11452	*	_	_	
83-82	11453-11461	normally	_	_	
83-83	11462-11466	when	_	_	
83-84	11467-11470	the	_	_	
83-85	11471-11476	store	_	_	
83-86	11477-11484	submits	_	_	
83-87	11485-11488	the	_	_	
83-88	11489-11500	acknowledge	_	_	

#Text=.
84-1	11500-11501	.	_	_	

#Text=* abnormally when one or both parties fail to meet
#Text=  their deadlines.
#Text=```
#Text=The contract in natural language can be represented
#Text=schematically.
85-1	11503-11504	*	_	_	
85-2	11505-11515	abnormally	_	_	
85-3	11516-11520	when	_	_	
85-4	11521-11524	one	_	_	
85-5	11525-11527	or	_	_	
85-6	11528-11532	both	_	_	
85-7	11533-11540	parties	_	_	
85-8	11541-11545	fail	_	_	
85-9	11546-11548	to	_	_	
85-10	11549-11553	meet	_	_	
85-11	11556-11561	their	_	_	
85-12	11562-11571	deadlines	_	_	
85-13	11571-11572	.	_	_	
85-14	11573-11574	`	_	_	
85-15	11574-11575	`	_	_	
85-16	11575-11576	`	_	_	
85-17	11577-11580	The	_	_	
85-18	11581-11589	contract	_	_	
85-19	11590-11592	in	_	_	
85-20	11593-11600	natural	_	_	
85-21	11601-11609	language	_	_	
85-22	11610-11613	can	_	_	
85-23	11614-11616	be	_	_	
85-24	11617-11628	represented	_	_	
85-25	11629-11642	schematically	_	_	
85-26	11642-11643	.	_	_	

#Text=Depending on the execution model of the
#Text=operations, diffent models can be built.
86-1	11644-11653	Depending	_	_	
86-2	11654-11656	on	_	_	
86-3	11657-11660	the	_	_	
86-4	11661-11670	execution	_	_	
86-5	11671-11676	model	_	_	
86-6	11677-11679	of	_	_	
86-7	11680-11683	the	_	_	
86-8	11684-11694	operations	_	_	
86-9	11694-11695	,	_	_	
86-10	11696-11703	diffent	_	_	
86-11	11704-11710	models	_	_	
86-12	11711-11714	can	_	_	
86-13	11715-11717	be	_	_	
86-14	11718-11723	built	_	_	
86-15	11723-11724	.	_	_	

#Text=As an example, let us assume the execution model shown in the
#Text=following figure.
87-1	11726-11728	As	_	_	
87-2	11729-11731	an	_	_	
87-3	11732-11739	example	_	_	
87-4	11739-11740	,	_	_	
87-5	11741-11744	let	_	_	
87-6	11745-11747	us	_	_	
87-7	11748-11754	assume	_	_	
87-8	11755-11758	the	_	_	
87-9	11759-11768	execution	_	_	
87-10	11769-11774	model	_	_	
87-11	11775-11780	shown	_	_	
87-12	11781-11783	in	_	_	
87-13	11784-11787	the	_	_	
87-14	11788-11797	following	_	_	
87-15	11798-11804	figure	_	_	
87-16	11804-11805	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
88-1	11807-11808	<	_	_	
88-2	11808-11809	p	_	_	
88-3	11810-11815	align	_	_	
88-4	11815-11816	=	_	_	
88-5	11816-11817	"	_	_	
88-6	11817-11823	center	_	_	
88-7	11823-11824	"	_	_	
88-8	11824-11825	>	_	_	
88-9	11828-11829	<	_	_	
88-10	11829-11832	img	_	_	
88-11	11833-11836	src	_	_	
88-12	11836-11837	=	_	_	
88-13	11837-11838	"	_	_	
88-14	11838-11839	.	_	_	

#Text=/figures/executionmodelTOtoComplete.png" width="550" title="Execution model that completes in success or timeout">
#Text=</p>
#Text=
#Text=On the basis of the exedcution model shown above, we can
#Text=represent the contract example schematically.
89-1	11839-11840	/	_	_	
89-2	11840-11847	figures	_	_	
89-3	11847-11848	/	_	_	
89-4	11848-11878	executionmodelTOtoComplete.png	_	_	
89-5	11878-11879	"	_	_	
89-6	11880-11885	width	_	_	
89-7	11885-11886	=	_	_	
89-8	11886-11887	"	_	_	
89-9	11887-11890	550	_	_	
89-10	11890-11891	"	_	_	
89-11	11892-11897	title	_	_	
89-12	11897-11898	=	_	_	
89-13	11898-11899	"	_	_	
89-14	11899-11908	Execution	_	_	
89-15	11909-11914	model	_	_	
89-16	11915-11919	that	_	_	
89-17	11920-11929	completes	_	_	
89-18	11930-11932	in	_	_	
89-19	11933-11940	success	_	_	
89-20	11941-11943	or	_	_	
89-21	11944-11951	timeout	_	_	
89-22	11951-11952	"	_	_	
89-23	11952-11953	>	_	_	
89-24	11954-11955	<	_	_	
89-25	11955-11956	/	_	_	
89-26	11956-11957	p	_	_	
89-27	11957-11958	>	_	_	
89-28	11960-11962	On	_	_	
89-29	11963-11966	the	_	_	
89-30	11967-11972	basis	_	_	
89-31	11973-11975	of	_	_	
89-32	11976-11979	the	_	_	
89-33	11980-11990	exedcution	_	_	
89-34	11991-11996	model	_	_	
89-35	11997-12002	shown	_	_	
89-36	12003-12008	above	_	_	
89-37	12008-12009	,	_	_	
89-38	12010-12012	we	_	_	
89-39	12013-12016	can	_	_	
89-40	12017-12026	represent	_	_	
89-41	12027-12030	the	_	_	
89-42	12031-12039	contract	_	_	
89-43	12040-12047	example	_	_	
89-44	12048-12061	schematically	_	_	
89-45	12061-12062	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
90-1	12064-12065	<	_	_	
90-2	12065-12066	p	_	_	
90-3	12067-12072	align	_	_	
90-4	12072-12073	=	_	_	
90-5	12073-12074	"	_	_	
90-6	12074-12080	center	_	_	
90-7	12080-12081	"	_	_	
90-8	12081-12082	>	_	_	
90-9	12085-12086	<	_	_	
90-10	12086-12089	img	_	_	
90-11	12090-12093	src	_	_	
90-12	12093-12094	=	_	_	
90-13	12094-12095	"	_	_	
90-14	12095-12096	.	_	_	

#Text=/figures/helloWorldSmartContractBuyerStoreExecTO.png" width="550" title="Hello world contract: buyer-store">
#Text=</p>
#Text=
#Text=In the figure, *pay*  represents the execution
#Text=of the *pay*  operation initiated by the buyer.
91-1	12096-12097	/	_	_	
91-2	12097-12104	figures	_	_	
91-3	12104-12105	/	_	_	
91-4	12105-12148	helloWorldSmartContractBuyerStoreExecTO.png	_	_	
91-5	12148-12149	"	_	_	
91-6	12150-12155	width	_	_	
91-7	12155-12156	=	_	_	
91-8	12156-12157	"	_	_	
91-9	12157-12160	550	_	_	
91-10	12160-12161	"	_	_	
91-11	12162-12167	title	_	_	
91-12	12167-12168	=	_	_	
91-13	12168-12169	"	_	_	
91-14	12169-12174	Hello	_	_	
91-15	12175-12180	world	_	_	
91-16	12181-12189	contract	_	_	
91-17	12189-12190	:	_	_	
91-18	12191-12202	buyer-store	_	_	
91-19	12202-12203	"	_	_	
91-20	12203-12204	>	_	_	
91-21	12205-12206	<	_	_	
91-22	12206-12207	/	_	_	
91-23	12207-12208	p	_	_	
91-24	12208-12209	>	_	_	
91-25	12211-12213	In	_	_	
91-26	12214-12217	the	_	_	
91-27	12218-12224	figure	_	_	
91-28	12224-12225	,	_	_	
91-29	12226-12227	*	_	_	
91-30	12227-12230	pay	_	_	
91-31	12230-12231	*	_	_	
91-32	12233-12243	represents	_	_	
91-33	12244-12247	the	_	_	
91-34	12248-12257	execution	_	_	
91-35	12258-12260	of	_	_	
91-36	12261-12264	the	_	_	
91-37	12265-12266	*	_	_	
91-38	12266-12269	pay	_	_	
91-39	12269-12270	*	_	_	
91-40	12272-12281	operation	_	_	
91-41	12282-12291	initiated	_	_	
91-42	12292-12294	by	_	_	
91-43	12295-12298	the	_	_	
91-44	12299-12304	buyer	_	_	
91-45	12304-12305	.	_	_	

#Text=Similarly, *ack* represens the execution of the
#Text=*ack* operation initiated by the store.
92-1	12306-12315	Similarly	_	_	
92-2	12315-12316	,	_	_	
92-3	12317-12318	*	_	_	
92-4	12318-12321	ack	_	_	
92-5	12321-12322	*	_	_	
92-6	12323-12332	represens	_	_	
92-7	12333-12336	the	_	_	
92-8	12337-12346	execution	_	_	
92-9	12347-12349	of	_	_	
92-10	12350-12353	the	_	_	
92-11	12354-12355	*	_	_	
92-12	12355-12358	ack	_	_	
92-13	12358-12359	*	_	_	
92-14	12360-12369	operation	_	_	
92-15	12370-12379	initiated	_	_	
92-16	12380-12382	by	_	_	
92-17	12383-12386	the	_	_	
92-18	12387-12392	store	_	_	
92-19	12392-12393	.	_	_	

#Text=These executions, result in the generation of
#Text=business events that are notified to the
#Text=smart contract (see below), for example, the
#Text=execution of the operation *pay* generates the
#Text=*pay* business event.
93-1	12394-12399	These	_	_	
93-2	12400-12410	executions	_	_	
93-3	12410-12411	,	_	_	
93-4	12412-12418	result	_	_	
93-5	12419-12421	in	_	_	
93-6	12422-12425	the	_	_	
93-7	12426-12436	generation	_	_	
93-8	12437-12439	of	_	_	
93-9	12440-12448	business	_	_	
93-10	12449-12455	events	_	_	
93-11	12456-12460	that	_	_	
93-12	12461-12464	are	_	_	
93-13	12465-12473	notified	_	_	
93-14	12474-12476	to	_	_	
93-15	12477-12480	the	_	_	
93-16	12481-12486	smart	_	_	
93-17	12487-12495	contract	_	_	
93-18	12496-12497	(	_	_	
93-19	12497-12500	see	_	_	
93-20	12501-12506	below	_	_	
93-21	12506-12507	)	_	_	
93-22	12507-12508	,	_	_	
93-23	12509-12512	for	_	_	
93-24	12513-12520	example	_	_	
93-25	12520-12521	,	_	_	
93-26	12522-12525	the	_	_	
93-27	12526-12535	execution	_	_	
93-28	12536-12538	of	_	_	
93-29	12539-12542	the	_	_	
93-30	12543-12552	operation	_	_	
93-31	12553-12554	*	_	_	
93-32	12554-12557	pay	_	_	
93-33	12557-12558	*	_	_	
93-34	12559-12568	generates	_	_	
93-35	12569-12572	the	_	_	
93-36	12573-12574	*	_	_	
93-37	12574-12577	pay	_	_	
93-38	12577-12578	*	_	_	
93-39	12579-12587	business	_	_	
93-40	12588-12593	event	_	_	
93-41	12593-12594	.	_	_	

#Text=A diamon represents an alternative output 
#Text=produced by the execution of the operation
#Text=located at its left.
94-1	12596-12597	A	_	_	
94-2	12598-12604	diamon	_	_	
94-3	12605-12615	represents	_	_	
94-4	12616-12618	an	_	_	
94-5	12619-12630	alternative	_	_	
94-6	12631-12637	output	_	_	
94-7	12639-12647	produced	_	_	
94-8	12648-12650	by	_	_	
94-9	12651-12654	the	_	_	
94-10	12655-12664	execution	_	_	
94-11	12665-12667	of	_	_	
94-12	12668-12671	the	_	_	
94-13	12672-12681	operation	_	_	
94-14	12682-12689	located	_	_	
94-15	12690-12692	at	_	_	
94-16	12693-12696	its	_	_	
94-17	12697-12701	left	_	_	
94-18	12701-12702	.	_	_	

#Text=In accordance with 
#Text=the execution model, the outcome is either
#Text=sucess or timeout.
95-1	12703-12705	In	_	_	
95-2	12706-12716	accordance	_	_	
95-3	12717-12721	with	_	_	
95-4	12723-12726	the	_	_	
95-5	12727-12736	execution	_	_	
95-6	12737-12742	model	_	_	
95-7	12742-12743	,	_	_	
95-8	12744-12747	the	_	_	
95-9	12748-12755	outcome	_	_	
95-10	12756-12758	is	_	_	
95-11	12759-12765	either	_	_	
95-12	12766-12772	sucess	_	_	
95-13	12773-12775	or	_	_	
95-14	12776-12783	timeout	_	_	
95-15	12783-12784	.	_	_	

#Text=For example, *payto* (where
#Text=*to* stands for timeout)
#Text=presentes the failure of the execution of 
#Text=the operation *pay* to complete before the deadline.
96-1	12785-12788	For	_	_	
96-2	12789-12796	example	_	_	
96-3	12796-12797	,	_	_	
96-4	12798-12799	*	_	_	
96-5	12799-12804	payto	_	_	
96-6	12804-12805	*	_	_	
96-7	12806-12807	(	_	_	
96-8	12807-12812	where	_	_	
96-9	12813-12814	*	_	_	
96-10	12814-12816	to	_	_	
96-11	12816-12817	*	_	_	
96-12	12818-12824	stands	_	_	
96-13	12825-12828	for	_	_	
96-14	12829-12836	timeout	_	_	
96-15	12836-12837	)	_	_	
96-16	12838-12847	presentes	_	_	
96-17	12848-12851	the	_	_	
96-18	12852-12859	failure	_	_	
96-19	12860-12862	of	_	_	
96-20	12863-12866	the	_	_	
96-21	12867-12876	execution	_	_	
96-22	12877-12879	of	_	_	
96-23	12881-12884	the	_	_	
96-24	12885-12894	operation	_	_	
96-25	12895-12896	*	_	_	
96-26	12896-12899	pay	_	_	
96-27	12899-12900	*	_	_	
96-28	12901-12903	to	_	_	
96-29	12904-12912	complete	_	_	
96-30	12913-12919	before	_	_	
96-31	12920-12923	the	_	_	
96-32	12924-12932	deadline	_	_	
96-33	12932-12933	.	_	_	

#Text=The dashed lines 
#Text=represent abnormal paths to contract completion.
97-1	12936-12939	The	_	_	
97-2	12940-12946	dashed	_	_	
97-3	12947-12952	lines	_	_	
97-4	12954-12963	represent	_	_	
97-5	12964-12972	abnormal	_	_	
97-6	12973-12978	paths	_	_	
97-7	12979-12981	to	_	_	
97-8	12982-12990	contract	_	_	
97-9	12991-13001	completion	_	_	
97-10	13001-13002	.	_	_	

#Text=For instance, the dashed line associated to *payto* 
#Text=means that the buyer failed to observe its
#Text=obligation to pay within 3 days.
98-1	13003-13006	For	_	_	
98-2	13007-13015	instance	_	_	
98-3	13015-13016	,	_	_	
98-4	13017-13020	the	_	_	
98-5	13021-13027	dashed	_	_	
98-6	13028-13032	line	_	_	
98-7	13033-13043	associated	_	_	
98-8	13044-13046	to	_	_	
98-9	13047-13048	*	_	_	
98-10	13048-13053	payto	_	_	
98-11	13053-13054	*	_	_	
98-12	13056-13061	means	_	_	
98-13	13062-13066	that	_	_	
98-14	13067-13070	the	_	_	
98-15	13071-13076	buyer	_	_	
98-16	13077-13083	failed	_	_	
98-17	13084-13086	to	_	_	
98-18	13087-13094	observe	_	_	
98-19	13095-13098	its	_	_	
98-20	13099-13109	obligation	_	_	
98-21	13110-13112	to	_	_	
98-22	13113-13116	pay	_	_	
98-23	13117-13123	within	_	_	
98-24	13124-13125	3	_	_	
98-25	13126-13130	days	_	_	
98-26	13130-13131	.	_	_	

#Text=Consequently,
#Text=the contract ends abnormally.
#Text=
#Text=
#Text=### What can Epromela do with smart contracts?
99-1	13132-13144	Consequently	_	_	
99-2	13144-13145	,	_	_	
99-3	13146-13149	the	_	_	
99-4	13150-13158	contract	_	_	
99-5	13159-13163	ends	_	_	
99-6	13164-13174	abnormally	_	_	
99-7	13174-13175	.	_	_	
99-8	13178-13179	#	_	_	
99-9	13179-13180	#	_	_	
99-10	13180-13181	#	_	_	
99-11	13182-13186	What	_	_	
99-12	13187-13190	can	_	_	
99-13	13191-13199	Epromela	*	PROGLANG	
99-14	13200-13202	do	_	_	
99-15	13203-13207	with	_	_	
99-16	13208-13213	smart	_	_	
99-17	13214-13223	contracts	_	_	
99-18	13223-13224	?	_	_	

#Text=Epromela is a language for writing models that
#Text=can be model checked by the Spin model checker.
100-1	13225-13233	Epromela	*	PROGLANG	
100-2	13234-13236	is	_	_	
100-3	13237-13238	a	_	_	
100-4	13239-13247	language	_	_	
100-5	13248-13251	for	_	_	
100-6	13252-13259	writing	_	_	
100-7	13260-13266	models	_	_	
100-8	13267-13271	that	_	_	
100-9	13272-13275	can	_	_	
100-10	13276-13278	be	_	_	
100-11	13279-13284	model	_	_	
100-12	13285-13292	checked	_	_	
100-13	13293-13295	by	_	_	
100-14	13296-13299	the	_	_	
100-15	13300-13304	Spin	*	SOFTWARE	
100-16	13305-13310	model	_	_	
100-17	13311-13318	checker	_	_	
100-18	13318-13319	.	_	_	

#Text=We have built it by extending the standard Promela language
#Text=with primitives that help developers build
#Text=models of smart contracts using constructs that
#Text=are natural to smart contracts.
101-1	13322-13324	We	_	_	
101-2	13325-13329	have	_	_	
101-3	13330-13335	built	_	_	
101-4	13336-13338	it	_	_	
101-5	13339-13341	by	_	_	
101-6	13342-13351	extending	_	_	
101-7	13352-13355	the	_	_	
101-8	13356-13364	standard	_	_	
101-9	13365-13372	Promela	*	PROGLANG	
101-10	13373-13381	language	_	_	
101-11	13382-13386	with	_	_	
101-12	13387-13397	primitives	_	_	
101-13	13398-13402	that	_	_	
101-14	13403-13407	help	_	_	
101-15	13408-13418	developers	_	_	
101-16	13419-13424	build	_	_	
101-17	13425-13431	models	_	_	
101-18	13432-13434	of	_	_	
101-19	13435-13440	smart	_	_	
101-20	13441-13450	contracts	_	_	
101-21	13451-13456	using	_	_	
101-22	13457-13467	constructs	_	_	
101-23	13468-13472	that	_	_	
101-24	13473-13476	are	_	_	
101-25	13477-13484	natural	_	_	
101-26	13485-13487	to	_	_	
101-27	13488-13493	smart	_	_	
101-28	13494-13503	contracts	_	_	
101-29	13503-13504	.	_	_	

#Text=Examples of
#Text=these constructs are *role players (e.g.,
#Text=buyer and seller)*, *rights*,
#Text=*obligations* and *prohibitions*; and operations
#Text=such as *assign obligation to pay 
#Text=to buyer*, *has buyer fulfilled obligation to pay?
102-1	13505-13513	Examples	_	_	
102-2	13514-13516	of	_	_	
102-3	13517-13522	these	_	_	
102-4	13523-13533	constructs	_	_	
102-5	13534-13537	are	_	_	
102-6	13538-13539	*	_	_	
102-7	13539-13543	role	_	_	
102-8	13544-13551	players	_	_	
102-9	13552-13553	(	_	_	
102-10	13553-13556	e.g	_	_	
102-11	13556-13557	.	_	_	
102-12	13557-13558	,	_	_	
102-13	13559-13564	buyer	_	_	
102-14	13565-13568	and	_	_	
102-15	13569-13575	seller	_	_	
102-16	13575-13576	)	_	_	
102-17	13576-13577	*	_	_	
102-18	13577-13578	,	_	_	
102-19	13579-13580	*	_	_	
102-20	13580-13586	rights	_	_	
102-21	13586-13587	*	_	_	
102-22	13587-13588	,	_	_	
102-23	13589-13590	*	_	_	
102-24	13590-13601	obligations	_	_	
102-25	13601-13602	*	_	_	
102-26	13603-13606	and	_	_	
102-27	13607-13608	*	_	_	
102-28	13608-13620	prohibitions	_	_	
102-29	13620-13621	*	_	_	
102-30	13621-13622	;	_	_	
102-31	13623-13626	and	_	_	
102-32	13627-13637	operations	_	_	
102-33	13638-13642	such	_	_	
102-34	13643-13645	as	_	_	
102-35	13646-13647	*	_	_	
102-36	13647-13653	assign	_	_	
102-37	13654-13664	obligation	_	_	
102-38	13665-13667	to	_	_	
102-39	13668-13671	pay	_	_	
102-40	13673-13675	to	_	_	
102-41	13676-13681	buyer	_	_	
102-42	13681-13682	*	_	_	
102-43	13682-13683	,	_	_	
102-44	13684-13685	*	_	_	
102-45	13685-13688	has	_	_	
102-46	13689-13694	buyer	_	_	
102-47	13695-13704	fulfilled	_	_	
102-48	13705-13715	obligation	_	_	
102-49	13716-13718	to	_	_	
102-50	13719-13722	pay	_	_	
102-51	13722-13723	?	_	_	

#Text=*,
#Text=*cancel buyer's obligation to pay*,
#Text=etc.
103-1	13723-13724	*	_	_	
103-2	13724-13725	,	_	_	
103-3	13726-13727	*	_	_	
103-4	13727-13733	cancel	_	_	
103-5	13734-13741	buyer's	_	_	
103-6	13742-13752	obligation	_	_	
103-7	13753-13755	to	_	_	
103-8	13756-13759	pay	_	_	
103-9	13759-13760	*	_	_	
103-10	13760-13761	,	_	_	
103-11	13762-13765	etc	_	_	
103-12	13765-13766	.	_	_	

#Text=We use the promela tool for 
#Text= * *model checking:* we verify the logical correctness of the contract at design time and
#Text= * *generation of execution sequences* we generate excution sequences
#Text=    (test cases) with the tool for testing for conformance the
#Text=    actual implementation.
#Text=
#Text=
#Text=
#Text=### Model checking 
#Text= Spin can verify the logical consistency of the model
#Text= epromela of the smart contract against correctness 
#Text= properties written 
#Text= in LTL (Linear Temporal Logics) formulae.
104-1	13769-13771	We	_	_	
104-2	13772-13775	use	_	_	
104-3	13776-13779	the	_	_	
104-4	13780-13787	promela	_	_	
104-5	13788-13792	tool	_	_	
104-6	13793-13796	for	_	_	
104-7	13799-13800	*	_	_	
104-8	13801-13802	*	_	_	
104-9	13802-13807	model	_	_	
104-10	13808-13816	checking	_	_	
104-11	13816-13817	:	_	_	
104-12	13817-13818	*	_	_	
104-13	13819-13821	we	_	_	
104-14	13822-13828	verify	_	_	
104-15	13829-13832	the	_	_	
104-16	13833-13840	logical	_	_	
104-17	13841-13852	correctness	_	_	
104-18	13853-13855	of	_	_	
104-19	13856-13859	the	_	_	
104-20	13860-13868	contract	_	_	
104-21	13869-13871	at	_	_	
104-22	13872-13878	design	_	_	
104-23	13879-13883	time	_	_	
104-24	13884-13887	and	_	_	
104-25	13889-13890	*	_	_	
104-26	13891-13892	*	_	_	
104-27	13892-13902	generation	_	_	
104-28	13903-13905	of	_	_	
104-29	13906-13915	execution	_	_	
104-30	13916-13925	sequences	_	_	
104-31	13925-13926	*	_	_	
104-32	13927-13929	we	_	_	
104-33	13930-13938	generate	_	_	
104-34	13939-13947	excution	_	_	
104-35	13948-13957	sequences	_	_	
104-36	13962-13963	(	_	_	
104-37	13963-13967	test	_	_	
104-38	13968-13973	cases	_	_	
104-39	13973-13974	)	_	_	
104-40	13975-13979	with	_	_	
104-41	13980-13983	the	_	_	
104-42	13984-13988	tool	_	_	
104-43	13989-13992	for	_	_	
104-44	13993-14000	testing	_	_	
104-45	14001-14004	for	_	_	
104-46	14005-14016	conformance	_	_	
104-47	14017-14020	the	_	_	
104-48	14025-14031	actual	_	_	
104-49	14032-14046	implementation	_	_	
104-50	14046-14047	.	_	_	
104-51	14051-14052	#	_	_	
104-52	14052-14053	#	_	_	
104-53	14053-14054	#	_	_	
104-54	14055-14060	Model	_	_	
104-55	14061-14069	checking	_	_	
104-56	14072-14076	Spin	*	SOFTWARE	
104-57	14077-14080	can	_	_	
104-58	14081-14087	verify	_	_	
104-59	14088-14091	the	_	_	
104-60	14092-14099	logical	_	_	
104-61	14100-14111	consistency	_	_	
104-62	14112-14114	of	_	_	
104-63	14115-14118	the	_	_	
104-64	14119-14124	model	_	_	
104-65	14126-14134	epromela	*	PROGLANG	
104-66	14135-14137	of	_	_	
104-67	14138-14141	the	_	_	
104-68	14142-14147	smart	_	_	
104-69	14148-14156	contract	_	_	
104-70	14157-14164	against	_	_	
104-71	14165-14176	correctness	_	_	
104-72	14179-14189	properties	_	_	
104-73	14190-14197	written	_	_	
104-74	14200-14202	in	_	_	
104-75	14203-14206	LTL	_	_	
104-76	14207-14208	(	_	_	
104-77	14208-14214	Linear	_	_	
104-78	14215-14223	Temporal	_	_	
104-79	14224-14230	Logics	_	_	
104-80	14230-14231	)	_	_	
104-81	14232-14240	formulae	_	_	
104-82	14240-14241	.	_	_	

#Text=<br />
#Text=
#Text=### Generation of execution sequences (test cases) for conformance testing
#Text= Spin can be instructed to generate all the execution
#Text= sequences encoded in the epromela model of the
#Text= smart contract.
105-1	14242-14243	<	_	_	
105-2	14243-14245	br	_	_	
105-3	14246-14247	/	_	_	
105-4	14247-14248	>	_	_	
105-5	14250-14251	#	_	_	
105-6	14251-14252	#	_	_	
105-7	14252-14253	#	_	_	
105-8	14254-14264	Generation	_	_	
105-9	14265-14267	of	_	_	
105-10	14268-14277	execution	_	_	
105-11	14278-14287	sequences	_	_	
105-12	14288-14289	(	_	_	
105-13	14289-14293	test	_	_	
105-14	14294-14299	cases	_	_	
105-15	14299-14300	)	_	_	
105-16	14301-14304	for	_	_	
105-17	14305-14316	conformance	_	_	
105-18	14317-14324	testing	_	_	
105-19	14326-14330	Spin	*	SOFTWARE	
105-20	14331-14334	can	_	_	
105-21	14335-14337	be	_	_	
105-22	14338-14348	instructed	_	_	
105-23	14349-14351	to	_	_	
105-24	14352-14360	generate	_	_	
105-25	14361-14364	all	_	_	
105-26	14365-14368	the	_	_	
105-27	14369-14378	execution	_	_	
105-28	14380-14389	sequences	_	_	
105-29	14390-14397	encoded	_	_	
105-30	14398-14400	in	_	_	
105-31	14401-14404	the	_	_	
105-32	14405-14413	epromela	*	PROGLANG	
105-33	14414-14419	model	_	_	
105-34	14420-14422	of	_	_	
105-35	14423-14426	the	_	_	
105-36	14428-14433	smart	_	_	
105-37	14434-14442	contract	_	_	
105-38	14442-14443	.	_	_	

#Text=The basic idea is to use Spin as a
#Text= generator of counterexamples produced against 
#Text= LTL formulae.
#Text=
#Text=### Business Event Generator of epromela
#Text=At the heart of epromela lies a Business Event
#Text=Generator (BEG) that is responsible for 
#Text=generating the events that correspond to the
#Text=execution of contractual operations.
106-1	14444-14447	The	_	_	
106-2	14448-14453	basic	_	_	
106-3	14454-14458	idea	_	_	
106-4	14459-14461	is	_	_	
106-5	14462-14464	to	_	_	
106-6	14465-14468	use	_	_	
106-7	14469-14473	Spin	_	_	
106-8	14474-14476	as	_	_	
106-9	14477-14478	a	_	_	
106-10	14480-14489	generator	_	_	
106-11	14490-14492	of	_	_	
106-12	14493-14508	counterexamples	_	_	
106-13	14509-14517	produced	_	_	
106-14	14518-14525	against	_	_	
106-15	14528-14531	LTL	_	_	
106-16	14532-14540	formulae	_	_	
106-17	14540-14541	.	_	_	
106-18	14543-14544	#	_	_	
106-19	14544-14545	#	_	_	
106-20	14545-14546	#	_	_	
106-21	14547-14555	Business	_	_	
106-22	14556-14561	Event	_	_	
106-23	14562-14571	Generator	_	_	
106-24	14572-14574	of	_	_	
106-25	14575-14583	epromela	*	PROGLANG	
106-26	14584-14586	At	_	_	
106-27	14587-14590	the	_	_	
106-28	14591-14596	heart	_	_	
106-29	14597-14599	of	_	_	
106-30	14600-14608	epromela	_	_	
106-31	14609-14613	lies	_	_	
106-32	14614-14615	a	_	_	
106-33	14616-14624	Business	_	_	
106-34	14625-14630	Event	_	_	
106-35	14631-14640	Generator	_	_	
106-36	14641-14642	(	_	_	
106-37	14642-14645	BEG	_	_	
106-38	14645-14646	)	_	_	
106-39	14647-14651	that	_	_	
106-40	14652-14654	is	_	_	
106-41	14655-14666	responsible	_	_	
106-42	14667-14670	for	_	_	
106-43	14672-14682	generating	_	_	
106-44	14683-14686	the	_	_	
106-45	14687-14693	events	_	_	
106-46	14694-14698	that	_	_	
106-47	14699-14709	correspond	_	_	
106-48	14710-14712	to	_	_	
106-49	14713-14716	the	_	_	
106-50	14717-14726	execution	_	_	
106-51	14727-14729	of	_	_	
106-52	14730-14741	contractual	_	_	
106-53	14742-14752	operations	_	_	
106-54	14752-14753	.	_	_	

#Text=To appreciate its functionality, let us have a look
#Text=at the figure bellow that shows the interaction
#Text=between the buyer and store of the contract example.
107-1	14756-14758	To	_	_	
107-2	14759-14769	appreciate	_	_	
107-3	14770-14773	its	_	_	
107-4	14774-14787	functionality	_	_	
107-5	14787-14788	,	_	_	
107-6	14789-14792	let	_	_	
107-7	14793-14795	us	_	_	
107-8	14796-14800	have	_	_	
107-9	14801-14802	a	_	_	
107-10	14803-14807	look	_	_	
107-11	14808-14810	at	_	_	
107-12	14811-14814	the	_	_	
107-13	14815-14821	figure	_	_	
107-14	14822-14828	bellow	_	_	
107-15	14829-14833	that	_	_	
107-16	14834-14839	shows	_	_	
107-17	14840-14843	the	_	_	
107-18	14844-14855	interaction	_	_	
107-19	14856-14863	between	_	_	
107-20	14864-14867	the	_	_	
107-21	14868-14873	buyer	_	_	
107-22	14874-14877	and	_	_	
107-23	14878-14883	store	_	_	
107-24	14884-14886	of	_	_	
107-25	14887-14890	the	_	_	
107-26	14891-14899	contract	_	_	
107-27	14900-14907	example	_	_	
107-28	14907-14908	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
108-1	14910-14911	<	_	_	
108-2	14911-14912	p	_	_	
108-3	14913-14918	align	_	_	
108-4	14918-14919	=	_	_	
108-5	14919-14920	"	_	_	
108-6	14920-14926	center	_	_	
108-7	14926-14927	"	_	_	
108-8	14927-14928	>	_	_	
108-9	14931-14932	<	_	_	
108-10	14932-14935	img	_	_	
108-11	14936-14939	src	_	_	
108-12	14939-14940	=	_	_	
108-13	14940-14941	"	_	_	
108-14	14941-14942	.	_	_	

#Text=/figures/executionModelBilateralOperationsWithoutFailures.png" 
#Text=   width="400" title="Execution model of contractual operations 
#Text=               without failures
109-1	14942-14943	/	_	_	
109-2	14943-14950	figures	_	_	
109-3	14950-14951	/	_	_	
109-4	14951-15003	executionModelBilateralOperationsWithoutFailures.png	_	_	
109-5	15003-15004	"	_	_	
109-6	15009-15014	width	_	_	
109-7	15014-15015	=	_	_	
109-8	15015-15016	"	_	_	
109-9	15016-15019	400	_	_	
109-10	15019-15020	"	_	_	
109-11	15021-15026	title	_	_	
109-12	15026-15027	=	_	_	
109-13	15027-15028	"	_	_	
109-14	15028-15037	Execution	_	_	
109-15	15038-15043	model	_	_	
109-16	15044-15046	of	_	_	
109-17	15047-15058	contractual	_	_	
109-18	15059-15069	operations	_	_	
109-19	15086-15093	without	_	_	
109-20	15094-15102	failures	_	_	

#Text=.
110-1	15102-15103	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=As shown in the figure, the execution of each contractual 
#Text=operation results in the exchange of messages between the two 
#Text=contractual parties.
111-1	15103-15104	"	_	_	
111-2	15104-15105	>	_	_	
111-3	15106-15107	<	_	_	
111-4	15107-15108	/	_	_	
111-5	15108-15109	p	_	_	
111-6	15109-15110	>	_	_	
111-7	15112-15114	As	_	_	
111-8	15115-15120	shown	_	_	
111-9	15121-15123	in	_	_	
111-10	15124-15127	the	_	_	
111-11	15128-15134	figure	_	_	
111-12	15134-15135	,	_	_	
111-13	15136-15139	the	_	_	
111-14	15140-15149	execution	_	_	
111-15	15150-15152	of	_	_	
111-16	15153-15157	each	_	_	
111-17	15158-15169	contractual	_	_	
111-18	15171-15180	operation	_	_	
111-19	15181-15188	results	_	_	
111-20	15189-15191	in	_	_	
111-21	15192-15195	the	_	_	
111-22	15196-15204	exchange	_	_	
111-23	15205-15207	of	_	_	
111-24	15208-15216	messages	_	_	
111-25	15217-15224	between	_	_	
111-26	15225-15228	the	_	_	
111-27	15229-15232	two	_	_	
111-28	15234-15245	contractual	_	_	
111-29	15246-15253	parties	_	_	
111-30	15253-15254	.	_	_	

#Text=A copy of each message can be sent to third 
#Text=parties (for example, to a smart contract) as shown in the 
#Text=figure.
112-1	15255-15256	A	_	_	
112-2	15257-15261	copy	_	_	
112-3	15262-15264	of	_	_	
112-4	15265-15269	each	_	_	
112-5	15270-15277	message	_	_	
112-6	15278-15281	can	_	_	
112-7	15282-15284	be	_	_	
112-8	15285-15289	sent	_	_	
112-9	15290-15292	to	_	_	
112-10	15293-15298	third	_	_	
112-11	15300-15307	parties	_	_	
112-12	15308-15309	(	_	_	
112-13	15309-15312	for	_	_	
112-14	15313-15320	example	_	_	
112-15	15320-15321	,	_	_	
112-16	15322-15324	to	_	_	
112-17	15325-15326	a	_	_	
112-18	15327-15332	smart	_	_	
112-19	15333-15341	contract	_	_	
112-20	15341-15342	)	_	_	
112-21	15343-15345	as	_	_	
112-22	15346-15351	shown	_	_	
112-23	15352-15354	in	_	_	
112-24	15355-15358	the	_	_	
112-25	15360-15366	figure	_	_	
112-26	15366-15367	.	_	_	

#Text=To reduce the number of states of the model, the BEG abstracts 
#Text=away the communication between the contracting parties and
#Text=generates the business events by itself as shown in the figure.
113-1	15369-15371	To	_	_	
113-2	15372-15378	reduce	_	_	
113-3	15379-15382	the	_	_	
113-4	15383-15389	number	_	_	
113-5	15390-15392	of	_	_	
113-6	15393-15399	states	_	_	
113-7	15400-15402	of	_	_	
113-8	15403-15406	the	_	_	
113-9	15407-15412	model	_	_	
113-10	15412-15413	,	_	_	
113-11	15414-15417	the	_	_	
113-12	15418-15421	BEG	*	SOFTWARE	
113-13	15422-15431	abstracts	_	_	
113-14	15433-15437	away	_	_	
113-15	15438-15441	the	_	_	
113-16	15442-15455	communication	_	_	
113-17	15456-15463	between	_	_	
113-18	15464-15467	the	_	_	
113-19	15468-15479	contracting	_	_	
113-20	15480-15487	parties	_	_	
113-21	15488-15491	and	_	_	
113-22	15492-15501	generates	_	_	
113-23	15502-15505	the	_	_	
113-24	15506-15514	business	_	_	
113-25	15515-15521	events	_	_	
113-26	15522-15524	by	_	_	
113-27	15525-15531	itself	_	_	
113-28	15532-15534	as	_	_	
113-29	15535-15540	shown	_	_	
113-30	15541-15543	in	_	_	
113-31	15544-15547	the	_	_	
113-32	15548-15554	figure	_	_	
113-33	15554-15555	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
114-1	15557-15558	<	_	_	
114-2	15558-15559	p	_	_	
114-3	15560-15565	align	_	_	
114-4	15565-15566	=	_	_	
114-5	15566-15567	"	_	_	
114-6	15567-15573	center	_	_	
114-7	15573-15574	"	_	_	
114-8	15574-15575	>	_	_	
114-9	15578-15579	<	_	_	
114-10	15579-15582	img	_	_	
114-11	15583-15586	src	_	_	
114-12	15586-15587	=	_	_	
114-13	15587-15588	"	_	_	
114-14	15588-15589	.	_	_	

#Text=/figures/executionModelBilateralOperationsWithoutFailuresBEG.png" 
#Text=   width="400" title="Execution model of bilateral operations 
#Text=                      without failures, BEG
115-1	15589-15590	/	_	_	
115-2	15590-15597	figures	_	_	
115-3	15597-15598	/	_	_	
115-4	15598-15653	executionModelBilateralOperationsWithoutFailuresBEG.png	_	_	
115-5	15653-15654	"	_	_	
115-6	15659-15664	width	_	_	
115-7	15664-15665	=	_	_	
115-8	15665-15666	"	_	_	
115-9	15666-15669	400	_	_	
115-10	15669-15670	"	_	_	
115-11	15671-15676	title	_	_	
115-12	15676-15677	=	_	_	
115-13	15677-15678	"	_	_	
115-14	15678-15687	Execution	_	_	
115-15	15688-15693	model	_	_	
115-16	15694-15696	of	_	_	
115-17	15697-15706	bilateral	_	_	
115-18	15707-15717	operations	_	_	
115-19	15741-15748	without	_	_	
115-20	15749-15757	failures	_	_	
115-21	15757-15758	,	_	_	
115-22	15759-15762	BEG	*	SOFTWARE	

#Text=.
116-1	15762-15763	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=
#Text=### Epromela model of the contract example
#Text=The smart contract oriented primitives provided by epromela 
#Text=help developers build models
#Text=that describe the behaivour of contractual interactions in an
#Text=intuitive manner.
117-1	15763-15764	"	_	_	
117-2	15764-15765	>	_	_	
117-3	15766-15767	<	_	_	
117-4	15767-15768	/	_	_	
117-5	15768-15769	p	_	_	
117-6	15769-15770	>	_	_	
117-7	15773-15774	#	_	_	
117-8	15774-15775	#	_	_	
117-9	15775-15776	#	_	_	
117-10	15777-15785	Epromela	*	PROGLANG	
117-11	15786-15791	model	_	_	
117-12	15792-15794	of	_	_	
117-13	15795-15798	the	_	_	
117-14	15799-15807	contract	_	_	
117-15	15808-15815	example	_	_	
117-16	15816-15819	The	_	_	
117-17	15820-15825	smart	_	_	
117-18	15826-15834	contract	_	_	
117-19	15835-15843	oriented	_	_	
117-20	15844-15854	primitives	_	_	
117-21	15855-15863	provided	_	_	
117-22	15864-15866	by	_	_	
117-23	15867-15875	epromela	*	PROGLANG	
117-24	15877-15881	help	_	_	
117-25	15882-15892	developers	_	_	
117-26	15893-15898	build	_	_	
117-27	15899-15905	models	_	_	
117-28	15906-15910	that	_	_	
117-29	15911-15919	describe	_	_	
117-30	15920-15923	the	_	_	
117-31	15924-15933	behaivour	_	_	
117-32	15934-15936	of	_	_	
117-33	15937-15948	contractual	_	_	
117-34	15949-15961	interactions	_	_	
117-35	15962-15964	in	_	_	
117-36	15965-15967	an	_	_	
117-37	15968-15977	intuitive	_	_	
117-38	15978-15984	manner	_	_	
117-39	15984-15985	.	_	_	

#Text=The figure bellow shows the two main
#Text=components of an epromela model, namely, the *BEG* and
#Text=the *set of rules*.
118-1	15986-15989	The	_	_	
118-2	15990-15996	figure	_	_	
118-3	15997-16003	bellow	_	_	
118-4	16004-16009	shows	_	_	
118-5	16010-16013	the	_	_	
118-6	16014-16017	two	_	_	
118-7	16018-16022	main	_	_	
118-8	16023-16033	components	_	_	
118-9	16034-16036	of	_	_	
118-10	16037-16039	an	_	_	
118-11	16040-16048	epromela	_	_	
118-12	16049-16054	model	_	_	
118-13	16054-16055	,	_	_	
118-14	16056-16062	namely	_	_	
118-15	16062-16063	,	_	_	
118-16	16064-16067	the	_	_	
118-17	16068-16069	*	_	_	
118-18	16069-16072	BEG	_	_	
118-19	16072-16073	*	_	_	
118-20	16074-16077	and	_	_	
118-21	16078-16081	the	_	_	
118-22	16082-16083	*	_	_	
118-23	16083-16086	set	_	_	
118-24	16087-16089	of	_	_	
118-25	16090-16095	rules	_	_	
118-26	16095-16096	*	_	_	
118-27	16096-16097	.	_	_	

#Text=It is based on the contract example,
#Text=consequently, the set of rules (stored in the *rules.h*
#Text=files) includes only two rules, one for each 
#Text=business operation.
119-1	16098-16100	It	_	_	
119-2	16101-16103	is	_	_	
119-3	16104-16109	based	_	_	
119-4	16110-16112	on	_	_	
119-5	16113-16116	the	_	_	
119-6	16117-16125	contract	_	_	
119-7	16126-16133	example	_	_	
119-8	16133-16134	,	_	_	
119-9	16135-16147	consequently	_	_	
119-10	16147-16148	,	_	_	
119-11	16149-16152	the	_	_	
119-12	16153-16156	set	_	_	
119-13	16157-16159	of	_	_	
119-14	16160-16165	rules	_	_	
119-15	16166-16167	(	_	_	
119-16	16167-16173	stored	_	_	
119-17	16174-16176	in	_	_	
119-18	16177-16180	the	_	_	
119-19	16181-16182	*	_	_	
119-20	16182-16189	rules.h	_	_	
119-21	16189-16190	*	_	_	
119-22	16191-16196	files	_	_	
119-23	16196-16197	)	_	_	
119-24	16198-16206	includes	_	_	
119-25	16207-16211	only	_	_	
119-26	16212-16215	two	_	_	
119-27	16216-16221	rules	_	_	
119-28	16221-16222	,	_	_	
119-29	16223-16226	one	_	_	
119-30	16227-16230	for	_	_	
119-31	16231-16235	each	_	_	
119-32	16237-16245	business	_	_	
119-33	16246-16255	operation	_	_	
119-34	16255-16256	.	_	_	

#Text=The two rules include the contruct *IS_O*, where *O* stands 
#Text=for obligation, therefore, the construct reads _is obligation_.
120-1	16258-16261	The	_	_	
120-2	16262-16265	two	_	_	
120-3	16266-16271	rules	_	_	
120-4	16272-16279	include	_	_	
120-5	16280-16283	the	_	_	
120-6	16284-16292	contruct	_	_	
120-7	16293-16294	*	_	_	
120-8	16294-16298	IS_O	_	_	
120-9	16298-16299	*	_	_	
120-10	16299-16300	,	_	_	
120-11	16301-16306	where	_	_	
120-12	16307-16308	*	_	_	
120-13	16308-16309	O	_	_	
120-14	16309-16310	*	_	_	
120-15	16311-16317	stands	_	_	
120-16	16319-16322	for	_	_	
120-17	16323-16333	obligation	_	_	
120-18	16333-16334	,	_	_	
120-19	16335-16344	therefore	_	_	
120-20	16344-16345	,	_	_	
120-21	16346-16349	the	_	_	
120-22	16350-16359	construct	_	_	
120-23	16360-16365	reads	_	_	
120-24	16366-16367	_	_	_	
120-25	16367-16369	is	_	_	
120-26	16370-16380	obligation	_	_	
120-27	16380-16381	_	_	_	
120-28	16381-16382	.	_	_	

#Text=*IS_O* is an illustrative example of the contract oriented primitives
#Text=that epromela offers.
121-1	16383-16384	*	_	_	
121-2	16384-16388	IS_O	_	_	
121-3	16388-16389	*	_	_	
121-4	16390-16392	is	_	_	
121-5	16393-16395	an	_	_	
121-6	16396-16408	illustrative	_	_	
121-7	16409-16416	example	_	_	
121-8	16417-16419	of	_	_	
121-9	16420-16423	the	_	_	
121-10	16424-16432	contract	_	_	
121-11	16433-16441	oriented	_	_	
121-12	16442-16452	primitives	_	_	
121-13	16453-16457	that	_	_	
121-14	16458-16466	epromela	*	PROGLANG	
121-15	16467-16473	offers	_	_	
121-16	16473-16474	.	_	_	

#Text=In *Rule(pay)*, *IS_O* indicates that
#Text=the rule will trigger only when it receives
#Text=the event *pay* and the buyer has a pending obligation
#Text=to pay.
122-1	16475-16477	In	_	_	
122-2	16478-16479	*	_	_	
122-3	16479-16483	Rule	_	_	
122-4	16483-16484	(	_	_	
122-5	16484-16487	pay	_	_	
122-6	16487-16488	)	_	_	
122-7	16488-16489	*	_	_	
122-8	16489-16490	,	_	_	
122-9	16491-16492	*	_	_	
122-10	16492-16496	IS_O	_	_	
122-11	16496-16497	*	_	_	
122-12	16498-16507	indicates	_	_	
122-13	16508-16512	that	_	_	
122-14	16513-16516	the	_	_	
122-15	16517-16521	rule	_	_	
122-16	16522-16526	will	_	_	
122-17	16527-16534	trigger	_	_	
122-18	16535-16539	only	_	_	
122-19	16540-16544	when	_	_	
122-20	16545-16547	it	_	_	
122-21	16548-16556	receives	_	_	
122-22	16557-16560	the	_	_	
122-23	16561-16566	event	_	_	
122-24	16567-16568	*	_	_	
122-25	16568-16571	pay	_	_	
122-26	16571-16572	*	_	_	
122-27	16573-16576	and	_	_	
122-28	16577-16580	the	_	_	
122-29	16581-16586	buyer	_	_	
122-30	16587-16590	has	_	_	
122-31	16591-16592	a	_	_	
122-32	16593-16600	pending	_	_	
122-33	16601-16611	obligation	_	_	
122-34	16612-16614	to	_	_	
122-35	16615-16618	pay	_	_	
122-36	16618-16619	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
123-1	16621-16622	<	_	_	
123-2	16622-16623	p	_	_	
123-3	16624-16629	align	_	_	
123-4	16629-16630	=	_	_	
123-5	16630-16631	"	_	_	
123-6	16631-16637	center	_	_	
123-7	16637-16638	"	_	_	
123-8	16638-16639	>	_	_	
123-9	16642-16643	<	_	_	
123-10	16643-16646	img	_	_	
123-11	16647-16650	src	_	_	
123-12	16650-16651	=	_	_	
123-13	16651-16652	"	_	_	
123-14	16652-16653	.	_	_	

#Text=/figures/epromelaModelOfBuyerStoreContractOutputTO.png" 
#Text=   width="400" title="epromela model of the buyer-store example with
#Text=                      output TO
124-1	16653-16654	/	_	_	
124-2	16654-16661	figures	_	_	
124-3	16661-16662	/	_	_	
124-4	16662-16707	epromelaModelOfBuyerStoreContractOutputTO.png	_	_	
124-5	16707-16708	"	_	_	
124-6	16713-16718	width	_	_	
124-7	16718-16719	=	_	_	
124-8	16719-16720	"	_	_	
124-9	16720-16723	400	_	_	
124-10	16723-16724	"	_	_	
124-11	16725-16730	title	_	_	
124-12	16730-16731	=	_	_	
124-13	16731-16732	"	_	_	
124-14	16732-16740	epromela	*	PROGLANG	
124-15	16741-16746	model	_	_	
124-16	16747-16749	of	_	_	
124-17	16750-16753	the	_	_	
124-18	16754-16765	buyer-store	_	_	
124-19	16766-16773	example	_	_	
124-20	16774-16778	with	_	_	
124-21	16801-16807	output	_	_	
124-22	16808-16810	TO	_	_	

#Text=.
125-1	16810-16811	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=If you are motivated to run the hello world contract world example,
#Text=you can find the complete code (and instructions to run it)
#Text=at the [example/helloWorldSmartContract](https://github.com/carlos-molina/contraval/tree/master/examples/helloWorldSmartContractExecOutSuccessOrTO) folder.
126-1	16811-16812	"	_	_	
126-2	16812-16813	>	_	_	
126-3	16814-16815	<	_	_	
126-4	16815-16816	/	_	_	
126-5	16816-16817	p	_	_	
126-6	16817-16818	>	_	_	
126-7	16820-16822	If	_	_	
126-8	16823-16826	you	_	_	
126-9	16827-16830	are	_	_	
126-10	16831-16840	motivated	_	_	
126-11	16841-16843	to	_	_	
126-12	16844-16847	run	_	_	
126-13	16848-16851	the	_	_	
126-14	16852-16857	hello	_	_	
126-15	16858-16863	world	_	_	
126-16	16864-16872	contract	_	_	
126-17	16873-16878	world	_	_	
126-18	16879-16886	example	_	_	
126-19	16886-16887	,	_	_	
126-20	16888-16891	you	_	_	
126-21	16892-16895	can	_	_	
126-22	16896-16900	find	_	_	
126-23	16901-16904	the	_	_	
126-24	16905-16913	complete	_	_	
126-25	16914-16918	code	_	_	
126-26	16919-16920	(	_	_	
126-27	16920-16923	and	_	_	
126-28	16924-16936	instructions	_	_	
126-29	16937-16939	to	_	_	
126-30	16940-16943	run	_	_	
126-31	16944-16946	it	_	_	
126-32	16946-16947	)	_	_	
126-33	16948-16950	at	_	_	
126-34	16951-16954	the	_	_	
126-35	16955-16956	[	_	_	
126-36	16956-16963	example	_	_	
126-37	16963-16964	/	_	_	
126-38	16964-16987	helloWorldSmartContract	_	_	
126-39	16987-16988	]	_	_	
126-40	16988-16989	(	_	_	
126-41	16989-16994	https	_	_	
126-42	16994-16995	:	_	_	
126-43	16995-16996	/	_	_	
126-44	16996-16997	/	_	_	
126-45	16997-17007	github.com	_	_	
126-46	17007-17008	/	_	_	
126-47	17008-17021	carlos-molina	_	_	
126-48	17021-17022	/	_	_	
126-49	17022-17031	contraval	_	_	
126-50	17031-17032	/	_	_	
126-51	17032-17036	tree	_	_	
126-52	17036-17037	/	_	_	
126-53	17037-17043	master	_	_	
126-54	17043-17044	/	_	_	
126-55	17044-17052	examples	_	_	
126-56	17052-17053	/	_	_	
126-57	17053-17094	helloWorldSmartContractExecOutSuccessOrTO	_	_	
126-58	17094-17095	)	_	_	
126-59	17096-17102	folder	_	_	
126-60	17102-17103	.	_	_	

#Text=A run of the model will mechanically produce all (three) the execution
#Text=sequences encoded in the model, namely:
#Text=
#Text=```
#Text=- payto
#Text=- pay -> ack
#Text=- pay -> ackto
#Text=```
#Text=Where *payto* and *ackto* stand for expiration of time out to pay 
#Text=and expiration of time out to ack, respectively.
127-1	17104-17105	A	_	_	
127-2	17106-17109	run	_	_	
127-3	17110-17112	of	_	_	
127-4	17113-17116	the	_	_	
127-5	17117-17122	model	_	_	
127-6	17123-17127	will	_	_	
127-7	17128-17140	mechanically	_	_	
127-8	17141-17148	produce	_	_	
127-9	17149-17152	all	_	_	
127-10	17153-17154	(	_	_	
127-11	17154-17159	three	_	_	
127-12	17159-17160	)	_	_	
127-13	17161-17164	the	_	_	
127-14	17165-17174	execution	_	_	
127-15	17175-17184	sequences	_	_	
127-16	17185-17192	encoded	_	_	
127-17	17193-17195	in	_	_	
127-18	17196-17199	the	_	_	
127-19	17200-17205	model	_	_	
127-20	17205-17206	,	_	_	
127-21	17207-17213	namely	_	_	
127-22	17213-17214	:	_	_	
127-23	17216-17217	`	_	_	
127-24	17217-17218	`	_	_	
127-25	17218-17219	`	_	_	
127-26	17220-17221	-	_	_	
127-27	17222-17227	payto	_	_	
127-28	17228-17229	-	_	_	
127-29	17230-17233	pay	_	_	
127-30	17234-17235	-	_	_	
127-31	17235-17236	>	_	_	
127-32	17237-17240	ack	_	_	
127-33	17241-17242	-	_	_	
127-34	17243-17246	pay	_	_	
127-35	17247-17248	-	_	_	
127-36	17248-17249	>	_	_	
127-37	17250-17255	ackto	_	_	
127-38	17256-17257	`	_	_	
127-39	17257-17258	`	_	_	
127-40	17258-17259	`	_	_	
127-41	17260-17265	Where	_	_	
127-42	17266-17267	*	_	_	
127-43	17267-17272	payto	_	_	
127-44	17272-17273	*	_	_	
127-45	17274-17277	and	_	_	
127-46	17278-17279	*	_	_	
127-47	17279-17284	ackto	_	_	
127-48	17284-17285	*	_	_	
127-49	17286-17291	stand	_	_	
127-50	17292-17295	for	_	_	
127-51	17296-17306	expiration	_	_	
127-52	17307-17309	of	_	_	
127-53	17310-17314	time	_	_	
127-54	17315-17318	out	_	_	
127-55	17319-17321	to	_	_	
127-56	17322-17325	pay	_	_	
127-57	17327-17330	and	_	_	
127-58	17331-17341	expiration	_	_	
127-59	17342-17344	of	_	_	
127-60	17345-17349	time	_	_	
127-61	17350-17353	out	_	_	
127-62	17354-17356	to	_	_	
127-63	17357-17360	ack	_	_	
127-64	17360-17361	,	_	_	
127-65	17362-17374	respectively	_	_	
127-66	17374-17375	.	_	_	

#Text=You will notice
#Text=that the rules (included in the *rules.h* file) are slightly
#Text=different in comparison with the rules of the previous
#Text=model.
#Text=
#Text=
#Text=### Alternative epromela model of the contract example
#Text=The execution model of operations shown above is not unique.
128-1	17376-17379	You	_	_	
128-2	17380-17384	will	_	_	
128-3	17385-17391	notice	_	_	
128-4	17392-17396	that	_	_	
128-5	17397-17400	the	_	_	
128-6	17401-17406	rules	_	_	
128-7	17407-17408	(	_	_	
128-8	17408-17416	included	_	_	
128-9	17417-17419	in	_	_	
128-10	17420-17423	the	_	_	
128-11	17424-17425	*	_	_	
128-12	17425-17432	rules.h	_	_	
128-13	17432-17433	*	_	_	
128-14	17434-17438	file	_	_	
128-15	17438-17439	)	_	_	
128-16	17440-17443	are	_	_	
128-17	17444-17452	slightly	_	_	
128-18	17453-17462	different	_	_	
128-19	17463-17465	in	_	_	
128-20	17466-17476	comparison	_	_	
128-21	17477-17481	with	_	_	
128-22	17482-17485	the	_	_	
128-23	17486-17491	rules	_	_	
128-24	17492-17494	of	_	_	
128-25	17495-17498	the	_	_	
128-26	17499-17507	previous	_	_	
128-27	17508-17513	model	_	_	
128-28	17513-17514	.	_	_	
128-29	17517-17518	#	_	_	
128-30	17518-17519	#	_	_	
128-31	17519-17520	#	_	_	
128-32	17521-17532	Alternative	_	_	
128-33	17533-17541	epromela	*	PROGLANG	
128-34	17542-17547	model	_	_	
128-35	17548-17550	of	_	_	
128-36	17551-17554	the	_	_	
128-37	17555-17563	contract	_	_	
128-38	17564-17571	example	_	_	
128-39	17572-17575	The	_	_	
128-40	17576-17585	execution	_	_	
128-41	17586-17591	model	_	_	
128-42	17592-17594	of	_	_	
128-43	17595-17605	operations	_	_	
128-44	17606-17611	shown	_	_	
128-45	17612-17617	above	_	_	
128-46	17618-17620	is	_	_	
128-47	17621-17624	not	_	_	
128-48	17625-17631	unique	_	_	
128-49	17631-17632	.	_	_	

#Text=Another
#Text=altrnative is shoen in the figure.
129-1	17633-17640	Another	_	_	
129-2	17641-17651	altrnative	_	_	
129-3	17652-17654	is	_	_	
129-4	17655-17660	shoen	_	_	
129-5	17661-17663	in	_	_	
129-6	17664-17667	the	_	_	
129-7	17668-17674	figure	_	_	
129-8	17674-17675	.	_	_	

#Text=As an example, let us assume the execution model shown in the
#Text=following figure.
130-1	17677-17679	As	_	_	
130-2	17680-17682	an	_	_	
130-3	17683-17690	example	_	_	
130-4	17690-17691	,	_	_	
130-5	17692-17695	let	_	_	
130-6	17696-17698	us	_	_	
130-7	17699-17705	assume	_	_	
130-8	17706-17709	the	_	_	
130-9	17710-17719	execution	_	_	
130-10	17720-17725	model	_	_	
130-11	17726-17731	shown	_	_	
130-12	17732-17734	in	_	_	
130-13	17735-17738	the	_	_	
130-14	17739-17748	following	_	_	
130-15	17749-17755	figure	_	_	
130-16	17755-17756	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
131-1	17758-17759	<	_	_	
131-2	17759-17760	p	_	_	
131-3	17761-17766	align	_	_	
131-4	17766-17767	=	_	_	
131-5	17767-17768	"	_	_	
131-6	17768-17774	center	_	_	
131-7	17774-17775	"	_	_	
131-8	17775-17776	>	_	_	
131-9	17779-17780	<	_	_	
131-10	17780-17783	img	_	_	
131-11	17784-17787	src	_	_	
131-12	17787-17788	=	_	_	
131-13	17788-17789	"	_	_	
131-14	17789-17790	.	_	_	

#Text=/figures/executionmodelTOtoInitiate.png" width="550" title="Execution model that initiates or times out">
#Text=</p>
#Text=
#Text=On the basis of this execution model, we can
#Text=represent the contract example schematically
#Text=in the following manner.
132-1	17790-17791	/	_	_	
132-2	17791-17798	figures	_	_	
132-3	17798-17799	/	_	_	
132-4	17799-17829	executionmodelTOtoInitiate.png	_	_	
132-5	17829-17830	"	_	_	
132-6	17831-17836	width	_	_	
132-7	17836-17837	=	_	_	
132-8	17837-17838	"	_	_	
132-9	17838-17841	550	_	_	
132-10	17841-17842	"	_	_	
132-11	17843-17848	title	_	_	
132-12	17848-17849	=	_	_	
132-13	17849-17850	"	_	_	
132-14	17850-17859	Execution	_	_	
132-15	17860-17865	model	_	_	
132-16	17866-17870	that	_	_	
132-17	17871-17880	initiates	_	_	
132-18	17881-17883	or	_	_	
132-19	17884-17889	times	_	_	
132-20	17890-17893	out	_	_	
132-21	17893-17894	"	_	_	
132-22	17894-17895	>	_	_	
132-23	17896-17897	<	_	_	
132-24	17897-17898	/	_	_	
132-25	17898-17899	p	_	_	
132-26	17899-17900	>	_	_	
132-27	17902-17904	On	_	_	
132-28	17905-17908	the	_	_	
132-29	17909-17914	basis	_	_	
132-30	17915-17917	of	_	_	
132-31	17918-17922	this	_	_	
132-32	17923-17932	execution	_	_	
132-33	17933-17938	model	_	_	
132-34	17938-17939	,	_	_	
132-35	17940-17942	we	_	_	
132-36	17943-17946	can	_	_	
132-37	17947-17956	represent	_	_	
132-38	17957-17960	the	_	_	
132-39	17961-17969	contract	_	_	
132-40	17970-17977	example	_	_	
132-41	17978-17991	schematically	_	_	
132-42	17992-17994	in	_	_	
132-43	17995-17998	the	_	_	
132-44	17999-18008	following	_	_	
132-45	18009-18015	manner	_	_	
132-46	18015-18016	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
133-1	18018-18019	<	_	_	
133-2	18019-18020	p	_	_	
133-3	18021-18026	align	_	_	
133-4	18026-18027	=	_	_	
133-5	18027-18028	"	_	_	
133-6	18028-18034	center	_	_	
133-7	18034-18035	"	_	_	
133-8	18035-18036	>	_	_	
133-9	18039-18040	<	_	_	
133-10	18040-18043	img	_	_	
133-11	18044-18047	src	_	_	
133-12	18047-18048	=	_	_	
133-13	18048-18049	"	_	_	
133-14	18049-18050	.	_	_	

#Text=/figures/helloWorldSmartContractBuyerStoreInitiateTO.png" width="550" title="Hello world contract: buyer-store with init TO">
#Text=</p>
#Text=
#Text=In the figure, *pay*  represents the execution
#Text=of the *pay*  operation initiated by the buyer.
134-1	18050-18051	/	_	_	
134-2	18051-18058	figures	_	_	
134-3	18058-18059	/	_	_	
134-4	18059-18106	helloWorldSmartContractBuyerStoreInitiateTO.png	_	_	
134-5	18106-18107	"	_	_	
134-6	18108-18113	width	_	_	
134-7	18113-18114	=	_	_	
134-8	18114-18115	"	_	_	
134-9	18115-18118	550	_	_	
134-10	18118-18119	"	_	_	
134-11	18120-18125	title	_	_	
134-12	18125-18126	=	_	_	
134-13	18126-18127	"	_	_	
134-14	18127-18132	Hello	_	_	
134-15	18133-18138	world	_	_	
134-16	18139-18147	contract	_	_	
134-17	18147-18148	:	_	_	
134-18	18149-18160	buyer-store	_	_	
134-19	18161-18165	with	_	_	
134-20	18166-18170	init	_	_	
134-21	18171-18173	TO	_	_	
134-22	18173-18174	"	_	_	
134-23	18174-18175	>	_	_	
134-24	18176-18177	<	_	_	
134-25	18177-18178	/	_	_	
134-26	18178-18179	p	_	_	
134-27	18179-18180	>	_	_	
134-28	18182-18184	In	_	_	
134-29	18185-18188	the	_	_	
134-30	18189-18195	figure	_	_	
134-31	18195-18196	,	_	_	
134-32	18197-18198	*	_	_	
134-33	18198-18201	pay	_	_	
134-34	18201-18202	*	_	_	
134-35	18204-18214	represents	_	_	
134-36	18215-18218	the	_	_	
134-37	18219-18228	execution	_	_	
134-38	18229-18231	of	_	_	
134-39	18232-18235	the	_	_	
134-40	18236-18237	*	_	_	
134-41	18237-18240	pay	_	_	
134-42	18240-18241	*	_	_	
134-43	18243-18252	operation	_	_	
134-44	18253-18262	initiated	_	_	
134-45	18263-18265	by	_	_	
134-46	18266-18269	the	_	_	
134-47	18270-18275	buyer	_	_	
134-48	18275-18276	.	_	_	

#Text=Similarly, *ack* represens the execution of the
#Text=*ack* operation initiated by the store.
135-1	18277-18286	Similarly	_	_	
135-2	18286-18287	,	_	_	
135-3	18288-18289	*	_	_	
135-4	18289-18292	ack	_	_	
135-5	18292-18293	*	_	_	
135-6	18294-18303	represens	_	_	
135-7	18304-18307	the	_	_	
135-8	18308-18317	execution	_	_	
135-9	18318-18320	of	_	_	
135-10	18321-18324	the	_	_	
135-11	18325-18326	*	_	_	
135-12	18326-18329	ack	_	_	
135-13	18329-18330	*	_	_	
135-14	18331-18340	operation	_	_	
135-15	18341-18350	initiated	_	_	
135-16	18351-18353	by	_	_	
135-17	18354-18357	the	_	_	
135-18	18358-18363	store	_	_	
135-19	18363-18364	.	_	_	

#Text=These executions, result in the generation of
#Text=business events that are notified to the
#Text=smart contract (see below), for example, the
#Text=execution of the operation *pay* generates the
#Text=*pay* business event.
136-1	18365-18370	These	_	_	
136-2	18371-18381	executions	_	_	
136-3	18381-18382	,	_	_	
136-4	18383-18389	result	_	_	
136-5	18390-18392	in	_	_	
136-6	18393-18396	the	_	_	
136-7	18397-18407	generation	_	_	
136-8	18408-18410	of	_	_	
136-9	18411-18419	business	_	_	
136-10	18420-18426	events	_	_	
136-11	18427-18431	that	_	_	
136-12	18432-18435	are	_	_	
136-13	18436-18444	notified	_	_	
136-14	18445-18447	to	_	_	
136-15	18448-18451	the	_	_	
136-16	18452-18457	smart	_	_	
136-17	18458-18466	contract	_	_	
136-18	18467-18468	(	_	_	
136-19	18468-18471	see	_	_	
136-20	18472-18477	below	_	_	
136-21	18477-18478	)	_	_	
136-22	18478-18479	,	_	_	
136-23	18480-18483	for	_	_	
136-24	18484-18491	example	_	_	
136-25	18491-18492	,	_	_	
136-26	18493-18496	the	_	_	
136-27	18497-18506	execution	_	_	
136-28	18507-18509	of	_	_	
136-29	18510-18513	the	_	_	
136-30	18514-18523	operation	_	_	
136-31	18524-18525	*	_	_	
136-32	18525-18528	pay	_	_	
136-33	18528-18529	*	_	_	
136-34	18530-18539	generates	_	_	
136-35	18540-18543	the	_	_	
136-36	18544-18545	*	_	_	
136-37	18545-18548	pay	_	_	
136-38	18548-18549	*	_	_	
136-39	18550-18558	business	_	_	
136-40	18559-18564	event	_	_	
136-41	18564-18565	.	_	_	

#Text=A diamon represents an alternative execution 
#Text=split, *O* stands for obligation and *TO* 
#Text=stands for Time Out.
137-1	18566-18567	A	_	_	
137-2	18568-18574	diamon	_	_	
137-3	18575-18585	represents	_	_	
137-4	18586-18588	an	_	_	
137-5	18589-18600	alternative	_	_	
137-6	18601-18610	execution	_	_	
137-7	18612-18617	split	_	_	
137-8	18617-18618	,	_	_	
137-9	18619-18620	*	_	_	
137-10	18620-18621	O	_	_	
137-11	18621-18622	*	_	_	
137-12	18623-18629	stands	_	_	
137-13	18630-18633	for	_	_	
137-14	18634-18644	obligation	_	_	
137-15	18645-18648	and	_	_	
137-16	18649-18650	*	_	_	
137-17	18650-18652	TO	_	_	
137-18	18652-18653	*	_	_	
137-19	18655-18661	stands	_	_	
137-20	18662-18665	for	_	_	
137-21	18666-18670	Time	_	_	
137-22	18671-18674	Out	_	_	
137-23	18674-18675	.	_	_	

#Text=In this model (there
#Text=are other alternatives), the
#Text=box at the right side of a diamon represents
#Text=the sucessful execution of the operation,
#Text=while the *TO* represents the expiration of the
#Text=deadline to succssfully execute the operation.
138-1	18676-18678	In	_	_	
138-2	18679-18683	this	_	_	
138-3	18684-18689	model	_	_	
138-4	18690-18691	(	_	_	
138-5	18691-18696	there	_	_	
138-6	18697-18700	are	_	_	
138-7	18701-18706	other	_	_	
138-8	18707-18719	alternatives	_	_	
138-9	18719-18720	)	_	_	
138-10	18720-18721	,	_	_	
138-11	18722-18725	the	_	_	
138-12	18726-18729	box	_	_	
138-13	18730-18732	at	_	_	
138-14	18733-18736	the	_	_	
138-15	18737-18742	right	_	_	
138-16	18743-18747	side	_	_	
138-17	18748-18750	of	_	_	
138-18	18751-18752	a	_	_	
138-19	18753-18759	diamon	_	_	
138-20	18760-18770	represents	_	_	
138-21	18771-18774	the	_	_	
138-22	18775-18784	sucessful	_	_	
138-23	18785-18794	execution	_	_	
138-24	18795-18797	of	_	_	
138-25	18798-18801	the	_	_	
138-26	18802-18811	operation	_	_	
138-27	18811-18812	,	_	_	
138-28	18813-18818	while	_	_	
138-29	18819-18822	the	_	_	
138-30	18823-18824	*	_	_	
138-31	18824-18826	TO	_	_	
138-32	18826-18827	*	_	_	
138-33	18828-18838	represents	_	_	
138-34	18839-18842	the	_	_	
138-35	18843-18853	expiration	_	_	
138-36	18854-18856	of	_	_	
138-37	18857-18860	the	_	_	
138-38	18861-18869	deadline	_	_	
138-39	18870-18872	to	_	_	
138-40	18873-18884	succssfully	_	_	
138-41	18885-18892	execute	_	_	
138-42	18893-18896	the	_	_	
138-43	18897-18906	operation	_	_	
138-44	18906-18907	.	_	_	

#Text=The dashed lines represent abnormal paths to contract 
#Text=completion.
139-1	18909-18912	The	_	_	
139-2	18913-18919	dashed	_	_	
139-3	18920-18925	lines	_	_	
139-4	18926-18935	represent	_	_	
139-5	18936-18944	abnormal	_	_	
139-6	18945-18950	paths	_	_	
139-7	18951-18953	to	_	_	
139-8	18954-18962	contract	_	_	
139-9	18964-18974	completion	_	_	
139-10	18974-18975	.	_	_	

#Text=They results from failures to meet
#Text=deadlines.
140-1	18976-18980	They	_	_	
140-2	18981-18988	results	_	_	
140-3	18989-18993	from	_	_	
140-4	18994-19002	failures	_	_	
140-5	19003-19005	to	_	_	
140-6	19006-19010	meet	_	_	
140-7	19011-19020	deadlines	_	_	
140-8	19020-19021	.	_	_	

#Text=The epromela model includes four rules and is shown in
#Text=the figure.
141-1	19024-19027	The	_	_	
141-2	19028-19036	epromela	*	PROGLANG	
141-3	19037-19042	model	_	_	
141-4	19043-19051	includes	_	_	
141-5	19052-19056	four	_	_	
141-6	19057-19062	rules	_	_	
141-7	19063-19066	and	_	_	
141-8	19067-19069	is	_	_	
141-9	19070-19075	shown	_	_	
141-10	19076-19078	in	_	_	
141-11	19079-19082	the	_	_	
141-12	19083-19089	figure	_	_	
141-13	19089-19090	.	_	_	

#Text=Observe that the model includes two separate
#Text=rules (for for the normal outcome and another for
#Text=the timed out outcome) for handling each business 
#Text=operation.
142-1	19091-19098	Observe	_	_	
142-2	19099-19103	that	_	_	
142-3	19104-19107	the	_	_	
142-4	19108-19113	model	_	_	
142-5	19114-19122	includes	_	_	
142-6	19123-19126	two	_	_	
142-7	19127-19135	separate	_	_	
142-8	19136-19141	rules	_	_	
142-9	19142-19143	(	_	_	
142-10	19143-19146	for	_	_	
142-11	19147-19150	for	_	_	
142-12	19151-19154	the	_	_	
142-13	19155-19161	normal	_	_	
142-14	19162-19169	outcome	_	_	
142-15	19170-19173	and	_	_	
142-16	19174-19181	another	_	_	
142-17	19182-19185	for	_	_	
142-18	19186-19189	the	_	_	
142-19	19190-19195	timed	_	_	
142-20	19196-19199	out	_	_	
142-21	19200-19207	outcome	_	_	
142-22	19207-19208	)	_	_	
142-23	19209-19212	for	_	_	
142-24	19213-19221	handling	_	_	
142-25	19222-19226	each	_	_	
142-26	19227-19235	business	_	_	
142-27	19237-19246	operation	_	_	
142-28	19246-19247	.	_	_	

#Text=For instance, there is a rule for handling
#Text=*pay* and another one independent rule for handling
#Text=*payto*.
143-1	19248-19251	For	_	_	
143-2	19252-19260	instance	_	_	
143-3	19260-19261	,	_	_	
143-4	19262-19267	there	_	_	
143-5	19268-19270	is	_	_	
143-6	19271-19272	a	_	_	
143-7	19273-19277	rule	_	_	
143-8	19278-19281	for	_	_	
143-9	19282-19290	handling	_	_	
143-10	19291-19292	*	_	_	
143-11	19292-19295	pay	_	_	
143-12	19295-19296	*	_	_	
143-13	19297-19300	and	_	_	
143-14	19301-19308	another	_	_	
143-15	19309-19312	one	_	_	
143-16	19313-19324	independent	_	_	
143-17	19325-19329	rule	_	_	
143-18	19330-19333	for	_	_	
143-19	19334-19342	handling	_	_	
143-20	19343-19344	*	_	_	
143-21	19344-19349	payto	_	_	
143-22	19349-19350	*	_	_	
143-23	19350-19351	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
144-1	19353-19354	<	_	_	
144-2	19354-19355	p	_	_	
144-3	19356-19361	align	_	_	
144-4	19361-19362	=	_	_	
144-5	19362-19363	"	_	_	
144-6	19363-19369	center	_	_	
144-7	19369-19370	"	_	_	
144-8	19370-19371	>	_	_	
144-9	19374-19375	<	_	_	
144-10	19375-19378	img	_	_	
144-11	19379-19382	src	_	_	
144-12	19382-19383	=	_	_	
144-13	19383-19384	"	_	_	
144-14	19384-19385	.	_	_	

#Text=/figures/epromelaModelOfBuyerStoreContractInitTO.png" 
#Text=   width="400" title="epromela model of the buyer-store example with
#Text=                      init  TO
145-1	19385-19386	/	_	_	
145-2	19386-19393	figures	_	_	
145-3	19393-19394	/	_	_	
145-4	19394-19437	epromelaModelOfBuyerStoreContractInitTO.png	_	_	
145-5	19437-19438	"	_	_	
145-6	19443-19448	width	_	_	
145-7	19448-19449	=	_	_	
145-8	19449-19450	"	_	_	
145-9	19450-19453	400	_	_	
145-10	19453-19454	"	_	_	
145-11	19455-19460	title	_	_	
145-12	19460-19461	=	_	_	
145-13	19461-19462	"	_	_	
145-14	19462-19470	epromela	*	PROGLANG	
145-15	19471-19476	model	_	_	
145-16	19477-19479	of	_	_	
145-17	19480-19483	the	_	_	
145-18	19484-19495	buyer-store	_	_	
145-19	19496-19503	example	_	_	
145-20	19504-19508	with	_	_	
145-21	19531-19535	init	_	_	
145-22	19537-19539	TO	_	_	

#Text=.
146-1	19539-19540	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=
#Text=
#Text=Motivated readers are welcome to run this alternative
#Text=model of the  hello world contract example,
#Text=they can find the complete code (and instructions to run it)
#Text=at the [example/helloWorldSmartContract](https://github.com/carlos-molina/contraval/tree/master/examples/helloWorldSmartContractInitOrTO) 
#Text=folder.
147-1	19540-19541	"	_	_	
147-2	19541-19542	>	_	_	
147-3	19543-19544	<	_	_	
147-4	19544-19545	/	_	_	
147-5	19545-19546	p	_	_	
147-6	19546-19547	>	_	_	
147-7	19551-19560	Motivated	_	_	
147-8	19561-19568	readers	_	_	
147-9	19569-19572	are	_	_	
147-10	19573-19580	welcome	_	_	
147-11	19581-19583	to	_	_	
147-12	19584-19587	run	_	_	
147-13	19588-19592	this	_	_	
147-14	19593-19604	alternative	_	_	
147-15	19605-19610	model	_	_	
147-16	19611-19613	of	_	_	
147-17	19614-19617	the	_	_	
147-18	19619-19624	hello	_	_	
147-19	19625-19630	world	_	_	
147-20	19631-19639	contract	_	_	
147-21	19640-19647	example	_	_	
147-22	19647-19648	,	_	_	
147-23	19649-19653	they	_	_	
147-24	19654-19657	can	_	_	
147-25	19658-19662	find	_	_	
147-26	19663-19666	the	_	_	
147-27	19667-19675	complete	_	_	
147-28	19676-19680	code	_	_	
147-29	19681-19682	(	_	_	
147-30	19682-19685	and	_	_	
147-31	19686-19698	instructions	_	_	
147-32	19699-19701	to	_	_	
147-33	19702-19705	run	_	_	
147-34	19706-19708	it	_	_	
147-35	19708-19709	)	_	_	
147-36	19710-19712	at	_	_	
147-37	19713-19716	the	_	_	
147-38	19717-19718	[	_	_	
147-39	19718-19725	example	_	_	
147-40	19725-19726	/	_	_	
147-41	19726-19749	helloWorldSmartContract	_	_	
147-42	19749-19750	]	_	_	
147-43	19750-19751	(	_	_	
147-44	19751-19756	https	_	_	
147-45	19756-19757	:	_	_	
147-46	19757-19758	/	_	_	
147-47	19758-19759	/	_	_	
147-48	19759-19769	github.com	_	_	
147-49	19769-19770	/	_	_	
147-50	19770-19783	carlos-molina	_	_	
147-51	19783-19784	/	_	_	
147-52	19784-19793	contraval	_	_	
147-53	19793-19794	/	_	_	
147-54	19794-19798	tree	_	_	
147-55	19798-19799	/	_	_	
147-56	19799-19805	master	_	_	
147-57	19805-19806	/	_	_	
147-58	19806-19814	examples	_	_	
147-59	19814-19815	/	_	_	
147-60	19815-19846	helloWorldSmartContractInitOrTO	_	_	
147-61	19846-19847	)	_	_	
147-62	19849-19855	folder	_	_	
147-63	19855-19856	.	_	_	

#Text=As in the model discussed earlier, a run of this
#Text=model will mechanically produce all (three) the execution
#Text=sequences encoded in the model, namely:
#Text=
#Text=```
#Text=- payto
#Text=- pay -> ack
#Text=- pay -> ackto
#Text=```
#Text=Where *payto* and *ackto* stand for expiration of time out to pay 
#Text=and expiration of time out to ack, respectively.
#Text=
#Text=
#Text=
#Text=### Execution model of bilateral operations with potential exceptions 
#Text=A salient feature of epromela is that it can model
#Text=exceptions on the basis of the following execution model:
#Text=<br/>
#Text=
#Text=Contractual operations are bilateral in the sense that
#Text=their execution requires the interaction of the two
#Text=business partners.
148-1	19857-19859	As	_	_	
148-2	19860-19862	in	_	_	
148-3	19863-19866	the	_	_	
148-4	19867-19872	model	_	_	
148-5	19873-19882	discussed	_	_	
148-6	19883-19890	earlier	_	_	
148-7	19890-19891	,	_	_	
148-8	19892-19893	a	_	_	
148-9	19894-19897	run	_	_	
148-10	19898-19900	of	_	_	
148-11	19901-19905	this	_	_	
148-12	19906-19911	model	_	_	
148-13	19912-19916	will	_	_	
148-14	19917-19929	mechanically	_	_	
148-15	19930-19937	produce	_	_	
148-16	19938-19941	all	_	_	
148-17	19942-19943	(	_	_	
148-18	19943-19948	three	_	_	
148-19	19948-19949	)	_	_	
148-20	19950-19953	the	_	_	
148-21	19954-19963	execution	_	_	
148-22	19964-19973	sequences	_	_	
148-23	19974-19981	encoded	_	_	
148-24	19982-19984	in	_	_	
148-25	19985-19988	the	_	_	
148-26	19989-19994	model	_	_	
148-27	19994-19995	,	_	_	
148-28	19996-20002	namely	_	_	
148-29	20002-20003	:	_	_	
148-30	20005-20006	`	_	_	
148-31	20006-20007	`	_	_	
148-32	20007-20008	`	_	_	
148-33	20009-20010	-	_	_	
148-34	20011-20016	payto	_	_	
148-35	20017-20018	-	_	_	
148-36	20019-20022	pay	_	_	
148-37	20023-20024	-	_	_	
148-38	20024-20025	>	_	_	
148-39	20026-20029	ack	_	_	
148-40	20030-20031	-	_	_	
148-41	20032-20035	pay	_	_	
148-42	20036-20037	-	_	_	
148-43	20037-20038	>	_	_	
148-44	20039-20044	ackto	_	_	
148-45	20045-20046	`	_	_	
148-46	20046-20047	`	_	_	
148-47	20047-20048	`	_	_	
148-48	20049-20054	Where	_	_	
148-49	20055-20056	*	_	_	
148-50	20056-20061	payto	_	_	
148-51	20061-20062	*	_	_	
148-52	20063-20066	and	_	_	
148-53	20067-20068	*	_	_	
148-54	20068-20073	ackto	_	_	
148-55	20073-20074	*	_	_	
148-56	20075-20080	stand	_	_	
148-57	20081-20084	for	_	_	
148-58	20085-20095	expiration	_	_	
148-59	20096-20098	of	_	_	
148-60	20099-20103	time	_	_	
148-61	20104-20107	out	_	_	
148-62	20108-20110	to	_	_	
148-63	20111-20114	pay	_	_	
148-64	20116-20119	and	_	_	
148-65	20120-20130	expiration	_	_	
148-66	20131-20133	of	_	_	
148-67	20134-20138	time	_	_	
148-68	20139-20142	out	_	_	
148-69	20143-20145	to	_	_	
148-70	20146-20149	ack	_	_	
148-71	20149-20150	,	_	_	
148-72	20151-20163	respectively	_	_	
148-73	20163-20164	.	_	_	
148-74	20168-20169	#	_	_	
148-75	20169-20170	#	_	_	
148-76	20170-20171	#	_	_	
148-77	20172-20181	Execution	_	_	
148-78	20182-20187	model	_	_	
148-79	20188-20190	of	_	_	
148-80	20191-20200	bilateral	_	_	
148-81	20201-20211	operations	_	_	
148-82	20212-20216	with	_	_	
148-83	20217-20226	potential	_	_	
148-84	20227-20237	exceptions	_	_	
148-85	20239-20240	A	_	_	
148-86	20241-20248	salient	_	_	
148-87	20249-20256	feature	_	_	
148-88	20257-20259	of	_	_	
148-89	20260-20268	epromela	*	PROGLANG	
148-90	20269-20271	is	_	_	
148-91	20272-20276	that	_	_	
148-92	20277-20279	it	_	_	
148-93	20280-20283	can	_	_	
148-94	20284-20289	model	_	_	
148-95	20290-20300	exceptions	_	_	
148-96	20301-20303	on	_	_	
148-97	20304-20307	the	_	_	
148-98	20308-20313	basis	_	_	
148-99	20314-20316	of	_	_	
148-100	20317-20320	the	_	_	
148-101	20321-20330	following	_	_	
148-102	20331-20340	execution	_	_	
148-103	20341-20346	model	_	_	
148-104	20346-20347	:	_	_	
148-105	20348-20349	<	_	_	
148-106	20349-20351	br	_	_	
148-107	20351-20352	/	_	_	
148-108	20352-20353	>	_	_	
148-109	20355-20366	Contractual	_	_	
148-110	20367-20377	operations	_	_	
148-111	20378-20381	are	_	_	
148-112	20382-20391	bilateral	_	_	
148-113	20392-20394	in	_	_	
148-114	20395-20398	the	_	_	
148-115	20399-20404	sense	_	_	
148-116	20405-20409	that	_	_	
148-117	20410-20415	their	_	_	
148-118	20416-20425	execution	_	_	
148-119	20426-20434	requires	_	_	
148-120	20435-20438	the	_	_	
148-121	20439-20450	interaction	_	_	
148-122	20451-20453	of	_	_	
148-123	20454-20457	the	_	_	
148-124	20458-20461	two	_	_	
148-125	20462-20470	business	_	_	
148-126	20471-20479	partners	_	_	
148-127	20479-20480	.	_	_	

#Text=Upon completion of the execution of a given operation
#Text=each party independently declares its local outcome:
#Text=success, business failure (bizfail) or technical 
#Text=failure (tecfail).
149-1	20482-20486	Upon	_	_	
149-2	20487-20497	completion	_	_	
149-3	20498-20500	of	_	_	
149-4	20501-20504	the	_	_	
149-5	20505-20514	execution	_	_	
149-6	20515-20517	of	_	_	
149-7	20518-20519	a	_	_	
149-8	20520-20525	given	_	_	
149-9	20526-20535	operation	_	_	
149-10	20536-20540	each	_	_	
149-11	20541-20546	party	_	_	
149-12	20547-20560	independently	_	_	
149-13	20561-20569	declares	_	_	
149-14	20570-20573	its	_	_	
149-15	20574-20579	local	_	_	
149-16	20580-20587	outcome	_	_	
149-17	20587-20588	:	_	_	
149-18	20589-20596	success	_	_	
149-19	20596-20597	,	_	_	
149-20	20598-20606	business	_	_	
149-21	20607-20614	failure	_	_	
149-22	20615-20616	(	_	_	
149-23	20616-20623	bizfail	_	_	
149-24	20623-20624	)	_	_	
149-25	20625-20627	or	_	_	
149-26	20628-20637	technical	_	_	
149-27	20639-20646	failure	_	_	
149-28	20647-20648	(	_	_	
149-29	20648-20655	tecfail	_	_	
149-30	20655-20656	)	_	_	
149-31	20656-20657	.	_	_	

#Text=Since the parties operate in a loosely coupled mode,
#Text=their outcomes does not necessarily match.
150-1	20659-20664	Since	_	_	
150-2	20665-20668	the	_	_	
150-3	20669-20676	parties	_	_	
150-4	20677-20684	operate	_	_	
150-5	20685-20687	in	_	_	
150-6	20688-20689	a	_	_	
150-7	20690-20697	loosely	_	_	
150-8	20698-20705	coupled	_	_	
150-9	20706-20710	mode	_	_	
150-10	20710-20711	,	_	_	
150-11	20712-20717	their	_	_	
150-12	20718-20726	outcomes	_	_	
150-13	20727-20731	does	_	_	
150-14	20732-20735	not	_	_	
150-15	20736-20747	necessarily	_	_	
150-16	20748-20753	match	_	_	
150-17	20753-20754	.	_	_	

#Text=For instance
#Text=a party might declare success whereas its counterpart
#Text=declares business failure.
151-1	20755-20758	For	_	_	
151-2	20759-20767	instance	_	_	
151-3	20768-20769	a	_	_	
151-4	20770-20775	party	_	_	
151-5	20776-20781	might	_	_	
151-6	20782-20789	declare	_	_	
151-7	20790-20797	success	_	_	
151-8	20798-20805	whereas	_	_	
151-9	20806-20809	its	_	_	
151-10	20810-20821	counterpart	_	_	
151-11	20822-20830	declares	_	_	
151-12	20831-20839	business	_	_	
151-13	20840-20847	failure	_	_	
151-14	20847-20848	.	_	_	

#Text=To agree on the outcome of each operation and be able
#Text=to progress to the next one in harmony, the parties
#Text=rely on an output synchronizer that is responsible for 
#Text=receiving the individual outcomes, compute a single
#Text=outcome and notify it to the contractual parties and
#Text=possibly to other parties that are entitled to
#Text=follow the execution of the contract.
152-1	20850-20852	To	_	_	
152-2	20853-20858	agree	_	_	
152-3	20859-20861	on	_	_	
152-4	20862-20865	the	_	_	
152-5	20866-20873	outcome	_	_	
152-6	20874-20876	of	_	_	
152-7	20877-20881	each	_	_	
152-8	20882-20891	operation	_	_	
152-9	20892-20895	and	_	_	
152-10	20896-20898	be	_	_	
152-11	20899-20903	able	_	_	
152-12	20904-20906	to	_	_	
152-13	20907-20915	progress	_	_	
152-14	20916-20918	to	_	_	
152-15	20919-20922	the	_	_	
152-16	20923-20927	next	_	_	
152-17	20928-20931	one	_	_	
152-18	20932-20934	in	_	_	
152-19	20935-20942	harmony	_	_	
152-20	20942-20943	,	_	_	
152-21	20944-20947	the	_	_	
152-22	20948-20955	parties	_	_	
152-23	20956-20960	rely	_	_	
152-24	20961-20963	on	_	_	
152-25	20964-20966	an	_	_	
152-26	20967-20973	output	_	_	
152-27	20974-20986	synchronizer	_	_	
152-28	20987-20991	that	_	_	
152-29	20992-20994	is	_	_	
152-30	20995-21006	responsible	_	_	
152-31	21007-21010	for	_	_	
152-32	21012-21021	receiving	_	_	
152-33	21022-21025	the	_	_	
152-34	21026-21036	individual	_	_	
152-35	21037-21045	outcomes	_	_	
152-36	21045-21046	,	_	_	
152-37	21047-21054	compute	_	_	
152-38	21055-21056	a	_	_	
152-39	21057-21063	single	_	_	
152-40	21064-21071	outcome	_	_	
152-41	21072-21075	and	_	_	
152-42	21076-21082	notify	_	_	
152-43	21083-21085	it	_	_	
152-44	21086-21088	to	_	_	
152-45	21089-21092	the	_	_	
152-46	21093-21104	contractual	_	_	
152-47	21105-21112	parties	_	_	
152-48	21113-21116	and	_	_	
152-49	21117-21125	possibly	_	_	
152-50	21126-21128	to	_	_	
152-51	21129-21134	other	_	_	
152-52	21135-21142	parties	_	_	
152-53	21143-21147	that	_	_	
152-54	21148-21151	are	_	_	
152-55	21152-21160	entitled	_	_	
152-56	21161-21163	to	_	_	
152-57	21164-21170	follow	_	_	
152-58	21171-21174	the	_	_	
152-59	21175-21184	execution	_	_	
152-60	21185-21187	of	_	_	
152-61	21188-21191	the	_	_	
152-62	21192-21200	contract	_	_	
152-63	21200-21201	.	_	_	

#Text=An schematic view of the execution model is
#Text=shown in the following figure.
153-1	21203-21205	An	_	_	
153-2	21206-21215	schematic	_	_	
153-3	21216-21220	view	_	_	
153-4	21221-21223	of	_	_	
153-5	21224-21227	the	_	_	
153-6	21228-21237	execution	_	_	
153-7	21238-21243	model	_	_	
153-8	21244-21246	is	_	_	
153-9	21247-21252	shown	_	_	
153-10	21253-21255	in	_	_	
153-11	21256-21259	the	_	_	
153-12	21260-21269	following	_	_	
153-13	21270-21276	figure	_	_	
153-14	21276-21277	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
154-1	21279-21280	<	_	_	
154-2	21280-21281	p	_	_	
154-3	21282-21287	align	_	_	
154-4	21287-21288	=	_	_	
154-5	21288-21289	"	_	_	
154-6	21289-21295	center	_	_	
154-7	21295-21296	"	_	_	
154-8	21296-21297	>	_	_	
154-9	21300-21301	<	_	_	
154-10	21301-21304	img	_	_	
154-11	21305-21308	src	_	_	
154-12	21308-21309	=	_	_	
154-13	21309-21310	"	_	_	
154-14	21310-21311	.	_	_	

#Text=/figures/executionModelOfBilateralOperationsWithFailures.png" width="550" title="Execution model of contractual i
#Text=               operations with failures
155-1	21311-21312	/	_	_	
155-2	21312-21319	figures	_	_	
155-3	21319-21320	/	_	_	
155-4	21320-21371	executionModelOfBilateralOperationsWithFailures.png	_	_	
155-5	21371-21372	"	_	_	
155-6	21373-21378	width	_	_	
155-7	21378-21379	=	_	_	
155-8	21379-21380	"	_	_	
155-9	21380-21383	550	_	_	
155-10	21383-21384	"	_	_	
155-11	21385-21390	title	_	_	
155-12	21390-21391	=	_	_	
155-13	21391-21392	"	_	_	
155-14	21392-21401	Execution	_	_	
155-15	21402-21407	model	_	_	
155-16	21408-21410	of	_	_	
155-17	21411-21422	contractual	_	_	
155-18	21423-21424	i	_	_	
155-19	21440-21450	operations	_	_	
155-20	21451-21455	with	_	_	
155-21	21456-21464	failures	_	_	

#Text=.
156-1	21464-21465	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=In the figure, *oper* stands for contractual operation, such as
#Text=*BuyReq*, *Pay*, *Conf*, etc.
157-1	21465-21466	"	_	_	
157-2	21466-21467	>	_	_	
157-3	21468-21469	<	_	_	
157-4	21469-21470	/	_	_	
157-5	21470-21471	p	_	_	
157-6	21471-21472	>	_	_	
157-7	21474-21476	In	_	_	
157-8	21477-21480	the	_	_	
157-9	21481-21487	figure	_	_	
157-10	21487-21488	,	_	_	
157-11	21489-21490	*	_	_	
157-12	21490-21494	oper	_	_	
157-13	21494-21495	*	_	_	
157-14	21496-21502	stands	_	_	
157-15	21503-21506	for	_	_	
157-16	21507-21518	contractual	_	_	
157-17	21519-21528	operation	_	_	
157-18	21528-21529	,	_	_	
157-19	21530-21534	such	_	_	
157-20	21535-21537	as	_	_	
157-21	21538-21539	*	_	_	
157-22	21539-21545	BuyReq	_	_	
157-23	21545-21546	*	_	_	
157-24	21546-21547	,	_	_	
157-25	21548-21549	*	_	_	
157-26	21549-21552	Pay	_	_	
157-27	21552-21553	*	_	_	
157-28	21553-21554	,	_	_	
157-29	21555-21556	*	_	_	
157-30	21556-21560	Conf	_	_	
157-31	21560-21561	*	_	_	
157-32	21561-21562	,	_	_	
157-33	21563-21566	etc	_	_	
157-34	21566-21567	.	_	_	

#Text=<br/>
#Text=In this execution model, the BEG abstracts 
#Text=away the communication between the contracting parties and
#Text=plays the role of the output synchronizer as shown in the
#Text=figure.
158-1	21569-21570	<	_	_	
158-2	21570-21572	br	_	_	
158-3	21572-21573	/	_	_	
158-4	21573-21574	>	_	_	
158-5	21575-21577	In	_	_	
158-6	21578-21582	this	_	_	
158-7	21583-21592	execution	_	_	
158-8	21593-21598	model	_	_	
158-9	21598-21599	,	_	_	
158-10	21600-21603	the	_	_	
158-11	21604-21607	BEG	*	SOFTWARE	
158-12	21608-21617	abstracts	_	_	
158-13	21619-21623	away	_	_	
158-14	21624-21627	the	_	_	
158-15	21628-21641	communication	_	_	
158-16	21642-21649	between	_	_	
158-17	21650-21653	the	_	_	
158-18	21654-21665	contracting	_	_	
158-19	21666-21673	parties	_	_	
158-20	21674-21677	and	_	_	
158-21	21678-21683	plays	_	_	
158-22	21684-21687	the	_	_	
158-23	21688-21692	role	_	_	
158-24	21693-21695	of	_	_	
158-25	21696-21699	the	_	_	
158-26	21700-21706	output	_	_	
158-27	21707-21719	synchronizer	_	_	
158-28	21720-21722	as	_	_	
158-29	21723-21728	shown	_	_	
158-30	21729-21731	in	_	_	
158-31	21732-21735	the	_	_	
158-32	21736-21742	figure	_	_	
158-33	21742-21743	.	_	_	

#Text=<p align="center">
#Text=  <img src=".
159-1	21746-21747	<	_	_	
159-2	21747-21748	p	_	_	
159-3	21749-21754	align	_	_	
159-4	21754-21755	=	_	_	
159-5	21755-21756	"	_	_	
159-6	21756-21762	center	_	_	
159-7	21762-21763	"	_	_	
159-8	21763-21764	>	_	_	
159-9	21767-21768	<	_	_	
159-10	21768-21771	img	_	_	
159-11	21772-21775	src	_	_	
159-12	21775-21776	=	_	_	
159-13	21776-21777	"	_	_	
159-14	21777-21778	.	_	_	

#Text=/figures/executionModelOfBilateralOperationsWithFailuresBEG.png" width="550" title="Execution model of contractual 
#Text=                  operations with failures, BEG
160-1	21778-21779	/	_	_	
160-2	21779-21786	figures	_	_	
160-3	21786-21787	/	_	_	
160-4	21787-21841	executionModelOfBilateralOperationsWithFailuresBEG.png	_	_	
160-5	21841-21842	"	_	_	
160-6	21843-21848	width	_	_	
160-7	21848-21849	=	_	_	
160-8	21849-21850	"	_	_	
160-9	21850-21853	550	_	_	
160-10	21853-21854	"	_	_	
160-11	21855-21860	title	_	_	
160-12	21860-21861	=	_	_	
160-13	21861-21862	"	_	_	
160-14	21862-21871	Execution	_	_	
160-15	21872-21877	model	_	_	
160-16	21878-21880	of	_	_	
160-17	21881-21892	contractual	_	_	
160-18	21912-21922	operations	_	_	
160-19	21923-21927	with	_	_	
160-20	21928-21936	failures	_	_	
160-21	21936-21937	,	_	_	
160-22	21938-21941	BEG	*	SOFTWARE	

#Text=.
161-1	21941-21942	.	_	_	

#Text=">
#Text=</p>
#Text=
#Text=The event generated by the BEG are sent to a set of business rules
#Text=for evaluation for contract compliance
162-1	21942-21943	"	_	_	
162-2	21943-21944	>	_	_	
162-3	21945-21946	<	_	_	
162-4	21946-21947	/	_	_	
162-5	21947-21948	p	_	_	
162-6	21948-21949	>	_	_	
162-7	21951-21954	The	_	_	
162-8	21955-21960	event	_	_	
162-9	21961-21970	generated	_	_	
162-10	21971-21973	by	_	_	
162-11	21974-21977	the	_	_	
162-12	21978-21981	BEG	*	SOFTWARE	
162-13	21982-21985	are	_	_	
162-14	21986-21990	sent	_	_	
162-15	21991-21993	to	_	_	
162-16	21994-21995	a	_	_	
162-17	21996-21999	set	_	_	
162-18	22000-22002	of	_	_	
162-19	22003-22011	business	_	_	
162-20	22012-22017	rules	_	_	
162-21	22018-22021	for	_	_	
162-22	22022-22032	evaluation	_	_	
162-23	22033-22036	for	_	_	
162-24	22037-22045	contract	_	_	
162-25	22046-22056	compliance	_	_	

#Text=.
163-1	22056-22057	.	_	_	

#Text=# 3.
164-1	22059-22060	#	_	_	
164-2	22061-22062	3	_	_	
164-3	22062-22063	.	_	_	

#Text=Installation
#Text=
#Text=The directions for installation of epromela are documented in
#Text=the [UserGuide_v1.2.pdf](.
165-1	22064-22076	Installation	_	_	
165-2	22078-22081	The	_	_	
165-3	22082-22092	directions	_	_	
165-4	22093-22096	for	_	_	
165-5	22097-22109	installation	_	_	
165-6	22110-22112	of	_	_	
165-7	22113-22121	epromela	*	PROGLANG	
165-8	22122-22125	are	_	_	
165-9	22126-22136	documented	_	_	
165-10	22137-22139	in	_	_	
165-11	22140-22143	the	_	_	
165-12	22144-22145	[	_	_	
165-13	22145-22159	UserGuide_v1.2	_	_	
165-14	22159-22160	.	_	_	
165-15	22160-22163	pdf	_	_	
165-16	22163-22164	]	_	_	
165-17	22164-22165	(	_	_	
165-18	22165-22166	.	_	_	

#Text=/UserGuide_v1.2.pdf) file.
166-1	22166-22167	/	_	_	
166-2	22167-22181	UserGuide_v1.2	_	_	
166-3	22181-22182	.	_	_	
166-4	22182-22185	pdf	_	_	
166-5	22185-22186	)	_	_	
166-6	22187-22191	file	_	_	
166-7	22191-22192	.	_	_	

#Text=The document
#Text=also includes examples that demonstrate its operation.
167-1	22193-22196	The	_	_	
167-2	22197-22205	document	_	_	
167-3	22206-22210	also	_	_	
167-4	22211-22219	includes	_	_	
167-5	22220-22228	examples	_	_	
167-6	22229-22233	that	_	_	
167-7	22234-22245	demonstrate	_	_	
167-8	22246-22249	its	_	_	
167-9	22250-22259	operation	_	_	
167-10	22259-22260	.	_	_	

#Text=The reader
#Text=is expected to have some basic knowledge of 
#Text=[SPIN and Promela](http://spinroot.com/spin/whatispin.html) and
#Text=a local computer to dowload and deploy them
168-1	22261-22264	The	_	_	
168-2	22265-22271	reader	_	_	
168-3	22272-22274	is	_	_	
168-4	22275-22283	expected	_	_	
168-5	22284-22286	to	_	_	
168-6	22287-22291	have	_	_	
168-7	22292-22296	some	_	_	
168-8	22297-22302	basic	_	_	
168-9	22303-22312	knowledge	_	_	
168-10	22313-22315	of	_	_	
168-11	22317-22318	[	_	_	
168-12	22318-22322	SPIN	*	SOFTWARE	
168-13	22323-22326	and	_	_	
168-14	22327-22334	Promela	*	PROGLANG	
168-15	22334-22335	]	_	_	
168-16	22335-22336	(	_	_	
168-17	22336-22340	http	_	_	
168-18	22340-22341	:	_	_	
168-19	22341-22342	/	_	_	
168-20	22342-22343	/	_	_	
168-21	22343-22355	spinroot.com	_	_	
168-22	22355-22356	/	_	_	
168-23	22356-22360	spin	_	_	
168-24	22360-22361	/	_	_	
168-25	22361-22375	whatispin.html	_	_	
168-26	22375-22376	)	_	_	
168-27	22377-22380	and	_	_	
168-28	22381-22382	a	_	_	
168-29	22383-22388	local	_	_	
168-30	22389-22397	computer	_	_	
168-31	22398-22400	to	_	_	
168-32	22401-22408	dowload	_	_	
168-33	22409-22412	and	_	_	
168-34	22413-22419	deploy	_	_	
168-35	22420-22424	them	_	_	

#Text=.
169-1	22424-22425	.	_	_	

#Text=# 4.
170-1	22427-22428	#	_	_	
170-2	22429-22430	4	_	_	
170-3	22430-22431	.	_	_	

#Text=Implementation, deployment and execution of smart contracts 
#Text=
#Text=Once the designer is satisfied about the correctness
#Text=of the epromela model of the smart contract,
#Text=he can proceed to implement it in a language
#Text=for coding smart contracts, deploy and execute it.
171-1	22432-22446	Implementation	_	_	
171-2	22446-22447	,	_	_	
171-3	22448-22458	deployment	_	_	
171-4	22459-22462	and	_	_	
171-5	22463-22472	execution	_	_	
171-6	22473-22475	of	_	_	
171-7	22476-22481	smart	_	_	
171-8	22482-22491	contracts	_	_	
171-9	22494-22498	Once	_	_	
171-10	22499-22502	the	_	_	
171-11	22503-22511	designer	_	_	
171-12	22512-22514	is	_	_	
171-13	22515-22524	satisfied	_	_	
171-14	22525-22530	about	_	_	
171-15	22531-22534	the	_	_	
171-16	22535-22546	correctness	_	_	
171-17	22547-22549	of	_	_	
171-18	22550-22553	the	_	_	
171-19	22554-22562	epromela	_	_	
171-20	22563-22568	model	_	_	
171-21	22569-22571	of	_	_	
171-22	22572-22575	the	_	_	
171-23	22576-22581	smart	_	_	
171-24	22582-22590	contract	_	_	
171-25	22590-22591	,	_	_	
171-26	22592-22594	he	_	_	
171-27	22595-22598	can	_	_	
171-28	22599-22606	proceed	_	_	
171-29	22607-22609	to	_	_	
171-30	22610-22619	implement	_	_	
171-31	22620-22622	it	_	_	
171-32	22623-22625	in	_	_	
171-33	22626-22627	a	_	_	
171-34	22628-22636	language	_	_	
171-35	22637-22640	for	_	_	
171-36	22641-22647	coding	_	_	
171-37	22648-22653	smart	_	_	
171-38	22654-22663	contracts	_	_	
171-39	22663-22664	,	_	_	
171-40	22665-22671	deploy	_	_	
171-41	22672-22675	and	_	_	
171-42	22676-22683	execute	_	_	
171-43	22684-22686	it	_	_	
171-44	22686-22687	.	_	_	

#Text=We have implemented a Contract Compliant Checker---a tool for 
#Text=assisting designers in this task.
172-1	22689-22691	We	_	_	
172-2	22692-22696	have	_	_	
172-3	22697-22708	implemented	_	_	
172-4	22709-22710	a	_	_	
172-5	22711-22719	Contract	*[6]	SOFTWARE[6]	
172-6	22720-22729	Compliant	*[6]	SOFTWARE[6]	
172-7	22730-22737	Checker	*[6]	SOFTWARE[6]	
172-8	22737-22738	-	_	_	
172-9	22738-22739	-	_	_	
172-10	22739-22740	-	_	_	
172-11	22740-22741	a	_	_	
172-12	22742-22746	tool	_	_	
172-13	22747-22750	for	_	_	
172-14	22752-22761	assisting	_	_	
172-15	22762-22771	designers	_	_	
172-16	22772-22774	in	_	_	
172-17	22775-22779	this	_	_	
172-18	22780-22784	task	_	_	
172-19	22784-22785	.	_	_	

#Text=The open source code and
#Text=documentation can be retrieved from the 
#Text=[TECOmate repository](https://github.com/carlos-molina/TECOmate)
173-1	22786-22789	The	_	_	
173-2	22790-22794	open	_	_	
173-3	22795-22801	source	_	_	
173-4	22802-22806	code	_	_	
173-5	22807-22810	and	_	_	
173-6	22811-22824	documentation	_	_	
173-7	22825-22828	can	_	_	
173-8	22829-22831	be	_	_	
173-9	22832-22841	retrieved	_	_	
173-10	22842-22846	from	_	_	
173-11	22847-22850	the	_	_	
173-12	22852-22853	[	_	_	
173-13	22853-22861	TECOmate	_	_	
173-14	22862-22872	repository	_	_	
173-15	22872-22873	]	_	_	
173-16	22873-22874	(	_	_	
173-17	22874-22879	https	_	_	
173-18	22879-22880	:	_	_	
173-19	22880-22881	/	_	_	
173-20	22881-22882	/	_	_	
173-21	22882-22892	github.com	_	_	
173-22	22892-22893	/	_	_	
173-23	22893-22906	carlos-molina	_	_	
173-24	22906-22907	/	_	_	
173-25	22907-22915	TECOmate	_	_	
173-26	22915-22916	)	_	_	

#Text=.
174-1	22916-22917	.	_	_	

#Text=# 5.
175-1	22920-22921	#	_	_	
175-2	22922-22923	5	_	_	
175-3	22923-22924	.	_	_	

#Text=Contributors
#Text=
#Text=*  Abubkr A.
176-1	22925-22937	Contributors	_	_	
176-2	22939-22940	*	_	_	
176-3	22942-22948	Abubkr	_	_	
176-4	22949-22950	A	_	_	
176-5	22950-22951	.	_	_	

#Text=Abdelsadiq developed the macros as part of his
#Text=   PhD dissertation (2012) at University of Newcastle, UK.
#Text=*  Ionnis Sfyrakis from University of Newcastle, UK
#Text=   (Ioannis.Sfyrakis@newcastle.ac.uk) implemented 
#Text=   the Python parsers to extract execution sequences during his
#Text=   Masters degree (2012) at Newcastle.
#Text=*  [Carlos Molina-Jimenez](https://www.cl.cam.ac.uk/~cm770/ "MyWebPage")
#Text=    from **The Department of
#Text=    Computer Science and Technology (Computer Laboratory),
#Text=    University of Cambridge** 
#Text=   (Carlos.Molina@cl.cam.ac.uk) implemented shell scripts to 
#Text=   mechanise the extraction of execution sequences.
177-1	22952-22962	Abdelsadiq	_	_	
177-2	22963-22972	developed	_	_	
177-3	22973-22976	the	_	_	
177-4	22977-22983	macros	_	_	
177-5	22984-22986	as	_	_	
177-6	22987-22991	part	_	_	
177-7	22992-22994	of	_	_	
177-8	22995-22998	his	_	_	
177-9	23002-23005	PhD	_	_	
177-10	23006-23018	dissertation	_	_	
177-11	23019-23020	(	_	_	
177-12	23020-23024	2012	_	_	
177-13	23024-23025	)	_	_	
177-14	23026-23028	at	_	_	
177-15	23029-23039	University	_	_	
177-16	23040-23042	of	_	_	
177-17	23043-23052	Newcastle	_	_	
177-18	23052-23053	,	_	_	
177-19	23054-23056	UK	_	_	
177-20	23056-23057	.	_	_	
177-21	23058-23059	*	_	_	
177-22	23061-23067	Ionnis	_	_	
177-23	23068-23076	Sfyrakis	_	_	
177-24	23077-23081	from	_	_	
177-25	23082-23092	University	_	_	
177-26	23093-23095	of	_	_	
177-27	23096-23105	Newcastle	_	_	
177-28	23105-23106	,	_	_	
177-29	23107-23109	UK	_	_	
177-30	23113-23114	(	_	_	
177-31	23114-23130	Ioannis.Sfyrakis	_	_	
177-32	23130-23131	@	_	_	
177-33	23131-23146	newcastle.ac.uk	_	_	
177-34	23146-23147	)	_	_	
177-35	23148-23159	implemented	_	_	
177-36	23164-23167	the	_	_	
177-37	23168-23174	Python	*	PROGLANG	
177-38	23175-23182	parsers	_	_	
177-39	23183-23185	to	_	_	
177-40	23186-23193	extract	_	_	
177-41	23194-23203	execution	_	_	
177-42	23204-23213	sequences	_	_	
177-43	23214-23220	during	_	_	
177-44	23221-23224	his	_	_	
177-45	23228-23235	Masters	_	_	
177-46	23236-23242	degree	_	_	
177-47	23243-23244	(	_	_	
177-48	23244-23248	2012	_	_	
177-49	23248-23249	)	_	_	
177-50	23250-23252	at	_	_	
177-51	23253-23262	Newcastle	_	_	
177-52	23262-23263	.	_	_	
177-53	23264-23265	*	_	_	
177-54	23267-23268	[	_	_	
177-55	23268-23274	Carlos	_	_	
177-56	23275-23289	Molina-Jimenez	_	_	
177-57	23289-23290	]	_	_	
177-58	23290-23291	(	_	_	
177-59	23291-23296	https	_	_	
177-60	23296-23297	:	_	_	
177-61	23297-23298	/	_	_	
177-62	23298-23299	/	_	_	
177-63	23299-23315	www.cl.cam.ac.uk	_	_	
177-64	23315-23316	/	_	_	
177-65	23316-23317	~	_	_	
177-66	23317-23322	cm770	_	_	
177-67	23322-23323	/	_	_	
177-68	23324-23325	"	_	_	
177-69	23325-23334	MyWebPage	_	_	
177-70	23334-23335	"	_	_	
177-71	23335-23336	)	_	_	
177-72	23341-23345	from	_	_	
177-73	23346-23347	*	_	_	
177-74	23347-23348	*	_	_	
177-75	23348-23351	The	_	_	
177-76	23352-23362	Department	_	_	
177-77	23363-23365	of	_	_	
177-78	23370-23378	Computer	_	_	
177-79	23379-23386	Science	_	_	
177-80	23387-23390	and	_	_	
177-81	23391-23401	Technology	_	_	
177-82	23402-23403	(	_	_	
177-83	23403-23411	Computer	_	_	
177-84	23412-23422	Laboratory	_	_	
177-85	23422-23423	)	_	_	
177-86	23423-23424	,	_	_	
177-87	23429-23439	University	_	_	
177-88	23440-23442	of	_	_	
177-89	23443-23452	Cambridge	_	_	
177-90	23452-23453	*	_	_	
177-91	23453-23454	*	_	_	
177-92	23459-23460	(	_	_	
177-93	23460-23473	Carlos.Molina	_	_	
177-94	23473-23474	@	_	_	
177-95	23474-23486	cl.cam.ac.uk	_	_	
177-96	23486-23487	)	_	_	
177-97	23488-23499	implemented	_	_	
177-98	23500-23505	shell	_	_	
177-99	23506-23513	scripts	_	_	
177-100	23514-23516	to	_	_	
177-101	23521-23530	mechanise	_	_	
177-102	23531-23534	the	_	_	
177-103	23535-23545	extraction	_	_	
177-104	23546-23548	of	_	_	
177-105	23549-23558	execution	_	_	
177-106	23559-23568	sequences	_	_	
177-107	23568-23569	.	_	_	

#Text=He has been
#Text=   maintaining, documenting and testing the tool.
178-1	23570-23572	He	_	_	
178-2	23573-23576	has	_	_	
178-3	23577-23581	been	_	_	
178-4	23585-23596	maintaining	_	_	
178-5	23596-23597	,	_	_	
178-6	23598-23609	documenting	_	_	
178-7	23610-23613	and	_	_	
178-8	23614-23621	testing	_	_	
178-9	23622-23625	the	_	_	
178-10	23626-23630	tool	_	_	
178-11	23630-23631	.	_	_	

#Text=He is currently (2018) working in the 
#Text=   [TESCON project](https://www.cl.cam.ac.uk/~cm770/tescon/tescon.html 
#Text=   "TESCON webpage") (EPSRC grant Grant: RG90413 NRAG/536)
179-1	23635-23637	He	_	_	
179-2	23638-23640	is	_	_	
179-3	23641-23650	currently	_	_	
179-4	23651-23652	(	_	_	
179-5	23652-23656	2018	_	_	
179-6	23656-23657	)	_	_	
179-7	23658-23665	working	_	_	
179-8	23666-23668	in	_	_	
179-9	23669-23672	the	_	_	
179-10	23677-23678	[	_	_	
179-11	23678-23684	TESCON	*	PROJECT	
179-12	23685-23692	project	_	_	
179-13	23692-23693	]	_	_	
179-14	23693-23694	(	_	_	
179-15	23694-23699	https	_	_	
179-16	23699-23700	:	_	_	
179-17	23700-23701	/	_	_	
179-18	23701-23702	/	_	_	
179-19	23702-23718	www.cl.cam.ac.uk	_	_	
179-20	23718-23719	/	_	_	
179-21	23719-23720	~	_	_	
179-22	23720-23725	cm770	_	_	
179-23	23725-23726	/	_	_	
179-24	23726-23732	tescon	*	PROJECT	
179-25	23732-23733	/	_	_	
179-26	23733-23744	tescon.html	_	_	
179-26.1	23733-23739	tescon	*	PROJECT	
179-27	23749-23750	"	_	_	
179-28	23750-23756	TESCON	*	PROJECT	
179-29	23757-23764	webpage	_	_	
179-30	23764-23765	"	_	_	
179-31	23765-23766	)	_	_	
179-32	23767-23768	(	_	_	
179-33	23768-23773	EPSRC	_	_	
179-34	23774-23779	grant	_	_	
179-35	23780-23785	Grant	_	_	
179-36	23785-23786	:	_	_	
179-37	23787-23794	RG90413	_	_	
179-38	23795-23799	NRAG	_	_	
179-39	23799-23800	/	_	_	
179-40	23800-23803	536	_	_	
179-41	23803-23804	)	_	_	

#Text=.
180-1	23804-23805	.	_	_	

#Text=# 6.
181-1	23809-23810	#	_	_	
181-2	23811-23812	6	_	_	
181-3	23812-23813	.	_	_	

#Text=Bug reporting and comments
#Text=
#Text=Feel free to email 
#Text=[carlos.molina + @ + cl.cam.a.uk](mailto:carlos.molina@cl.cam.ac.uk) 
#Text=if you have comments, bugs to report or questions
182-1	23814-23817	Bug	_	_	
182-2	23818-23827	reporting	_	_	
182-3	23828-23831	and	_	_	
182-4	23832-23840	comments	_	_	
182-5	23842-23846	Feel	_	_	
182-6	23847-23851	free	_	_	
182-7	23852-23854	to	_	_	
182-8	23855-23860	email	_	_	
182-9	23862-23863	[	_	_	
182-10	23863-23876	carlos.molina	_	_	
182-11	23877-23878	+	_	_	
182-12	23879-23880	@	_	_	
182-13	23881-23882	+	_	_	
182-14	23883-23894	cl.cam.a.uk	_	_	
182-15	23894-23895	]	_	_	
182-16	23895-23896	(	_	_	
182-17	23896-23902	mailto	_	_	
182-18	23902-23903	:	_	_	
182-19	23903-23916	carlos.molina	_	_	
182-20	23916-23917	@	_	_	
182-21	23917-23929	cl.cam.ac.uk	_	_	
182-22	23929-23930	)	_	_	
182-23	23932-23934	if	_	_	
182-24	23935-23938	you	_	_	
182-25	23939-23943	have	_	_	
182-26	23944-23952	comments	_	_	
182-27	23952-23953	,	_	_	
182-28	23954-23958	bugs	_	_	
182-29	23959-23961	to	_	_	
182-30	23962-23968	report	_	_	
182-31	23969-23971	or	_	_	
182-32	23972-23981	questions	_	_	

#Text=.
183-1	23981-23982	.	_	_	

#Text=# 7.
184-1	23985-23986	#	_	_	
184-2	23987-23988	7	_	_	
184-3	23988-23989	.	_	_	

#Text=Licence
#Text=The contraval tool is released under the Apache License, 
#Text=Version 2.0 which is available from Apache’s web pages.
185-1	23990-23997	Licence	_	_	
185-2	23998-24001	The	_	_	
185-3	24002-24011	contraval	_	_	
185-4	24012-24016	tool	_	_	
185-5	24017-24019	is	_	_	
185-6	24020-24028	released	_	_	
185-7	24029-24034	under	_	_	
185-8	24035-24038	the	_	_	
185-9	24039-24045	Apache	*[7]	LICENSE[7]	
185-10	24046-24053	License	*[7]	LICENSE[7]	
185-11	24053-24054	,	*[7]	LICENSE[7]	
185-12	24056-24063	Version	*[7]	LICENSE[7]	
185-13	24064-24067	2.0	*[7]	LICENSE[7]	
185-14	24068-24073	which	_	_	
185-15	24074-24076	is	_	_	
185-16	24077-24086	available	_	_	
185-17	24087-24091	from	_	_	
185-18	24092-24098	Apache	_	_	
185-19	24098-24099	’	_	_	
185-20	24099-24100	s	_	_	
185-21	24101-24104	web	_	_	
185-22	24105-24110	pages	_	_	
185-23	24110-24111	.	_	_	
