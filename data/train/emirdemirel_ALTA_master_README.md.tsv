#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# ALTA - (A)utomatic (L)yrics (T)r(A)nscription
#Text=
#Text=A Kaldi[1] recipe for automatic lyrics transcription.
#Text=
#Text=## Table of Contents
#Text=
#Text=- [ALTA - (A)utomatic (L)yrics (T)r(A)nscription](#alta----a-utomatic--l-yrics--t-r-a-nscription)
#Text=  * [System Details](#system-details)
#Text=  * [Setup](#setup)
#Text=      - [1) Kaldi](#1--kaldi)
#Text=      - [2) Dependencies](#2--dependencies)
#Text=  * [How to run](#how-to-run)
#Text=    + [A) Data preparation:](#a--data-preparation-)
#Text=      - [1) Retrieve the data:](#1--retrieve-the-data-)
#Text=      - [1) Locate:](#1--locate-)
#Text=        * [Step 1-a (Docker use ONLY):](#step-1-a--docker-use-only--)
#Text=    + [B) Running the training pipeline](#b--running-the-training-pipeline)
#Text=    + [C) (OPTIONAL) Extract frame-level Phoneme posteriorgrams:](#c---optional--extract-frame-level-phoneme-posteriorgrams-)
#Text=    + [Future Work](#future-work)
#Text=    + [Citation](#citation)
#Text=    + [References](#references)
#Text=
#Text=
#Text=
#Text=## System Details
#Text=
#Text=Automatic Lyrics Transcription is the task of translating singing voice into text.
1-1	0-1	#	_	_	
1-2	2-6	ALTA	_	_	
1-3	7-8	-	_	_	
1-4	9-10	(	_	_	
1-5	10-11	A	_	_	
1-6	11-12	)	_	_	
1-7	12-20	utomatic	_	_	
1-8	21-22	(	_	_	
1-9	22-23	L	_	_	
1-10	23-24	)	_	_	
1-11	24-29	yrics	_	_	
1-12	30-31	(	_	_	
1-13	31-32	T	_	_	
1-14	32-33	)	_	_	
1-15	33-34	r	_	_	
1-16	34-35	(	_	_	
1-17	35-36	A	_	_	
1-18	36-37	)	_	_	
1-19	37-47	nscription	_	_	
1-20	49-50	A	_	_	
1-21	51-56	Kaldi	*	SOFTWARE	
1-22	56-57	[	_	_	
1-23	57-58	1	_	_	
1-24	58-59	]	_	_	
1-25	60-66	recipe	_	_	
1-26	67-70	for	_	_	
1-27	71-80	automatic	_	_	
1-28	81-87	lyrics	_	_	
1-29	88-101	transcription	_	_	
1-30	101-102	.	_	_	
1-31	104-105	#	_	_	
1-32	105-106	#	_	_	
1-33	107-112	Table	_	_	
1-34	113-115	of	_	_	
1-35	116-124	Contents	_	_	
1-36	126-127	-	_	_	
1-37	128-129	[	_	_	
1-38	129-133	ALTA	_	_	
1-39	134-135	-	_	_	
1-40	136-137	(	_	_	
1-41	137-138	A	_	_	
1-42	138-139	)	_	_	
1-43	139-147	utomatic	_	_	
1-44	148-149	(	_	_	
1-45	149-150	L	_	_	
1-46	150-151	)	_	_	
1-47	151-156	yrics	_	_	
1-48	157-158	(	_	_	
1-49	158-159	T	_	_	
1-50	159-160	)	_	_	
1-51	160-161	r	_	_	
1-52	161-162	(	_	_	
1-53	162-163	A	_	_	
1-54	163-164	)	_	_	
1-55	164-174	nscription	_	_	
1-56	174-175	]	_	_	
1-57	175-176	(	_	_	
1-58	176-177	#	_	_	
1-59	177-181	alta	_	_	
1-60	181-182	-	_	_	
1-61	182-183	-	_	_	
1-62	183-184	-	_	_	
1-63	184-185	-	_	_	
1-64	185-195	a-utomatic	_	_	
1-65	195-196	-	_	_	
1-66	196-197	-	_	_	
1-67	197-204	l-yrics	_	_	
1-68	204-205	-	_	_	
1-69	205-206	-	_	_	
1-70	206-222	t-r-a-nscription	_	_	
1-71	222-223	)	_	_	
1-72	226-227	*	_	_	
1-73	228-229	[	_	_	
1-74	229-235	System	_	_	
1-75	236-243	Details	_	_	
1-76	243-244	]	_	_	
1-77	244-245	(	_	_	
1-78	245-246	#	_	_	
1-79	246-260	system-details	_	_	
1-80	260-261	)	_	_	
1-81	264-265	*	_	_	
1-82	266-267	[	_	_	
1-83	267-272	Setup	_	_	
1-84	272-273	]	_	_	
1-85	273-274	(	_	_	
1-86	274-275	#	_	_	
1-87	275-280	setup	_	_	
1-88	280-281	)	_	_	
1-89	288-289	-	_	_	
1-90	290-291	[	_	_	
1-91	291-292	1	_	_	
1-92	292-293	)	_	_	
1-93	294-299	Kaldi	*	SOFTWARE	
1-94	299-300	]	_	_	
1-95	300-301	(	_	_	
1-96	301-303	#1	_	_	
1-97	303-304	-	_	_	
1-98	304-305	-	_	_	
1-99	305-310	kaldi	*	SOFTWARE	
1-100	310-311	)	_	_	
1-101	318-319	-	_	_	
1-102	320-321	[	_	_	
1-103	321-322	2	_	_	
1-104	322-323	)	_	_	
1-105	324-336	Dependencies	_	_	
1-106	336-337	]	_	_	
1-107	337-338	(	_	_	
1-108	338-340	#2	_	_	
1-109	340-341	-	_	_	
1-110	341-342	-	_	_	
1-111	342-354	dependencies	_	_	
1-112	354-355	)	_	_	
1-113	358-359	*	_	_	
1-114	360-361	[	_	_	
1-115	361-364	How	_	_	
1-116	365-367	to	_	_	
1-117	368-371	run	_	_	
1-118	371-372	]	_	_	
1-119	372-373	(	_	_	
1-120	373-374	#	_	_	
1-121	374-384	how-to-run	_	_	
1-122	384-385	)	_	_	
1-123	390-391	+	_	_	
1-124	392-393	[	_	_	
1-125	393-394	A	_	_	
1-126	394-395	)	_	_	
1-127	396-400	Data	_	_	
1-128	401-412	preparation	_	_	
1-129	412-413	:	_	_	
1-130	413-414	]	_	_	
1-131	414-415	(	_	_	
1-132	415-416	#	_	_	
1-133	416-417	a	_	_	
1-134	417-418	-	_	_	
1-135	418-419	-	_	_	
1-136	419-435	data-preparation	_	_	
1-137	435-436	-	_	_	
1-138	436-437	)	_	_	
1-139	444-445	-	_	_	
1-140	446-447	[	_	_	
1-141	447-448	1	_	_	
1-142	448-449	)	_	_	
1-143	450-458	Retrieve	_	_	
1-144	459-462	the	_	_	
1-145	463-467	data	_	_	
1-146	467-468	:	_	_	
1-147	468-469	]	_	_	
1-148	469-470	(	_	_	
1-149	470-472	#1	_	_	
1-150	472-473	-	_	_	
1-151	473-474	-	_	_	
1-152	474-491	retrieve-the-data	_	_	
1-153	491-492	-	_	_	
1-154	492-493	)	_	_	
1-155	500-501	-	_	_	
1-156	502-503	[	_	_	
1-157	503-504	1	_	_	
1-158	504-505	)	_	_	
1-159	506-512	Locate	_	_	
1-160	512-513	:	_	_	
1-161	513-514	]	_	_	
1-162	514-515	(	_	_	
1-163	515-517	#1	_	_	
1-164	517-518	-	_	_	
1-165	518-519	-	_	_	
1-166	519-525	locate	_	_	
1-167	525-526	-	_	_	
1-168	526-527	)	_	_	
1-169	536-537	*	_	_	
1-170	538-539	[	_	_	
1-171	539-543	Step	_	_	
1-172	544-545	1	_	_	
1-173	545-546	-	_	_	
1-174	546-547	a	_	_	
1-175	548-549	(	_	_	
1-176	549-555	Docker	*	SOFTWARE	
1-177	556-559	use	_	_	
1-178	560-564	ONLY	_	_	
1-179	564-565	)	_	_	
1-180	565-566	:	_	_	
1-181	566-567	]	_	_	
1-182	567-568	(	_	_	
1-183	568-569	#	_	_	
1-184	569-573	step	_	_	
1-185	573-574	-	_	_	
1-186	574-575	1	_	_	
1-187	575-576	-	_	_	
1-188	576-577	a	_	_	
1-189	577-578	-	_	_	
1-190	578-579	-	_	_	
1-191	579-594	docker-use-only	_	_	
1-191.1	579-585	docker	*	SOFTWARE	
1-192	594-595	-	_	_	
1-193	595-596	-	_	_	
1-194	596-597	)	_	_	
1-195	602-603	+	_	_	
1-196	604-605	[	_	_	
1-197	605-606	B	_	_	
1-198	606-607	)	_	_	
1-199	608-615	Running	_	_	
1-200	616-619	the	_	_	
1-201	620-628	training	_	_	
1-202	629-637	pipeline	_	_	
1-203	637-638	]	_	_	
1-204	638-639	(	_	_	
1-205	639-640	#	_	_	
1-206	640-641	b	_	_	
1-207	641-642	-	_	_	
1-208	642-643	-	_	_	
1-209	643-672	running-the-training-pipeline	_	_	
1-210	672-673	)	_	_	
1-211	678-679	+	_	_	
1-212	680-681	[	_	_	
1-213	681-682	C	_	_	
1-214	682-683	)	_	_	
1-215	684-685	(	_	_	
1-216	685-693	OPTIONAL	_	_	
1-217	693-694	)	_	_	
1-218	695-702	Extract	_	_	
1-219	703-714	frame-level	_	_	
1-220	715-722	Phoneme	_	_	
1-221	723-737	posteriorgrams	_	_	
1-222	737-738	:	_	_	
1-223	738-739	]	_	_	
1-224	739-740	(	_	_	
1-225	740-741	#	_	_	
1-226	741-742	c	_	_	
1-227	742-743	-	_	_	
1-228	743-744	-	_	_	
1-229	744-745	-	_	_	
1-230	745-753	optional	_	_	
1-231	753-754	-	_	_	
1-232	754-755	-	_	_	
1-233	755-797	extract-frame-level-phoneme-posteriorgrams	_	_	
1-234	797-798	-	_	_	
1-235	798-799	)	_	_	
1-236	804-805	+	_	_	
1-237	806-807	[	_	_	
1-238	807-813	Future	_	_	
1-239	814-818	Work	_	_	
1-240	818-819	]	_	_	
1-241	819-820	(	_	_	
1-242	820-821	#	_	_	
1-243	821-832	future-work	_	_	
1-244	832-833	)	_	_	
1-245	838-839	+	_	_	
1-246	840-841	[	_	_	
1-247	841-849	Citation	_	_	
1-248	849-850	]	_	_	
1-249	850-851	(	_	_	
1-250	851-852	#	_	_	
1-251	852-860	citation	_	_	
1-252	860-861	)	_	_	
1-253	866-867	+	_	_	
1-254	868-869	[	_	_	
1-255	869-879	References	_	_	
1-256	879-880	]	_	_	
1-257	880-881	(	_	_	
1-258	881-882	#	_	_	
1-259	882-892	references	_	_	
1-260	892-893	)	_	_	
1-261	897-898	#	_	_	
1-262	898-899	#	_	_	
1-263	900-906	System	_	_	
1-264	907-914	Details	_	_	
1-265	916-925	Automatic	_	_	
1-266	926-932	Lyrics	_	_	
1-267	933-946	Transcription	_	_	
1-268	947-949	is	_	_	
1-269	950-953	the	_	_	
1-270	954-958	task	_	_	
1-271	959-961	of	_	_	
1-272	962-973	translating	_	_	
1-273	974-981	singing	_	_	
1-274	982-987	voice	_	_	
1-275	988-992	into	_	_	
1-276	993-997	text	_	_	
1-277	997-998	.	_	_	

#Text=Jusy like in hybrid speech recognition, our lyrics transcriber consists of separate acoustic, language and pronunciation models.
2-1	999-1003	Jusy	_	_	
2-2	1004-1008	like	_	_	
2-3	1009-1011	in	_	_	
2-4	1012-1018	hybrid	_	_	
2-5	1019-1025	speech	_	_	
2-6	1026-1037	recognition	_	_	
2-7	1037-1038	,	_	_	
2-8	1039-1042	our	_	_	
2-9	1043-1049	lyrics	_	_	
2-10	1050-1061	transcriber	_	_	
2-11	1062-1070	consists	_	_	
2-12	1071-1073	of	_	_	
2-13	1074-1082	separate	_	_	
2-14	1083-1091	acoustic	_	_	
2-15	1091-1092	,	_	_	
2-16	1093-1101	language	_	_	
2-17	1102-1105	and	_	_	
2-18	1106-1119	pronunciation	_	_	
2-19	1120-1126	models	_	_	
2-20	1126-1127	.	_	_	

#Text=<p align="center">
#Text=  <img src="https://github.com/emirdemirel/ALTA/blob/master/img/img-git1.png" width="550" height="160">
#Text=</p>
#Text=
#Text=**Acoustic Model**: Sequence discriminative training on LF-MMI criteria[2] (Kaldi-chain recipe).
3-1	1129-1130	<	_	_	
3-2	1130-1131	p	_	_	
3-3	1132-1137	align	_	_	
3-4	1137-1138	=	_	_	
3-5	1138-1139	"	_	_	
3-6	1139-1145	center	_	_	
3-7	1145-1146	"	_	_	
3-8	1146-1147	>	_	_	
3-9	1150-1151	<	_	_	
3-10	1151-1154	img	_	_	
3-11	1155-1158	src	_	_	
3-12	1158-1159	=	_	_	
3-13	1159-1160	"	_	_	
3-14	1160-1165	https	_	_	
3-15	1165-1166	:	_	_	
3-16	1166-1167	/	_	_	
3-17	1167-1168	/	_	_	
3-18	1168-1178	github.com	_	_	
3-19	1178-1179	/	_	_	
3-20	1179-1190	emirdemirel	_	_	
3-21	1190-1191	/	_	_	
3-22	1191-1195	ALTA	_	_	
3-23	1195-1196	/	_	_	
3-24	1196-1200	blob	_	_	
3-25	1200-1201	/	_	_	
3-26	1201-1207	master	_	_	
3-27	1207-1208	/	_	_	
3-28	1208-1211	img	_	_	
3-29	1211-1212	/	_	_	
3-30	1212-1220	img-git1	_	_	
3-31	1220-1221	.	_	_	
3-32	1221-1224	png	_	_	
3-33	1224-1225	"	_	_	
3-34	1226-1231	width	_	_	
3-35	1231-1232	=	_	_	
3-36	1232-1233	"	_	_	
3-37	1233-1236	550	_	_	
3-38	1236-1237	"	_	_	
3-39	1238-1244	height	_	_	
3-40	1244-1245	=	_	_	
3-41	1245-1246	"	_	_	
3-42	1246-1249	160	_	_	
3-43	1249-1250	"	_	_	
3-44	1250-1251	>	_	_	
3-45	1252-1253	<	_	_	
3-46	1253-1254	/	_	_	
3-47	1254-1255	p	_	_	
3-48	1255-1256	>	_	_	
3-49	1258-1259	*	_	_	
3-50	1259-1260	*	_	_	
3-51	1260-1268	Acoustic	_	_	
3-52	1269-1274	Model	_	_	
3-53	1274-1275	*	_	_	
3-54	1275-1276	*	_	_	
3-55	1276-1277	:	_	_	
3-56	1278-1286	Sequence	_	_	
3-57	1287-1301	discriminative	_	_	
3-58	1302-1310	training	_	_	
3-59	1311-1313	on	_	_	
3-60	1314-1320	LF-MMI	_	_	
3-61	1321-1329	criteria	_	_	
3-62	1329-1330	[	_	_	
3-63	1330-1331	2	_	_	
3-64	1331-1332	]	_	_	
3-65	1333-1334	(	_	_	
3-66	1334-1345	Kaldi-chain	_	_	
3-66.1	1334-1339	Kaldi	*	SOFTWARE	
3-67	1346-1352	recipe	_	_	
3-68	1352-1353	)	_	_	
3-69	1353-1354	.	_	_	

#Text=MStre-Net[3] proposes three improvements over the standard Kaldi-chain recipe:
#Text= - The neural network is based on the multistream TDNN architecture with distinct TDNN streams.
4-1	1355-1364	MStre-Net	_	_	
4-2	1364-1365	[	_	_	
4-3	1365-1366	3	_	_	
4-4	1366-1367	]	_	_	
4-5	1368-1376	proposes	_	_	
4-6	1377-1382	three	_	_	
4-7	1383-1395	improvements	_	_	
4-8	1396-1400	over	_	_	
4-9	1401-1404	the	_	_	
4-10	1405-1413	standard	_	_	
4-11	1414-1425	Kaldi-chain	_	_	
4-11.1	1414-1419	Kaldi	*	SOFTWARE	
4-12	1426-1432	recipe	_	_	
4-13	1432-1433	:	_	_	
4-14	1435-1436	-	_	_	
4-15	1437-1440	The	_	_	
4-16	1441-1447	neural	_	_	
4-17	1448-1455	network	_	_	
4-18	1456-1458	is	_	_	
4-19	1459-1464	based	_	_	
4-20	1465-1467	on	_	_	
4-21	1468-1471	the	_	_	
4-22	1472-1483	multistream	_	_	
4-23	1484-1488	TDNN	_	_	
4-24	1489-1501	architecture	_	_	
4-25	1502-1506	with	_	_	
4-26	1507-1515	distinct	_	_	
4-27	1516-1520	TDNN	_	_	
4-28	1521-1528	streams	_	_	
4-29	1528-1529	.	_	_	

#Text=<p align="center">
#Text=  <img src="https://github.com/emirdemirel/ALTA/blob/master/img/arch_multi_diverse.png" width="400" height="200">
#Text=</p>
#Text=
#Text= - Cross-domain Training:
#Text=
#Text=<p align="center">
#Text=  <img src="https://github.com/emirdemirel/ALTA/blob/master/img/crossdomain.png" width="500" height="160">
#Text=</p>
#Text=
#Text= - Music Informed Silence Modeling:
#Text=
#Text=<p align="center">
#Text=  <img src="https://github.com/emirdemirel/ALTA/blob/master/img/musicsilence.png" width="300" height="90">
#Text=</p>
#Text=
#Text=
#Text=**Language Model**: The LM is a 4-gram MaxEnt trained using the SRILM toolkit, where Kneser-Ney smoothing applied.
5-1	1531-1532	<	_	_	
5-2	1532-1533	p	_	_	
5-3	1534-1539	align	_	_	
5-4	1539-1540	=	_	_	
5-5	1540-1541	"	_	_	
5-6	1541-1547	center	_	_	
5-7	1547-1548	"	_	_	
5-8	1548-1549	>	_	_	
5-9	1552-1553	<	_	_	
5-10	1553-1556	img	_	_	
5-11	1557-1560	src	_	_	
5-12	1560-1561	=	_	_	
5-13	1561-1562	"	_	_	
5-14	1562-1567	https	_	_	
5-15	1567-1568	:	_	_	
5-16	1568-1569	/	_	_	
5-17	1569-1570	/	_	_	
5-18	1570-1580	github.com	_	_	
5-19	1580-1581	/	_	_	
5-20	1581-1592	emirdemirel	_	_	
5-21	1592-1593	/	_	_	
5-22	1593-1597	ALTA	_	_	
5-23	1597-1598	/	_	_	
5-24	1598-1602	blob	_	_	
5-25	1602-1603	/	_	_	
5-26	1603-1609	master	_	_	
5-27	1609-1610	/	_	_	
5-28	1610-1613	img	_	_	
5-29	1613-1614	/	_	_	
5-30	1614-1636	arch_multi_diverse.png	_	_	
5-31	1636-1637	"	_	_	
5-32	1638-1643	width	_	_	
5-33	1643-1644	=	_	_	
5-34	1644-1645	"	_	_	
5-35	1645-1648	400	_	_	
5-36	1648-1649	"	_	_	
5-37	1650-1656	height	_	_	
5-38	1656-1657	=	_	_	
5-39	1657-1658	"	_	_	
5-40	1658-1661	200	_	_	
5-41	1661-1662	"	_	_	
5-42	1662-1663	>	_	_	
5-43	1664-1665	<	_	_	
5-44	1665-1666	/	_	_	
5-45	1666-1667	p	_	_	
5-46	1667-1668	>	_	_	
5-47	1671-1672	-	_	_	
5-48	1673-1685	Cross-domain	_	_	
5-49	1686-1694	Training	_	_	
5-50	1694-1695	:	_	_	
5-51	1697-1698	<	_	_	
5-52	1698-1699	p	_	_	
5-53	1700-1705	align	_	_	
5-54	1705-1706	=	_	_	
5-55	1706-1707	"	_	_	
5-56	1707-1713	center	_	_	
5-57	1713-1714	"	_	_	
5-58	1714-1715	>	_	_	
5-59	1718-1719	<	_	_	
5-60	1719-1722	img	_	_	
5-61	1723-1726	src	_	_	
5-62	1726-1727	=	_	_	
5-63	1727-1728	"	_	_	
5-64	1728-1733	https	_	_	
5-65	1733-1734	:	_	_	
5-66	1734-1735	/	_	_	
5-67	1735-1736	/	_	_	
5-68	1736-1746	github.com	_	_	
5-69	1746-1747	/	_	_	
5-70	1747-1758	emirdemirel	_	_	
5-71	1758-1759	/	_	_	
5-72	1759-1763	ALTA	_	_	
5-73	1763-1764	/	_	_	
5-74	1764-1768	blob	_	_	
5-75	1768-1769	/	_	_	
5-76	1769-1775	master	_	_	
5-77	1775-1776	/	_	_	
5-78	1776-1779	img	_	_	
5-79	1779-1780	/	_	_	
5-80	1780-1795	crossdomain.png	_	_	
5-81	1795-1796	"	_	_	
5-82	1797-1802	width	_	_	
5-83	1802-1803	=	_	_	
5-84	1803-1804	"	_	_	
5-85	1804-1807	500	_	_	
5-86	1807-1808	"	_	_	
5-87	1809-1815	height	_	_	
5-88	1815-1816	=	_	_	
5-89	1816-1817	"	_	_	
5-90	1817-1820	160	_	_	
5-91	1820-1821	"	_	_	
5-92	1821-1822	>	_	_	
5-93	1823-1824	<	_	_	
5-94	1824-1825	/	_	_	
5-95	1825-1826	p	_	_	
5-96	1826-1827	>	_	_	
5-97	1830-1831	-	_	_	
5-98	1832-1837	Music	_	_	
5-99	1838-1846	Informed	_	_	
5-100	1847-1854	Silence	_	_	
5-101	1855-1863	Modeling	_	_	
5-102	1863-1864	:	_	_	
5-103	1866-1867	<	_	_	
5-104	1867-1868	p	_	_	
5-105	1869-1874	align	_	_	
5-106	1874-1875	=	_	_	
5-107	1875-1876	"	_	_	
5-108	1876-1882	center	_	_	
5-109	1882-1883	"	_	_	
5-110	1883-1884	>	_	_	
5-111	1887-1888	<	_	_	
5-112	1888-1891	img	_	_	
5-113	1892-1895	src	_	_	
5-114	1895-1896	=	_	_	
5-115	1896-1897	"	_	_	
5-116	1897-1902	https	_	_	
5-117	1902-1903	:	_	_	
5-118	1903-1904	/	_	_	
5-119	1904-1905	/	_	_	
5-120	1905-1915	github.com	_	_	
5-121	1915-1916	/	_	_	
5-122	1916-1927	emirdemirel	_	_	
5-123	1927-1928	/	_	_	
5-124	1928-1932	ALTA	_	_	
5-125	1932-1933	/	_	_	
5-126	1933-1937	blob	_	_	
5-127	1937-1938	/	_	_	
5-128	1938-1944	master	_	_	
5-129	1944-1945	/	_	_	
5-130	1945-1948	img	_	_	
5-131	1948-1949	/	_	_	
5-132	1949-1965	musicsilence.png	_	_	
5-133	1965-1966	"	_	_	
5-134	1967-1972	width	_	_	
5-135	1972-1973	=	_	_	
5-136	1973-1974	"	_	_	
5-137	1974-1977	300	_	_	
5-138	1977-1978	"	_	_	
5-139	1979-1985	height	_	_	
5-140	1985-1986	=	_	_	
5-141	1986-1987	"	_	_	
5-142	1987-1989	90	_	_	
5-143	1989-1990	"	_	_	
5-144	1990-1991	>	_	_	
5-145	1992-1993	<	_	_	
5-146	1993-1994	/	_	_	
5-147	1994-1995	p	_	_	
5-148	1995-1996	>	_	_	
5-149	1999-2000	*	_	_	
5-150	2000-2001	*	_	_	
5-151	2001-2009	Language	_	_	
5-152	2010-2015	Model	_	_	
5-153	2015-2016	*	_	_	
5-154	2016-2017	*	_	_	
5-155	2017-2018	:	_	_	
5-156	2019-2022	The	_	_	
5-157	2023-2025	LM	_	_	
5-158	2026-2028	is	_	_	
5-159	2029-2030	a	_	_	
5-160	2031-2032	4	_	_	
5-161	2032-2033	-	_	_	
5-162	2033-2037	gram	_	_	
5-163	2038-2044	MaxEnt	*	SOFTWARE	
5-164	2045-2052	trained	_	_	
5-165	2053-2058	using	_	_	
5-166	2059-2062	the	_	_	
5-167	2063-2068	SRILM	*	SOFTWARE	
5-168	2069-2076	toolkit	_	_	
5-169	2076-2077	,	_	_	
5-170	2078-2083	where	_	_	
5-171	2084-2094	Kneser-Ney	_	_	
5-172	2095-2104	smoothing	_	_	
5-173	2105-2112	applied	_	_	
5-174	2112-2113	.	_	_	

#Text=The corpus consists of lyrics of the data from DAMP and DALI datasets and artists from Billboard (2015-2018) [4] 
#Text=
#Text=**Pronunciation Model**: A predefined lexicon that provides a mapping between words and their phonemic representations.
6-1	2114-2117	The	_	_	
6-2	2118-2124	corpus	_	_	
6-3	2125-2133	consists	_	_	
6-4	2134-2136	of	_	_	
6-5	2137-2143	lyrics	_	_	
6-6	2144-2146	of	_	_	
6-7	2147-2150	the	_	_	
6-8	2151-2155	data	_	_	
6-9	2156-2160	from	_	_	
6-10	2161-2165	DAMP	*	DATASET	
6-11	2166-2169	and	_	_	
6-12	2170-2174	DALI	*	DATASET	
6-13	2175-2183	datasets	_	_	
6-14	2184-2187	and	_	_	
6-15	2188-2195	artists	_	_	
6-16	2196-2200	from	_	_	
6-17	2201-2210	Billboard	_	_	
6-18	2211-2212	(	_	_	
6-19	2212-2216	2015	_	_	
6-20	2216-2217	-	_	_	
6-21	2217-2221	2018	_	_	
6-22	2221-2222	)	_	_	
6-23	2223-2224	[	_	_	
6-24	2224-2225	4	_	_	
6-25	2225-2226	]	_	_	
6-26	2229-2230	*	_	_	
6-27	2230-2231	*	_	_	
6-28	2231-2244	Pronunciation	_	_	
6-29	2245-2250	Model	_	_	
6-30	2250-2251	*	_	_	
6-31	2251-2252	*	_	_	
6-32	2252-2253	:	_	_	
6-33	2254-2255	A	_	_	
6-34	2256-2266	predefined	_	_	
6-35	2267-2274	lexicon	_	_	
6-36	2275-2279	that	_	_	
6-37	2280-2288	provides	_	_	
6-38	2289-2290	a	_	_	
6-39	2291-2298	mapping	_	_	
6-40	2299-2306	between	_	_	
6-41	2307-2312	words	_	_	
6-42	2313-2316	and	_	_	
6-43	2317-2322	their	_	_	
6-44	2323-2331	phonemic	_	_	
6-45	2332-2347	representations	_	_	
6-46	2347-2348	.	_	_	

#Text=We use the singing adapted version presented here[5].
#Text=
#Text=
#Text=## Setup
#Text=
#Text=
#Text=
#Text=#### 1) Kaldi
#Text=
#Text=This framework is built as a [Kaldi](http://kaldi-asr.org/)[1] recipe 
#Text=For instructions on Kaldi installation, please visit https://github.com/kaldi-asr/kaldi
#Text=
#Text=#### 2) Dependencies
#Text=
#Text=```
#Text=pip install -r requirements.txt
#Text=```
#Text=
#Text=
#Text=## How to run
#Text=
#Text=* Modify ```KALDI_ROOT``` in  ```path.sh``` according to where your Kaldi installation is.
#Text=
#Text=### A) Data preparation:
#Text=#### 1) Retrieve the data:
#Text=
#Text=* DAMP:
#Text=
#Text=We use the Sing!
7-1	2349-2351	We	_	_	
7-2	2352-2355	use	_	_	
7-3	2356-2359	the	_	_	
7-4	2360-2367	singing	_	_	
7-5	2368-2375	adapted	_	_	
7-6	2376-2383	version	_	_	
7-7	2384-2393	presented	_	_	
7-8	2394-2398	here	_	_	
7-9	2398-2399	[	_	_	
7-10	2399-2400	5	_	_	
7-11	2400-2401	]	_	_	
7-12	2401-2402	.	_	_	
7-13	2405-2406	#	_	_	
7-14	2406-2407	#	_	_	
7-15	2408-2413	Setup	_	_	
7-16	2417-2418	#	_	_	
7-17	2418-2419	#	_	_	
7-18	2419-2420	#	_	_	
7-19	2420-2421	#	_	_	
7-20	2422-2423	1	_	_	
7-21	2423-2424	)	_	_	
7-22	2425-2430	Kaldi	*	SOFTWARE	
7-23	2432-2436	This	_	_	
7-24	2437-2446	framework	_	_	
7-25	2447-2449	is	_	_	
7-26	2450-2455	built	_	_	
7-27	2456-2458	as	_	_	
7-28	2459-2460	a	_	_	
7-29	2461-2462	[	_	_	
7-30	2462-2467	Kaldi	*	SOFTWARE	
7-31	2467-2468	]	_	_	
7-32	2468-2469	(	_	_	
7-33	2469-2473	http	_	_	
7-34	2473-2474	:	_	_	
7-35	2474-2475	/	_	_	
7-36	2475-2476	/	_	_	
7-37	2476-2489	kaldi-asr.org	_	_	
7-37.1	2476-2481	kaldi	*	SOFTWARE	
7-38	2489-2490	/	_	_	
7-39	2490-2491	)	_	_	
7-40	2491-2492	[	_	_	
7-41	2492-2493	1	_	_	
7-42	2493-2494	]	_	_	
7-43	2495-2501	recipe	_	_	
7-44	2503-2506	For	_	_	
7-45	2507-2519	instructions	_	_	
7-46	2520-2522	on	_	_	
7-47	2523-2528	Kaldi	*	SOFTWARE	
7-48	2529-2541	installation	_	_	
7-49	2541-2542	,	_	_	
7-50	2543-2549	please	_	_	
7-51	2550-2555	visit	_	_	
7-52	2556-2561	https	_	_	
7-53	2561-2562	:	_	_	
7-54	2562-2563	/	_	_	
7-55	2563-2564	/	_	_	
7-56	2564-2574	github.com	_	_	
7-57	2574-2575	/	_	_	
7-58	2575-2584	kaldi-asr	_	_	
7-58.1	2575-2580	kaldi	*	SOFTWARE	
7-59	2584-2585	/	_	_	
7-60	2585-2590	kaldi	*	SOFTWARE	
7-61	2592-2593	#	_	_	
7-62	2593-2594	#	_	_	
7-63	2594-2595	#	_	_	
7-64	2595-2596	#	_	_	
7-65	2597-2598	2	_	_	
7-66	2598-2599	)	_	_	
7-67	2600-2612	Dependencies	_	_	
7-68	2614-2615	`	_	_	
7-69	2615-2616	`	_	_	
7-70	2616-2617	`	_	_	
7-71	2618-2621	pip	*	SOFTWARE	
7-72	2622-2629	install	_	_	
7-73	2630-2631	-	_	_	
7-74	2631-2632	r	_	_	
7-75	2633-2649	requirements.txt	_	_	
7-76	2650-2651	`	_	_	
7-77	2651-2652	`	_	_	
7-78	2652-2653	`	_	_	
7-79	2656-2657	#	_	_	
7-80	2657-2658	#	_	_	
7-81	2659-2662	How	_	_	
7-82	2663-2665	to	_	_	
7-83	2666-2669	run	_	_	
7-84	2671-2672	*	_	_	
7-85	2673-2679	Modify	_	_	
7-86	2680-2681	`	_	_	
7-87	2681-2682	`	_	_	
7-88	2682-2683	`	_	_	
7-89	2683-2693	KALDI_ROOT	_	_	
7-89.1	2683-2688	KALDI	*	SOFTWARE	
7-90	2693-2694	`	_	_	
7-91	2694-2695	`	_	_	
7-92	2695-2696	`	_	_	
7-93	2697-2699	in	_	_	
7-94	2701-2702	`	_	_	
7-95	2702-2703	`	_	_	
7-96	2703-2704	`	_	_	
7-97	2704-2711	path.sh	_	_	
7-98	2711-2712	`	_	_	
7-99	2712-2713	`	_	_	
7-100	2713-2714	`	_	_	
7-101	2715-2724	according	_	_	
7-102	2725-2727	to	_	_	
7-103	2728-2733	where	_	_	
7-104	2734-2738	your	_	_	
7-105	2739-2744	Kaldi	*	SOFTWARE	
7-106	2745-2757	installation	_	_	
7-107	2758-2760	is	_	_	
7-108	2760-2761	.	_	_	
7-109	2763-2764	#	_	_	
7-110	2764-2765	#	_	_	
7-111	2765-2766	#	_	_	
7-112	2767-2768	A	_	_	
7-113	2768-2769	)	_	_	
7-114	2770-2774	Data	_	_	
7-115	2775-2786	preparation	_	_	
7-116	2786-2787	:	_	_	
7-117	2788-2789	#	_	_	
7-118	2789-2790	#	_	_	
7-119	2790-2791	#	_	_	
7-120	2791-2792	#	_	_	
7-121	2793-2794	1	_	_	
7-122	2794-2795	)	_	_	
7-123	2796-2804	Retrieve	_	_	
7-124	2805-2808	the	_	_	
7-125	2809-2813	data	_	_	
7-126	2813-2814	:	_	_	
7-127	2816-2817	*	_	_	
7-128	2818-2822	DAMP	*	DATASET	
7-129	2822-2823	:	_	_	
7-130	2825-2827	We	_	_	
7-131	2828-2831	use	_	_	
7-132	2832-2835	the	_	_	
7-133	2836-2840	Sing	*[1]	DATASET[1]	
7-134	2840-2841	!	*[1]	DATASET[1]	

#Text=300x30x2 data within the DAMP repository[6].
8-1	2841-2849	300x30x2	*[1]	DATASET[1]	
8-2	2850-2854	data	_	_	
8-3	2855-2861	within	_	_	
8-4	2862-2865	the	_	_	
8-5	2866-2870	DAMP	*	DATASET	
8-6	2871-2881	repository	_	_	
8-7	2881-2882	[	_	_	
8-8	2882-2883	6	_	_	
8-9	2883-2884	]	_	_	
8-10	2884-2885	.	_	_	

#Text=To retrieve the data, you need to apply for authorization from https://ccrma.stanford.edu/damp/ .
9-1	2886-2888	To	_	_	
9-2	2889-2897	retrieve	_	_	
9-3	2898-2901	the	_	_	
9-4	2902-2906	data	_	_	
9-5	2906-2907	,	_	_	
9-6	2908-2911	you	_	_	
9-7	2912-2916	need	_	_	
9-8	2917-2919	to	_	_	
9-9	2920-2925	apply	_	_	
9-10	2926-2929	for	_	_	
9-11	2930-2943	authorization	_	_	
9-12	2944-2948	from	_	_	
9-13	2949-2954	https	_	_	
9-14	2954-2955	:	_	_	
9-15	2955-2956	/	_	_	
9-16	2956-2957	/	_	_	
9-17	2957-2975	ccrma.stanford.edu	_	_	
9-18	2975-2976	/	_	_	
9-19	2976-2980	damp	*	DATASET	
9-20	2980-2981	/	_	_	
9-21	2982-2983	.	_	_	

#Text=The train/dev/test splits are automatically done within this recipe.
10-1	2984-2987	The	_	_	
10-2	2988-2993	train	_	_	
10-3	2993-2994	/	_	_	
10-4	2994-2997	dev	_	_	
10-5	2997-2998	/	_	_	
10-6	2998-3002	test	_	_	
10-7	3003-3009	splits	_	_	
10-8	3010-3013	are	_	_	
10-9	3014-3027	automatically	_	_	
10-10	3028-3032	done	_	_	
10-11	3033-3039	within	_	_	
10-12	3040-3044	this	_	_	
10-13	3045-3051	recipe	_	_	
10-14	3051-3052	.	_	_	

#Text=Please define the directory where you downloaded the dataset (```path-to-damp```) as follows:
#Text=```
#Text=datadir_damp='path-to-damp'
#Text=```
#Text=
#Text=* DALI:
#Text=
#Text=DALI_v2.0 is used to train the polyphonic and cross-domain lyrics transcription models.
11-1	3053-3059	Please	_	_	
11-2	3060-3066	define	_	_	
11-3	3067-3070	the	_	_	
11-4	3071-3080	directory	_	_	
11-5	3081-3086	where	_	_	
11-6	3087-3090	you	_	_	
11-7	3091-3101	downloaded	_	_	
11-8	3102-3105	the	_	_	
11-9	3106-3113	dataset	_	_	
11-10	3114-3115	(	_	_	
11-11	3115-3116	`	_	_	
11-12	3116-3117	`	_	_	
11-13	3117-3118	`	_	_	
11-14	3118-3130	path-to-damp	_	_	
11-14.1	3126-3130	damp	*	DATASET	
11-15	3130-3131	`	_	_	
11-16	3131-3132	`	_	_	
11-17	3132-3133	`	_	_	
11-18	3133-3134	)	_	_	
11-19	3135-3137	as	_	_	
11-20	3138-3145	follows	_	_	
11-21	3145-3146	:	_	_	
11-22	3147-3148	`	_	_	
11-23	3148-3149	`	_	_	
11-24	3149-3150	`	_	_	
11-25	3151-3163	datadir_damp	_	_	
11-25.1	3159-3163	damp	*	DATASET	
11-26	3163-3164	=	_	_	
11-27	3164-3165	'	_	_	
11-28	3165-3177	path-to-damp	_	_	
11-28.1	3173-3177	damp	*	DATASET	
11-29	3177-3178	'	_	_	
11-30	3179-3180	`	_	_	
11-31	3180-3181	`	_	_	
11-32	3181-3182	`	_	_	
11-33	3184-3185	*	_	_	
11-34	3186-3190	DALI	*	DATASET	
11-35	3190-3191	:	_	_	
11-36	3193-3202	DALI_v2.0	*	DATASET	
11-37	3203-3205	is	_	_	
11-38	3206-3210	used	_	_	
11-39	3211-3213	to	_	_	
11-40	3214-3219	train	_	_	
11-41	3220-3223	the	_	_	
11-42	3224-3234	polyphonic	_	_	
11-43	3235-3238	and	_	_	
11-44	3239-3251	cross-domain	_	_	
11-45	3252-3258	lyrics	_	_	
11-46	3259-3272	transcription	_	_	
11-47	3273-3279	models	_	_	
11-48	3279-3280	.	_	_	

#Text=To retrieve the data, please refer to the relevant Github repository at:
#Text=
#Text=https://github.com/gabolsgabs/DALI
#Text=
#Text=According to the repository, you can download the audio files under 'Getting the audio' section.
12-1	3281-3283	To	_	_	
12-2	3284-3292	retrieve	_	_	
12-3	3293-3296	the	_	_	
12-4	3297-3301	data	_	_	
12-5	3301-3302	,	_	_	
12-6	3303-3309	please	_	_	
12-7	3310-3315	refer	_	_	
12-8	3316-3318	to	_	_	
12-9	3319-3322	the	_	_	
12-10	3323-3331	relevant	_	_	
12-11	3332-3338	Github	*	SOFTWARE	
12-12	3339-3349	repository	_	_	
12-13	3350-3352	at	_	_	
12-14	3352-3353	:	_	_	
12-15	3355-3360	https	_	_	
12-16	3360-3361	:	_	_	
12-17	3361-3362	/	_	_	
12-18	3362-3363	/	_	_	
12-19	3363-3373	github.com	_	_	
12-20	3373-3374	/	_	_	
12-21	3374-3384	gabolsgabs	_	_	
12-22	3384-3385	/	_	_	
12-23	3385-3389	DALI	*	DATASET	
12-24	3391-3400	According	_	_	
12-25	3401-3403	to	_	_	
12-26	3404-3407	the	_	_	
12-27	3408-3418	repository	_	_	
12-28	3418-3419	,	_	_	
12-29	3420-3423	you	_	_	
12-30	3424-3427	can	_	_	
12-31	3428-3436	download	_	_	
12-32	3437-3440	the	_	_	
12-33	3441-3446	audio	_	_	
12-34	3447-3452	files	_	_	
12-35	3453-3458	under	_	_	
12-36	3459-3460	'	_	_	
12-37	3460-3467	Getting	_	_	
12-38	3468-3471	the	_	_	
12-39	3472-3477	audio	_	_	
12-40	3477-3478	'	_	_	
12-41	3479-3486	section	_	_	
12-42	3486-3487	.	_	_	

#Text=Refer this as:
#Text=```
#Text=datadir_dali='path-to-dali'
#Text=```
#Text=
#Text=* DALI-TALT:
#Text=
#Text=This dataset is a subset of DALI, presented in [7] It is the largest test set used for evaluating polyphonic ALT models.
13-1	3488-3493	Refer	_	_	
13-2	3494-3498	this	_	_	
13-3	3499-3501	as	_	_	
13-4	3501-3502	:	_	_	
13-5	3503-3504	`	_	_	
13-6	3504-3505	`	_	_	
13-7	3505-3506	`	_	_	
13-8	3507-3519	datadir_dali	_	_	
13-9	3519-3520	=	_	_	
13-10	3520-3521	'	_	_	
13-11	3521-3533	path-to-dali	_	_	
13-12	3533-3534	'	_	_	
13-13	3535-3536	`	_	_	
13-14	3536-3537	`	_	_	
13-15	3537-3538	`	_	_	
13-16	3540-3541	*	_	_	
13-17	3542-3551	DALI-TALT	*	DATASET	
13-18	3551-3552	:	_	_	
13-19	3554-3558	This	_	_	
13-20	3559-3566	dataset	_	_	
13-21	3567-3569	is	_	_	
13-22	3570-3571	a	_	_	
13-23	3572-3578	subset	_	_	
13-24	3579-3581	of	_	_	
13-25	3582-3586	DALI	*	DATASET	
13-26	3586-3587	,	_	_	
13-27	3588-3597	presented	_	_	
13-28	3598-3600	in	_	_	
13-29	3601-3602	[	_	_	
13-30	3602-3603	7	_	_	
13-31	3603-3604	]	_	_	
13-32	3605-3607	It	_	_	
13-33	3608-3610	is	_	_	
13-34	3611-3614	the	_	_	
13-35	3615-3622	largest	_	_	
13-36	3623-3627	test	_	_	
13-37	3628-3631	set	_	_	
13-38	3632-3636	used	_	_	
13-39	3637-3640	for	_	_	
13-40	3641-3651	evaluating	_	_	
13-41	3652-3662	polyphonic	_	_	
13-42	3663-3666	ALT	_	_	
13-43	3667-3673	models	_	_	
13-44	3673-3674	.	_	_	

#Text=The data can be retrieved via the tutorial at: https://github.com/emirdemirel/DALI-TestSet4ALT .
#Text=```
#Text=datadir_dali_talt='path-to-dali-talt'
#Text=```
#Text=
#Text=* Jamendo:
#Text=
#Text=Jamendo(lyrics) is a benchmark evaluation set for both lyrics transcription and audio-to-lyrics alignment tasks[8].
14-1	3675-3678	The	_	_	
14-2	3679-3683	data	_	_	
14-3	3684-3687	can	_	_	
14-4	3688-3690	be	_	_	
14-5	3691-3700	retrieved	_	_	
14-6	3701-3704	via	_	_	
14-7	3705-3708	the	_	_	
14-8	3709-3717	tutorial	_	_	
14-9	3718-3720	at	_	_	
14-10	3720-3721	:	_	_	
14-11	3722-3727	https	_	_	
14-12	3727-3728	:	_	_	
14-13	3728-3729	/	_	_	
14-14	3729-3730	/	_	_	
14-15	3730-3740	github.com	_	_	
14-16	3740-3741	/	_	_	
14-17	3741-3752	emirdemirel	_	_	
14-18	3752-3753	/	_	_	
14-19	3753-3769	DALI-TestSet4ALT	*	DATASET	
14-20	3770-3771	.	_	_	
14-21	3772-3773	`	_	_	
14-22	3773-3774	`	_	_	
14-23	3774-3775	`	_	_	
14-24	3776-3793	datadir_dali_talt	_	_	
14-24.1	3784-3793	dali_talt	*	DATASET	
14-25	3793-3794	=	_	_	
14-26	3794-3795	'	_	_	
14-27	3795-3812	path-to-dali-talt	_	_	
14-27.1	3803-3812	dali-talt	*	DATASET	
14-28	3812-3813	'	_	_	
14-29	3814-3815	`	_	_	
14-30	3815-3816	`	_	_	
14-31	3816-3817	`	_	_	
14-32	3819-3820	*	_	_	
14-33	3821-3828	Jamendo	*	DATASET	
14-34	3828-3829	:	_	_	
14-35	3831-3838	Jamendo	*[2]	DATASET[2]	
14-36	3838-3839	(	*[2]	DATASET[2]	
14-37	3839-3845	lyrics	*[2]	DATASET[2]	
14-38	3845-3846	)	*[2]	DATASET[2]	
14-39	3847-3849	is	_	_	
14-40	3850-3851	a	_	_	
14-41	3852-3861	benchmark	_	_	
14-42	3862-3872	evaluation	_	_	
14-43	3873-3876	set	_	_	
14-44	3877-3880	for	_	_	
14-45	3881-3885	both	_	_	
14-46	3886-3892	lyrics	_	_	
14-47	3893-3906	transcription	_	_	
14-48	3907-3910	and	_	_	
14-49	3911-3926	audio-to-lyrics	_	_	
14-50	3927-3936	alignment	_	_	
14-51	3937-3942	tasks	_	_	
14-52	3942-3943	[	_	_	
14-53	3943-3944	8	_	_	
14-54	3944-3945	]	_	_	
14-55	3945-3946	.	_	_	

#Text=It is also used in MIREX challenges.
15-1	3947-3949	It	_	_	
15-2	3950-3952	is	_	_	
15-3	3953-3957	also	_	_	
15-4	3958-3962	used	_	_	
15-5	3963-3965	in	_	_	
15-6	3966-3971	MIREX	_	_	
15-7	3972-3982	challenges	_	_	
15-8	3982-3983	.	_	_	

#Text=Data can be retrieved at https://github.com/f90/jamendolyrics . 
#Text=```
#Text=datadir_jamendo='path-to-jamendo'
#Text=```
#Text=
#Text=
#Text=### B) Running the training pipeline
#Text=
#Text=There are two recipes included in this repository.
16-1	3984-3988	Data	_	_	
16-2	3989-3992	can	_	_	
16-3	3993-3995	be	_	_	
16-4	3996-4005	retrieved	_	_	
16-5	4006-4008	at	_	_	
16-6	4009-4014	https	_	_	
16-7	4014-4015	:	_	_	
16-8	4015-4016	/	_	_	
16-9	4016-4017	/	_	_	
16-10	4017-4027	github.com	_	_	
16-11	4027-4028	/	_	_	
16-12	4028-4031	f90	_	_	
16-13	4031-4032	/	_	_	
16-14	4032-4045	jamendolyrics	*	DATASET	
16-15	4046-4047	.	_	_	
16-16	4049-4050	`	_	_	
16-17	4050-4051	`	_	_	
16-18	4051-4052	`	_	_	
16-19	4053-4068	datadir_jamendo	_	_	
16-19.1	4061-4068	jamendo	*	DATASET	
16-20	4068-4069	=	_	_	
16-21	4069-4070	'	_	_	
16-22	4070-4085	path-to-jamendo	_	_	
16-22.1	4078-4085	jamendo	*	DATASET	
16-23	4085-4086	'	_	_	
16-24	4087-4088	`	_	_	
16-25	4088-4089	`	_	_	
16-26	4089-4090	`	_	_	
16-27	4093-4094	#	_	_	
16-28	4094-4095	#	_	_	
16-29	4095-4096	#	_	_	
16-30	4097-4098	B	_	_	
16-31	4098-4099	)	_	_	
16-32	4100-4107	Running	_	_	
16-33	4108-4111	the	_	_	
16-34	4112-4120	training	_	_	
16-35	4121-4129	pipeline	_	_	
16-36	4131-4136	There	_	_	
16-37	4137-4140	are	_	_	
16-38	4141-4144	two	_	_	
16-39	4145-4152	recipes	_	_	
16-40	4153-4161	included	_	_	
16-41	4162-4164	in	_	_	
16-42	4165-4169	this	_	_	
16-43	4170-4180	repository	_	_	
16-44	4180-4181	.	_	_	

#Text=The first one is a single-stream CTDNN - self-attention based acoustic model with RNNLM rescoring (1) presented in IJCNN2020[9], and the MStre-Net[3] recipe which has a multistream cross-domain acoustic model(2), which is published in ISMIR2021. 
#Text=
#Text= ##### 1 - Dilated Convolutional Neural Networks with Self-Attention (single-stream):
#Text= 
#Text= This is the previous recipe for lyrics transcription.
17-1	4182-4185	The	_	_	
17-2	4186-4191	first	_	_	
17-3	4192-4195	one	_	_	
17-4	4196-4198	is	_	_	
17-5	4199-4200	a	_	_	
17-6	4201-4214	single-stream	_	_	
17-7	4215-4220	CTDNN	_	_	
17-8	4221-4222	-	_	_	
17-9	4223-4237	self-attention	_	_	
17-10	4238-4243	based	_	_	
17-11	4244-4252	acoustic	_	_	
17-12	4253-4258	model	_	_	
17-13	4259-4263	with	_	_	
17-14	4264-4269	RNNLM	_	_	
17-15	4270-4279	rescoring	_	_	
17-16	4280-4281	(	_	_	
17-17	4281-4282	1	_	_	
17-18	4282-4283	)	_	_	
17-19	4284-4293	presented	_	_	
17-20	4294-4296	in	_	_	
17-21	4297-4306	IJCNN2020	*	CONFERENCE	
17-22	4306-4307	[	_	_	
17-23	4307-4308	9	_	_	
17-24	4308-4309	]	_	_	
17-25	4309-4310	,	_	_	
17-26	4311-4314	and	_	_	
17-27	4315-4318	the	_	_	
17-28	4319-4328	MStre-Net	_	_	
17-29	4328-4329	[	_	_	
17-30	4329-4330	3	_	_	
17-31	4330-4331	]	_	_	
17-32	4332-4338	recipe	_	_	
17-33	4339-4344	which	_	_	
17-34	4345-4348	has	_	_	
17-35	4349-4350	a	_	_	
17-36	4351-4362	multistream	_	_	
17-37	4363-4375	cross-domain	_	_	
17-38	4376-4384	acoustic	_	_	
17-39	4385-4390	model	_	_	
17-40	4390-4391	(	_	_	
17-41	4391-4392	2	_	_	
17-42	4392-4393	)	_	_	
17-43	4393-4394	,	_	_	
17-44	4395-4400	which	_	_	
17-45	4401-4403	is	_	_	
17-46	4404-4413	published	_	_	
17-47	4414-4416	in	_	_	
17-48	4417-4426	ISMIR2021	*	CONFERENCE	
17-49	4426-4427	.	_	_	
17-50	4431-4432	#	_	_	
17-51	4432-4433	#	_	_	
17-52	4433-4434	#	_	_	
17-53	4434-4435	#	_	_	
17-54	4435-4436	#	_	_	
17-55	4437-4438	1	_	_	
17-56	4439-4440	-	_	_	
17-57	4441-4448	Dilated	_	_	
17-58	4449-4462	Convolutional	_	_	
17-59	4463-4469	Neural	_	_	
17-60	4470-4478	Networks	_	_	
17-61	4479-4483	with	_	_	
17-62	4484-4498	Self-Attention	_	_	
17-63	4499-4500	(	_	_	
17-64	4500-4513	single-stream	_	_	
17-65	4513-4514	)	_	_	
17-66	4514-4515	:	_	_	
17-67	4519-4523	This	_	_	
17-68	4524-4526	is	_	_	
17-69	4527-4530	the	_	_	
17-70	4531-4539	previous	_	_	
17-71	4540-4546	recipe	_	_	
17-72	4547-4550	for	_	_	
17-73	4551-4557	lyrics	_	_	
17-74	4558-4571	transcription	_	_	
17-75	4571-4572	.	_	_	

#Text=It is written to work on DAMP.
18-1	4573-4575	It	_	_	
18-2	4576-4578	is	_	_	
18-3	4579-4586	written	_	_	
18-4	4587-4589	to	_	_	
18-5	4590-4594	work	_	_	
18-6	4595-4597	on	_	_	
18-7	4598-4602	DAMP	*	DATASET	
18-8	4602-4603	.	_	_	

#Text=However, you can modify the relevant variables in the training scripts.
19-1	4604-4611	However	_	_	
19-2	4611-4612	,	_	_	
19-3	4613-4616	you	_	_	
19-4	4617-4620	can	_	_	
19-5	4621-4627	modify	_	_	
19-6	4628-4631	the	_	_	
19-7	4632-4640	relevant	_	_	
19-8	4641-4650	variables	_	_	
19-9	4651-4653	in	_	_	
19-10	4654-4657	the	_	_	
19-11	4658-4666	training	_	_	
19-12	4667-4674	scripts	_	_	
19-13	4674-4675	.	_	_	

#Text=Define the absolute path to the DAMP - Sing!
20-1	4679-4685	Define	_	_	
20-2	4686-4689	the	_	_	
20-3	4690-4698	absolute	_	_	
20-4	4699-4703	path	_	_	
20-5	4704-4706	to	_	_	
20-6	4707-4710	the	_	_	
20-7	4711-4715	DAMP	*	DATASET	
20-8	4716-4717	-	_	_	
20-9	4718-4722	Sing	_	_	
20-10	4722-4723	!	_	_	

#Text=300x30x2  repository.
#Text= 
#Text= ```
#Text= audiopath = path-to-DAMP-dataset
#Text=```
#Text=Then, simply pass the ```$audiopath``` variable to the main recipe:
#Text=```
#Text=.
21-1	4723-4731	300x30x2	_	_	
21-2	4733-4743	repository	_	_	
21-3	4743-4744	.	_	_	
21-4	4748-4749	`	_	_	
21-5	4749-4750	`	_	_	
21-6	4750-4751	`	_	_	
21-7	4753-4762	audiopath	_	_	
21-8	4763-4764	=	_	_	
21-9	4765-4785	path-to-DAMP-dataset	_	_	
21-9.1	4773-4777	DAMP	*	DATASET	
21-10	4786-4787	`	_	_	
21-11	4787-4788	`	_	_	
21-12	4788-4789	`	_	_	
21-13	4790-4794	Then	_	_	
21-14	4794-4795	,	_	_	
21-15	4796-4802	simply	_	_	
21-16	4803-4807	pass	_	_	
21-17	4808-4811	the	_	_	
21-18	4812-4813	`	_	_	
21-19	4813-4814	`	_	_	
21-20	4814-4815	`	_	_	
21-21	4815-4816	$	_	_	
21-22	4816-4825	audiopath	_	_	
21-23	4825-4826	`	_	_	
21-24	4826-4827	`	_	_	
21-25	4827-4828	`	_	_	
21-26	4829-4837	variable	_	_	
21-27	4838-4840	to	_	_	
21-28	4841-4844	the	_	_	
21-29	4845-4849	main	_	_	
21-30	4850-4856	recipe	_	_	
21-31	4856-4857	:	_	_	
21-32	4858-4859	`	_	_	
21-33	4859-4860	`	_	_	
21-34	4860-4861	`	_	_	
21-35	4862-4863	.	_	_	

#Text=/run_singlestream.sh $audiopath
#Text=```
#Text=##### 2 - MStreNet : Multistreaming Time-Delay Neural Networks & Cross-domain Training
#Text=
#Text=The most recent model is the one in (2), so we recommend running te following script:
#Text=
#Text=```
#Text=.
22-1	4863-4864	/	_	_	
22-2	4864-4883	run_singlestream.sh	_	_	
22-3	4884-4885	$	_	_	
22-4	4885-4894	audiopath	_	_	
22-5	4895-4896	`	_	_	
22-6	4896-4897	`	_	_	
22-7	4897-4898	`	_	_	
22-8	4899-4900	#	_	_	
22-9	4900-4901	#	_	_	
22-10	4901-4902	#	_	_	
22-11	4902-4903	#	_	_	
22-12	4903-4904	#	_	_	
22-13	4905-4906	2	_	_	
22-14	4907-4908	-	_	_	
22-15	4909-4917	MStreNet	_	_	
22-16	4918-4919	:	_	_	
22-17	4920-4934	Multistreaming	_	_	
22-18	4935-4945	Time-Delay	_	_	
22-19	4946-4952	Neural	_	_	
22-20	4953-4961	Networks	_	_	
22-21	4962-4963	&	_	_	
22-22	4964-4976	Cross-domain	_	_	
22-23	4977-4985	Training	_	_	
22-24	4987-4990	The	_	_	
22-25	4991-4995	most	_	_	
22-26	4996-5002	recent	_	_	
22-27	5003-5008	model	_	_	
22-28	5009-5011	is	_	_	
22-29	5012-5015	the	_	_	
22-30	5016-5019	one	_	_	
22-31	5020-5022	in	_	_	
22-32	5023-5024	(	_	_	
22-33	5024-5025	2	_	_	
22-34	5025-5026	)	_	_	
22-35	5026-5027	,	_	_	
22-36	5028-5030	so	_	_	
22-37	5031-5033	we	_	_	
22-38	5034-5043	recommend	_	_	
22-39	5044-5051	running	_	_	
22-40	5052-5054	te	_	_	
22-41	5055-5064	following	_	_	
22-42	5065-5071	script	_	_	
22-43	5071-5072	:	_	_	
22-44	5074-5075	`	_	_	
22-45	5075-5076	`	_	_	
22-46	5076-5077	`	_	_	
22-47	5078-5079	.	_	_	

#Text=/run_mstrenet.sh --datadir_damp ${datadir_damp} --datadir_dali ${datadir_dali} \\
#Text=    --datadir_dali_talt ${datadir_dali_talt} --datadir_jamendo ${datadir_jamendo} \\
#Text=```
#Text=If you'd like to see the help menu, simply type:
#Text=```
#Text=.
23-1	5079-5080	/	_	_	
23-2	5080-5095	run_mstrenet.sh	_	_	
23-3	5096-5097	-	_	_	
23-4	5097-5098	-	_	_	
23-5	5098-5110	datadir_damp	_	_	
23-5.1	5106-5110	damp	*	DATASET	
23-6	5111-5112	$	_	_	
23-7	5112-5113	{	_	_	
23-8	5113-5125	datadir_damp	_	_	
23-8.1	5121-5125	damp	*	DATASET	
23-9	5125-5126	}	_	_	
23-10	5127-5128	-	_	_	
23-11	5128-5129	-	_	_	
23-12	5129-5141	datadir_dali	_	_	
23-12.1	5137-5141	dali	*	*	
23-13	5142-5143	$	_	_	
23-14	5143-5144	{	_	_	
23-15	5144-5156	datadir_dali	_	_	
23-15.1	5152-5156	dali	*	DATASET	
23-16	5156-5157	}	_	_	
23-17	5158-5159	\	_	_	
23-18	5164-5165	-	_	_	
23-19	5165-5166	-	_	_	
23-20	5166-5183	datadir_dali_talt	_	_	
23-20.1	5174-5183	dali_talt	*	DATASET	
23-21	5184-5185	$	_	_	
23-22	5185-5186	{	_	_	
23-23	5186-5203	datadir_dali_talt	_	_	
23-23.1	5194-5203	dali_talt	*	DATASET	
23-24	5203-5204	}	_	_	
23-25	5205-5206	-	_	_	
23-26	5206-5207	-	_	_	
23-27	5207-5222	datadir_jamendo	_	_	
23-27.1	5215-5222	jamendo	*	DATASET	
23-28	5223-5224	$	_	_	
23-29	5224-5225	{	_	_	
23-30	5225-5240	datadir_jamendo	_	_	
23-30.1	5233-5240	jamendo	*	DATASET	
23-31	5240-5241	}	_	_	
23-32	5242-5243	\	_	_	
23-33	5244-5245	`	_	_	
23-34	5245-5246	`	_	_	
23-35	5246-5247	`	_	_	
23-36	5248-5250	If	_	_	
23-37	5251-5256	you'd	_	_	
23-38	5257-5261	like	_	_	
23-39	5262-5264	to	_	_	
23-40	5265-5268	see	_	_	
23-41	5269-5272	the	_	_	
23-42	5273-5277	help	_	_	
23-43	5278-5282	menu	_	_	
23-44	5282-5283	,	_	_	
23-45	5284-5290	simply	_	_	
23-46	5291-5295	type	_	_	
23-47	5295-5296	:	_	_	
23-48	5297-5298	`	_	_	
23-49	5298-5299	`	_	_	
23-50	5299-5300	`	_	_	
23-51	5301-5302	.	_	_	

#Text=/run_mstrenet.sh --help true
#Text=```
#Text=which will output:
#Text=
#Text=```
#Text= Usage: .
24-1	5302-5303	/	_	_	
24-2	5303-5318	run_mstrenet.sh	_	_	
24-3	5319-5320	-	_	_	
24-4	5320-5321	-	_	_	
24-5	5321-5325	help	_	_	
24-6	5326-5330	true	_	_	
24-7	5331-5332	`	_	_	
24-8	5332-5333	`	_	_	
24-9	5333-5334	`	_	_	
24-10	5335-5340	which	_	_	
24-11	5341-5345	will	_	_	
24-12	5346-5352	output	_	_	
24-13	5352-5353	:	_	_	
24-14	5355-5356	`	_	_	
24-15	5356-5357	`	_	_	
24-16	5357-5358	`	_	_	
24-17	5360-5365	Usage	_	_	
24-18	5365-5366	:	_	_	
24-19	5367-5368	.	_	_	

#Text=/run_mstrenet.sh
#Text= This is the main script for the training of the MStreNet
#Text= automatic lyrics transcription model (ISMIR2021).
25-1	5368-5369	/	_	_	
25-2	5369-5384	run_mstrenet.sh	_	_	
25-3	5386-5390	This	_	_	
25-4	5391-5393	is	_	_	
25-5	5394-5397	the	_	_	
25-6	5398-5402	main	_	_	
25-7	5403-5409	script	_	_	
25-8	5410-5413	for	_	_	
25-9	5414-5417	the	_	_	
25-10	5418-5426	training	_	_	
25-11	5427-5429	of	_	_	
25-12	5430-5433	the	_	_	
25-13	5434-5442	MStreNet	_	_	
25-14	5444-5453	automatic	_	_	
25-15	5454-5460	lyrics	_	_	
25-16	5461-5474	transcription	_	_	
25-17	5475-5480	model	_	_	
25-18	5481-5482	(	_	_	
25-19	5482-5491	ISMIR2021	*	CONFERENCE	
25-20	5491-5492	)	_	_	
25-21	5492-5493	.	_	_	

#Text=You just have to specify where the datasets are located.
26-1	5495-5498	You	_	_	
26-2	5499-5503	just	_	_	
26-3	5504-5508	have	_	_	
26-4	5509-5511	to	_	_	
26-5	5512-5519	specify	_	_	
26-6	5520-5525	where	_	_	
26-7	5526-5529	the	_	_	
26-8	5530-5538	datasets	_	_	
26-9	5539-5542	are	_	_	
26-10	5543-5550	located	_	_	
26-11	5550-5551	.	_	_	

#Text=main options (for others, see top of script file)
#Text= --stage                                          # stage of the main running script"
#Text= --chain_stage                                    # stage for the DNN training pipeline (chain recipe at stage 13)"
#Text= --train_stage                                    # DNN training stage.
27-1	5557-5561	main	_	_	
27-2	5562-5569	options	_	_	
27-3	5570-5571	(	_	_	
27-4	5571-5574	for	_	_	
27-5	5575-5581	others	_	_	
27-6	5581-5582	,	_	_	
27-7	5583-5586	see	_	_	
27-8	5587-5590	top	_	_	
27-9	5591-5593	of	_	_	
27-10	5594-5600	script	_	_	
27-11	5601-5605	file	_	_	
27-12	5605-5606	)	_	_	
27-13	5608-5609	-	_	_	
27-14	5609-5610	-	_	_	
27-15	5610-5615	stage	_	_	
27-16	5657-5658	#	_	_	
27-17	5659-5664	stage	_	_	
27-18	5665-5667	of	_	_	
27-19	5668-5671	the	_	_	
27-20	5672-5676	main	_	_	
27-21	5677-5684	running	_	_	
27-22	5685-5691	script	_	_	
27-23	5691-5692	"	_	_	
27-24	5694-5695	-	_	_	
27-25	5695-5696	-	_	_	
27-26	5696-5707	chain_stage	_	_	
27-27	5743-5744	#	_	_	
27-28	5745-5750	stage	_	_	
27-29	5751-5754	for	_	_	
27-30	5755-5758	the	_	_	
27-31	5759-5762	DNN	_	_	
27-32	5763-5771	training	_	_	
27-33	5772-5780	pipeline	_	_	
27-34	5781-5782	(	_	_	
27-35	5782-5787	chain	_	_	
27-36	5788-5794	recipe	_	_	
27-37	5795-5797	at	_	_	
27-38	5798-5803	stage	_	_	
27-39	5804-5806	13	_	_	
27-40	5806-5807	)	_	_	
27-41	5807-5808	"	_	_	
27-42	5810-5811	-	_	_	
27-43	5811-5812	-	_	_	
27-44	5812-5823	train_stage	_	_	
27-45	5859-5860	#	_	_	
27-46	5861-5864	DNN	_	_	
27-47	5865-5873	training	_	_	
27-48	5874-5879	stage	_	_	
27-49	5879-5880	.	_	_	

#Text=Should be -10 to initialize the training"
#Text= --datadir_damp                                   # path to DAMP dataset
#Text= --datadir_dali                                   # path to DALI dataset
#Text= --datadir_dali_talt                              # path to DALI-TALT dataset
#Text= --datadir_jamendo                                # path to jamendo dataset
#Text= --pretrained_model <model>                       # directory to a pretrained model (if specificed, i.e. models/ijcnn)
28-1	5881-5887	Should	_	_	
28-2	5888-5890	be	_	_	
28-3	5891-5892	-	_	_	
28-4	5892-5894	10	_	_	
28-5	5895-5897	to	_	_	
28-6	5898-5908	initialize	_	_	
28-7	5909-5912	the	_	_	
28-8	5913-5921	training	_	_	
28-9	5921-5922	"	_	_	
28-10	5924-5925	-	_	_	
28-11	5925-5926	-	_	_	
28-12	5926-5938	datadir_damp	_	_	
28-12.1	5934-5938	damp	*	DATASET	
28-13	5973-5974	#	_	_	
28-14	5975-5979	path	_	_	
28-15	5980-5982	to	_	_	
28-16	5983-5987	DAMP	*	DATASET	
28-17	5988-5995	dataset	_	_	
28-18	5997-5998	-	_	_	
28-19	5998-5999	-	_	_	
28-20	5999-6011	datadir_dali	_	_	
28-20.1	6007-6011	dali	*	DATASET	
28-21	6046-6047	#	_	_	
28-22	6048-6052	path	_	_	
28-23	6053-6055	to	_	_	
28-24	6056-6060	DALI	*	DATASET	
28-25	6061-6068	dataset	_	_	
28-26	6070-6071	-	_	_	
28-27	6071-6072	-	_	_	
28-28	6072-6089	datadir_dali_talt	_	_	
28-28.1	6080-6089	dali_talt	*	DATASET	
28-29	6119-6120	#	_	_	
28-30	6121-6125	path	_	_	
28-31	6126-6128	to	_	_	
28-32	6129-6138	DALI-TALT	*	DATASET	
28-33	6139-6146	dataset	_	_	
28-34	6148-6149	-	_	_	
28-35	6149-6150	-	_	_	
28-36	6150-6165	datadir_jamendo	_	_	
28-36.1	6158-6165	jamendo	*	DATASET	
28-37	6197-6198	#	_	_	
28-38	6199-6203	path	_	_	
28-39	6204-6206	to	_	_	
28-40	6207-6214	jamendo	*	DATASET	
28-41	6215-6222	dataset	_	_	
28-42	6224-6225	-	_	_	
28-43	6225-6226	-	_	_	
28-44	6226-6242	pretrained_model	_	_	
28-45	6243-6244	<	_	_	
28-46	6244-6249	model	_	_	
28-47	6249-6250	>	_	_	
28-48	6273-6274	#	_	_	
28-49	6275-6284	directory	_	_	
28-50	6285-6287	to	_	_	
28-51	6288-6289	a	_	_	
28-52	6290-6300	pretrained	_	_	
28-53	6301-6306	model	_	_	
28-54	6307-6308	(	_	_	
28-55	6308-6310	if	_	_	
28-56	6311-6321	specificed	_	_	
28-57	6321-6322	,	_	_	
28-58	6323-6326	i.e	_	_	
28-59	6326-6327	.	_	_	
28-60	6328-6334	models	_	_	
28-61	6334-6335	/	_	_	
28-62	6335-6340	ijcnn	_	_	
28-63	6340-6341	)	_	_	

#Text=.
29-1	6341-6342	.	_	_	

#Text="
#Text=                                                  # If this is non-empty, the script will skip training and directly go to stage 14."
30-1	6342-6343	"	_	_	
30-2	6394-6395	#	_	_	
30-3	6396-6398	If	_	_	
30-4	6399-6403	this	_	_	
30-5	6404-6406	is	_	_	
30-6	6407-6416	non-empty	_	_	
30-7	6416-6417	,	_	_	
30-8	6418-6421	the	_	_	
30-9	6422-6428	script	_	_	
30-10	6429-6433	will	_	_	
30-11	6434-6438	skip	_	_	
30-12	6439-6447	training	_	_	
30-13	6448-6451	and	_	_	
30-14	6452-6460	directly	_	_	
30-15	6461-6463	go	_	_	
30-16	6464-6466	to	_	_	
30-17	6467-6472	stage	_	_	
30-18	6473-6475	14	_	_	
30-19	6475-6476	.	_	_	
30-20	6476-6477	"	_	_	

#Text=--nj <nj>                                        # number of parallel jobs" 
#Text=
#Text=```
#Text=
#Text=### C) (OPTIONAL) Extract frame-level Phoneme posteriorgrams:
#Text=
#Text=Run the script for extracting the phoneme posteriorgrams as follows:
#Text=
#Text=```
#Text=audio_path='absolute-path-to-the-input-audio-file'
#Text=save_path='path-to-save-the-output
#Text=cd s5
#Text=.
31-1	6479-6480	-	_	_	
31-2	6480-6481	-	_	_	
31-3	6481-6483	nj	_	_	
31-4	6484-6485	<	_	_	
31-5	6485-6487	nj	_	_	
31-6	6487-6488	>	_	_	
31-7	6528-6529	#	_	_	
31-8	6530-6536	number	_	_	
31-9	6537-6539	of	_	_	
31-10	6540-6548	parallel	_	_	
31-11	6549-6553	jobs	_	_	
31-12	6553-6554	"	_	_	
31-13	6557-6558	`	_	_	
31-14	6558-6559	`	_	_	
31-15	6559-6560	`	_	_	
31-16	6562-6563	#	_	_	
31-17	6563-6564	#	_	_	
31-18	6564-6565	#	_	_	
31-19	6566-6567	C	_	_	
31-20	6567-6568	)	_	_	
31-21	6569-6570	(	_	_	
31-22	6570-6578	OPTIONAL	_	_	
31-23	6578-6579	)	_	_	
31-24	6580-6587	Extract	_	_	
31-25	6588-6599	frame-level	_	_	
31-26	6600-6607	Phoneme	_	_	
31-27	6608-6622	posteriorgrams	_	_	
31-28	6622-6623	:	_	_	
31-29	6625-6628	Run	_	_	
31-30	6629-6632	the	_	_	
31-31	6633-6639	script	_	_	
31-32	6640-6643	for	_	_	
31-33	6644-6654	extracting	_	_	
31-34	6655-6658	the	_	_	
31-35	6659-6666	phoneme	_	_	
31-36	6667-6681	posteriorgrams	_	_	
31-37	6682-6684	as	_	_	
31-38	6685-6692	follows	_	_	
31-39	6692-6693	:	_	_	
31-40	6695-6696	`	_	_	
31-41	6696-6697	`	_	_	
31-42	6697-6698	`	_	_	
31-43	6699-6709	audio_path	_	_	
31-44	6709-6710	=	_	_	
31-45	6710-6711	'	_	_	
31-46	6711-6748	absolute-path-to-the-input-audio-file	_	_	
31-47	6748-6749	'	_	_	
31-48	6750-6759	save_path	_	_	
31-49	6759-6760	=	_	_	
31-50	6760-6761	'	_	_	
31-51	6761-6784	path-to-save-the-output	_	_	
31-52	6785-6787	cd	_	_	
31-53	6788-6790	s5	_	_	
31-54	6791-6792	.	_	_	

#Text=/extract_phn_posteriorgram.sh $audio_path $save_path
#Text=```
#Text=
#Text=The output posteriorgrams are saved as numpy arrays (.npy).
32-1	6792-6793	/	_	_	
32-2	6793-6821	extract_phn_posteriorgram.sh	_	_	
32-3	6822-6823	$	_	_	
32-4	6823-6833	audio_path	_	_	
32-5	6834-6835	$	_	_	
32-6	6835-6844	save_path	_	_	
32-7	6845-6846	`	_	_	
32-8	6846-6847	`	_	_	
32-9	6847-6848	`	_	_	
32-10	6850-6853	The	_	_	
32-11	6854-6860	output	_	_	
32-12	6861-6875	posteriorgrams	_	_	
32-13	6876-6879	are	_	_	
32-14	6880-6885	saved	_	_	
32-15	6886-6888	as	_	_	
32-16	6889-6894	numpy	_	_	
32-17	6895-6901	arrays	_	_	
32-18	6902-6903	(	_	_	
32-19	6903-6904	.	_	_	
32-20	6904-6907	npy	_	_	
32-21	6907-6908	)	_	_	
32-22	6908-6909	.	_	_	

#Text=Note that we have used 16kHz for the sample rate and 10ms of hop size.
#Text=
#Text=### Future Work
#Text=
#Text=* End-to-end recipe based SpeechBrain toolkit.
#Text=
#Text=### Citation
#Text=
#Text=If you use the MStreNet recipe, which is the state-of-the-art model for automatic lyrics transcription, please cite following paper:
#Text=```
#Text=  @article{demirel2021mstre,
#Text=  title={MSTRE-Net: Multistreaming Acoustic Modeling for Automatic Lyrics Transcription},
#Text=  author={Demirel, Emir and Ahlb{\\"a}ck, Sven and Dixon, Simon},
#Text=  booktitle={In proceedings of ISMIR2021},
#Text=  year={2021}
#Text=}
#Text=```
#Text=Link to paper : https://arxiv.org/pdf/2108.02625.pdf
#Text=
#Text=
#Text=If you use the recipe for the single-stream approach with RNNLM rescoring, please cite the paper below:
#Text=```
#Text=@inproceedings{demirel2020,
#Text=  title={Automatic lyrics transcription using dilated convolutional neural networks with self-attention},
#Text=  author={Demirel, Emir and Ahlb{\\"a}ck, Sven and Dixon, Simon},
#Text=  booktitle={International Joint Conference on Neural Networks},
#Text=  publisher={IEEE},
#Text=  year={2020}
#Text=}
#Text=```
#Text=
#Text=Link to paper : https://arxiv.org/abs/2007.06486
#Text=
#Text=
#Text=
#Text=### References
#Text=[1] Povey, Daniel, et al.
33-1	6911-6915	Note	_	_	
33-2	6916-6920	that	_	_	
33-3	6921-6923	we	_	_	
33-4	6924-6928	have	_	_	
33-5	6929-6933	used	_	_	
33-6	6934-6939	16kHz	_	_	
33-7	6940-6943	for	_	_	
33-8	6944-6947	the	_	_	
33-9	6948-6954	sample	_	_	
33-10	6955-6959	rate	_	_	
33-11	6960-6963	and	_	_	
33-12	6964-6968	10ms	_	_	
33-13	6969-6971	of	_	_	
33-14	6972-6975	hop	_	_	
33-15	6976-6980	size	_	_	
33-16	6980-6981	.	_	_	
33-17	6983-6984	#	_	_	
33-18	6984-6985	#	_	_	
33-19	6985-6986	#	_	_	
33-20	6987-6993	Future	_	_	
33-21	6994-6998	Work	_	_	
33-22	7000-7001	*	_	_	
33-23	7002-7012	End-to-end	_	_	
33-24	7013-7019	recipe	_	_	
33-25	7020-7025	based	_	_	
33-26	7026-7037	SpeechBrain	_	_	
33-27	7038-7045	toolkit	_	_	
33-28	7045-7046	.	_	_	
33-29	7048-7049	#	_	_	
33-30	7049-7050	#	_	_	
33-31	7050-7051	#	_	_	
33-32	7052-7060	Citation	_	_	
33-33	7062-7064	If	_	_	
33-34	7065-7068	you	_	_	
33-35	7069-7072	use	_	_	
33-36	7073-7076	the	_	_	
33-37	7077-7085	MStreNet	_	_	
33-38	7086-7092	recipe	_	_	
33-39	7092-7093	,	_	_	
33-40	7094-7099	which	_	_	
33-41	7100-7102	is	_	_	
33-42	7103-7106	the	_	_	
33-43	7107-7123	state-of-the-art	_	_	
33-44	7124-7129	model	_	_	
33-45	7130-7133	for	_	_	
33-46	7134-7143	automatic	_	_	
33-47	7144-7150	lyrics	_	_	
33-48	7151-7164	transcription	_	_	
33-49	7164-7165	,	_	_	
33-50	7166-7172	please	_	_	
33-51	7173-7177	cite	_	_	
33-52	7178-7187	following	_	_	
33-53	7188-7193	paper	_	_	
33-54	7193-7194	:	_	_	
33-55	7195-7196	`	_	_	
33-56	7196-7197	`	_	_	
33-57	7197-7198	`	_	_	
33-58	7201-7202	@	_	_	
33-59	7202-7209	article	_	_	
33-60	7209-7210	{	_	_	
33-61	7210-7226	demirel2021mstre	_	_	
33-62	7226-7227	,	_	_	
33-63	7230-7235	title	_	_	
33-64	7235-7236	=	_	_	
33-65	7236-7237	{	_	_	
33-66	7237-7246	MSTRE-Net	*[3]	PUBLICATION[3]	
33-67	7246-7247	:	*[3]	PUBLICATION[3]	
33-68	7248-7262	Multistreaming	*[3]	PUBLICATION[3]	
33-69	7263-7271	Acoustic	*[3]	PUBLICATION[3]	
33-70	7272-7280	Modeling	*[3]	PUBLICATION[3]	
33-71	7281-7284	for	*[3]	PUBLICATION[3]	
33-72	7285-7294	Automatic	*[3]	PUBLICATION[3]	
33-73	7295-7301	Lyrics	*[3]	PUBLICATION[3]	
33-74	7302-7315	Transcription	*[3]	PUBLICATION[3]	
33-75	7315-7316	}	_	_	
33-76	7316-7317	,	_	_	
33-77	7320-7326	author	_	_	
33-78	7326-7327	=	_	_	
33-79	7327-7328	{	_	_	
33-80	7328-7335	Demirel	_	_	
33-81	7335-7336	,	_	_	
33-82	7337-7341	Emir	_	_	
33-83	7342-7345	and	_	_	
33-84	7346-7350	Ahlb	_	_	
33-85	7350-7351	{	_	_	
33-86	7351-7352	\	_	_	
33-87	7352-7353	"	_	_	
33-88	7353-7354	a	_	_	
33-89	7354-7355	}	_	_	
33-90	7355-7357	ck	_	_	
33-91	7357-7358	,	_	_	
33-92	7359-7363	Sven	_	_	
33-93	7364-7367	and	_	_	
33-94	7368-7373	Dixon	_	_	
33-95	7373-7374	,	_	_	
33-96	7375-7380	Simon	_	_	
33-97	7380-7381	}	_	_	
33-98	7381-7382	,	_	_	
33-99	7385-7394	booktitle	_	_	
33-100	7394-7395	=	_	_	
33-101	7395-7396	{	_	_	
33-102	7396-7398	In	_	_	
33-103	7399-7410	proceedings	_	_	
33-104	7411-7413	of	_	_	
33-105	7414-7423	ISMIR2021	*	CONFERENCE	
33-106	7423-7424	}	_	_	
33-107	7424-7425	,	_	_	
33-108	7428-7432	year	_	_	
33-109	7432-7433	=	_	_	
33-110	7433-7434	{	_	_	
33-111	7434-7438	2021	_	_	
33-112	7438-7439	}	_	_	
33-113	7440-7441	}	_	_	
33-114	7442-7443	`	_	_	
33-115	7443-7444	`	_	_	
33-116	7444-7445	`	_	_	
33-117	7446-7450	Link	_	_	
33-118	7451-7453	to	_	_	
33-119	7454-7459	paper	_	_	
33-120	7460-7461	:	_	_	
33-121	7462-7467	https	_	_	
33-122	7467-7468	:	_	_	
33-123	7468-7469	/	_	_	
33-124	7469-7470	/	_	_	
33-125	7470-7479	arxiv.org	_	_	
33-126	7479-7480	/	_	_	
33-127	7480-7483	pdf	_	_	
33-128	7483-7484	/	_	_	
33-129	7484-7494	2108.02625	_	_	
33-130	7494-7495	.	_	_	
33-131	7495-7498	pdf	_	_	
33-132	7501-7503	If	_	_	
33-133	7504-7507	you	_	_	
33-134	7508-7511	use	_	_	
33-135	7512-7515	the	_	_	
33-136	7516-7522	recipe	_	_	
33-137	7523-7526	for	_	_	
33-138	7527-7530	the	_	_	
33-139	7531-7544	single-stream	_	_	
33-140	7545-7553	approach	_	_	
33-141	7554-7558	with	_	_	
33-142	7559-7564	RNNLM	_	_	
33-143	7565-7574	rescoring	_	_	
33-144	7574-7575	,	_	_	
33-145	7576-7582	please	_	_	
33-146	7583-7587	cite	_	_	
33-147	7588-7591	the	_	_	
33-148	7592-7597	paper	_	_	
33-149	7598-7603	below	_	_	
33-150	7603-7604	:	_	_	
33-151	7605-7606	`	_	_	
33-152	7606-7607	`	_	_	
33-153	7607-7608	`	_	_	
33-154	7609-7610	@	_	_	
33-155	7610-7623	inproceedings	_	_	
33-156	7623-7624	{	_	_	
33-157	7624-7635	demirel2020	_	_	
33-158	7635-7636	,	_	_	
33-159	7639-7644	title	_	_	
33-160	7644-7645	=	_	_	
33-161	7645-7646	{	_	_	
33-162	7646-7655	Automatic	*[4]	PUBLICATION[4]	
33-163	7656-7662	lyrics	*[4]	PUBLICATION[4]	
33-164	7663-7676	transcription	*[4]	PUBLICATION[4]	
33-165	7677-7682	using	*[4]	PUBLICATION[4]	
33-166	7683-7690	dilated	*[4]	PUBLICATION[4]	
33-167	7691-7704	convolutional	*[4]	PUBLICATION[4]	
33-168	7705-7711	neural	*[4]	PUBLICATION[4]	
33-169	7712-7720	networks	*[4]	PUBLICATION[4]	
33-170	7721-7725	with	*[4]	PUBLICATION[4]	
33-171	7726-7740	self-attention	*[4]	PUBLICATION[4]	
33-172	7740-7741	}	_	_	
33-173	7741-7742	,	_	_	
33-174	7745-7751	author	_	_	
33-175	7751-7752	=	_	_	
33-176	7752-7753	{	_	_	
33-177	7753-7760	Demirel	_	_	
33-178	7760-7761	,	_	_	
33-179	7762-7766	Emir	_	_	
33-180	7767-7770	and	_	_	
33-181	7771-7775	Ahlb	_	_	
33-182	7775-7776	{	_	_	
33-183	7776-7777	\	_	_	
33-184	7777-7778	"	_	_	
33-185	7778-7779	a	_	_	
33-186	7779-7780	}	_	_	
33-187	7780-7782	ck	_	_	
33-188	7782-7783	,	_	_	
33-189	7784-7788	Sven	_	_	
33-190	7789-7792	and	_	_	
33-191	7793-7798	Dixon	_	_	
33-192	7798-7799	,	_	_	
33-193	7800-7805	Simon	_	_	
33-194	7805-7806	}	_	_	
33-195	7806-7807	,	_	_	
33-196	7810-7819	booktitle	_	_	
33-197	7819-7820	=	_	_	
33-198	7820-7821	{	_	_	
33-199	7821-7834	International	*[5]	CONFERENCE[5]	
33-200	7835-7840	Joint	*[5]	CONFERENCE[5]	
33-201	7841-7851	Conference	*[5]	CONFERENCE[5]	
33-202	7852-7854	on	*[5]	CONFERENCE[5]	
33-203	7855-7861	Neural	*[5]	CONFERENCE[5]	
33-204	7862-7870	Networks	*[5]	CONFERENCE[5]	
33-205	7870-7871	}	_	_	
33-206	7871-7872	,	_	_	
33-207	7875-7884	publisher	_	_	
33-208	7884-7885	=	_	_	
33-209	7885-7886	{	_	_	
33-210	7886-7890	IEEE	_	_	
33-211	7890-7891	}	_	_	
33-212	7891-7892	,	_	_	
33-213	7895-7899	year	_	_	
33-214	7899-7900	=	_	_	
33-215	7900-7901	{	_	_	
33-216	7901-7905	2020	_	_	
33-217	7905-7906	}	_	_	
33-218	7907-7908	}	_	_	
33-219	7909-7910	`	_	_	
33-220	7910-7911	`	_	_	
33-221	7911-7912	`	_	_	
33-222	7914-7918	Link	_	_	
33-223	7919-7921	to	_	_	
33-224	7922-7927	paper	_	_	
33-225	7928-7929	:	_	_	
33-226	7930-7935	https	_	_	
33-227	7935-7936	:	_	_	
33-228	7936-7937	/	_	_	
33-229	7937-7938	/	_	_	
33-230	7938-7947	arxiv.org	_	_	
33-231	7947-7948	/	_	_	
33-232	7948-7951	abs	_	_	
33-233	7951-7952	/	_	_	
33-234	7952-7962	2007.06486	_	_	
33-235	7966-7967	#	_	_	
33-236	7967-7968	#	_	_	
33-237	7968-7969	#	_	_	
33-238	7970-7980	References	_	_	
33-239	7981-7982	[	_	_	
33-240	7982-7983	1	_	_	
33-241	7983-7984	]	_	_	
33-242	7985-7990	Povey	_	_	
33-243	7990-7991	,	_	_	
33-244	7992-7998	Daniel	_	_	
33-245	7998-7999	,	_	_	
33-246	8000-8002	et	_	_	
33-247	8003-8005	al	_	_	
33-248	8005-8006	.	_	_	

#Text="The Kaldi speech recognition toolkit."
34-1	8007-8008	"	_	_	
34-2	8008-8011	The	*[6]	PUBLICATION[6]	
34-3	8012-8017	Kaldi	*[6]|*[7]	PUBLICATION[6]|SOFTWARE[7]	
34-4	8018-8024	speech	*[6]	PUBLICATION[6]	
34-5	8025-8036	recognition	*[6]	PUBLICATION[6]	
34-6	8037-8044	toolkit	*[6]	PUBLICATION[6]	
34-7	8044-8045	.	_	_	
34-8	8045-8046	"	_	_	

#Text=IEEE 2011 workshop on automatic speech recognition and understanding.
35-1	8047-8051	IEEE	*[8]	WORKSHOP[8]	
35-2	8052-8056	2011	*[8]	WORKSHOP[8]	
35-3	8057-8065	workshop	*[8]	WORKSHOP[8]	
35-4	8066-8068	on	*[8]	WORKSHOP[8]	
35-5	8069-8078	automatic	*[8]	WORKSHOP[8]	
35-6	8079-8085	speech	*[8]	WORKSHOP[8]	
35-7	8086-8097	recognition	*[8]	WORKSHOP[8]	
35-8	8098-8101	and	*[8]	WORKSHOP[8]	
35-9	8102-8115	understanding	*[8]	WORKSHOP[8]	
35-10	8115-8116	.	_	_	

#Text=No.
36-1	8117-8119	No	_	_	
36-2	8119-8120	.	_	_	

#Text=CONF.
37-1	8121-8125	CONF	_	_	
37-2	8125-8126	.	_	_	

#Text=IEEE Signal Processing Society, 2011
38-1	8127-8131	IEEE	_	_	
38-2	8132-8138	Signal	_	_	
38-3	8139-8149	Processing	_	_	
38-4	8150-8157	Society	_	_	
38-5	8157-8158	,	_	_	
38-6	8159-8163	2011	_	_	

#Text=.
39-1	8163-8164	.	_	_	

#Text=[2] Povey, Daniel, et al.
40-1	8166-8167	[	_	_	
40-2	8167-8168	2	_	_	
40-3	8168-8169	]	_	_	
40-4	8170-8175	Povey	_	_	
40-5	8175-8176	,	_	_	
40-6	8177-8183	Daniel	_	_	
40-7	8183-8184	,	_	_	
40-8	8185-8187	et	_	_	
40-9	8188-8190	al	_	_	
40-10	8190-8191	.	_	_	

#Text="Purely sequence-trained neural networks for ASR based on lattice-free MMI."
41-1	8192-8193	"	_	_	
41-2	8193-8199	Purely	*[9]	PUBLICATION[9]	
41-3	8200-8216	sequence-trained	*[9]	PUBLICATION[9]	
41-4	8217-8223	neural	*[9]	PUBLICATION[9]	
41-5	8224-8232	networks	*[9]	PUBLICATION[9]	
41-6	8233-8236	for	*[9]	PUBLICATION[9]	
41-7	8237-8240	ASR	*[9]	PUBLICATION[9]	
41-8	8241-8246	based	*[9]	PUBLICATION[9]	
41-9	8247-8249	on	*[9]	PUBLICATION[9]	
41-10	8250-8262	lattice-free	*[9]	PUBLICATION[9]	
41-11	8263-8266	MMI	*[9]	PUBLICATION[9]	
41-12	8266-8267	.	_	_	
41-13	8267-8268	"	_	_	

#Text=Interspeech. 2016
42-1	8269-8280	Interspeech	_	_	
42-2	8280-8281	.	_	_	
42-3	8282-8286	2016	_	_	

#Text=.
43-1	8286-8287	.	_	_	

#Text=[3] Demirel, Emir and Ahlb{\\"a}ck, Sven and Dixon, Simon, "MSTRE-Net: Multistreaming Acoustic Modeling for Automatic Lyrics Transcription" In Proceedings of ISMIR 2021
44-1	8289-8290	[	_	_	
44-2	8290-8291	3	_	_	
44-3	8291-8292	]	_	_	
44-4	8293-8300	Demirel	_	_	
44-5	8300-8301	,	_	_	
44-6	8302-8306	Emir	_	_	
44-7	8307-8310	and	_	_	
44-8	8311-8315	Ahlb	_	_	
44-9	8315-8316	{	_	_	
44-10	8316-8317	\	_	_	
44-11	8317-8318	"	_	_	
44-12	8318-8319	a	_	_	
44-13	8319-8320	}	_	_	
44-14	8320-8322	ck	_	_	
44-15	8322-8323	,	_	_	
44-16	8324-8328	Sven	_	_	
44-17	8329-8332	and	_	_	
44-18	8333-8338	Dixon	_	_	
44-19	8338-8339	,	_	_	
44-20	8340-8345	Simon	_	_	
44-21	8345-8346	,	_	_	
44-22	8347-8348	"	_	_	
44-23	8348-8357	MSTRE-Net	*[10]	PUBLICATION[10]	
44-24	8357-8358	:	*[10]	PUBLICATION[10]	
44-25	8359-8373	Multistreaming	*[10]	PUBLICATION[10]	
44-26	8374-8382	Acoustic	*[10]	PUBLICATION[10]	
44-27	8383-8391	Modeling	*[10]	PUBLICATION[10]	
44-28	8392-8395	for	*[10]	PUBLICATION[10]	
44-29	8396-8405	Automatic	*[10]	PUBLICATION[10]	
44-30	8406-8412	Lyrics	*[10]	PUBLICATION[10]	
44-31	8413-8426	Transcription	*[10]	PUBLICATION[10]	
44-32	8426-8427	"	_	_	
44-33	8428-8430	In	_	_	
44-34	8431-8442	Proceedings	_	_	
44-35	8443-8445	of	_	_	
44-36	8446-8451	ISMIR	*[11]	CONFERENCE[11]	
44-37	8452-8456	2021	*[11]	CONFERENCE[11]	

#Text=.
45-1	8456-8457	.	_	_	

#Text=[4] Dabike, Gerardo Roa, and Jon Barker.
46-1	8459-8460	[	_	_	
46-2	8460-8461	4	_	_	
46-3	8461-8462	]	_	_	
46-4	8463-8469	Dabike	_	_	
46-5	8469-8470	,	_	_	
46-6	8471-8478	Gerardo	_	_	
46-7	8479-8482	Roa	_	_	
46-8	8482-8483	,	_	_	
46-9	8484-8487	and	_	_	
46-10	8488-8491	Jon	_	_	
46-11	8492-8498	Barker	_	_	
46-12	8498-8499	.	_	_	

#Text="Automatic Lyric Transcription from Karaoke Vocal Tracks: Resources and a Baseline System."
47-1	8500-8501	"	_	_	
47-2	8501-8510	Automatic	*[12]	PUBLICATION[12]	
47-3	8511-8516	Lyric	*[12]	PUBLICATION[12]	
47-4	8517-8530	Transcription	*[12]	PUBLICATION[12]	
47-5	8531-8535	from	*[12]	PUBLICATION[12]	
47-6	8536-8543	Karaoke	*[12]	PUBLICATION[12]	
47-7	8544-8549	Vocal	*[12]	PUBLICATION[12]	
47-8	8550-8556	Tracks	*[12]	PUBLICATION[12]	
47-9	8556-8557	:	*[12]	PUBLICATION[12]	
47-10	8558-8567	Resources	*[12]	PUBLICATION[12]	
47-11	8568-8571	and	*[12]	PUBLICATION[12]	
47-12	8572-8573	a	*[12]	PUBLICATION[12]	
47-13	8574-8582	Baseline	*[12]	PUBLICATION[12]	
47-14	8583-8589	System	*[12]	PUBLICATION[12]	
47-15	8589-8590	.	_	_	
47-16	8590-8591	"	_	_	

#Text=INTERSPEECH. 2019
48-1	8592-8603	INTERSPEECH	*[13]	CONFERENCE[13]	
48-2	8603-8604	.	*[13]	CONFERENCE[13]	
48-3	8605-8609	2019	*[13]	CONFERENCE[13]	

#Text=.
49-1	8609-8610	.	_	_	

#Text=[5] Demirel, Emir and Ahlb{\\"a}ck, Sven and Dixon, Simon, "Computational Pronunciation Analysis from Sung Utterances" In EUSIPCO 2021
50-1	8612-8613	[	_	_	
50-2	8613-8614	5	_	_	
50-3	8614-8615	]	_	_	
50-4	8616-8623	Demirel	_	_	
50-5	8623-8624	,	_	_	
50-6	8625-8629	Emir	_	_	
50-7	8630-8633	and	_	_	
50-8	8634-8638	Ahlb	_	_	
50-9	8638-8639	{	_	_	
50-10	8639-8640	\	_	_	
50-11	8640-8641	"	_	_	
50-12	8641-8642	a	_	_	
50-13	8642-8643	}	_	_	
50-14	8643-8645	ck	_	_	
50-15	8645-8646	,	_	_	
50-16	8647-8651	Sven	_	_	
50-17	8652-8655	and	_	_	
50-18	8656-8661	Dixon	_	_	
50-19	8661-8662	,	_	_	
50-20	8663-8668	Simon	_	_	
50-21	8668-8669	,	_	_	
50-22	8670-8671	"	_	_	
50-23	8671-8684	Computational	*[14]	PUBLICATION[14]	
50-24	8685-8698	Pronunciation	*[14]	PUBLICATION[14]	
50-25	8699-8707	Analysis	*[14]	PUBLICATION[14]	
50-26	8708-8712	from	*[14]	PUBLICATION[14]	
50-27	8713-8717	Sung	*[14]	PUBLICATION[14]	
50-28	8718-8728	Utterances	*[14]	PUBLICATION[14]	
50-29	8728-8729	"	_	_	
50-30	8730-8732	In	_	_	
50-31	8733-8740	EUSIPCO	*[15]	CONFERENCE[15]	
50-32	8741-8745	2021	*[15]	CONFERENCE[15]	

#Text=.
51-1	8745-8746	.	_	_	

#Text=[6] Digital Archive of Mobile Performances (DAMP) portal hosted by the Stanford Center for Computer Research in Music and Acoustics (CCRMA) (https://ccrma.stanford.edu/damp/)
#Text=
#Text=[7] Meseguer-Brocal, Gabriel, Alice Cohen-Hadria, and Geoffroy Peeters.
52-1	8748-8749	[	_	_	
52-2	8749-8750	6	_	_	
52-3	8750-8751	]	_	_	
52-4	8752-8759	Digital	_	_	
52-5	8760-8767	Archive	_	_	
52-6	8768-8770	of	_	_	
52-7	8771-8777	Mobile	_	_	
52-8	8778-8790	Performances	_	_	
52-9	8791-8792	(	_	_	
52-10	8792-8796	DAMP	_	_	
52-11	8796-8797	)	_	_	
52-12	8798-8804	portal	_	_	
52-13	8805-8811	hosted	_	_	
52-14	8812-8814	by	_	_	
52-15	8815-8818	the	_	_	
52-16	8819-8827	Stanford	_	_	
52-17	8828-8834	Center	_	_	
52-18	8835-8838	for	_	_	
52-19	8839-8847	Computer	_	_	
52-20	8848-8856	Research	_	_	
52-21	8857-8859	in	_	_	
52-22	8860-8865	Music	_	_	
52-23	8866-8869	and	_	_	
52-24	8870-8879	Acoustics	_	_	
52-25	8880-8881	(	_	_	
52-26	8881-8886	CCRMA	_	_	
52-27	8886-8887	)	_	_	
52-28	8888-8889	(	_	_	
52-29	8889-8894	https	_	_	
52-30	8894-8895	:	_	_	
52-31	8895-8896	/	_	_	
52-32	8896-8897	/	_	_	
52-33	8897-8915	ccrma.stanford.edu	_	_	
52-34	8915-8916	/	_	_	
52-35	8916-8920	damp	_	_	
52-36	8920-8921	/	_	_	
52-37	8921-8922	)	_	_	
52-38	8924-8925	[	_	_	
52-39	8925-8926	7	_	_	
52-40	8926-8927	]	_	_	
52-41	8928-8943	Meseguer-Brocal	_	_	
52-42	8943-8944	,	_	_	
52-43	8945-8952	Gabriel	_	_	
52-44	8952-8953	,	_	_	
52-45	8954-8959	Alice	_	_	
52-46	8960-8972	Cohen-Hadria	_	_	
52-47	8972-8973	,	_	_	
52-48	8974-8977	and	_	_	
52-49	8978-8986	Geoffroy	_	_	
52-50	8987-8994	Peeters	_	_	
52-51	8994-8995	.	_	_	

#Text="Dali: A large dataset of synchronized audio, lyrics and notes, automatically created using teacher-student machine learning paradigm."
53-1	8996-8997	"	_	_	
53-2	8997-9001	Dali	*[16]	PUBLICATION[16]	
53-3	9001-9002	:	*[16]	PUBLICATION[16]	
53-4	9003-9004	A	*[16]	PUBLICATION[16]	
53-5	9005-9010	large	*[16]	PUBLICATION[16]	
53-6	9011-9018	dataset	*[16]	PUBLICATION[16]	
53-7	9019-9021	of	*[16]	PUBLICATION[16]	
53-8	9022-9034	synchronized	*[16]	PUBLICATION[16]	
53-9	9035-9040	audio	*[16]	PUBLICATION[16]	
53-10	9040-9041	,	*[16]	PUBLICATION[16]	
53-11	9042-9048	lyrics	*[16]	PUBLICATION[16]	
53-12	9049-9052	and	*[16]	PUBLICATION[16]	
53-13	9053-9058	notes	*[16]	PUBLICATION[16]	
53-14	9058-9059	,	*[16]	PUBLICATION[16]	
53-15	9060-9073	automatically	*[16]	PUBLICATION[16]	
53-16	9074-9081	created	*[16]	PUBLICATION[16]	
53-17	9082-9087	using	*[16]	PUBLICATION[16]	
53-18	9088-9103	teacher-student	*[16]	PUBLICATION[16]	
53-19	9104-9111	machine	*[16]	PUBLICATION[16]	
53-20	9112-9120	learning	*[16]	PUBLICATION[16]	
53-21	9121-9129	paradigm	*[16]	PUBLICATION[16]	
53-22	9129-9130	.	_	_	
53-23	9130-9131	"	_	_	

#Text=In proceedings of ISMIR 2018
54-1	9132-9134	In	_	_	
54-2	9135-9146	proceedings	_	_	
54-3	9147-9149	of	_	_	
54-4	9150-9155	ISMIR	*[17]	CONFERENCE[17]	
54-5	9156-9160	2018	*[17]	CONFERENCE[17]	

#Text=.
55-1	9160-9161	.	_	_	

#Text=[8] Stoller, Daniel, Simon Durand, and Sebastian Ewert.
56-1	9163-9164	[	_	_	
56-2	9164-9165	8	_	_	
56-3	9165-9166	]	_	_	
56-4	9167-9174	Stoller	_	_	
56-5	9174-9175	,	_	_	
56-6	9176-9182	Daniel	_	_	
56-7	9182-9183	,	_	_	
56-8	9184-9189	Simon	_	_	
56-9	9190-9196	Durand	_	_	
56-10	9196-9197	,	_	_	
56-11	9198-9201	and	_	_	
56-12	9202-9211	Sebastian	_	_	
56-13	9212-9217	Ewert	_	_	
56-14	9217-9218	.	_	_	

#Text="End-to-end lyrics alignment for polyphonic music using an audio-to-character recognition model."
57-1	9219-9220	"	_	_	
57-2	9220-9230	End-to-end	*[18]	PUBLICATION[18]	
57-3	9231-9237	lyrics	*[18]	PUBLICATION[18]	
57-4	9238-9247	alignment	*[18]	PUBLICATION[18]	
57-5	9248-9251	for	*[18]	PUBLICATION[18]	
57-6	9252-9262	polyphonic	*[18]	PUBLICATION[18]	
57-7	9263-9268	music	*[18]	PUBLICATION[18]	
57-8	9269-9274	using	*[18]	PUBLICATION[18]	
57-9	9275-9277	an	*[18]	PUBLICATION[18]	
57-10	9278-9296	audio-to-character	*[18]	PUBLICATION[18]	
57-11	9297-9308	recognition	*[18]	PUBLICATION[18]	
57-12	9309-9314	model	*[18]	PUBLICATION[18]	
57-13	9314-9315	.	_	_	
57-14	9315-9316	"	_	_	

#Text=In IEEE - ICASSP 2019
58-1	9317-9319	In	_	_	
58-2	9320-9324	IEEE	*[19]	CONFERENCE[19]	
58-3	9325-9326	-	*[19]	CONFERENCE[19]	
58-4	9327-9333	ICASSP	*[19]	CONFERENCE[19]	
58-5	9334-9338	2019	*[19]	CONFERENCE[19]	

#Text=.
59-1	9338-9339	.	_	_	

#Text=[9] Demirel, Emir and Ahlb{\\"a}ck, Sven and Dixon, Simon, "Automatic lyrics transcription using dilated convolutional neural networks with self-attention"In IEEE - IJCNN 2020
#Text=
#Text=### Important Notice:
#Text=This work is licensed under Creative Commons - Attribution-NonCommercial-ShareAlike 4.0 International, which means that the reusers can copy, distribute, remix, transform and build upon the material in any media providing the appropriate credits to this repository and to be used for non-commercial purposes.
60-1	9341-9342	[	_	_	
60-2	9342-9343	9	_	_	
60-3	9343-9344	]	_	_	
60-4	9345-9352	Demirel	_	_	
60-5	9352-9353	,	_	_	
60-6	9354-9358	Emir	_	_	
60-7	9359-9362	and	_	_	
60-8	9363-9367	Ahlb	_	_	
60-9	9367-9368	{	_	_	
60-10	9368-9369	\	_	_	
60-11	9369-9370	"	_	_	
60-12	9370-9371	a	_	_	
60-13	9371-9372	}	_	_	
60-14	9372-9374	ck	_	_	
60-15	9374-9375	,	_	_	
60-16	9376-9380	Sven	_	_	
60-17	9381-9384	and	_	_	
60-18	9385-9390	Dixon	_	_	
60-19	9390-9391	,	_	_	
60-20	9392-9397	Simon	_	_	
60-21	9397-9398	,	_	_	
60-22	9399-9400	"	_	_	
60-23	9400-9409	Automatic	*[20]	PUBLICATION[20]	
60-24	9410-9416	lyrics	*[20]	PUBLICATION[20]	
60-25	9417-9430	transcription	*[20]	PUBLICATION[20]	
60-26	9431-9436	using	*[20]	PUBLICATION[20]	
60-27	9437-9444	dilated	*[20]	PUBLICATION[20]	
60-28	9445-9458	convolutional	*[20]	PUBLICATION[20]	
60-29	9459-9465	neural	*[20]	PUBLICATION[20]	
60-30	9466-9474	networks	*[20]	PUBLICATION[20]	
60-31	9475-9479	with	*[20]	PUBLICATION[20]	
60-32	9480-9497	self-attention"In	_	_	
60-32.1	9480-9494	self-attention	*[20]	PUBLICATION[20]	
60-33	9498-9502	IEEE	*[21]	CONFERENCE[21]	
60-34	9503-9504	-	*[21]	CONFERENCE[21]	
60-35	9505-9510	IJCNN	*[21]	CONFERENCE[21]	
60-36	9511-9515	2020	*[21]	CONFERENCE[21]	
60-37	9517-9518	#	_	_	
60-38	9518-9519	#	_	_	
60-39	9519-9520	#	_	_	
60-40	9521-9530	Important	_	_	
60-41	9531-9537	Notice	_	_	
60-42	9537-9538	:	_	_	
60-43	9539-9543	This	_	_	
60-44	9544-9548	work	_	_	
60-45	9549-9551	is	_	_	
60-46	9552-9560	licensed	_	_	
60-47	9561-9566	under	_	_	
60-48	9567-9575	Creative	*[22]	LICENSE[22]	
60-49	9576-9583	Commons	*[22]	LICENSE[22]	
60-50	9584-9585	-	*[22]	LICENSE[22]	
60-51	9586-9622	Attribution-NonCommercial-ShareAlike	*[22]	LICENSE[22]	
60-52	9623-9626	4.0	*[22]	LICENSE[22]	
60-53	9627-9640	International	*[22]	LICENSE[22]	
60-54	9640-9641	,	_	_	
60-55	9642-9647	which	_	_	
60-56	9648-9653	means	_	_	
60-57	9654-9658	that	_	_	
60-58	9659-9662	the	_	_	
60-59	9663-9670	reusers	_	_	
60-60	9671-9674	can	_	_	
60-61	9675-9679	copy	_	_	
60-62	9679-9680	,	_	_	
60-63	9681-9691	distribute	_	_	
60-64	9691-9692	,	_	_	
60-65	9693-9698	remix	_	_	
60-66	9698-9699	,	_	_	
60-67	9700-9709	transform	_	_	
60-68	9710-9713	and	_	_	
60-69	9714-9719	build	_	_	
60-70	9720-9724	upon	_	_	
60-71	9725-9728	the	_	_	
60-72	9729-9737	material	_	_	
60-73	9738-9740	in	_	_	
60-74	9741-9744	any	_	_	
60-75	9745-9750	media	_	_	
60-76	9751-9760	providing	_	_	
60-77	9761-9764	the	_	_	
60-78	9765-9776	appropriate	_	_	
60-79	9777-9784	credits	_	_	
60-80	9785-9787	to	_	_	
60-81	9788-9792	this	_	_	
60-82	9793-9803	repository	_	_	
60-83	9804-9807	and	_	_	
60-84	9808-9810	to	_	_	
60-85	9811-9813	be	_	_	
60-86	9814-9818	used	_	_	
60-87	9819-9822	for	_	_	
60-88	9823-9837	non-commercial	_	_	
60-89	9838-9846	purposes	_	_	
60-90	9846-9847	.	_	_	
