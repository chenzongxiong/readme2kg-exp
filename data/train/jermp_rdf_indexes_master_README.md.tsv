#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=Indexes for RDF data
#Text=--------------------
#Text=
#Text=This is the C++ library used for the experiments in the paper [*Compressed Indexes for Fast Search of Semantic Data*](http://pages.di.unipi.it/pibiri/papers/TKDE20.pdf) [1], by Raffaele Perego, Giulio Ermanno Pibiri and Rossano Venturini.
1-1	0-7	Indexes	_	_	
1-2	8-11	for	_	_	
1-3	12-15	RDF	_	_	
1-4	16-20	data	_	_	
1-5	21-22	-	_	_	
1-6	22-23	-	_	_	
1-7	23-24	-	_	_	
1-8	24-25	-	_	_	
1-9	25-26	-	_	_	
1-10	26-27	-	_	_	
1-11	27-28	-	_	_	
1-12	28-29	-	_	_	
1-13	29-30	-	_	_	
1-14	30-31	-	_	_	
1-15	31-32	-	_	_	
1-16	32-33	-	_	_	
1-17	33-34	-	_	_	
1-18	34-35	-	_	_	
1-19	35-36	-	_	_	
1-20	36-37	-	_	_	
1-21	37-38	-	_	_	
1-22	38-39	-	_	_	
1-23	39-40	-	_	_	
1-24	40-41	-	_	_	
1-25	43-47	This	_	_	
1-26	48-50	is	_	_	
1-27	51-54	the	_	_	
1-28	55-56	C	*[1]	PROGLANG[1]	
1-29	56-57	+	*[1]	PROGLANG[1]	
1-30	57-58	+	*[1]	PROGLANG[1]	
1-31	59-66	library	_	_	
1-32	67-71	used	_	_	
1-33	72-75	for	_	_	
1-34	76-79	the	_	_	
1-35	80-91	experiments	_	_	
1-36	92-94	in	_	_	
1-37	95-98	the	_	_	
1-38	99-104	paper	_	_	
1-39	105-106	[	_	_	
1-40	106-107	*	_	_	
1-41	107-117	Compressed	*[2]	PUBLICATION[2]	
1-42	118-125	Indexes	*[2]	PUBLICATION[2]	
1-43	126-129	for	*[2]	PUBLICATION[2]	
1-44	130-134	Fast	*[2]	PUBLICATION[2]	
1-45	135-141	Search	*[2]	PUBLICATION[2]	
1-46	142-144	of	*[2]	PUBLICATION[2]	
1-47	145-153	Semantic	*[2]	PUBLICATION[2]	
1-48	154-158	Data	*[2]	PUBLICATION[2]	
1-49	158-159	*	_	_	
1-50	159-160	]	_	_	
1-51	160-161	(	_	_	
1-52	161-165	http	_	_	
1-53	165-166	:	_	_	
1-54	166-167	/	_	_	
1-55	167-168	/	_	_	
1-56	168-185	pages.di.unipi.it	_	_	
1-57	185-186	/	_	_	
1-58	186-192	pibiri	_	_	
1-59	192-193	/	_	_	
1-60	193-199	papers	_	_	
1-61	199-200	/	_	_	
1-62	200-206	TKDE20	_	_	
1-63	206-207	.	_	_	
1-64	207-210	pdf	_	_	
1-65	210-211	)	_	_	
1-66	212-213	[	_	_	
1-67	213-214	1	_	_	
1-68	214-215	]	_	_	
1-69	215-216	,	_	_	
1-70	217-219	by	_	_	
1-71	220-228	Raffaele	_	_	
1-72	229-235	Perego	_	_	
1-73	235-236	,	_	_	
1-74	237-243	Giulio	_	_	
1-75	244-251	Ermanno	_	_	
1-76	252-258	Pibiri	_	_	
1-77	259-262	and	_	_	
1-78	263-270	Rossano	_	_	
1-79	271-280	Venturini	_	_	
1-80	280-281	.	_	_	

#Text=This guide is meant to provide a brief overview of the library and to illustrate its functionalities through some examples.
#Text=##### Table of contents
#Text=1.
2-1	283-287	This	_	_	
2-2	288-293	guide	_	_	
2-3	294-296	is	_	_	
2-4	297-302	meant	_	_	
2-5	303-305	to	_	_	
2-6	306-313	provide	_	_	
2-7	314-315	a	_	_	
2-8	316-321	brief	_	_	
2-9	322-330	overview	_	_	
2-10	331-333	of	_	_	
2-11	334-337	the	_	_	
2-12	338-345	library	_	_	
2-13	346-349	and	_	_	
2-14	350-352	to	_	_	
2-15	353-363	illustrate	_	_	
2-16	364-367	its	_	_	
2-17	368-383	functionalities	_	_	
2-18	384-391	through	_	_	
2-19	392-396	some	_	_	
2-20	397-405	examples	_	_	
2-21	405-406	.	_	_	
2-22	407-408	#	_	_	
2-23	408-409	#	_	_	
2-24	409-410	#	_	_	
2-25	410-411	#	_	_	
2-26	411-412	#	_	_	
2-27	413-418	Table	_	_	
2-28	419-421	of	_	_	
2-29	422-430	contents	_	_	
2-30	431-432	1	_	_	
2-31	432-433	.	_	_	

#Text=[Compiling the code](#compiling)
#Text=2.
3-1	434-435	[	_	_	
3-2	435-444	Compiling	_	_	
3-3	445-448	the	_	_	
3-4	449-453	code	_	_	
3-5	453-454	]	_	_	
3-6	454-455	(	_	_	
3-7	455-456	#	_	_	
3-8	456-465	compiling	_	_	
3-9	465-466	)	_	_	
3-10	467-468	2	_	_	
3-11	468-469	.	_	_	

#Text=[Input data format](#input)
#Text=3.
4-1	470-471	[	_	_	
4-2	471-476	Input	_	_	
4-3	477-481	data	_	_	
4-4	482-488	format	_	_	
4-5	488-489	]	_	_	
4-6	489-490	(	_	_	
4-7	490-491	#	_	_	
4-8	491-496	input	_	_	
4-9	496-497	)	_	_	
4-10	498-499	3	_	_	
4-11	499-500	.	_	_	

#Text=[Preparing the data for inedxing](#preparing)
#Text=4.
5-1	501-502	[	_	_	
5-2	502-511	Preparing	_	_	
5-3	512-515	the	_	_	
5-4	516-520	data	_	_	
5-5	521-524	for	_	_	
5-6	525-533	inedxing	_	_	
5-7	533-534	]	_	_	
5-8	534-535	(	_	_	
5-9	535-536	#	_	_	
5-10	536-545	preparing	_	_	
5-11	545-546	)	_	_	
5-12	547-548	4	_	_	
5-13	548-549	.	_	_	

#Text=[Building an index](#building)
#Text=5.
6-1	550-551	[	_	_	
6-2	551-559	Building	_	_	
6-3	560-562	an	_	_	
6-4	563-568	index	_	_	
6-5	568-569	]	_	_	
6-6	569-570	(	_	_	
6-7	570-571	#	_	_	
6-8	571-579	building	_	_	
6-9	579-580	)	_	_	
6-10	581-582	5	_	_	
6-11	582-583	.	_	_	

#Text=[Querying an index](#querying)
#Text=6.
7-1	584-585	[	_	_	
7-2	585-593	Querying	_	_	
7-3	594-596	an	_	_	
7-4	597-602	index	_	_	
7-5	602-603	]	_	_	
7-6	603-604	(	_	_	
7-7	604-605	#	_	_	
7-8	605-613	querying	_	_	
7-9	613-614	)	_	_	
7-10	615-616	6	_	_	
7-11	616-617	.	_	_	

#Text=[Statistics](#statistics)
#Text=7.
8-1	618-619	[	_	_	
8-2	619-629	Statistics	_	_	
8-3	629-630	]	_	_	
8-4	630-631	(	_	_	
8-5	631-632	#	_	_	
8-6	632-642	statistics	_	_	
8-7	642-643	)	_	_	
8-8	644-645	7	_	_	
8-9	645-646	.	_	_	

#Text=[Testing](#testing)
#Text=8.
9-1	647-648	[	_	_	
9-2	648-655	Testing	_	_	
9-3	655-656	]	_	_	
9-4	656-657	(	_	_	
9-5	657-658	#	_	_	
9-6	658-665	testing	_	_	
9-7	665-666	)	_	_	
9-8	667-668	8	_	_	
9-9	668-669	.	_	_	

#Text=[Extending the software](#extending)
#Text=9.
10-1	670-671	[	_	_	
10-2	671-680	Extending	_	_	
10-3	681-684	the	_	_	
10-4	685-693	software	_	_	
10-5	693-694	]	_	_	
10-6	694-695	(	_	_	
10-7	695-696	#	_	_	
10-8	696-705	extending	_	_	
10-9	705-706	)	_	_	
10-10	707-708	9	_	_	
10-11	708-709	.	_	_	

#Text=[Authors](#authors)
#Text=10.
11-1	710-711	[	_	_	
11-2	711-718	Authors	_	_	
11-3	718-719	]	_	_	
11-4	719-720	(	_	_	
11-5	720-721	#	_	_	
11-6	721-728	authors	_	_	
11-7	728-729	)	_	_	
11-8	730-732	10	_	_	
11-9	732-733	.	_	_	

#Text=[References](#references)
#Text=
#Text=Compiling the code <a name="compiling"></a>
#Text=--------------------
#Text=
#Text=The code is tested on Linux with `gcc` 7.3.0, 8.3.0, 9.2.0 and on Mac 10.14 with `clang` 10.0.0.
12-1	734-735	[	_	_	
12-2	735-745	References	_	_	
12-3	745-746	]	_	_	
12-4	746-747	(	_	_	
12-5	747-748	#	_	_	
12-6	748-758	references	_	_	
12-7	758-759	)	_	_	
12-8	761-770	Compiling	_	_	
12-9	771-774	the	_	_	
12-10	775-779	code	_	_	
12-11	780-781	<	_	_	
12-12	781-782	a	_	_	
12-13	783-787	name	_	_	
12-14	787-788	=	_	_	
12-15	788-789	"	_	_	
12-16	789-798	compiling	_	_	
12-17	798-799	"	_	_	
12-18	799-800	>	_	_	
12-19	800-801	<	_	_	
12-20	801-802	/	_	_	
12-21	802-803	a	_	_	
12-22	803-804	>	_	_	
12-23	805-806	-	_	_	
12-24	806-807	-	_	_	
12-25	807-808	-	_	_	
12-26	808-809	-	_	_	
12-27	809-810	-	_	_	
12-28	810-811	-	_	_	
12-29	811-812	-	_	_	
12-30	812-813	-	_	_	
12-31	813-814	-	_	_	
12-32	814-815	-	_	_	
12-33	815-816	-	_	_	
12-34	816-817	-	_	_	
12-35	817-818	-	_	_	
12-36	818-819	-	_	_	
12-37	819-820	-	_	_	
12-38	820-821	-	_	_	
12-39	821-822	-	_	_	
12-40	822-823	-	_	_	
12-41	823-824	-	_	_	
12-42	824-825	-	_	_	
12-43	827-830	The	_	_	
12-44	831-835	code	_	_	
12-45	836-838	is	_	_	
12-46	839-845	tested	_	_	
12-47	846-848	on	_	_	
12-48	849-854	Linux	_	_	
12-49	855-859	with	_	_	
12-50	860-861	`	_	_	
12-51	861-864	gcc	_	_	
12-52	864-865	`	_	_	
12-53	866-871	7.3.0	_	_	
12-54	871-872	,	_	_	
12-55	873-878	8.3.0	_	_	
12-56	878-879	,	_	_	
12-57	880-885	9.2.0	_	_	
12-58	886-889	and	_	_	
12-59	890-892	on	_	_	
12-60	893-896	Mac	_	_	
12-61	897-902	10.14	_	_	
12-62	903-907	with	_	_	
12-63	908-909	`	_	_	
12-64	909-914	clang	_	_	
12-65	914-915	`	_	_	
12-66	916-922	10.0.0	_	_	
12-67	922-923	.	_	_	

#Text=[`CMake`](https://cmake.org/) is required to build the code.
13-1	924-925	[	_	_	
13-2	925-926	`	_	_	
13-3	926-931	CMake	*	SOFTWARE	
13-4	931-932	`	_	_	
13-5	932-933	]	_	_	
13-6	933-934	(	_	_	
13-7	934-939	https	_	_	
13-8	939-940	:	_	_	
13-9	940-941	/	_	_	
13-10	941-942	/	_	_	
13-11	942-951	cmake.org	_	_	
13-11.1	942-947	cmake	*	SOFTWARE	
13-12	951-952	/	_	_	
13-13	952-953	)	_	_	
13-14	954-956	is	_	_	
13-15	957-965	required	_	_	
13-16	966-968	to	_	_	
13-17	969-974	build	_	_	
13-18	975-978	the	_	_	
13-19	979-983	code	_	_	
13-20	983-984	.	_	_	

#Text=The code has few external dependencies (for benchmarking and serialization), so clone the repository with
#Text=
#Text=\tgit clone --recursive https://github.com/jermp/rdf_indexes.git
#Text=
#Text=If you have cloned the repository without `--recursive`, you will need to perform the following commands before
#Text=compiling:
#Text=
#Text=    git submodule init
#Text=    git submodule update
#Text=
#Text=To compile the code for a release environment (see file `CMakeLists.txt` for the used compilation flags), it is sufficient to do the following:
#Text=
#Text=    mkdir build
#Text=    cd build
#Text=    cmake ..
14-1	986-989	The	_	_	
14-2	990-994	code	_	_	
14-3	995-998	has	_	_	
14-4	999-1002	few	_	_	
14-5	1003-1011	external	_	_	
14-6	1012-1024	dependencies	_	_	
14-7	1025-1026	(	_	_	
14-8	1026-1029	for	_	_	
14-9	1030-1042	benchmarking	_	_	
14-10	1043-1046	and	_	_	
14-11	1047-1060	serialization	_	_	
14-12	1060-1061	)	_	_	
14-13	1061-1062	,	_	_	
14-14	1063-1065	so	_	_	
14-15	1066-1071	clone	_	_	
14-16	1072-1075	the	_	_	
14-17	1076-1086	repository	_	_	
14-18	1087-1091	with	_	_	
14-19	1094-1097	git	*	SOFTWARE	
14-20	1098-1103	clone	_	_	
14-21	1104-1105	-	_	_	
14-22	1105-1106	-	_	_	
14-23	1106-1115	recursive	_	_	
14-24	1116-1121	https	_	_	
14-25	1121-1122	:	_	_	
14-26	1122-1123	/	_	_	
14-27	1123-1124	/	_	_	
14-28	1124-1134	github.com	_	_	
14-29	1134-1135	/	_	_	
14-30	1135-1140	jermp	_	_	
14-31	1140-1141	/	_	_	
14-32	1141-1156	rdf_indexes.git	_	_	
14-33	1158-1160	If	_	_	
14-34	1161-1164	you	_	_	
14-35	1165-1169	have	_	_	
14-36	1170-1176	cloned	_	_	
14-37	1177-1180	the	_	_	
14-38	1181-1191	repository	_	_	
14-39	1192-1199	without	_	_	
14-40	1200-1201	`	_	_	
14-41	1201-1202	-	_	_	
14-42	1202-1203	-	_	_	
14-43	1203-1212	recursive	_	_	
14-44	1212-1213	`	_	_	
14-45	1213-1214	,	_	_	
14-46	1215-1218	you	_	_	
14-47	1219-1223	will	_	_	
14-48	1224-1228	need	_	_	
14-49	1229-1231	to	_	_	
14-50	1232-1239	perform	_	_	
14-51	1240-1243	the	_	_	
14-52	1244-1253	following	_	_	
14-53	1254-1262	commands	_	_	
14-54	1263-1269	before	_	_	
14-55	1270-1279	compiling	_	_	
14-56	1279-1280	:	_	_	
14-57	1286-1289	git	_	_	
14-58	1290-1299	submodule	_	_	
14-59	1300-1304	init	_	_	
14-60	1309-1312	git	_	_	
14-61	1313-1322	submodule	_	_	
14-62	1323-1329	update	_	_	
14-63	1331-1333	To	_	_	
14-64	1334-1341	compile	_	_	
14-65	1342-1345	the	_	_	
14-66	1346-1350	code	_	_	
14-67	1351-1354	for	_	_	
14-68	1355-1356	a	_	_	
14-69	1357-1364	release	_	_	
14-70	1365-1376	environment	_	_	
14-71	1377-1378	(	_	_	
14-72	1378-1381	see	_	_	
14-73	1382-1386	file	_	_	
14-74	1387-1388	`	_	_	
14-75	1388-1402	CMakeLists.txt	_	_	
14-75.1	1388-1393	CMake	*	SOFTWARE	
14-76	1402-1403	`	_	_	
14-77	1404-1407	for	_	_	
14-78	1408-1411	the	_	_	
14-79	1412-1416	used	_	_	
14-80	1417-1428	compilation	_	_	
14-81	1429-1434	flags	_	_	
14-82	1434-1435	)	_	_	
14-83	1435-1436	,	_	_	
14-84	1437-1439	it	_	_	
14-85	1440-1442	is	_	_	
14-86	1443-1453	sufficient	_	_	
14-87	1454-1456	to	_	_	
14-88	1457-1459	do	_	_	
14-89	1460-1463	the	_	_	
14-90	1464-1473	following	_	_	
14-91	1473-1474	:	_	_	
14-92	1480-1485	mkdir	_	_	
14-93	1486-1491	build	_	_	
14-94	1496-1498	cd	_	_	
14-95	1499-1504	build	_	_	
14-96	1509-1514	cmake	*	SOFTWARE	
14-97	1515-1516	.	_	_	
14-98	1516-1517	.	_	_	

#Text=make -j
#Text=
#Text=For a testing environment, use the following instead:
#Text=
#Text=    mkdir debug_build
#Text=    cd debug_build
#Text=    cmake ..
15-1	1522-1526	make	_	_	
15-2	1527-1528	-	_	_	
15-3	1528-1529	j	_	_	
15-4	1531-1534	For	_	_	
15-5	1535-1536	a	_	_	
15-6	1537-1544	testing	_	_	
15-7	1545-1556	environment	_	_	
15-8	1556-1557	,	_	_	
15-9	1558-1561	use	_	_	
15-10	1562-1565	the	_	_	
15-11	1566-1575	following	_	_	
15-12	1576-1583	instead	_	_	
15-13	1583-1584	:	_	_	
15-14	1590-1595	mkdir	_	_	
15-15	1596-1607	debug_build	_	_	
15-16	1612-1614	cd	_	_	
15-17	1615-1626	debug_build	_	_	
15-18	1631-1636	cmake	*	SOFTWARE	
15-19	1637-1638	.	_	_	
15-20	1638-1639	.	_	_	

#Text=-DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZERS=On
#Text=    make -j
#Text=
#Text=Unless otherwise specified, for the rest of this guide we assume that we type the terminal commands of the following examples from the created directory `build`.
16-1	1640-1641	-	_	_	
16-2	1641-1658	DCMAKE_BUILD_TYPE	_	_	
16-3	1658-1659	=	_	_	
16-4	1659-1664	Debug	_	_	
16-5	1665-1666	-	_	_	
16-6	1666-1681	DUSE_SANITIZERS	_	_	
16-7	1681-1682	=	_	_	
16-8	1682-1684	On	_	_	
16-9	1689-1693	make	_	_	
16-10	1694-1695	-	_	_	
16-11	1695-1696	j	_	_	
16-12	1698-1704	Unless	_	_	
16-13	1705-1714	otherwise	_	_	
16-14	1715-1724	specified	_	_	
16-15	1724-1725	,	_	_	
16-16	1726-1729	for	_	_	
16-17	1730-1733	the	_	_	
16-18	1734-1738	rest	_	_	
16-19	1739-1741	of	_	_	
16-20	1742-1746	this	_	_	
16-21	1747-1752	guide	_	_	
16-22	1753-1755	we	_	_	
16-23	1756-1762	assume	_	_	
16-24	1763-1767	that	_	_	
16-25	1768-1770	we	_	_	
16-26	1771-1775	type	_	_	
16-27	1776-1779	the	_	_	
16-28	1780-1788	terminal	_	_	
16-29	1789-1797	commands	_	_	
16-30	1798-1800	of	_	_	
16-31	1801-1804	the	_	_	
16-32	1805-1814	following	_	_	
16-33	1815-1823	examples	_	_	
16-34	1824-1828	from	_	_	
16-35	1829-1832	the	_	_	
16-36	1833-1840	created	_	_	
16-37	1841-1850	directory	_	_	
16-38	1851-1852	`	_	_	
16-39	1852-1857	build	_	_	
16-40	1857-1858	`	_	_	
16-41	1858-1859	.	_	_	

#Text=Input data format <a name="input"></a>
#Text=-----------------
#Text=
#Text=The library works exclusively with integer triples,
#Text=thus the data has to be prepared accordingly prior to indexing
#Text=and querying.
17-1	1861-1866	Input	_	_	
17-2	1867-1871	data	_	_	
17-3	1872-1878	format	_	_	
17-4	1879-1880	<	_	_	
17-5	1880-1881	a	_	_	
17-6	1882-1886	name	_	_	
17-7	1886-1887	=	_	_	
17-8	1887-1888	"	_	_	
17-9	1888-1893	input	_	_	
17-10	1893-1894	"	_	_	
17-11	1894-1895	>	_	_	
17-12	1895-1896	<	_	_	
17-13	1896-1897	/	_	_	
17-14	1897-1898	a	_	_	
17-15	1898-1899	>	_	_	
17-16	1900-1901	-	_	_	
17-17	1901-1902	-	_	_	
17-18	1902-1903	-	_	_	
17-19	1903-1904	-	_	_	
17-20	1904-1905	-	_	_	
17-21	1905-1906	-	_	_	
17-22	1906-1907	-	_	_	
17-23	1907-1908	-	_	_	
17-24	1908-1909	-	_	_	
17-25	1909-1910	-	_	_	
17-26	1910-1911	-	_	_	
17-27	1911-1912	-	_	_	
17-28	1912-1913	-	_	_	
17-29	1913-1914	-	_	_	
17-30	1914-1915	-	_	_	
17-31	1915-1916	-	_	_	
17-32	1916-1917	-	_	_	
17-33	1919-1922	The	_	_	
17-34	1923-1930	library	_	_	
17-35	1931-1936	works	_	_	
17-36	1937-1948	exclusively	_	_	
17-37	1949-1953	with	_	_	
17-38	1954-1961	integer	_	_	
17-39	1962-1969	triples	_	_	
17-40	1969-1970	,	_	_	
17-41	1971-1975	thus	_	_	
17-42	1976-1979	the	_	_	
17-43	1980-1984	data	_	_	
17-44	1985-1988	has	_	_	
17-45	1989-1991	to	_	_	
17-46	1992-1994	be	_	_	
17-47	1995-2003	prepared	_	_	
17-48	2004-2015	accordingly	_	_	
17-49	2016-2021	prior	_	_	
17-50	2022-2024	to	_	_	
17-51	2025-2033	indexing	_	_	
17-52	2034-2037	and	_	_	
17-53	2038-2046	querying	_	_	
17-54	2046-2047	.	_	_	

#Text=We assume the RDF triples have been mapped to integer identifiers
#Text=and sorted in different permutations of
#Text=the subject (S), predicate (P) and object (O)
#Text=components.
18-1	2048-2050	We	_	_	
18-2	2051-2057	assume	_	_	
18-3	2058-2061	the	_	_	
18-4	2062-2065	RDF	_	_	
18-5	2066-2073	triples	_	_	
18-6	2074-2078	have	_	_	
18-7	2079-2083	been	_	_	
18-8	2084-2090	mapped	_	_	
18-9	2091-2093	to	_	_	
18-10	2094-2101	integer	_	_	
18-11	2102-2113	identifiers	_	_	
18-12	2114-2117	and	_	_	
18-13	2118-2124	sorted	_	_	
18-14	2125-2127	in	_	_	
18-15	2128-2137	different	_	_	
18-16	2138-2150	permutations	_	_	
18-17	2151-2153	of	_	_	
18-18	2154-2157	the	_	_	
18-19	2158-2165	subject	_	_	
18-20	2166-2167	(	_	_	
18-21	2167-2168	S	_	_	
18-22	2168-2169	)	_	_	
18-23	2169-2170	,	_	_	
18-24	2171-2180	predicate	_	_	
18-25	2181-2182	(	_	_	
18-26	2182-2183	P	_	_	
18-27	2183-2184	)	_	_	
18-28	2185-2188	and	_	_	
18-29	2189-2195	object	_	_	
18-30	2196-2197	(	_	_	
18-31	2197-2198	O	_	_	
18-32	2198-2199	)	_	_	
18-33	2200-2210	components	_	_	
18-34	2210-2211	.	_	_	

#Text=To build an index we need the following permutations:
#Text=SPO, POS and OSP.
19-1	2213-2215	To	_	_	
19-2	2216-2221	build	_	_	
19-3	2222-2224	an	_	_	
19-4	2225-2230	index	_	_	
19-5	2231-2233	we	_	_	
19-6	2234-2238	need	_	_	
19-7	2239-2242	the	_	_	
19-8	2243-2252	following	_	_	
19-9	2253-2265	permutations	_	_	
19-10	2265-2266	:	_	_	
19-11	2267-2270	SPO	_	_	
19-12	2270-2271	,	_	_	
19-13	2272-2275	POS	_	_	
19-14	2276-2279	and	_	_	
19-15	2280-2283	OSP	_	_	
19-16	2283-2284	.	_	_	

#Text=Also the permutation OPS may be
#Text=needed to build some types of indexes.
20-1	2285-2289	Also	_	_	
20-2	2290-2293	the	_	_	
20-3	2294-2305	permutation	_	_	
20-4	2306-2309	OPS	_	_	
20-5	2310-2313	may	_	_	
20-6	2314-2316	be	_	_	
20-7	2317-2323	needed	_	_	
20-8	2324-2326	to	_	_	
20-9	2327-2332	build	_	_	
20-10	2333-2337	some	_	_	
20-11	2338-2343	types	_	_	
20-12	2344-2346	of	_	_	
20-13	2347-2354	indexes	_	_	
20-14	2354-2355	.	_	_	

#Text=Each permutation is represented by a separate
#Text=file in plain format, having an integer triple
#Text=per line with integers separated by whitespaces.
21-1	2356-2360	Each	_	_	
21-2	2361-2372	permutation	_	_	
21-3	2373-2375	is	_	_	
21-4	2376-2387	represented	_	_	
21-5	2388-2390	by	_	_	
21-6	2391-2392	a	_	_	
21-7	2393-2401	separate	_	_	
21-8	2402-2406	file	_	_	
21-9	2407-2409	in	_	_	
21-10	2410-2415	plain	_	_	
21-11	2416-2422	format	_	_	
21-12	2422-2423	,	_	_	
21-13	2424-2430	having	_	_	
21-14	2431-2433	an	_	_	
21-15	2434-2441	integer	_	_	
21-16	2442-2448	triple	_	_	
21-17	2449-2452	per	_	_	
21-18	2453-2457	line	_	_	
21-19	2458-2462	with	_	_	
21-20	2463-2471	integers	_	_	
21-21	2472-2481	separated	_	_	
21-22	2482-2484	by	_	_	
21-23	2485-2496	whitespaces	_	_	
21-24	2496-2497	.	_	_	

#Text=As an example, if our dataset is named `RDF_dataset`,
#Text=we need the following files:
#Text=
#Text=-  `RDF_dataset.spo`
#Text=-  `RDF_dataset.pos`
#Text=-  `RDF_dataset.osp`
#Text=-  `RDF_dataset.ops`
#Text=
#Text=We also need a metadata file contaning some useful
#Text=statistics about the data.
22-1	2498-2500	As	_	_	
22-2	2501-2503	an	_	_	
22-3	2504-2511	example	_	_	
22-4	2511-2512	,	_	_	
22-5	2513-2515	if	_	_	
22-6	2516-2519	our	_	_	
22-7	2520-2527	dataset	_	_	
22-8	2528-2530	is	_	_	
22-9	2531-2536	named	_	_	
22-10	2537-2538	`	_	_	
22-11	2538-2549	RDF_dataset	_	_	
22-12	2549-2550	`	_	_	
22-13	2550-2551	,	_	_	
22-14	2552-2554	we	_	_	
22-15	2555-2559	need	_	_	
22-16	2560-2563	the	_	_	
22-17	2564-2573	following	_	_	
22-18	2574-2579	files	_	_	
22-19	2579-2580	:	_	_	
22-20	2582-2583	-	_	_	
22-21	2585-2586	`	_	_	
22-22	2586-2601	RDF_dataset.spo	_	_	
22-23	2601-2602	`	_	_	
22-24	2603-2604	-	_	_	
22-25	2606-2607	`	_	_	
22-26	2607-2622	RDF_dataset.pos	_	_	
22-27	2622-2623	`	_	_	
22-28	2624-2625	-	_	_	
22-29	2627-2628	`	_	_	
22-30	2628-2643	RDF_dataset.osp	_	_	
22-31	2643-2644	`	_	_	
22-32	2645-2646	-	_	_	
22-33	2648-2649	`	_	_	
22-34	2649-2664	RDF_dataset.ops	_	_	
22-35	2664-2665	`	_	_	
22-36	2667-2669	We	_	_	
22-37	2670-2674	also	_	_	
22-38	2675-2679	need	_	_	
22-39	2680-2681	a	_	_	
22-40	2682-2690	metadata	_	_	
22-41	2691-2695	file	_	_	
22-42	2696-2705	contaning	_	_	
22-43	2706-2710	some	_	_	
22-44	2711-2717	useful	_	_	
22-45	2718-2728	statistics	_	_	
22-46	2729-2734	about	_	_	
22-47	2735-2738	the	_	_	
22-48	2739-2743	data	_	_	
22-49	2743-2744	.	_	_	

#Text=This file must be
#Text=named `RDF_dataset.stats`.
23-1	2745-2749	This	_	_	
23-2	2750-2754	file	_	_	
23-3	2755-2759	must	_	_	
23-4	2760-2762	be	_	_	
23-5	2763-2768	named	_	_	
23-6	2769-2770	`	_	_	
23-7	2770-2787	RDF_dataset.stats	_	_	
23-8	2787-2788	`	_	_	
23-9	2788-2789	.	_	_	

#Text=Also this file is in
#Text=plain format and contains 7 integers, one per line:
#Text=
#Text=1. total number of triples
#Text=2. distinct subjects
#Text=3. distinct predicates
#Text=4. distinct objects
#Text=5. distinct S-P pairs
#Text=6. distinct P-O pairs
#Text=7. distinct O-S pairs
#Text=
#Text=The next section details how this data format
#Text=can be created automatically from a given
#Text=RDF dataset in standard N-Triples format.
24-1	2790-2794	Also	_	_	
24-2	2795-2799	this	_	_	
24-3	2800-2804	file	_	_	
24-4	2805-2807	is	_	_	
24-5	2808-2810	in	_	_	
24-6	2811-2816	plain	_	_	
24-7	2817-2823	format	_	_	
24-8	2824-2827	and	_	_	
24-9	2828-2836	contains	_	_	
24-10	2837-2838	7	_	_	
24-11	2839-2847	integers	_	_	
24-12	2847-2848	,	_	_	
24-13	2849-2852	one	_	_	
24-14	2853-2856	per	_	_	
24-15	2857-2861	line	_	_	
24-16	2861-2862	:	_	_	
24-17	2864-2865	1	_	_	
24-18	2865-2866	.	_	_	
24-19	2867-2872	total	_	_	
24-20	2873-2879	number	_	_	
24-21	2880-2882	of	_	_	
24-22	2883-2890	triples	_	_	
24-23	2891-2892	2	_	_	
24-24	2892-2893	.	_	_	
24-25	2894-2902	distinct	_	_	
24-26	2903-2911	subjects	_	_	
24-27	2912-2913	3	_	_	
24-28	2913-2914	.	_	_	
24-29	2915-2923	distinct	_	_	
24-30	2924-2934	predicates	_	_	
24-31	2935-2936	4	_	_	
24-32	2936-2937	.	_	_	
24-33	2938-2946	distinct	_	_	
24-34	2947-2954	objects	_	_	
24-35	2955-2956	5	_	_	
24-36	2956-2957	.	_	_	
24-37	2958-2966	distinct	_	_	
24-38	2967-2970	S-P	_	_	
24-39	2971-2976	pairs	_	_	
24-40	2977-2978	6	_	_	
24-41	2978-2979	.	_	_	
24-42	2980-2988	distinct	_	_	
24-43	2989-2992	P-O	_	_	
24-44	2993-2998	pairs	_	_	
24-45	2999-3000	7	_	_	
24-46	3000-3001	.	_	_	
24-47	3002-3010	distinct	_	_	
24-48	3011-3014	O-S	_	_	
24-49	3015-3020	pairs	_	_	
24-50	3022-3025	The	_	_	
24-51	3026-3030	next	_	_	
24-52	3031-3038	section	_	_	
24-53	3039-3046	details	_	_	
24-54	3047-3050	how	_	_	
24-55	3051-3055	this	_	_	
24-56	3056-3060	data	_	_	
24-57	3061-3067	format	_	_	
24-58	3068-3071	can	_	_	
24-59	3072-3074	be	_	_	
24-60	3075-3082	created	_	_	
24-61	3083-3096	automatically	_	_	
24-62	3097-3101	from	_	_	
24-63	3102-3103	a	_	_	
24-64	3104-3109	given	_	_	
24-65	3110-3113	RDF	_	_	
24-66	3114-3121	dataset	_	_	
24-67	3122-3124	in	_	_	
24-68	3125-3133	standard	_	_	
24-69	3134-3143	N-Triples	_	_	
24-70	3144-3150	format	_	_	
24-71	3150-3151	.	_	_	

#Text=(See also [https://www.w3.org/TR/n-triples](https://www.w3.org/TR/n-triples).)
25-1	3152-3153	(	_	_	
25-2	3153-3156	See	_	_	
25-3	3157-3161	also	_	_	
25-4	3162-3163	[	_	_	
25-5	3163-3168	https	_	_	
25-6	3168-3169	:	_	_	
25-7	3169-3170	/	_	_	
25-8	3170-3171	/	_	_	
25-9	3171-3177	www.w3	_	_	
25-10	3177-3178	.	_	_	
25-11	3178-3181	org	_	_	
25-12	3181-3182	/	_	_	
25-13	3182-3184	TR	_	_	
25-14	3184-3185	/	_	_	
25-15	3185-3194	n-triples	_	_	
25-16	3194-3195	]	_	_	
25-17	3195-3196	(	_	_	
25-18	3196-3201	https	_	_	
25-19	3201-3202	:	_	_	
25-20	3202-3203	/	_	_	
25-21	3203-3204	/	_	_	
25-22	3204-3210	www.w3	_	_	
25-23	3210-3211	.	_	_	
25-24	3211-3214	org	_	_	
25-25	3214-3215	/	_	_	
25-26	3215-3217	TR	_	_	
25-27	3217-3218	/	_	_	
25-28	3218-3227	n-triples	_	_	
25-29	3227-3228	)	_	_	
25-30	3228-3229	.	_	_	
25-31	3229-3230	)	_	_	

#Text=Preparing the data for indexing <a name="preparing"></a>
#Text=-------------------------------
#Text=
#Text=The folder `scripts` contains all the python3 scripts needed to prepare the datasets for indexing.
26-1	3232-3241	Preparing	_	_	
26-2	3242-3245	the	_	_	
26-3	3246-3250	data	_	_	
26-4	3251-3254	for	_	_	
26-5	3255-3263	indexing	_	_	
26-6	3264-3265	<	_	_	
26-7	3265-3266	a	_	_	
26-8	3267-3271	name	_	_	
26-9	3271-3272	=	_	_	
26-10	3272-3273	"	_	_	
26-11	3273-3282	preparing	_	_	
26-12	3282-3283	"	_	_	
26-13	3283-3284	>	_	_	
26-14	3284-3285	<	_	_	
26-15	3285-3286	/	_	_	
26-16	3286-3287	a	_	_	
26-17	3287-3288	>	_	_	
26-18	3289-3290	-	_	_	
26-19	3290-3291	-	_	_	
26-20	3291-3292	-	_	_	
26-21	3292-3293	-	_	_	
26-22	3293-3294	-	_	_	
26-23	3294-3295	-	_	_	
26-24	3295-3296	-	_	_	
26-25	3296-3297	-	_	_	
26-26	3297-3298	-	_	_	
26-27	3298-3299	-	_	_	
26-28	3299-3300	-	_	_	
26-29	3300-3301	-	_	_	
26-30	3301-3302	-	_	_	
26-31	3302-3303	-	_	_	
26-32	3303-3304	-	_	_	
26-33	3304-3305	-	_	_	
26-34	3305-3306	-	_	_	
26-35	3306-3307	-	_	_	
26-36	3307-3308	-	_	_	
26-37	3308-3309	-	_	_	
26-38	3309-3310	-	_	_	
26-39	3310-3311	-	_	_	
26-40	3311-3312	-	_	_	
26-41	3312-3313	-	_	_	
26-42	3313-3314	-	_	_	
26-43	3314-3315	-	_	_	
26-44	3315-3316	-	_	_	
26-45	3316-3317	-	_	_	
26-46	3317-3318	-	_	_	
26-47	3318-3319	-	_	_	
26-48	3319-3320	-	_	_	
26-49	3322-3325	The	_	_	
26-50	3326-3332	folder	_	_	
26-51	3333-3334	`	_	_	
26-52	3334-3341	scripts	_	_	
26-53	3341-3342	`	_	_	
26-54	3343-3351	contains	_	_	
26-55	3352-3355	all	_	_	
26-56	3356-3359	the	_	_	
26-57	3360-3367	python3	*	PROGLANG	
26-58	3368-3375	scripts	_	_	
26-59	3376-3382	needed	_	_	
26-60	3383-3385	to	_	_	
26-61	3386-3393	prepare	_	_	
26-62	3394-3397	the	_	_	
26-63	3398-3406	datasets	_	_	
26-64	3407-3410	for	_	_	
26-65	3411-3419	indexing	_	_	
26-66	3419-3420	.	_	_	

#Text=Assume we have an RDF dataset in standard N-Triples format,
#Text=additionally compressed via gzip.
27-1	3422-3428	Assume	_	_	
27-2	3429-3431	we	_	_	
27-3	3432-3436	have	_	_	
27-4	3437-3439	an	_	_	
27-5	3440-3443	RDF	_	_	
27-6	3444-3451	dataset	_	_	
27-7	3452-3454	in	_	_	
27-8	3455-3463	standard	_	_	
27-9	3464-3473	N-Triples	_	_	
27-10	3474-3480	format	_	_	
27-11	3480-3481	,	_	_	
27-12	3482-3494	additionally	_	_	
27-13	3495-3505	compressed	_	_	
27-14	3506-3509	via	_	_	
27-15	3510-3514	gzip	_	_	
27-16	3514-3515	.	_	_	

#Text=For the following example, assume to work with the dataset provided in the folder `test_data`: `wordnet31.gz`.
28-1	3516-3519	For	_	_	
28-2	3520-3523	the	_	_	
28-3	3524-3533	following	_	_	
28-4	3534-3541	example	_	_	
28-5	3541-3542	,	_	_	
28-6	3543-3549	assume	_	_	
28-7	3550-3552	to	_	_	
28-8	3553-3557	work	_	_	
28-9	3558-3562	with	_	_	
28-10	3563-3566	the	_	_	
28-11	3567-3574	dataset	_	_	
28-12	3575-3583	provided	_	_	
28-13	3584-3586	in	_	_	
28-14	3587-3590	the	_	_	
28-15	3591-3597	folder	_	_	
28-16	3598-3599	`	_	_	
28-17	3599-3608	test_data	_	_	
28-18	3608-3609	`	_	_	
28-19	3609-3610	:	_	_	
28-20	3611-3612	`	_	_	
28-21	3612-3621	wordnet31	*	DATASET	
28-22	3621-3622	.	_	_	
28-23	3622-3624	gz	_	_	
28-24	3624-3625	`	_	_	
28-25	3625-3626	.	_	_	

#Text=(This dataset has been downloaded from [http://www.rdfhdt.org/datasets](http://www.rdfhdt.org/datasets) and extracted using
#Text=the HDT [2] software at [http://www.rdfhdt.org/downloads](http://www.rdfhdt.org/downloads).
29-1	3627-3628	(	_	_	
29-2	3628-3632	This	_	_	
29-3	3633-3640	dataset	_	_	
29-4	3641-3644	has	_	_	
29-5	3645-3649	been	_	_	
29-6	3650-3660	downloaded	_	_	
29-7	3661-3665	from	_	_	
29-8	3666-3667	[	_	_	
29-9	3667-3671	http	_	_	
29-10	3671-3672	:	_	_	
29-11	3672-3673	/	_	_	
29-12	3673-3674	/	_	_	
29-13	3674-3688	www.rdfhdt.org	_	_	
29-14	3688-3689	/	_	_	
29-15	3689-3697	datasets	_	_	
29-16	3697-3698	]	_	_	
29-17	3698-3699	(	_	_	
29-18	3699-3703	http	_	_	
29-19	3703-3704	:	_	_	
29-20	3704-3705	/	_	_	
29-21	3705-3706	/	_	_	
29-22	3706-3720	www.rdfhdt.org	_	_	
29-23	3720-3721	/	_	_	
29-24	3721-3729	datasets	_	_	
29-25	3729-3730	)	_	_	
29-26	3731-3734	and	_	_	
29-27	3735-3744	extracted	_	_	
29-28	3745-3750	using	_	_	
29-29	3751-3754	the	_	_	
29-30	3755-3758	HDT	*	SOFTWARE	
29-31	3759-3760	[	_	_	
29-32	3760-3761	2	_	_	
29-33	3761-3762	]	_	_	
29-34	3763-3771	software	_	_	
29-35	3772-3774	at	_	_	
29-36	3775-3776	[	_	_	
29-37	3776-3780	http	_	_	
29-38	3780-3781	:	_	_	
29-39	3781-3782	/	_	_	
29-40	3782-3783	/	_	_	
29-41	3783-3797	www.rdfhdt.org	_	_	
29-42	3797-3798	/	_	_	
29-43	3798-3807	downloads	_	_	
29-44	3807-3808	]	_	_	
29-45	3808-3809	(	_	_	
29-46	3809-3813	http	_	_	
29-47	3813-3814	:	_	_	
29-48	3814-3815	/	_	_	
29-49	3815-3816	/	_	_	
29-50	3816-3830	www.rdfhdt.org	_	_	
29-51	3830-3831	/	_	_	
29-52	3831-3840	downloads	_	_	
29-53	3840-3841	)	_	_	
29-54	3841-3842	.	_	_	

#Text=You can also visit [http://wordnet-rdf.princeton.edu](http://wordnet-rdf.princeton.edu) for more information.)
30-1	3843-3846	You	_	_	
30-2	3847-3850	can	_	_	
30-3	3851-3855	also	_	_	
30-4	3856-3861	visit	_	_	
30-5	3862-3863	[	_	_	
30-6	3863-3867	http	_	_	
30-7	3867-3868	:	_	_	
30-8	3868-3869	/	_	_	
30-9	3869-3870	/	_	_	
30-10	3870-3895	wordnet-rdf.princeton.edu	_	_	
30-11	3895-3896	]	_	_	
30-12	3896-3897	(	_	_	
30-13	3897-3901	http	_	_	
30-14	3901-3902	:	_	_	
30-15	3902-3903	/	_	_	
30-16	3903-3904	/	_	_	
30-17	3904-3929	wordnet-rdf.princeton.edu	_	_	
30-18	3929-3930	)	_	_	
30-19	3931-3934	for	_	_	
30-20	3935-3939	more	_	_	
30-21	3940-3951	information	_	_	
30-22	3951-3952	.	_	_	
30-23	3952-3953	)	_	_	

#Text=To prepare the data, it is sufficient to follow the following steps
#Text=from within the `scripts` folder.
31-1	3956-3958	To	_	_	
31-2	3959-3966	prepare	_	_	
31-3	3967-3970	the	_	_	
31-4	3971-3975	data	_	_	
31-5	3975-3976	,	_	_	
31-6	3977-3979	it	_	_	
31-7	3980-3982	is	_	_	
31-8	3983-3993	sufficient	_	_	
31-9	3994-3996	to	_	_	
31-10	3997-4003	follow	_	_	
31-11	4004-4007	the	_	_	
31-12	4008-4017	following	_	_	
31-13	4018-4023	steps	_	_	
31-14	4024-4028	from	_	_	
31-15	4029-4035	within	_	_	
31-16	4036-4039	the	_	_	
31-17	4040-4041	`	_	_	
31-18	4041-4048	scripts	_	_	
31-19	4048-4049	`	_	_	
31-20	4050-4056	folder	_	_	
31-21	4056-4057	.	_	_	

#Text=**NOTE** - The scripts require the modules `mmh3` and `numpy` that can be easily
#Text=installed with `pip3 install mmh3 numpy`.
#Text=
#Text=1.
32-1	4059-4060	*	_	_	
32-2	4060-4061	*	_	_	
32-3	4061-4065	NOTE	_	_	
32-4	4065-4066	*	_	_	
32-5	4066-4067	*	_	_	
32-6	4068-4069	-	_	_	
32-7	4070-4073	The	_	_	
32-8	4074-4081	scripts	_	_	
32-9	4082-4089	require	_	_	
32-10	4090-4093	the	_	_	
32-11	4094-4101	modules	_	_	
32-12	4102-4103	`	_	_	
32-13	4103-4107	mmh3	*	SOFTWARE	
32-14	4107-4108	`	_	_	
32-15	4109-4112	and	_	_	
32-16	4113-4114	`	_	_	
32-17	4114-4119	numpy	*	SOFTWARE	
32-18	4119-4120	`	_	_	
32-19	4121-4125	that	_	_	
32-20	4126-4129	can	_	_	
32-21	4130-4132	be	_	_	
32-22	4133-4139	easily	_	_	
32-23	4140-4149	installed	_	_	
32-24	4150-4154	with	_	_	
32-25	4155-4156	`	_	_	
32-26	4156-4160	pip3	*	SOFTWARE	
32-27	4161-4168	install	_	_	
32-28	4169-4173	mmh3	*	SOFTWARE	
32-29	4174-4179	numpy	*	SOFTWARE	
32-30	4179-4180	`	_	_	
32-31	4180-4181	.	_	_	
32-32	4183-4184	1	_	_	
32-33	4184-4185	.	_	_	

#Text=Extract the vocabularies.
33-1	4186-4193	Extract	_	_	
33-2	4194-4197	the	_	_	
33-3	4198-4210	vocabularies	_	_	
33-4	4210-4211	.	_	_	

#Text=python3 extract_vocabs.py ..
34-1	4215-4222	python3	*	SOFTWARE	
34-2	4223-4240	extract_vocabs.py	_	_	
34-3	4241-4242	.	_	_	
34-4	4242-4243	.	_	_	

#Text=/test_data/wordnet31.gz -S -P -O
#Text=
#Text=\tThis script will produce the following files: `wordnet31.subjects_vocab`, `wordnet31.predicates_vocab` and `wordnet31.objects_vocab`.
#Text=
#Text=2.
35-1	4243-4244	/	_	_	
35-2	4244-4253	test_data	_	_	
35-3	4253-4254	/	_	_	
35-4	4254-4263	wordnet31	*	DATASET	
35-5	4263-4264	.	_	_	
35-6	4264-4266	gz	_	_	
35-7	4267-4268	-	_	_	
35-8	4268-4269	S	_	_	
35-9	4270-4271	-	_	_	
35-10	4271-4272	P	_	_	
35-11	4273-4274	-	_	_	
35-12	4274-4275	O	_	_	
35-13	4278-4282	This	_	_	
35-14	4283-4289	script	_	_	
35-15	4290-4294	will	_	_	
35-16	4295-4302	produce	_	_	
35-17	4303-4306	the	_	_	
35-18	4307-4316	following	_	_	
35-19	4317-4322	files	_	_	
35-20	4322-4323	:	_	_	
35-21	4324-4325	`	_	_	
35-22	4325-4334	wordnet31	*	DATASET	
35-23	4334-4335	.	_	_	
35-24	4335-4349	subjects_vocab	_	_	
35-25	4349-4350	`	_	_	
35-26	4350-4351	,	_	_	
35-27	4352-4353	`	_	_	
35-28	4353-4362	wordnet31	*	DATASET	
35-29	4362-4363	.	_	_	
35-30	4363-4379	predicates_vocab	_	_	
35-31	4379-4380	`	_	_	
35-32	4381-4384	and	_	_	
35-33	4385-4386	`	_	_	
35-34	4386-4395	wordnet31	*	DATASET	
35-35	4395-4396	.	_	_	
35-36	4396-4409	objects_vocab	_	_	
35-37	4409-4410	`	_	_	
35-38	4410-4411	.	_	_	
35-39	4413-4414	2	_	_	
35-40	4414-4415	.	_	_	

#Text=Map the URIs to integer triples.
36-1	4416-4419	Map	_	_	
36-2	4420-4423	the	_	_	
36-3	4424-4428	URIs	_	_	
36-4	4429-4431	to	_	_	
36-5	4432-4439	integer	_	_	
36-6	4440-4447	triples	_	_	
36-7	4447-4448	.	_	_	

#Text=python3 map_dataset.py ..
37-1	4452-4459	python3	*	SOFTWARE	
37-2	4460-4474	map_dataset.py	_	_	
37-3	4475-4476	.	_	_	
37-4	4476-4477	.	_	_	

#Text=/test_data/wordnet31.gz
#Text=
#Text=\tThis script will map the dataset to integer triples,
#Text=\tproducing the file `wordnet31.mapped.unsorted`.
#Text=
#Text=3.
38-1	4477-4478	/	_	_	
38-2	4478-4487	test_data	_	_	
38-3	4487-4488	/	_	_	
38-4	4488-4497	wordnet31	*	DATASET	
38-5	4497-4498	.	_	_	
38-6	4498-4500	gz	_	_	
38-7	4503-4507	This	_	_	
38-8	4508-4514	script	_	_	
38-9	4515-4519	will	_	_	
38-10	4520-4523	map	_	_	
38-11	4524-4527	the	_	_	
38-12	4528-4535	dataset	_	_	
38-13	4536-4538	to	_	_	
38-14	4539-4546	integer	_	_	
38-15	4547-4554	triples	_	_	
38-16	4554-4555	,	_	_	
38-17	4557-4566	producing	_	_	
38-18	4567-4570	the	_	_	
38-19	4571-4575	file	_	_	
38-20	4576-4577	`	_	_	
38-21	4577-4586	wordnet31	*	DATASET	
38-22	4586-4587	.	_	_	
38-23	4587-4602	mapped.unsorted	_	_	
38-24	4602-4603	`	_	_	
38-25	4603-4604	.	_	_	
38-26	4606-4607	3	_	_	
38-27	4607-4608	.	_	_	

#Text=Sort the file `wordnet31.mapped.unsorted` materializing the needed permutations.
39-1	4609-4613	Sort	_	_	
39-2	4614-4617	the	_	_	
39-3	4618-4622	file	_	_	
39-4	4623-4624	`	_	_	
39-5	4624-4633	wordnet31	*	DATASET	
39-6	4633-4634	.	_	_	
39-7	4634-4649	mapped.unsorted	_	_	
39-8	4649-4650	`	_	_	
39-9	4651-4664	materializing	_	_	
39-10	4665-4668	the	_	_	
39-11	4669-4675	needed	_	_	
39-12	4676-4688	permutations	_	_	
39-13	4688-4689	.	_	_	

#Text=python3 sort.py ..
40-1	4693-4700	python3	*	SOFTWARE	
40-2	4701-4708	sort.py	_	_	
40-3	4709-4710	.	_	_	
40-4	4710-4711	.	_	_	

#Text=/test_data/wordnet31.mapped.unsorted wordnet31
#Text=
#Text=\tThis script will produce the four permutations, one per file:
#Text=\t`wordnet31.mapped.sorted.spo`, `wordnet31.mapped.sorted.pos`, `wordnet31.mapped.sorted.osp` and `wordnet31.mapped.sorted.ops`.
#Text=
#Text=4.
41-1	4711-4712	/	_	_	
41-2	4712-4721	test_data	_	_	
41-3	4721-4722	/	_	_	
41-4	4722-4731	wordnet31	*	DATASET	
41-5	4731-4732	.	_	_	
41-6	4732-4747	mapped.unsorted	_	_	
41-7	4748-4757	wordnet31	*	DATASET	
41-8	4760-4764	This	_	_	
41-9	4765-4771	script	_	_	
41-10	4772-4776	will	_	_	
41-11	4777-4784	produce	_	_	
41-12	4785-4788	the	_	_	
41-13	4789-4793	four	_	_	
41-14	4794-4806	permutations	_	_	
41-15	4806-4807	,	_	_	
41-16	4808-4811	one	_	_	
41-17	4812-4815	per	_	_	
41-18	4816-4820	file	_	_	
41-19	4820-4821	:	_	_	
41-20	4823-4824	`	_	_	
41-21	4824-4833	wordnet31	*	DATASET	
41-22	4833-4834	.	_	_	
41-23	4834-4851	mapped.sorted.spo	_	_	
41-24	4851-4852	`	_	_	
41-25	4852-4853	,	_	_	
41-26	4854-4855	`	_	_	
41-27	4855-4864	wordnet31	*	DATASET	
41-28	4864-4865	.	_	_	
41-29	4865-4882	mapped.sorted.pos	_	_	
41-30	4882-4883	`	_	_	
41-31	4883-4884	,	_	_	
41-32	4885-4886	`	_	_	
41-33	4886-4895	wordnet31	*	DATASET	
41-34	4895-4896	.	_	_	
41-35	4896-4913	mapped.sorted.osp	_	_	
41-36	4913-4914	`	_	_	
41-37	4915-4918	and	_	_	
41-38	4919-4920	`	_	_	
41-39	4920-4929	wordnet31	*	DATASET	
41-40	4929-4930	.	_	_	
41-41	4930-4947	mapped.sorted.ops	_	_	
41-42	4947-4948	`	_	_	
41-43	4948-4949	.	_	_	
41-44	4951-4952	4	_	_	
41-45	4952-4953	.	_	_	

#Text=Build the file with the statistics.
42-1	4954-4959	Build	_	_	
42-2	4960-4963	the	_	_	
42-3	4964-4968	file	_	_	
42-4	4969-4973	with	_	_	
42-5	4974-4977	the	_	_	
42-6	4978-4988	statistics	_	_	
42-7	4988-4989	.	_	_	

#Text=python3 build_stats.py wordnet31.mapped.sorted
#Text=
#Text=\tThis script will create the file `wordnet31.mapped.sorted.stats`.
43-1	4993-5000	python3	*	SOFTWARE	
43-2	5001-5015	build_stats.py	_	_	
43-3	5016-5025	wordnet31	*	DATASET	
43-4	5025-5026	.	_	_	
43-5	5026-5039	mapped.sorted	_	_	
43-6	5042-5046	This	_	_	
43-7	5047-5053	script	_	_	
43-8	5054-5058	will	_	_	
43-9	5059-5065	create	_	_	
43-10	5066-5069	the	_	_	
43-11	5070-5074	file	_	_	
43-12	5075-5076	`	_	_	
43-13	5076-5085	wordnet31	*	DATASET	
43-14	5085-5086	.	_	_	
43-15	5086-5105	mapped.sorted.stats	_	_	
43-16	5105-5106	`	_	_	
43-17	5106-5107	.	_	_	

#Text=Finally, the bash script `scripts/process.sh` summarizes all the
#Text=steps described, therefore you can just run
#Text=
#Text=\tbash process.sh ..
44-1	5109-5116	Finally	_	_	
44-2	5116-5117	,	_	_	
44-3	5118-5121	the	_	_	
44-4	5122-5126	bash	_	_	
44-5	5127-5133	script	_	_	
44-6	5134-5135	`	_	_	
44-7	5135-5142	scripts	_	_	
44-8	5142-5143	/	_	_	
44-9	5143-5153	process.sh	_	_	
44-10	5153-5154	`	_	_	
44-11	5155-5165	summarizes	_	_	
44-12	5166-5169	all	_	_	
44-13	5170-5173	the	_	_	
44-14	5174-5179	steps	_	_	
44-15	5180-5189	described	_	_	
44-16	5189-5190	,	_	_	
44-17	5191-5200	therefore	_	_	
44-18	5201-5204	you	_	_	
44-19	5205-5208	can	_	_	
44-20	5209-5213	just	_	_	
44-21	5214-5217	run	_	_	
44-22	5220-5224	bash	_	_	
44-23	5225-5235	process.sh	_	_	
44-24	5236-5237	.	_	_	
44-25	5237-5238	.	_	_	

#Text=/test_data/wordnet31.gz
#Text=
#Text=to prepare the `wordnet31` collection for indexing.
45-1	5238-5239	/	_	_	
45-2	5239-5248	test_data	_	_	
45-3	5248-5249	/	_	_	
45-4	5249-5258	wordnet31	*	DATASET	
45-5	5258-5259	.	_	_	
45-6	5259-5261	gz	_	_	
45-7	5263-5265	to	_	_	
45-8	5266-5273	prepare	_	_	
45-9	5274-5277	the	_	_	
45-10	5278-5279	`	_	_	
45-11	5279-5288	wordnet31	*	DATASET	
45-12	5288-5289	`	_	_	
45-13	5290-5300	collection	_	_	
45-14	5301-5304	for	_	_	
45-15	5305-5313	indexing	_	_	
45-16	5313-5314	.	_	_	

#Text=Building an index <a name="building"></a>
#Text=------------------
#Text=
#Text=With all the data prepared for indexing as explained in
#Text=[Section 3](#preparing),
#Text=building an index is as easy as:
#Text=
#Text=\t.
46-1	5316-5324	Building	_	_	
46-2	5325-5327	an	_	_	
46-3	5328-5333	index	_	_	
46-4	5334-5335	<	_	_	
46-5	5335-5336	a	_	_	
46-6	5337-5341	name	_	_	
46-7	5341-5342	=	_	_	
46-8	5342-5343	"	_	_	
46-9	5343-5351	building	_	_	
46-10	5351-5352	"	_	_	
46-11	5352-5353	>	_	_	
46-12	5353-5354	<	_	_	
46-13	5354-5355	/	_	_	
46-14	5355-5356	a	_	_	
46-15	5356-5357	>	_	_	
46-16	5358-5359	-	_	_	
46-17	5359-5360	-	_	_	
46-18	5360-5361	-	_	_	
46-19	5361-5362	-	_	_	
46-20	5362-5363	-	_	_	
46-21	5363-5364	-	_	_	
46-22	5364-5365	-	_	_	
46-23	5365-5366	-	_	_	
46-24	5366-5367	-	_	_	
46-25	5367-5368	-	_	_	
46-26	5368-5369	-	_	_	
46-27	5369-5370	-	_	_	
46-28	5370-5371	-	_	_	
46-29	5371-5372	-	_	_	
46-30	5372-5373	-	_	_	
46-31	5373-5374	-	_	_	
46-32	5374-5375	-	_	_	
46-33	5375-5376	-	_	_	
46-34	5378-5382	With	_	_	
46-35	5383-5386	all	_	_	
46-36	5387-5390	the	_	_	
46-37	5391-5395	data	_	_	
46-38	5396-5404	prepared	_	_	
46-39	5405-5408	for	_	_	
46-40	5409-5417	indexing	_	_	
46-41	5418-5420	as	_	_	
46-42	5421-5430	explained	_	_	
46-43	5431-5433	in	_	_	
46-44	5434-5435	[	_	_	
46-45	5435-5442	Section	_	_	
46-46	5443-5444	3	_	_	
46-47	5444-5445	]	_	_	
46-48	5445-5446	(	_	_	
46-49	5446-5447	#	_	_	
46-50	5447-5456	preparing	_	_	
46-51	5456-5457	)	_	_	
46-52	5457-5458	,	_	_	
46-53	5459-5467	building	_	_	
46-54	5468-5470	an	_	_	
46-55	5471-5476	index	_	_	
46-56	5477-5479	is	_	_	
46-57	5480-5482	as	_	_	
46-58	5483-5487	easy	_	_	
46-59	5488-5490	as	_	_	
46-60	5490-5491	:	_	_	
46-61	5494-5495	.	_	_	

#Text=/build <type> <collection_basename> [-o output_filename]
#Text=
#Text=For example, the command:
#Text=
#Text=\t.
47-1	5495-5496	/	_	_	
47-2	5496-5501	build	_	_	
47-3	5502-5503	<	_	_	
47-4	5503-5507	type	_	_	
47-5	5507-5508	>	_	_	
47-6	5509-5510	<	_	_	
47-7	5510-5529	collection_basename	_	_	
47-8	5529-5530	>	_	_	
47-9	5531-5532	[	_	_	
47-10	5532-5533	-	_	_	
47-11	5533-5534	o	_	_	
47-12	5535-5550	output_filename	_	_	
47-13	5550-5551	]	_	_	
47-14	5553-5556	For	_	_	
47-15	5557-5564	example	_	_	
47-16	5564-5565	,	_	_	
47-17	5566-5569	the	_	_	
47-18	5570-5577	command	_	_	
47-19	5577-5578	:	_	_	
47-20	5581-5582	.	_	_	

#Text=/build pef_3t ..
48-1	5582-5583	/	_	_	
48-2	5583-5588	build	_	_	
48-3	5589-5592	pef	_	_	
48-4	5592-5593	_	_	_	
48-5	5593-5595	3t	_	_	
48-6	5596-5597	.	_	_	
48-7	5597-5598	.	_	_	

#Text=/test_data/wordnet31.mapped.sorted -o wordnet31.pef_3t.bin
#Text=
#Text=will build a 3T index (see Section 3.1 of [1]), compressed
#Text=with partitioned Elias-Fano (PEF), that is serialized to
#Text=the binary file `wordnet31.pef_3t.bin`.
49-1	5598-5599	/	_	_	
49-2	5599-5608	test_data	_	_	
49-3	5608-5609	/	_	_	
49-4	5609-5618	wordnet31	*	DATASET	
49-5	5618-5619	.	_	_	
49-6	5619-5632	mapped.sorted	_	_	
49-7	5633-5634	-	_	_	
49-8	5634-5635	o	_	_	
49-9	5636-5645	wordnet31	*	DATASET	
49-10	5645-5646	.	_	_	
49-11	5646-5649	pef	_	_	
49-12	5649-5650	_	_	_	
49-13	5650-5656	3t.bin	_	_	
49-14	5658-5662	will	_	_	
49-15	5663-5668	build	_	_	
49-16	5669-5670	a	_	_	
49-17	5671-5673	3T	_	_	
49-18	5674-5679	index	_	_	
49-19	5680-5681	(	_	_	
49-20	5681-5684	see	_	_	
49-21	5685-5692	Section	_	_	
49-22	5693-5696	3.1	_	_	
49-23	5697-5699	of	_	_	
49-24	5700-5701	[	_	_	
49-25	5701-5702	1	_	_	
49-26	5702-5703	]	_	_	
49-27	5703-5704	)	_	_	
49-28	5704-5705	,	_	_	
49-29	5706-5716	compressed	_	_	
49-30	5717-5721	with	_	_	
49-31	5722-5733	partitioned	_	_	
49-32	5734-5744	Elias-Fano	_	_	
49-33	5745-5746	(	_	_	
49-34	5746-5749	PEF	_	_	
49-35	5749-5750	)	_	_	
49-36	5750-5751	,	_	_	
49-37	5752-5756	that	_	_	
49-38	5757-5759	is	_	_	
49-39	5760-5770	serialized	_	_	
49-40	5771-5773	to	_	_	
49-41	5774-5777	the	_	_	
49-42	5778-5784	binary	_	_	
49-43	5785-5789	file	_	_	
49-44	5790-5791	`	_	_	
49-45	5791-5800	wordnet31	*	DATASET	
49-46	5800-5801	.	_	_	
49-47	5801-5804	pef	_	_	
49-48	5804-5805	_	_	_	
49-49	5805-5811	3t.bin	_	_	
49-50	5811-5812	`	_	_	
49-51	5812-5813	.	_	_	

#Text=See also the file `include/types.hpp` for all other index types.
50-1	5815-5818	See	_	_	
50-2	5819-5823	also	_	_	
50-3	5824-5827	the	_	_	
50-4	5828-5832	file	_	_	
50-5	5833-5834	`	_	_	
50-6	5834-5841	include	_	_	
50-7	5841-5842	/	_	_	
50-8	5842-5851	types.hpp	_	_	
50-9	5851-5852	`	_	_	
50-10	5853-5856	for	_	_	
50-11	5857-5860	all	_	_	
50-12	5861-5866	other	_	_	
50-13	5867-5872	index	_	_	
50-14	5873-5878	types	_	_	
50-15	5878-5879	.	_	_	

#Text=At the moment we support the following types.
51-1	5880-5882	At	_	_	
51-2	5883-5886	the	_	_	
51-3	5887-5893	moment	_	_	
51-4	5894-5896	we	_	_	
51-5	5897-5904	support	_	_	
51-6	5905-5908	the	_	_	
51-7	5909-5918	following	_	_	
51-8	5919-5924	types	_	_	
51-9	5924-5925	.	_	_	

#Text=`compact_3t`
#Text=                `ef_3t`
#Text=                `vb_3t`
#Text=                `pef_3t`
#Text=                `pef_r_3t`
#Text=                `pef_2to`
#Text=                `pef_2tp`
#Text=
#Text=Querying an index <a name="querying"></a>
#Text=------------------
#Text=A triple selection pattern is just an ordinary integer triple
#Text=with *k* wildcard symbols, for 0 ≤ *k* ≤ 3.
52-1	5932-5933	`	_	_	
52-2	5933-5940	compact	_	_	
52-3	5940-5941	_	_	_	
52-4	5941-5943	3t	_	_	
52-5	5943-5944	`	_	_	
52-6	5961-5962	`	_	_	
52-7	5962-5964	ef	_	_	
52-8	5964-5965	_	_	_	
52-9	5965-5967	3t	_	_	
52-10	5967-5968	`	_	_	
52-11	5985-5986	`	_	_	
52-12	5986-5988	vb	_	_	
52-13	5988-5989	_	_	_	
52-14	5989-5991	3t	_	_	
52-15	5991-5992	`	_	_	
52-16	6009-6010	`	_	_	
52-17	6010-6013	pef	_	_	
52-18	6013-6014	_	_	_	
52-19	6014-6016	3t	_	_	
52-20	6016-6017	`	_	_	
52-21	6034-6035	`	_	_	
52-22	6035-6040	pef_r	_	_	
52-23	6040-6041	_	_	_	
52-24	6041-6043	3t	_	_	
52-25	6043-6044	`	_	_	
52-26	6061-6062	`	_	_	
52-27	6062-6065	pef	_	_	
52-28	6065-6066	_	_	_	
52-29	6066-6069	2to	_	_	
52-30	6069-6070	`	_	_	
52-31	6087-6088	`	_	_	
52-32	6088-6091	pef	_	_	
52-33	6091-6092	_	_	_	
52-34	6092-6095	2tp	_	_	
52-35	6095-6096	`	_	_	
52-36	6098-6106	Querying	_	_	
52-37	6107-6109	an	_	_	
52-38	6110-6115	index	_	_	
52-39	6116-6117	<	_	_	
52-40	6117-6118	a	_	_	
52-41	6119-6123	name	_	_	
52-42	6123-6124	=	_	_	
52-43	6124-6125	"	_	_	
52-44	6125-6133	querying	_	_	
52-45	6133-6134	"	_	_	
52-46	6134-6135	>	_	_	
52-47	6135-6136	<	_	_	
52-48	6136-6137	/	_	_	
52-49	6137-6138	a	_	_	
52-50	6138-6139	>	_	_	
52-51	6140-6141	-	_	_	
52-52	6141-6142	-	_	_	
52-53	6142-6143	-	_	_	
52-54	6143-6144	-	_	_	
52-55	6144-6145	-	_	_	
52-56	6145-6146	-	_	_	
52-57	6146-6147	-	_	_	
52-58	6147-6148	-	_	_	
52-59	6148-6149	-	_	_	
52-60	6149-6150	-	_	_	
52-61	6150-6151	-	_	_	
52-62	6151-6152	-	_	_	
52-63	6152-6153	-	_	_	
52-64	6153-6154	-	_	_	
52-65	6154-6155	-	_	_	
52-66	6155-6156	-	_	_	
52-67	6156-6157	-	_	_	
52-68	6157-6158	-	_	_	
52-69	6159-6160	A	_	_	
52-70	6161-6167	triple	_	_	
52-71	6168-6177	selection	_	_	
52-72	6178-6185	pattern	_	_	
52-73	6186-6188	is	_	_	
52-74	6189-6193	just	_	_	
52-75	6194-6196	an	_	_	
52-76	6197-6205	ordinary	_	_	
52-77	6206-6213	integer	_	_	
52-78	6214-6220	triple	_	_	
52-79	6221-6225	with	_	_	
52-80	6226-6227	*	_	_	
52-81	6227-6228	k	_	_	
52-82	6228-6229	*	_	_	
52-83	6230-6238	wildcard	_	_	
52-84	6239-6246	symbols	_	_	
52-85	6246-6247	,	_	_	
52-86	6248-6251	for	_	_	
52-87	6252-6253	0	_	_	
52-88	6254-6255	≤	_	_	
52-89	6256-6257	*	_	_	
52-90	6257-6258	k	_	_	
52-91	6258-6259	*	_	_	
52-92	6260-6261	≤	_	_	
52-93	6262-6263	3	_	_	
52-94	6263-6264	.	_	_	

#Text=In the library, a wildcard is represented by the integer -1.
53-1	6265-6267	In	_	_	
53-2	6268-6271	the	_	_	
53-3	6272-6279	library	_	_	
53-4	6279-6280	,	_	_	
53-5	6281-6282	a	_	_	
53-6	6283-6291	wildcard	_	_	
53-7	6292-6294	is	_	_	
53-8	6295-6306	represented	_	_	
53-9	6307-6309	by	_	_	
53-10	6310-6313	the	_	_	
53-11	6314-6321	integer	_	_	
53-12	6322-6323	-	_	_	
53-13	6323-6324	1	_	_	
53-14	6324-6325	.	_	_	

#Text=For example, the query pattern
#Text=
#Text=\t13 549 -1
#Text=
#Text=asks for all triples where subject = 13 and predicate = 549.
54-1	6326-6329	For	_	_	
54-2	6330-6337	example	_	_	
54-3	6337-6338	,	_	_	
54-4	6339-6342	the	_	_	
54-5	6343-6348	query	_	_	
54-6	6349-6356	pattern	_	_	
54-7	6359-6361	13	_	_	
54-8	6362-6365	549	_	_	
54-9	6366-6367	-	_	_	
54-10	6367-6368	1	_	_	
54-11	6370-6374	asks	_	_	
54-12	6375-6378	for	_	_	
54-13	6379-6382	all	_	_	
54-14	6383-6390	triples	_	_	
54-15	6391-6396	where	_	_	
54-16	6397-6404	subject	_	_	
54-17	6405-6406	=	_	_	
54-18	6407-6409	13	_	_	
54-19	6410-6413	and	_	_	
54-20	6414-6423	predicate	_	_	
54-21	6424-6425	=	_	_	
54-22	6426-6429	549	_	_	
54-23	6429-6430	.	_	_	

#Text=Similary
#Text=
#Text=\t-1 -1 286
#Text=
#Text=asks for all triples having object = 286.
55-1	6431-6439	Similary	_	_	
55-2	6442-6443	-	_	_	
55-3	6443-6444	1	_	_	
55-4	6445-6446	-	_	_	
55-5	6446-6447	1	_	_	
55-6	6448-6451	286	_	_	
55-7	6453-6457	asks	_	_	
55-8	6458-6461	for	_	_	
55-9	6462-6465	all	_	_	
55-10	6466-6473	triples	_	_	
55-11	6474-6480	having	_	_	
55-12	6481-6487	object	_	_	
55-13	6488-6489	=	_	_	
55-14	6490-6493	286	_	_	
55-15	6493-6494	.	_	_	

#Text=If you do not have a querylog with some triple selection patterns
#Text=of this form, just sample randomly the input data with (use `gshuf` instead of `shuf` on Mac OSX)
#Text=
#Text=\tshuf -n 5000 ../..
56-1	6496-6498	If	_	_	
56-2	6499-6502	you	_	_	
56-3	6503-6505	do	_	_	
56-4	6506-6509	not	_	_	
56-5	6510-6514	have	_	_	
56-6	6515-6516	a	_	_	
56-7	6517-6525	querylog	_	_	
56-8	6526-6530	with	_	_	
56-9	6531-6535	some	_	_	
56-10	6536-6542	triple	_	_	
56-11	6543-6552	selection	_	_	
56-12	6553-6561	patterns	_	_	
56-13	6562-6564	of	_	_	
56-14	6565-6569	this	_	_	
56-15	6570-6574	form	_	_	
56-16	6574-6575	,	_	_	
56-17	6576-6580	just	_	_	
56-18	6581-6587	sample	_	_	
56-19	6588-6596	randomly	_	_	
56-20	6597-6600	the	_	_	
56-21	6601-6606	input	_	_	
56-22	6607-6611	data	_	_	
56-23	6612-6616	with	_	_	
56-24	6617-6618	(	_	_	
56-25	6618-6621	use	_	_	
56-26	6622-6623	`	_	_	
56-27	6623-6628	gshuf	_	_	
56-28	6628-6629	`	_	_	
56-29	6630-6637	instead	_	_	
56-30	6638-6640	of	_	_	
56-31	6641-6642	`	_	_	
56-32	6642-6646	shuf	_	_	
56-33	6646-6647	`	_	_	
56-34	6648-6650	on	_	_	
56-35	6651-6654	Mac	_	_	
56-36	6655-6658	OSX	_	_	
56-37	6658-6659	)	_	_	
56-38	6662-6666	shuf	_	_	
56-39	6667-6668	-	_	_	
56-40	6668-6669	n	_	_	
56-41	6670-6674	5000	_	_	
56-42	6675-6676	.	_	_	
56-43	6676-6677	.	_	_	
56-44	6677-6678	/	_	_	
56-45	6678-6679	.	_	_	
56-46	6679-6680	.	_	_	

#Text=/test_data/wordnet31.mapped.unsorted > ../..
57-1	6680-6681	/	_	_	
57-2	6681-6690	test_data	_	_	
57-3	6690-6691	/	_	_	
57-4	6691-6700	wordnet31	*	DATASET	
57-5	6700-6701	.	_	_	
57-6	6701-6716	mapped.unsorted	_	_	
57-7	6717-6718	>	_	_	
57-8	6719-6720	.	_	_	
57-9	6720-6721	.	_	_	
57-10	6721-6722	/	_	_	
57-11	6722-6723	.	_	_	
57-12	6723-6724	.	_	_	

#Text=/test_data/wordnet31.mapped.unsorted.queries.5000
#Text=
#Text=that will create a querylog with 5000 triples selected at random.
58-1	6724-6725	/	_	_	
58-2	6725-6734	test_data	_	_	
58-3	6734-6735	/	_	_	
58-4	6735-6744	wordnet31	*	DATASET	
58-5	6744-6745	.	_	_	
58-6	6745-6768	mapped.unsorted.queries	_	_	
58-7	6768-6773	.5000	_	_	
58-8	6775-6779	that	_	_	
58-9	6780-6784	will	_	_	
58-10	6785-6791	create	_	_	
58-11	6792-6793	a	_	_	
58-12	6794-6802	querylog	_	_	
58-13	6803-6807	with	_	_	
58-14	6808-6812	5000	_	_	
58-15	6813-6820	triples	_	_	
58-16	6821-6829	selected	_	_	
58-17	6830-6832	at	_	_	
58-18	6833-6839	random	_	_	
58-19	6839-6840	.	_	_	

#Text=Then, the executable `.
59-1	6842-6846	Then	_	_	
59-2	6846-6847	,	_	_	
59-3	6848-6851	the	_	_	
59-4	6852-6862	executable	_	_	
59-5	6863-6864	`	_	_	
59-6	6864-6865	.	_	_	

#Text=/queries` can be used to query an index, specifying a querylog, the number and position of the wildcards:
#Text=
#Text=\t.
60-1	6865-6866	/	_	_	
60-2	6866-6873	queries	_	_	
60-3	6873-6874	`	_	_	
60-4	6875-6878	can	_	_	
60-5	6879-6881	be	_	_	
60-6	6882-6886	used	_	_	
60-7	6887-6889	to	_	_	
60-8	6890-6895	query	_	_	
60-9	6896-6898	an	_	_	
60-10	6899-6904	index	_	_	
60-11	6904-6905	,	_	_	
60-12	6906-6916	specifying	_	_	
60-13	6917-6918	a	_	_	
60-14	6919-6927	querylog	_	_	
60-15	6927-6928	,	_	_	
60-16	6929-6932	the	_	_	
60-17	6933-6939	number	_	_	
60-18	6940-6943	and	_	_	
60-19	6944-6952	position	_	_	
60-20	6953-6955	of	_	_	
60-21	6956-6959	the	_	_	
60-22	6960-6969	wildcards	_	_	
60-23	6969-6970	:	_	_	
60-24	6973-6974	.	_	_	

#Text=/queries <type> <perm> <index_filename> [-q <query_filename> -n <num_queries> -w <num_wildcards>]
#Text=
#Text=The arguments `<perm>` and `-w <num_wildcards>` are used to specify the triple selection patterns.
61-1	6974-6975	/	_	_	
61-2	6975-6982	queries	_	_	
61-3	6983-6984	<	_	_	
61-4	6984-6988	type	_	_	
61-5	6988-6989	>	_	_	
61-6	6990-6991	<	_	_	
61-7	6991-6995	perm	_	_	
61-8	6995-6996	>	_	_	
61-9	6997-6998	<	_	_	
61-10	6998-7012	index_filename	_	_	
61-11	7012-7013	>	_	_	
61-12	7014-7015	[	_	_	
61-13	7015-7016	-	_	_	
61-14	7016-7017	q	_	_	
61-15	7018-7019	<	_	_	
61-16	7019-7033	query_filename	_	_	
61-17	7033-7034	>	_	_	
61-18	7035-7036	-	_	_	
61-19	7036-7037	n	_	_	
61-20	7038-7039	<	_	_	
61-21	7039-7050	num_queries	_	_	
61-22	7050-7051	>	_	_	
61-23	7052-7053	-	_	_	
61-24	7053-7054	w	_	_	
61-25	7055-7056	<	_	_	
61-26	7056-7069	num_wildcards	_	_	
61-27	7069-7070	>	_	_	
61-28	7070-7071	]	_	_	
61-29	7073-7076	The	_	_	
61-30	7077-7086	arguments	_	_	
61-31	7087-7088	`	_	_	
61-32	7088-7089	<	_	_	
61-33	7089-7093	perm	_	_	
61-34	7093-7094	>	_	_	
61-35	7094-7095	`	_	_	
61-36	7096-7099	and	_	_	
61-37	7100-7101	`	_	_	
61-38	7101-7102	-	_	_	
61-39	7102-7103	w	_	_	
61-40	7104-7105	<	_	_	
61-41	7105-7118	num_wildcards	_	_	
61-42	7118-7119	>	_	_	
61-43	7119-7120	`	_	_	
61-44	7121-7124	are	_	_	
61-45	7125-7129	used	_	_	
61-46	7130-7132	to	_	_	
61-47	7133-7140	specify	_	_	
61-48	7141-7144	the	_	_	
61-49	7145-7151	triple	_	_	
61-50	7152-7161	selection	_	_	
61-51	7162-7170	patterns	_	_	
61-52	7170-7171	.	_	_	

#Text=`<perm>` is an integer 1..3 indicating the S-P-O permutation where
#Text=`<num_wildcards>` symbols are set to wildcards (starting from the right).
62-1	7172-7173	`	_	_	
62-2	7173-7174	<	_	_	
62-3	7174-7178	perm	_	_	
62-4	7178-7179	>	_	_	
62-5	7179-7180	`	_	_	
62-6	7181-7183	is	_	_	
62-7	7184-7186	an	_	_	
62-8	7187-7194	integer	_	_	
62-9	7195-7196	1	_	_	
62-10	7196-7197	.	_	_	
62-11	7197-7199	.3	_	_	
62-12	7200-7210	indicating	_	_	
62-13	7211-7214	the	_	_	
62-14	7215-7220	S-P-O	_	_	
62-15	7221-7232	permutation	_	_	
62-16	7233-7238	where	_	_	
62-17	7239-7240	`	_	_	
62-18	7240-7241	<	_	_	
62-19	7241-7254	num_wildcards	_	_	
62-20	7254-7255	>	_	_	
62-21	7255-7256	`	_	_	
62-22	7257-7264	symbols	_	_	
62-23	7265-7268	are	_	_	
62-24	7269-7272	set	_	_	
62-25	7273-7275	to	_	_	
62-26	7276-7285	wildcards	_	_	
62-27	7286-7287	(	_	_	
62-28	7287-7295	starting	_	_	
62-29	7296-7300	from	_	_	
62-30	7301-7304	the	_	_	
62-31	7305-7310	right	_	_	
62-32	7310-7311	)	_	_	
62-33	7311-7312	.	_	_	

#Text=We use the convention that `perm = 1` specifies SPO, `perm = 2` specifies POS and `perm = 3` specifies OSP.
63-1	7313-7315	We	_	_	
63-2	7316-7319	use	_	_	
63-3	7320-7323	the	_	_	
63-4	7324-7334	convention	_	_	
63-5	7335-7339	that	_	_	
63-6	7340-7341	`	_	_	
63-7	7341-7345	perm	_	_	
63-8	7346-7347	=	_	_	
63-9	7348-7349	1	_	_	
63-10	7349-7350	`	_	_	
63-11	7351-7360	specifies	_	_	
63-12	7361-7364	SPO	_	_	
63-13	7364-7365	,	_	_	
63-14	7366-7367	`	_	_	
63-15	7367-7371	perm	_	_	
63-16	7372-7373	=	_	_	
63-17	7374-7375	2	_	_	
63-18	7375-7376	`	_	_	
63-19	7377-7386	specifies	_	_	
63-20	7387-7390	POS	_	_	
63-21	7391-7394	and	_	_	
63-22	7395-7396	`	_	_	
63-23	7396-7400	perm	_	_	
63-24	7401-7402	=	_	_	
63-25	7403-7404	3	_	_	
63-26	7404-7405	`	_	_	
63-27	7406-7415	specifies	_	_	
63-28	7416-7419	OSP	_	_	
63-29	7419-7420	.	_	_	

#Text=Therefore we have:
#Text=
#Text=- `perm = 1` and `-w 0` <=> SPO
#Text=- `perm = 1` and `-w 1` <=> SP?
64-1	7422-7431	Therefore	_	_	
64-2	7432-7434	we	_	_	
64-3	7435-7439	have	_	_	
64-4	7439-7440	:	_	_	
64-5	7442-7443	-	_	_	
64-6	7444-7445	`	_	_	
64-7	7445-7449	perm	_	_	
64-8	7450-7451	=	_	_	
64-9	7452-7453	1	_	_	
64-10	7453-7454	`	_	_	
64-11	7455-7458	and	_	_	
64-12	7459-7460	`	_	_	
64-13	7460-7461	-	_	_	
64-14	7461-7462	w	_	_	
64-15	7463-7464	0	_	_	
64-16	7464-7465	`	_	_	
64-17	7466-7467	<	_	_	
64-18	7467-7468	=	_	_	
64-19	7468-7469	>	_	_	
64-20	7470-7473	SPO	_	_	
64-21	7474-7475	-	_	_	
64-22	7476-7477	`	_	_	
64-23	7477-7481	perm	_	_	
64-24	7482-7483	=	_	_	
64-25	7484-7485	1	_	_	
64-26	7485-7486	`	_	_	
64-27	7487-7490	and	_	_	
64-28	7491-7492	`	_	_	
64-29	7492-7493	-	_	_	
64-30	7493-7494	w	_	_	
64-31	7495-7496	1	_	_	
64-32	7496-7497	`	_	_	
64-33	7498-7499	<	_	_	
64-34	7499-7500	=	_	_	
64-35	7500-7501	>	_	_	
64-36	7502-7504	SP	_	_	
64-37	7504-7505	?	_	_	

#Text=- `perm = 1` and `-w 2` <=> S??
65-1	7506-7507	-	_	_	
65-2	7508-7509	`	_	_	
65-3	7509-7513	perm	_	_	
65-4	7514-7515	=	_	_	
65-5	7516-7517	1	_	_	
65-6	7517-7518	`	_	_	
65-7	7519-7522	and	_	_	
65-8	7523-7524	`	_	_	
65-9	7524-7525	-	_	_	
65-10	7525-7526	w	_	_	
65-11	7527-7528	2	_	_	
65-12	7528-7529	`	_	_	
65-13	7530-7531	<	_	_	
65-14	7531-7532	=	_	_	
65-15	7532-7533	>	_	_	
65-16	7534-7535	S	_	_	
65-17	7535-7536	?	_	_	
65-18	7536-7537	?	_	_	

#Text=- `perm = 2` and `-w 1` <=> ?
66-1	7538-7539	-	_	_	
66-2	7540-7541	`	_	_	
66-3	7541-7545	perm	_	_	
66-4	7546-7547	=	_	_	
66-5	7548-7549	2	_	_	
66-6	7549-7550	`	_	_	
66-7	7551-7554	and	_	_	
66-8	7555-7556	`	_	_	
66-9	7556-7557	-	_	_	
66-10	7557-7558	w	_	_	
66-11	7559-7560	1	_	_	
66-12	7560-7561	`	_	_	
66-13	7562-7563	<	_	_	
66-14	7563-7564	=	_	_	
66-15	7564-7565	>	_	_	
66-16	7566-7567	?	_	_	

#Text=PO
#Text=- `perm = 2` and `-w 2` <=> ?
67-1	7567-7569	PO	_	_	
67-2	7570-7571	-	_	_	
67-3	7572-7573	`	_	_	
67-4	7573-7577	perm	_	_	
67-5	7578-7579	=	_	_	
67-6	7580-7581	2	_	_	
67-7	7581-7582	`	_	_	
67-8	7583-7586	and	_	_	
67-9	7587-7588	`	_	_	
67-10	7588-7589	-	_	_	
67-11	7589-7590	w	_	_	
67-12	7591-7592	2	_	_	
67-13	7592-7593	`	_	_	
67-14	7594-7595	<	_	_	
67-15	7595-7596	=	_	_	
67-16	7596-7597	>	_	_	
67-17	7598-7599	?	_	_	

#Text=P?
68-1	7599-7600	P	_	_	
68-2	7600-7601	?	_	_	

#Text=- `perm = 3` and `-w 1` <=> S?
69-1	7602-7603	-	_	_	
69-2	7604-7605	`	_	_	
69-3	7605-7609	perm	_	_	
69-4	7610-7611	=	_	_	
69-5	7612-7613	3	_	_	
69-6	7613-7614	`	_	_	
69-7	7615-7618	and	_	_	
69-8	7619-7620	`	_	_	
69-9	7620-7621	-	_	_	
69-10	7621-7622	w	_	_	
69-11	7623-7624	1	_	_	
69-12	7624-7625	`	_	_	
69-13	7626-7627	<	_	_	
69-14	7627-7628	=	_	_	
69-15	7628-7629	>	_	_	
69-16	7630-7631	S	_	_	
69-17	7631-7632	?	_	_	

#Text=O
#Text=- `perm = 3` and `-w 2` <=> ??
70-1	7632-7633	O	_	_	
70-2	7634-7635	-	_	_	
70-3	7636-7637	`	_	_	
70-4	7637-7641	perm	_	_	
70-5	7642-7643	=	_	_	
70-6	7644-7645	3	_	_	
70-7	7645-7646	`	_	_	
70-8	7647-7650	and	_	_	
70-9	7651-7652	`	_	_	
70-10	7652-7653	-	_	_	
70-11	7653-7654	w	_	_	
70-12	7655-7656	2	_	_	
70-13	7656-7657	`	_	_	
70-14	7658-7659	<	_	_	
70-15	7659-7660	=	_	_	
70-16	7660-7661	>	_	_	
70-17	7662-7663	?	_	_	
70-18	7663-7664	?	_	_	

#Text=O
#Text=- any `perm` and `-w 3` <=> ???
71-1	7664-7665	O	_	_	
71-2	7666-7667	-	_	_	
71-3	7668-7671	any	_	_	
71-4	7672-7673	`	_	_	
71-5	7673-7677	perm	_	_	
71-6	7677-7678	`	_	_	
71-7	7679-7682	and	_	_	
71-8	7683-7684	`	_	_	
71-9	7684-7685	-	_	_	
71-10	7685-7686	w	_	_	
71-11	7687-7688	3	_	_	
71-12	7688-7689	`	_	_	
71-13	7690-7691	<	_	_	
71-14	7691-7692	=	_	_	
71-15	7692-7693	>	_	_	
71-16	7694-7695	?	_	_	
71-17	7695-7696	?	_	_	
71-18	7696-7697	?	_	_	

#Text=For example
#Text=
#Text=\t.
72-1	7699-7702	For	_	_	
72-2	7703-7710	example	_	_	
72-3	7713-7714	.	_	_	

#Text=/queries pef_3t 1 wordnet31.pef_3t.bin -q ..
73-1	7714-7715	/	_	_	
73-2	7715-7722	queries	_	_	
73-3	7723-7726	pef	_	_	
73-4	7726-7727	_	_	_	
73-5	7727-7729	3t	_	_	
73-6	7730-7731	1	_	_	
73-7	7732-7741	wordnet31	*	DATASET	
73-8	7741-7742	.	_	_	
73-9	7742-7745	pef	_	_	
73-10	7745-7746	_	_	_	
73-11	7746-7752	3t.bin	_	_	
73-12	7753-7754	-	_	_	
73-13	7754-7755	q	_	_	
73-14	7756-7757	.	_	_	
73-15	7757-7758	.	_	_	

#Text=/test_data/wordnet31.mapped.unsorted.queries.5000 -n 5000 -w 1
#Text=
#Text=will execute 5000 SP?
74-1	7758-7759	/	_	_	
74-2	7759-7768	test_data	_	_	
74-3	7768-7769	/	_	_	
74-4	7769-7778	wordnet31	*	DATASET	
74-5	7778-7779	.	_	_	
74-6	7779-7802	mapped.unsorted.queries	_	_	
74-7	7802-7807	.5000	_	_	
74-8	7808-7809	-	_	_	
74-9	7809-7810	n	_	_	
74-10	7811-7815	5000	_	_	
74-11	7816-7817	-	_	_	
74-12	7817-7818	w	_	_	
74-13	7819-7820	1	_	_	
74-14	7822-7826	will	_	_	
74-15	7827-7834	execute	_	_	
74-16	7835-7839	5000	_	_	
74-17	7840-7842	SP	_	_	
74-18	7842-7843	?	_	_	

#Text=queries.
75-1	7844-7851	queries	_	_	
75-2	7851-7852	.	_	_	

#Text=Statistics <a name="statistics"></a>
#Text=----------
#Text=
#Text=The executable `.
76-1	7854-7864	Statistics	_	_	
76-2	7865-7866	<	_	_	
76-3	7866-7867	a	_	_	
76-4	7868-7872	name	_	_	
76-5	7872-7873	=	_	_	
76-6	7873-7874	"	_	_	
76-7	7874-7884	statistics	_	_	
76-8	7884-7885	"	_	_	
76-9	7885-7886	>	_	_	
76-10	7886-7887	<	_	_	
76-11	7887-7888	/	_	_	
76-12	7888-7889	a	_	_	
76-13	7889-7890	>	_	_	
76-14	7891-7892	-	_	_	
76-15	7892-7893	-	_	_	
76-16	7893-7894	-	_	_	
76-17	7894-7895	-	_	_	
76-18	7895-7896	-	_	_	
76-19	7896-7897	-	_	_	
76-20	7897-7898	-	_	_	
76-21	7898-7899	-	_	_	
76-22	7899-7900	-	_	_	
76-23	7900-7901	-	_	_	
76-24	7903-7906	The	_	_	
76-25	7907-7917	executable	_	_	
76-26	7918-7919	`	_	_	
76-27	7919-7920	.	_	_	

#Text=/statistics` will print some useful statistics
#Text=about the nodes of the tries and their space occupancy:
#Text=
#Text=\t.
77-1	7920-7921	/	_	_	
77-2	7921-7931	statistics	_	_	
77-3	7931-7932	`	_	_	
77-4	7933-7937	will	_	_	
77-5	7938-7943	print	_	_	
77-6	7944-7948	some	_	_	
77-7	7949-7955	useful	_	_	
77-8	7956-7966	statistics	_	_	
77-9	7967-7972	about	_	_	
77-10	7973-7976	the	_	_	
77-11	7977-7982	nodes	_	_	
77-12	7983-7985	of	_	_	
77-13	7986-7989	the	_	_	
77-14	7990-7995	tries	_	_	
77-15	7996-7999	and	_	_	
77-16	8000-8005	their	_	_	
77-17	8006-8011	space	_	_	
77-18	8012-8021	occupancy	_	_	
77-19	8021-8022	:	_	_	
77-20	8025-8026	.	_	_	

#Text=/statistics <type> <index_filename>
#Text=
#Text=For example
#Text=
#Text=\t.
78-1	8026-8027	/	_	_	
78-2	8027-8037	statistics	_	_	
78-3	8038-8039	<	_	_	
78-4	8039-8043	type	_	_	
78-5	8043-8044	>	_	_	
78-6	8045-8046	<	_	_	
78-7	8046-8060	index_filename	_	_	
78-8	8060-8061	>	_	_	
78-9	8063-8066	For	_	_	
78-10	8067-8074	example	_	_	
78-11	8077-8078	.	_	_	

#Text=/statistics pef_2tp wordnet31.pef_2tp.bin
#Text=
#Text=Testing <a name="testing"></a>
#Text=-------
#Text=
#Text=Run the script `test/check_everything.py` from within the `.
79-1	8078-8079	/	_	_	
79-2	8079-8089	statistics	_	_	
79-3	8090-8093	pef	_	_	
79-4	8093-8094	_	_	_	
79-5	8094-8097	2tp	_	_	
79-6	8098-8107	wordnet31	*	DATASET	
79-7	8107-8108	.	_	_	
79-8	8108-8111	pef	_	_	
79-9	8111-8112	_	_	_	
79-10	8112-8119	2tp.bin	_	_	
79-11	8121-8128	Testing	_	_	
79-12	8129-8130	<	_	_	
79-13	8130-8131	a	_	_	
79-14	8132-8136	name	_	_	
79-15	8136-8137	=	_	_	
79-16	8137-8138	"	_	_	
79-17	8138-8145	testing	_	_	
79-18	8145-8146	"	_	_	
79-19	8146-8147	>	_	_	
79-20	8147-8148	<	_	_	
79-21	8148-8149	/	_	_	
79-22	8149-8150	a	_	_	
79-23	8150-8151	>	_	_	
79-24	8152-8153	-	_	_	
79-25	8153-8154	-	_	_	
79-26	8154-8155	-	_	_	
79-27	8155-8156	-	_	_	
79-28	8156-8157	-	_	_	
79-29	8157-8158	-	_	_	
79-30	8158-8159	-	_	_	
79-31	8161-8164	Run	_	_	
79-32	8165-8168	the	_	_	
79-33	8169-8175	script	_	_	
79-34	8176-8177	`	_	_	
79-35	8177-8181	test	_	_	
79-36	8181-8182	/	_	_	
79-37	8182-8201	check_everything.py	_	_	
79-38	8201-8202	`	_	_	
79-39	8203-8207	from	_	_	
79-40	8208-8214	within	_	_	
79-41	8215-8218	the	_	_	
79-42	8219-8220	`	_	_	
79-43	8220-8221	.	_	_	

#Text=/build`
#Text=directory to execute an exhaustive testing of every type of index.
80-1	8221-8222	/	_	_	
80-2	8222-8227	build	_	_	
80-3	8227-8228	`	_	_	
80-4	8229-8238	directory	_	_	
80-5	8239-8241	to	_	_	
80-6	8242-8249	execute	_	_	
80-7	8250-8252	an	_	_	
80-8	8253-8263	exhaustive	_	_	
80-9	8264-8271	testing	_	_	
80-10	8272-8274	of	_	_	
80-11	8275-8280	every	_	_	
80-12	8281-8285	type	_	_	
80-13	8286-8288	of	_	_	
80-14	8289-8294	index	_	_	
80-15	8294-8295	.	_	_	

#Text=python ..
81-1	8298-8304	python	*	SOFTWARE	
81-2	8305-8306	.	_	_	
81-3	8306-8307	.	_	_	

#Text=/test/check_everything.py ..
82-1	8307-8308	/	_	_	
82-2	8308-8312	test	_	_	
82-3	8312-8313	/	_	_	
82-4	8313-8332	check_everything.py	_	_	
82-5	8333-8334	.	_	_	
82-6	8334-8335	.	_	_	

#Text=/test_data/wordnet31.mapped.sorted . wordnet
#Text=
#Text=This script will check every triple selection pattern
#Text=for all the different types of indexes.
83-1	8335-8336	/	_	_	
83-2	8336-8345	test_data	_	_	
83-3	8345-8346	/	_	_	
83-4	8346-8355	wordnet31	*	DATASET	
83-5	8355-8356	.	_	_	
83-6	8356-8369	mapped.sorted	_	_	
83-7	8370-8371	.	_	_	
83-8	8372-8379	wordnet	_	_	
83-9	8381-8385	This	_	_	
83-10	8386-8392	script	_	_	
83-11	8393-8397	will	_	_	
83-12	8398-8403	check	_	_	
83-13	8404-8409	every	_	_	
83-14	8410-8416	triple	_	_	
83-15	8417-8426	selection	_	_	
83-16	8427-8434	pattern	_	_	
83-17	8435-8438	for	_	_	
83-18	8439-8442	all	_	_	
83-19	8443-8446	the	_	_	
83-20	8447-8456	different	_	_	
83-21	8457-8462	types	_	_	
83-22	8463-8465	of	_	_	
83-23	8466-8473	indexes	_	_	
83-24	8473-8474	.	_	_	

#Text=See also the directory `.
84-1	8476-8479	See	_	_	
84-2	8480-8484	also	_	_	
84-3	8485-8488	the	_	_	
84-4	8489-8498	directory	_	_	
84-5	8499-8500	`	_	_	
84-6	8500-8501	.	_	_	

#Text=/test` for further testing executables.
85-1	8501-8502	/	_	_	
85-2	8502-8506	test	_	_	
85-3	8506-8507	`	_	_	
85-4	8508-8511	for	_	_	
85-5	8512-8519	further	_	_	
85-6	8520-8527	testing	_	_	
85-7	8528-8539	executables	_	_	
85-8	8539-8540	.	_	_	

#Text=Extending the software <a name="extending"></a>
#Text=----------------------
#Text=
#Text=The library is a flexible template library, allowing *any* encoder to be used on the nodes of the tries.
86-1	8542-8551	Extending	_	_	
86-2	8552-8555	the	_	_	
86-3	8556-8564	software	_	_	
86-4	8565-8566	<	_	_	
86-5	8566-8567	a	_	_	
86-6	8568-8572	name	_	_	
86-7	8572-8573	=	_	_	
86-8	8573-8574	"	_	_	
86-9	8574-8583	extending	_	_	
86-10	8583-8584	"	_	_	
86-11	8584-8585	>	_	_	
86-12	8585-8586	<	_	_	
86-13	8586-8587	/	_	_	
86-14	8587-8588	a	_	_	
86-15	8588-8589	>	_	_	
86-16	8590-8591	-	_	_	
86-17	8591-8592	-	_	_	
86-18	8592-8593	-	_	_	
86-19	8593-8594	-	_	_	
86-20	8594-8595	-	_	_	
86-21	8595-8596	-	_	_	
86-22	8596-8597	-	_	_	
86-23	8597-8598	-	_	_	
86-24	8598-8599	-	_	_	
86-25	8599-8600	-	_	_	
86-26	8600-8601	-	_	_	
86-27	8601-8602	-	_	_	
86-28	8602-8603	-	_	_	
86-29	8603-8604	-	_	_	
86-30	8604-8605	-	_	_	
86-31	8605-8606	-	_	_	
86-32	8606-8607	-	_	_	
86-33	8607-8608	-	_	_	
86-34	8608-8609	-	_	_	
86-35	8609-8610	-	_	_	
86-36	8610-8611	-	_	_	
86-37	8611-8612	-	_	_	
86-38	8614-8617	The	_	_	
86-39	8618-8625	library	_	_	
86-40	8626-8628	is	_	_	
86-41	8629-8630	a	_	_	
86-42	8631-8639	flexible	_	_	
86-43	8640-8648	template	_	_	
86-44	8649-8656	library	_	_	
86-45	8656-8657	,	_	_	
86-46	8658-8666	allowing	_	_	
86-47	8667-8668	*	_	_	
86-48	8668-8671	any	_	_	
86-49	8671-8672	*	_	_	
86-50	8673-8680	encoder	_	_	
86-51	8681-8683	to	_	_	
86-52	8684-8686	be	_	_	
86-53	8687-8691	used	_	_	
86-54	8692-8694	on	_	_	
86-55	8695-8698	the	_	_	
86-56	8699-8704	nodes	_	_	
86-57	8705-8707	of	_	_	
86-58	8708-8711	the	_	_	
86-59	8712-8717	tries	_	_	
86-60	8717-8718	.	_	_	

#Text=In order to use your custom encoder for a sequence of integers, the corresponding class must implement the following interface.
87-1	8720-8722	In	_	_	
87-2	8723-8728	order	_	_	
87-3	8729-8731	to	_	_	
87-4	8732-8735	use	_	_	
87-5	8736-8740	your	_	_	
87-6	8741-8747	custom	_	_	
87-7	8748-8755	encoder	_	_	
87-8	8756-8759	for	_	_	
87-9	8760-8761	a	_	_	
87-10	8762-8770	sequence	_	_	
87-11	8771-8773	of	_	_	
87-12	8774-8782	integers	_	_	
87-13	8782-8783	,	_	_	
87-14	8784-8787	the	_	_	
87-15	8788-8801	corresponding	_	_	
87-16	8802-8807	class	_	_	
87-17	8808-8812	must	_	_	
87-18	8813-8822	implement	_	_	
87-19	8823-8826	the	_	_	
87-20	8827-8836	following	_	_	
87-21	8837-8846	interface	_	_	
87-22	8846-8847	.	_	_	

#Text=```C++
#Text=struct iterator;
#Text=void build(compact_vector::builder const& from,
#Text=           compact_vector::builder const& pointers);
#Text=inline uint64_t access(uint64_t pos) const;
#Text=inline uint64_t access(range const& r, uint64_t pos);
#Text=iterator begin() const;
#Text=iterator end() const;
#Text=iterator at(range const& r, uint64_t pos) const;
#Text=uint64_t find(range const& r, uint64_t id);
#Text=uint64_t size() const;
#Text=size_t bytes() const;
#Text=void save(std::ostream& os) const;
#Text=void load(std::istream& is);
#Text=```
#Text=
#Text=
#Text=Authors <a name="authors"></a>
#Text=-------
#Text=* [Giulio Ermanno Pibiri](http://pages.di.unipi.it/pibiri/), <giulio.ermanno.pibiri@isti.cnr.it>
#Text=
#Text=
#Text=References <a name="references"></a>
#Text=-------
#Text=* [1] Raffaele Perego, Giulio Ermanno Pibiri and Rossano Venturini.
88-1	8849-8850	`	_	_	
88-2	8850-8851	`	_	_	
88-3	8851-8852	`	_	_	
88-4	8852-8853	C	*[3]	PROGLANG[3]	
88-5	8853-8854	+	*[3]	PROGLANG[3]	
88-6	8854-8855	+	*[3]	PROGLANG[3]	
88-7	8856-8862	struct	_	_	
88-8	8863-8871	iterator	_	_	
88-9	8871-8872	;	_	_	
88-10	8873-8877	void	_	_	
88-11	8878-8883	build	_	_	
88-12	8883-8884	(	_	_	
88-13	8884-8898	compact_vector	_	_	
88-14	8898-8899	:	_	_	
88-15	8899-8900	:	_	_	
88-16	8900-8907	builder	_	_	
88-17	8908-8913	const	_	_	
88-18	8913-8914	&	_	_	
88-19	8915-8919	from	_	_	
88-20	8919-8920	,	_	_	
88-21	8932-8946	compact_vector	_	_	
88-22	8946-8947	:	_	_	
88-23	8947-8948	:	_	_	
88-24	8948-8955	builder	_	_	
88-25	8956-8961	const	_	_	
88-26	8961-8962	&	_	_	
88-27	8963-8971	pointers	_	_	
88-28	8971-8972	)	_	_	
88-29	8972-8973	;	_	_	
88-30	8974-8980	inline	_	_	
88-31	8981-8987	uint64	_	_	
88-32	8987-8988	_	_	_	
88-33	8988-8989	t	_	_	
88-34	8990-8996	access	_	_	
88-35	8996-8997	(	_	_	
88-36	8997-9003	uint64	_	_	
88-37	9003-9004	_	_	_	
88-38	9004-9005	t	_	_	
88-39	9006-9009	pos	_	_	
88-40	9009-9010	)	_	_	
88-41	9011-9016	const	_	_	
88-42	9016-9017	;	_	_	
88-43	9018-9024	inline	_	_	
88-44	9025-9031	uint64	_	_	
88-45	9031-9032	_	_	_	
88-46	9032-9033	t	_	_	
88-47	9034-9040	access	_	_	
88-48	9040-9041	(	_	_	
88-49	9041-9046	range	_	_	
88-50	9047-9052	const	_	_	
88-51	9052-9053	&	_	_	
88-52	9054-9055	r	_	_	
88-53	9055-9056	,	_	_	
88-54	9057-9063	uint64	_	_	
88-55	9063-9064	_	_	_	
88-56	9064-9065	t	_	_	
88-57	9066-9069	pos	_	_	
88-58	9069-9070	)	_	_	
88-59	9070-9071	;	_	_	
88-60	9072-9080	iterator	_	_	
88-61	9081-9086	begin	_	_	
88-62	9086-9087	(	_	_	
88-63	9087-9088	)	_	_	
88-64	9089-9094	const	_	_	
88-65	9094-9095	;	_	_	
88-66	9096-9104	iterator	_	_	
88-67	9105-9108	end	_	_	
88-68	9108-9109	(	_	_	
88-69	9109-9110	)	_	_	
88-70	9111-9116	const	_	_	
88-71	9116-9117	;	_	_	
88-72	9118-9126	iterator	_	_	
88-73	9127-9129	at	_	_	
88-74	9129-9130	(	_	_	
88-75	9130-9135	range	_	_	
88-76	9136-9141	const	_	_	
88-77	9141-9142	&	_	_	
88-78	9143-9144	r	_	_	
88-79	9144-9145	,	_	_	
88-80	9146-9152	uint64	_	_	
88-81	9152-9153	_	_	_	
88-82	9153-9154	t	_	_	
88-83	9155-9158	pos	_	_	
88-84	9158-9159	)	_	_	
88-85	9160-9165	const	_	_	
88-86	9165-9166	;	_	_	
88-87	9167-9173	uint64	_	_	
88-88	9173-9174	_	_	_	
88-89	9174-9175	t	_	_	
88-90	9176-9180	find	_	_	
88-91	9180-9181	(	_	_	
88-92	9181-9186	range	_	_	
88-93	9187-9192	const	_	_	
88-94	9192-9193	&	_	_	
88-95	9194-9195	r	_	_	
88-96	9195-9196	,	_	_	
88-97	9197-9203	uint64	_	_	
88-98	9203-9204	_	_	_	
88-99	9204-9205	t	_	_	
88-100	9206-9208	id	_	_	
88-101	9208-9209	)	_	_	
88-102	9209-9210	;	_	_	
88-103	9211-9217	uint64	_	_	
88-104	9217-9218	_	_	_	
88-105	9218-9219	t	_	_	
88-106	9220-9224	size	_	_	
88-107	9224-9225	(	_	_	
88-108	9225-9226	)	_	_	
88-109	9227-9232	const	_	_	
88-110	9232-9233	;	_	_	
88-111	9234-9240	size_t	_	_	
88-112	9241-9246	bytes	_	_	
88-113	9246-9247	(	_	_	
88-114	9247-9248	)	_	_	
88-115	9249-9254	const	_	_	
88-116	9254-9255	;	_	_	
88-117	9256-9260	void	_	_	
88-118	9261-9265	save	_	_	
88-119	9265-9266	(	_	_	
88-120	9266-9269	std	_	_	
88-121	9269-9270	:	_	_	
88-122	9270-9271	:	_	_	
88-123	9271-9278	ostream	_	_	
88-124	9278-9279	&	_	_	
88-125	9280-9282	os	_	_	
88-126	9282-9283	)	_	_	
88-127	9284-9289	const	_	_	
88-128	9289-9290	;	_	_	
88-129	9291-9295	void	_	_	
88-130	9296-9300	load	_	_	
88-131	9300-9301	(	_	_	
88-132	9301-9304	std	_	_	
88-133	9304-9305	:	_	_	
88-134	9305-9306	:	_	_	
88-135	9306-9313	istream	_	_	
88-136	9313-9314	&	_	_	
88-137	9315-9317	is	_	_	
88-138	9317-9318	)	_	_	
88-139	9318-9319	;	_	_	
88-140	9320-9321	`	_	_	
88-141	9321-9322	`	_	_	
88-142	9322-9323	`	_	_	
88-143	9326-9333	Authors	_	_	
88-144	9334-9335	<	_	_	
88-145	9335-9336	a	_	_	
88-146	9337-9341	name	_	_	
88-147	9341-9342	=	_	_	
88-148	9342-9343	"	_	_	
88-149	9343-9350	authors	_	_	
88-150	9350-9351	"	_	_	
88-151	9351-9352	>	_	_	
88-152	9352-9353	<	_	_	
88-153	9353-9354	/	_	_	
88-154	9354-9355	a	_	_	
88-155	9355-9356	>	_	_	
88-156	9357-9358	-	_	_	
88-157	9358-9359	-	_	_	
88-158	9359-9360	-	_	_	
88-159	9360-9361	-	_	_	
88-160	9361-9362	-	_	_	
88-161	9362-9363	-	_	_	
88-162	9363-9364	-	_	_	
88-163	9365-9366	*	_	_	
88-164	9367-9368	[	_	_	
88-165	9368-9374	Giulio	_	_	
88-166	9375-9382	Ermanno	_	_	
88-167	9383-9389	Pibiri	_	_	
88-168	9389-9390	]	_	_	
88-169	9390-9391	(	_	_	
88-170	9391-9395	http	_	_	
88-171	9395-9396	:	_	_	
88-172	9396-9397	/	_	_	
88-173	9397-9398	/	_	_	
88-174	9398-9415	pages.di.unipi.it	_	_	
88-175	9415-9416	/	_	_	
88-176	9416-9422	pibiri	_	_	
88-177	9422-9423	/	_	_	
88-178	9423-9424	)	_	_	
88-179	9424-9425	,	_	_	
88-180	9426-9427	<	_	_	
88-181	9427-9448	giulio.ermanno.pibiri	_	_	
88-182	9448-9449	@	_	_	
88-183	9449-9460	isti.cnr.it	_	_	
88-184	9460-9461	>	_	_	
88-185	9464-9474	References	_	_	
88-186	9475-9476	<	_	_	
88-187	9476-9477	a	_	_	
88-188	9478-9482	name	_	_	
88-189	9482-9483	=	_	_	
88-190	9483-9484	"	_	_	
88-191	9484-9494	references	_	_	
88-192	9494-9495	"	_	_	
88-193	9495-9496	>	_	_	
88-194	9496-9497	<	_	_	
88-195	9497-9498	/	_	_	
88-196	9498-9499	a	_	_	
88-197	9499-9500	>	_	_	
88-198	9501-9502	-	_	_	
88-199	9502-9503	-	_	_	
88-200	9503-9504	-	_	_	
88-201	9504-9505	-	_	_	
88-202	9505-9506	-	_	_	
88-203	9506-9507	-	_	_	
88-204	9507-9508	-	_	_	
88-205	9509-9510	*	_	_	
88-206	9511-9512	[	_	_	
88-207	9512-9513	1	_	_	
88-208	9513-9514	]	_	_	
88-209	9515-9523	Raffaele	_	_	
88-210	9524-9530	Perego	_	_	
88-211	9530-9531	,	_	_	
88-212	9532-9538	Giulio	_	_	
88-213	9539-9546	Ermanno	_	_	
88-214	9547-9553	Pibiri	_	_	
88-215	9554-9557	and	_	_	
88-216	9558-9565	Rossano	_	_	
88-217	9566-9575	Venturini	_	_	
88-218	9575-9576	.	_	_	

#Text=*Compressed Indexes for Fast Search of Semantic Data*. 2020.
89-1	9577-9578	*	_	_	
89-2	9578-9588	Compressed	*[4]	PUBLICATION[4]	
89-3	9589-9596	Indexes	*[4]	PUBLICATION[4]	
89-4	9597-9600	for	*[4]	PUBLICATION[4]	
89-5	9601-9605	Fast	*[4]	PUBLICATION[4]	
89-6	9606-9612	Search	*[4]	PUBLICATION[4]	
89-7	9613-9615	of	*[4]	PUBLICATION[4]	
89-8	9616-9624	Semantic	*[4]	PUBLICATION[4]	
89-9	9625-9629	Data	*[4]	PUBLICATION[4]	
89-10	9629-9630	*	_	_	
89-11	9630-9631	.	_	_	
89-12	9632-9636	2020	_	_	
89-13	9636-9637	.	_	_	

#Text=IEEE Transactions on Knowledge and Data Engineering (TKDE). 12 pages.
#Text=* [2] M.
90-1	9638-9642	IEEE	_	_	
90-2	9643-9655	Transactions	_	_	
90-3	9656-9658	on	_	_	
90-4	9659-9668	Knowledge	_	_	
90-5	9669-9672	and	_	_	
90-6	9673-9677	Data	_	_	
90-7	9678-9689	Engineering	_	_	
90-8	9690-9691	(	_	_	
90-9	9691-9695	TKDE	_	_	
90-10	9695-9696	)	_	_	
90-11	9696-9697	.	_	_	
90-12	9698-9700	12	_	_	
90-13	9701-9706	pages	_	_	
90-14	9706-9707	.	_	_	
90-15	9708-9709	*	_	_	
90-16	9710-9711	[	_	_	
90-17	9711-9712	2	_	_	
90-18	9712-9713	]	_	_	
90-19	9714-9715	M	_	_	
90-20	9715-9716	.	_	_	

#Text=A.
91-1	9717-9718	A	_	_	
91-2	9718-9719	.	_	_	

#Text=Martínez-Prieto, M.
92-1	9720-9735	Martínez-Prieto	_	_	
92-2	9735-9736	,	_	_	
92-3	9737-9738	M	_	_	
92-4	9738-9739	.	_	_	

#Text=A.
93-1	9740-9741	A	_	_	
93-2	9741-9742	.	_	_	

#Text=Gallego, and J.
94-1	9743-9750	Gallego	_	_	
94-2	9750-9751	,	_	_	
94-3	9752-9755	and	_	_	
94-4	9756-9757	J	_	_	
94-5	9757-9758	.	_	_	

#Text=D.
95-1	9759-9760	D	_	_	
95-2	9760-9761	.	_	_	

#Text=Fernández.
96-1	9762-9771	Fernández	_	_	
96-2	9771-9772	.	_	_	

#Text=*Exchange and consumption of huge rdf data* in Extended Semantic
#Text=Web Conference.
97-1	9773-9774	*	_	_	
97-2	9774-9782	Exchange	*[5]	PUBLICATION[5]	
97-3	9783-9786	and	*[5]	PUBLICATION[5]	
97-4	9787-9798	consumption	*[5]	PUBLICATION[5]	
97-5	9799-9801	of	*[5]	PUBLICATION[5]	
97-6	9802-9806	huge	*[5]	PUBLICATION[5]	
97-7	9807-9810	rdf	*[5]	PUBLICATION[5]	
97-8	9811-9815	data	*[5]	PUBLICATION[5]	
97-9	9815-9816	*	_	_	
97-10	9817-9819	in	_	_	
97-11	9820-9828	Extended	*[6]	CONFERENCE[6]	
97-12	9829-9837	Semantic	*[6]	CONFERENCE[6]	
97-13	9838-9841	Web	*[6]	CONFERENCE[6]	
97-14	9842-9852	Conference	*[6]	CONFERENCE[6]	
97-15	9852-9853	.	_	_	

#Text=Springer, 2012, pp. 437–452.
98-1	9854-9862	Springer	_	_	
98-2	9862-9863	,	_	_	
98-3	9864-9868	2012	_	_	
98-4	9868-9869	,	_	_	
98-5	9870-9872	pp	_	_	
98-6	9872-9873	.	_	_	
98-7	9874-9877	437	_	_	
98-8	9877-9878	–	_	_	
98-9	9878-9881	452	_	_	
98-10	9881-9882	.	_	_	
